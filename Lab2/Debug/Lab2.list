
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004738  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004b18  08004b18  00014b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b20  08004b20  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b24  08004b24  00014b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08004d04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004d04  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac7  00000000  00000000  0002bce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  0002d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f61  00000000  00000000  0002ea18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008316  00000000  00000000  0004f979  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1a5b  00000000  00000000  00057c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001196ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000318c  00000000  00000000  00119768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048b0 	.word	0x080048b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080048b0 	.word	0x080048b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 face 	bl	8000b16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f821 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f8d1 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f89f 	bl	80006c4 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	printf("Please enter passcode this is a very SECURE site:");
 8000586:	480b      	ldr	r0, [pc, #44]	; (80005b4 <main+0x44>)
 8000588:	f002 fca0 	bl	8002ecc <iprintf>
	HAL_Delay(1000);
 800058c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000590:	f000 fb36 	bl	8000c00 <HAL_Delay>
	scanf("%d",&passcode);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	4619      	mov	r1, r3
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <main+0x48>)
 800059a:	f002 fcaf 	bl	8002efc <iscanf>
	HAL_Delay(1000);
 800059e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a2:	f000 fb2d 	bl	8000c00 <HAL_Delay>
	printf("%d\n",passcode);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x4c>)
 80005ac:	f002 fc8e 	bl	8002ecc <iprintf>
	printf("Please enter passcode this is a very SECURE site:");
 80005b0:	e7e9      	b.n	8000586 <main+0x16>
 80005b2:	bf00      	nop
 80005b4:	080048c8 	.word	0x080048c8
 80005b8:	080048fc 	.word	0x080048fc
 80005bc:	08004900 	.word	0x08004900

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b0ac      	sub	sp, #176	; 0xb0
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fc74 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2254      	movs	r2, #84	; 0x54
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fc66 	bl	8002ebc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f0:	f000 fd90 	bl	8001114 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f4:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <SystemClock_Config+0x100>)
 80005f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fa:	4a31      	ldr	r2, [pc, #196]	; (80006c0 <SystemClock_Config+0x100>)
 80005fc:	f023 0318 	bic.w	r3, r3, #24
 8000600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2314      	movs	r3, #20
 8000606:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000624:	2301      	movs	r3, #1
 8000626:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000630:	2310      	movs	r3, #16
 8000632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000636:	2307      	movs	r3, #7
 8000638:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fdd5 	bl	80011fc <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000658:	f000 f8ae 	bl	80007b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000670:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f001 f9e0 	bl	8001a3c <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000682:	f000 f899 	bl	80007b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000686:	2302      	movs	r3, #2
 8000688:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	4618      	mov	r0, r3
 8000692:	f001 fbd7 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800069c:	f000 f88c 	bl	80007b8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a4:	f000 fd54 	bl	8001150 <HAL_PWREx_ControlVoltageScaling>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006ae:	f000 f883 	bl	80007b8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b2:	f001 fdb9 	bl	8002228 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b6:	bf00      	nop
 80006b8:	37b0      	adds	r7, #176	; 0xb0
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ca:	4a15      	ldr	r2, [pc, #84]	; (8000720 <MX_USART2_UART_Init+0x5c>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART2_UART_Init+0x58>)
 8000708:	f001 fe8e 	bl	8002428 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000712:	f000 f851 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000204 	.word	0x20000204
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_GPIO_Init+0x8c>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_GPIO_Init+0x8c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_GPIO_Init+0x8c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2108      	movs	r1, #8
 8000786:	480b      	ldr	r0, [pc, #44]	; (80007b4 <MX_GPIO_Init+0x90>)
 8000788:	f000 fcac 	bl	80010e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800078c:	2308      	movs	r3, #8
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	; (80007b4 <MX_GPIO_Init+0x90>)
 80007a4:	f000 fb34 	bl	8000e10 <HAL_GPIO_Init>

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	48000400 	.word	0x48000400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007be:	e7fe      	b.n	80007be <Error_Handler+0x6>

080007c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_MspInit+0x44>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6613      	str	r3, [r2, #96]	; 0x60
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_MspInit+0x44>)
 80007d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_MspInit+0x44>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_MspInit+0x44>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a20      	ldr	r2, [pc, #128]	; (80008a8 <HAL_UART_MspInit+0xa0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d13a      	bne.n	80008a0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_UART_MspInit+0xa4>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <HAL_UART_MspInit+0xa4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800085a:	2304      	movs	r3, #4
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800086a:	2307      	movs	r3, #7
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 faca 	bl	8000e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800087c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800088e:	2303      	movs	r3, #3
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800089c:	f000 fab8 	bl	8000e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40004400 	.word	0x40004400
 80008ac:	40021000 	.word	0x40021000

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f960 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000910:	2301      	movs	r3, #1
 8000912:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	b29a      	uxth	r2, r3
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	4807      	ldr	r0, [pc, #28]	; (800093c <_read+0x38>)
 8000920:	f001 fe63 	bl	80025ea <HAL_UART_Receive>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	607b      	str	r3, [r7, #4]

	return len;
 8000930:	687b      	ldr	r3, [r7, #4]
}
 8000932:	4618      	mov	r0, r3
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000204 	.word	0x20000204

08000940 <_write>:

int _write(int file, char *ptr, int len)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b086      	sub	sp, #24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	b29a      	uxth	r2, r3
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <_write+0x40>)
 800095c:	f001 fdb2 	bl	80024c4 <HAL_UART_Transmit>
 8000960:	4603      	mov	r3, r0
 8000962:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000964:	7dfb      	ldrb	r3, [r7, #23]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d002      	beq.n	8000970 <_write+0x30>
 800096a:	7dfb      	ldrb	r3, [r7, #23]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d101      	bne.n	8000974 <_write+0x34>
	{
		Error_Handler();
 8000970:	f7ff ff22 	bl	80007b8 <Error_Handler>
	}

	return len;
 8000974:	687b      	ldr	r3, [r7, #4]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000204 	.word	0x20000204

08000984 <_close>:



int _close(int file)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	return -1;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
	return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_isatty>:

int _isatty(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
	return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f002 fa24 	bl	8002e68 <__errno>
 8000a20:	4602      	mov	r2, r0
 8000a22:	230c      	movs	r3, #12
 8000a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20010000 	.word	0x20010000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200001f8 	.word	0x200001f8
 8000a54:	20000290 	.word	0x20000290

08000a58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <SystemInit+0x64>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a16      	ldr	r2, [pc, #88]	; (8000abc <SystemInit+0x64>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <SystemInit+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <SystemInit+0x68>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <SystemInit+0x68>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <SystemInit+0x68>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <SystemInit+0x68>)
 8000a84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <SystemInit+0x68>)
 8000a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <SystemInit+0x68>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <SystemInit+0x68>)
 8000a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <SystemInit+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <SystemInit+0x64>)
 8000aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aae:	609a      	str	r2, [r3, #8]
#endif
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000afc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac8:	f7ff ffc6 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000acc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ace:	e003      	b.n	8000ad8 <LoopCopyDataInit>

08000ad0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ad2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ad4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ad6:	3104      	adds	r1, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ad8:	480a      	ldr	r0, [pc, #40]	; (8000b04 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000adc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ade:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ae0:	d3f6      	bcc.n	8000ad0 <CopyDataInit>
	ldr	r2, =_sbss
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ae4:	e002      	b.n	8000aec <LoopFillZerobss>

08000ae6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ae6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ae8:	f842 3b04 	str.w	r3, [r2], #4

08000aec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <LoopForever+0x16>)
	cmp	r2, r3
 8000aee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000af0:	d3f9      	bcc.n	8000ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af2:	f002 f9bf 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000af6:	f7ff fd3b 	bl	8000570 <main>

08000afa <LoopForever>:

LoopForever:
    b LoopForever
 8000afa:	e7fe      	b.n	8000afa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b00:	08004b28 	.word	0x08004b28
	ldr	r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b08:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8000b0c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8000b10:	2000028c 	.word	0x2000028c

08000b14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b14:	e7fe      	b.n	8000b14 <ADC1_IRQHandler>

08000b16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f941 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f80e 	bl	8000b48 <HAL_InitTick>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	71fb      	strb	r3, [r7, #7]
 8000b36:	e001      	b.n	8000b3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b38:	f7ff fe42 	bl	80007c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <HAL_InitTick+0x6c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d023      	beq.n	8000ba4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <HAL_InitTick+0x70>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_InitTick+0x6c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f93f 	bl	8000df6 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10f      	bne.n	8000b9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d809      	bhi.n	8000b98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f000 f917 	bl	8000dbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <HAL_InitTick+0x74>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e007      	b.n	8000ba8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e004      	b.n	8000ba8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e001      	b.n	8000ba8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	20000008 	.word	0x20000008
 8000be4:	20000284 	.word	0x20000284

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	; (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000284 	.word	0x20000284

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_Delay+0x40>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db0a      	blt.n	8000cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	490c      	ldr	r1, [pc, #48]	; (8000cf4 <__NVIC_SetPriority+0x4c>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	0112      	lsls	r2, r2, #4
 8000cc8:	b2d2      	uxtb	r2, r2
 8000cca:	440b      	add	r3, r1
 8000ccc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd0:	e00a      	b.n	8000ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4908      	ldr	r1, [pc, #32]	; (8000cf8 <__NVIC_SetPriority+0x50>)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	3b04      	subs	r3, #4
 8000ce0:	0112      	lsls	r2, r2, #4
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	440b      	add	r3, r1
 8000ce6:	761a      	strb	r2, [r3, #24]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b089      	sub	sp, #36	; 0x24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	f1c3 0307 	rsb	r3, r3, #7
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	bf28      	it	cs
 8000d1a:	2304      	movcs	r3, #4
 8000d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3304      	adds	r3, #4
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d902      	bls.n	8000d2c <NVIC_EncodePriority+0x30>
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3b03      	subs	r3, #3
 8000d2a:	e000      	b.n	8000d2e <NVIC_EncodePriority+0x32>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43da      	mvns	r2, r3
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	401a      	ands	r2, r3
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d44:	f04f 31ff 	mov.w	r1, #4294967295
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43d9      	mvns	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	4313      	orrs	r3, r2
         );
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3724      	adds	r7, #36	; 0x24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff8e 	bl	8000ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff47 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff5c 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5d 	bl	8000ca8 <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ffb0 	bl	8000d64 <SysTick_Config>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e1e:	e148      	b.n	80010b2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2101      	movs	r1, #1
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f000 813a 	beq.w	80010ac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d00b      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d007      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	2b11      	cmp	r3, #17
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b12      	cmp	r3, #18
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	f003 0201 	and.w	r2, r3, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0xea>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d123      	bne.n	8000f42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	08da      	lsrs	r2, r3, #3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3208      	adds	r2, #8
 8000f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	691a      	ldr	r2, [r3, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0203 	and.w	r2, r3, #3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8094 	beq.w	80010ac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f84:	4b52      	ldr	r3, [pc, #328]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f88:	4a51      	ldr	r2, [pc, #324]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <HAL_GPIO_Init+0x2c0>)
 8000f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <HAL_GPIO_Init+0x2c4>)
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	220f      	movs	r2, #15
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc6:	d00d      	beq.n	8000fe4 <HAL_GPIO_Init+0x1d4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a43      	ldr	r2, [pc, #268]	; (80010d8 <HAL_GPIO_Init+0x2c8>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x1d0>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a42      	ldr	r2, [pc, #264]	; (80010dc <HAL_GPIO_Init+0x2cc>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d101      	bne.n	8000fdc <HAL_GPIO_Init+0x1cc>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e004      	b.n	8000fe6 <HAL_GPIO_Init+0x1d6>
 8000fdc:	2307      	movs	r3, #7
 8000fde:	e002      	b.n	8000fe6 <HAL_GPIO_Init+0x1d6>
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <HAL_GPIO_Init+0x1d6>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	f002 0203 	and.w	r2, r2, #3
 8000fec:	0092      	lsls	r2, r2, #2
 8000fee:	4093      	lsls	r3, r2
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ff6:	4937      	ldr	r1, [pc, #220]	; (80010d4 <HAL_GPIO_Init+0x2c4>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	089b      	lsrs	r3, r3, #2
 8000ffc:	3302      	adds	r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001004:	4b36      	ldr	r3, [pc, #216]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	43db      	mvns	r3, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4313      	orrs	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800102e:	4b2c      	ldr	r3, [pc, #176]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4313      	orrs	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001058:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <HAL_GPIO_Init+0x2d0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	3301      	adds	r3, #1
 80010b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	fa22 f303 	lsr.w	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f47f aeaf 	bne.w	8000e20 <HAL_GPIO_Init+0x10>
  }
}
 80010c2:	bf00      	nop
 80010c4:	371c      	adds	r7, #28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800
 80010e0:	40010400 	.word	0x40010400

080010e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
 80010f0:	4613      	mov	r3, r2
 80010f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f4:	787b      	ldrb	r3, [r7, #1]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fa:	887a      	ldrh	r2, [r7, #2]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001100:	e002      	b.n	8001108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40007000 	.word	0x40007000

08001134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <HAL_PWREx_GetVoltageRange+0x18>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001140:	4618      	mov	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40007000 	.word	0x40007000

08001150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800115e:	d130      	bne.n	80011c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116c:	d038      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2232      	movs	r2, #50	; 0x32
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9b      	lsrs	r3, r3, #18
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001194:	e002      	b.n	800119c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3b01      	subs	r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a8:	d102      	bne.n	80011b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f2      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011bc:	d110      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e00f      	b.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ce:	d007      	beq.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000
 80011f4:	20000000 	.word	0x20000000
 80011f8:	431bde83 	.word	0x431bde83

080011fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	f000 bc11 	b.w	8001a32 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001210:	4ba0      	ldr	r3, [pc, #640]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800121a:	4b9e      	ldr	r3, [pc, #632]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80e4 	beq.w	80013fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d007      	beq.n	8001248 <HAL_RCC_OscConfig+0x4c>
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	2b0c      	cmp	r3, #12
 800123c:	f040 808b 	bne.w	8001356 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b01      	cmp	r3, #1
 8001244:	f040 8087 	bne.w	8001356 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d005      	beq.n	8001260 <HAL_RCC_OscConfig+0x64>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e3e8      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	4b8b      	ldr	r3, [pc, #556]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_RCC_OscConfig+0x7e>
 8001270:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001278:	e005      	b.n	8001286 <HAL_RCC_OscConfig+0x8a>
 800127a:	4b86      	ldr	r3, [pc, #536]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800127c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001286:	4293      	cmp	r3, r2
 8001288:	d223      	bcs.n	80012d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fd78 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e3c9      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800129e:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a7c      	ldr	r2, [pc, #496]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b7a      	ldr	r3, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4977      	ldr	r1, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012bc:	4b75      	ldr	r3, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	4972      	ldr	r1, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
 80012d0:	e025      	b.n	800131e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	496a      	ldr	r1, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	4965      	ldr	r1, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd38 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e389      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800131e:	f000 fc6f 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001322:	4601      	mov	r1, r0
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_RCC_OscConfig+0x29c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	f003 031f 	and.w	r3, r3, #31
 8001336:	fa21 f303 	lsr.w	r3, r1, r3
 800133a:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_RCC_OscConfig+0x2a0>)
 800133c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800133e:	4b58      	ldr	r3, [pc, #352]	; (80014a0 <HAL_RCC_OscConfig+0x2a4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc00 	bl	8000b48 <HAL_InitTick>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d052      	beq.n	80013f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	e36d      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d032      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800135e:	4b4d      	ldr	r3, [pc, #308]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a4c      	ldr	r2, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136a:	f7ff fc3d 	bl	8000be8 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001372:	f7ff fc39 	bl	8000be8 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e356      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001384:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001390:	4b40      	ldr	r3, [pc, #256]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3f      	ldr	r2, [pc, #252]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	493a      	ldr	r1, [pc, #232]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
 80013c2:	e01a      	b.n	80013fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc0a 	bl	8000be8 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc06 	bl	8000be8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e323      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1dc>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	d073      	beq.n	80014ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2b08      	cmp	r3, #8
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x21c>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	2b0c      	cmp	r3, #12
 8001410:	d10e      	bne.n	8001430 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d10b      	bne.n	8001430 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d063      	beq.n	80014ec <HAL_RCC_OscConfig+0x2f0>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d15f      	bne.n	80014ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e300      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001438:	d106      	bne.n	8001448 <HAL_RCC_OscConfig+0x24c>
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e01d      	b.n	8001484 <HAL_RCC_OscConfig+0x288>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x270>
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00b      	b.n	8001484 <HAL_RCC_OscConfig+0x288>
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_RCC_OscConfig+0x298>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fbac 	bl	8000be8 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001492:	e010      	b.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
 8001494:	40021000 	.word	0x40021000
 8001498:	08004910 	.word	0x08004910
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fba0 	bl	8000be8 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e2bd      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	4baf      	ldr	r3, [pc, #700]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2a8>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb90 	bl	8000be8 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fb8c 	bl	8000be8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e2a9      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014de:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x2d0>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d060      	beq.n	80015bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d005      	beq.n	800150c <HAL_RCC_OscConfig+0x310>
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b0c      	cmp	r3, #12
 8001504:	d119      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d116      	bne.n	800153a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_OscConfig+0x328>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e286      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b93      	ldr	r3, [pc, #588]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	4990      	ldr	r1, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001534:	4313      	orrs	r3, r2
 8001536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001538:	e040      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d023      	beq.n	800158a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001542:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a8b      	ldr	r2, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fb4b 	bl	8000be8 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001556:	f7ff fb47 	bl	8000be8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e264      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001568:	4b82      	ldr	r3, [pc, #520]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001574:	4b7f      	ldr	r3, [pc, #508]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	497c      	ldr	r1, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]
 8001588:	e018      	b.n	80015bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a79      	ldr	r2, [pc, #484]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fb27 	bl	8000be8 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fb23 	bl	8000be8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e240      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b0:	4b70      	ldr	r3, [pc, #448]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f0      	bne.n	800159e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03c      	beq.n	8001642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01c      	beq.n	800160a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d0:	4b68      	ldr	r3, [pc, #416]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015d6:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb02 	bl	8000be8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e8:	f7ff fafe 	bl	8000be8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e21b      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015fa:	4b5e      	ldr	r3, [pc, #376]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3ec>
 8001608:	e01b      	b.n	8001642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b5a      	ldr	r3, [pc, #360]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800160c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001610:	4a58      	ldr	r2, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fae5 	bl	8000be8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fae1 	bl	8000be8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1fe      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001634:	4b4f      	ldr	r3, [pc, #316]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a6 	beq.w	800179c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10d      	bne.n	800167c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001660:	4b44      	ldr	r3, [pc, #272]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166a:	6593      	str	r3, [r2, #88]	; 0x58
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001678:	2301      	movs	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d118      	bne.n	80016ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001694:	f7ff faa8 	bl	8000be8 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169c:	f7ff faa4 	bl	8000be8 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1c1      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ae:	4b32      	ldr	r3, [pc, #200]	; (8001778 <HAL_RCC_OscConfig+0x57c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d108      	bne.n	80016d4 <HAL_RCC_OscConfig+0x4d8>
 80016c2:	4b2c      	ldr	r3, [pc, #176]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a2a      	ldr	r2, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d2:	e024      	b.n	800171e <HAL_RCC_OscConfig+0x522>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	d110      	bne.n	80016fe <HAL_RCC_OscConfig+0x502>
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a24      	ldr	r2, [pc, #144]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fc:	e00f      	b.n	800171e <HAL_RCC_OscConfig+0x522>
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	4a1b      	ldr	r2, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d016      	beq.n	8001754 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001726:	f7ff fa5f 	bl	8000be8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172c:	e00a      	b.n	8001744 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172e:	f7ff fa5b 	bl	8000be8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f241 3288 	movw	r2, #5000	; 0x1388
 800173c:	4293      	cmp	r3, r2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e176      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x578>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0ed      	beq.n	800172e <HAL_RCC_OscConfig+0x532>
 8001752:	e01a      	b.n	800178a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fa48 	bl	8000be8 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fa44 	bl	8000be8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d906      	bls.n	800177c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e15f      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000
 8001778:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800177c:	4baa      	ldr	r3, [pc, #680]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1e8      	bne.n	800175c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d105      	bne.n	800179c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001790:	4ba5      	ldr	r3, [pc, #660]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	4aa4      	ldr	r2, [pc, #656]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d03c      	beq.n	8001822 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01c      	beq.n	80017ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017b0:	4b9d      	ldr	r3, [pc, #628]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80017b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017b6:	4a9c      	ldr	r2, [pc, #624]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa12 	bl	8000be8 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c8:	f7ff fa0e 	bl	8000be8 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e12b      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017da:	4b93      	ldr	r3, [pc, #588]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80017dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ef      	beq.n	80017c8 <HAL_RCC_OscConfig+0x5cc>
 80017e8:	e01b      	b.n	8001822 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017ea:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80017ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017f0:	4a8d      	ldr	r2, [pc, #564]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9f5 	bl	8000be8 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001802:	f7ff f9f1 	bl	8000be8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e10e      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ef      	bne.n	8001802 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8102 	beq.w	8001a30 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	2b02      	cmp	r3, #2
 8001832:	f040 80c5 	bne.w	80019c0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001836:	4b7c      	ldr	r3, [pc, #496]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f003 0203 	and.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	429a      	cmp	r2, r3
 8001848:	d12c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	3b01      	subs	r3, #1
 8001856:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	429a      	cmp	r2, r3
 800185a:	d123      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001868:	429a      	cmp	r2, r3
 800186a:	d11b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001878:	429a      	cmp	r2, r3
 800187a:	d113      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d109      	bne.n	80018a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	3b01      	subs	r3, #1
 800189e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d067      	beq.n	8001974 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d062      	beq.n	8001970 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0bb      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018ba:	4b5b      	ldr	r3, [pc, #364]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5a      	ldr	r2, [pc, #360]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80018c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c6:	f7ff f98f 	bl	8000be8 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff f98b 	bl	8000be8 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e0a8      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <HAL_RCC_OscConfig+0x830>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001906:	0212      	lsls	r2, r2, #8
 8001908:	4311      	orrs	r1, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800190e:	0852      	lsrs	r2, r2, #1
 8001910:	3a01      	subs	r2, #1
 8001912:	0552      	lsls	r2, r2, #21
 8001914:	4311      	orrs	r1, r2
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800191a:	0852      	lsrs	r2, r2, #1
 800191c:	3a01      	subs	r2, #1
 800191e:	0652      	lsls	r2, r2, #25
 8001920:	4311      	orrs	r1, r2
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001926:	06d2      	lsls	r2, r2, #27
 8001928:	430a      	orrs	r2, r1
 800192a:	493f      	ldr	r1, [pc, #252]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800192c:	4313      	orrs	r3, r2
 800192e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001930:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a3c      	ldr	r2, [pc, #240]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	4a39      	ldr	r2, [pc, #228]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001946:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001948:	f7ff f94e 	bl	8000be8 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f94a 	bl	8000be8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e067      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196e:	e05f      	b.n	8001a30 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e05e      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d157      	bne.n	8001a30 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001996:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001998:	f7ff f926 	bl	8000be8 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a0:	f7ff f922 	bl	8000be8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e03f      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x7a4>
 80019be:	e037      	b.n	8001a30 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d02d      	beq.n	8001a22 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c6:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a17      	ldr	r2, [pc, #92]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4a11      	ldr	r2, [pc, #68]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019e4:	f023 0303 	bic.w	r3, r3, #3
 80019e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 80019f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff f8f5 	bl	8000be8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff f8f1 	bl	8000be8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e00e      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <HAL_RCC_OscConfig+0x82c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x806>
 8001a20:	e006      	b.n	8001a30 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e005      	b.n	8001a32 <HAL_RCC_OscConfig+0x836>
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3720      	adds	r7, #32
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0c8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a50:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d910      	bls.n	8001a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f023 0207 	bic.w	r2, r3, #7
 8001a66:	4961      	ldr	r1, [pc, #388]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e0b0      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d04c      	beq.n	8001b26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d121      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e09e      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d107      	bne.n	8001abc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d115      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e092      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e086      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e07e      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae4:	4b42      	ldr	r3, [pc, #264]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f023 0203 	bic.w	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	493f      	ldr	r1, [pc, #252]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af6:	f7ff f877 	bl	8000be8 <HAL_GetTick>
 8001afa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afe:	f7ff f873 	bl	8000be8 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e066      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 020c 	and.w	r2, r3, #12
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d1eb      	bne.n	8001afe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	492c      	ldr	r1, [pc, #176]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b44:	4b29      	ldr	r3, [pc, #164]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d210      	bcs.n	8001b74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 0207 	bic.w	r2, r3, #7
 8001b5a:	4924      	ldr	r1, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_RCC_ClockConfig+0x1b0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e036      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d008      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4918      	ldr	r1, [pc, #96]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	4910      	ldr	r1, [pc, #64]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bb2:	f000 f825 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bb6:	4601      	mov	r1, r0
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_ClockConfig+0x1b4>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	fa21 f303 	lsr.w	r3, r1, r3
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bd2:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe ffb6 	bl	8000b48 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	72fb      	strb	r3, [r7, #11]

  return status;
 8001be0:	7afb      	ldrb	r3, [r7, #11]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08004910 	.word	0x08004910
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	; 0x24
 8001c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b3a      	ldr	r3, [pc, #232]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x34>
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d121      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d11e      	bne.n	8001c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c34:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d107      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 030f 	and.w	r3, r3, #15
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c5c:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10d      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d102      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c78:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c7a:	61bb      	str	r3, [r7, #24]
 8001c7c:	e004      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d133      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d002      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0xa4>
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d003      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0xaa>
 8001ca2:	e005      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ca6:	617b      	str	r3, [r7, #20]
      break;
 8001ca8:	e005      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cac:	617b      	str	r3, [r7, #20]
      break;
 8001cae:	e002      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	617b      	str	r3, [r7, #20]
      break;
 8001cb4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	0a1b      	lsrs	r3, r3, #8
 8001cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	fb02 f203 	mul.w	r2, r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0e5b      	lsrs	r3, r3, #25
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000
 8001d08:	08004928 	.word	0x08004928
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	007a1200 	.word	0x007a1200

08001d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000

08001d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d30:	f7ff fff0 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d34:	4601      	mov	r1, r0
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d42:	5cd3      	ldrb	r3, [r2, r3]
 8001d44:	f003 031f 	and.w	r3, r3, #31
 8001d48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	08004920 	.word	0x08004920

08001d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d5c:	f7ff ffda 	bl	8001d14 <HAL_RCC_GetHCLKFreq>
 8001d60:	4601      	mov	r1, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0adb      	lsrs	r3, r3, #11
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08004920 	.word	0x08004920

08001d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d9c:	f7ff f9ca 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001da0:	6178      	str	r0, [r7, #20]
 8001da2:	e014      	b.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dbc:	f7ff f9ba 	bl	8001134 <HAL_PWREx_GetVoltageRange>
 8001dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d10b      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d919      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2ba0      	cmp	r3, #160	; 0xa0
 8001de0:	d902      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e013      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de8:	2301      	movs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e010      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d902      	bls.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e00a      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d102      	bne.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d101      	bne.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d02f      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e68:	d005      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001e74:	e00f      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e76:	4bac      	ldr	r3, [pc, #688]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	4aab      	ldr	r2, [pc, #684]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e82:	e00c      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 f9dc 	bl	8002248 <RCCEx_PLLSAI1_Config>
 8001e90:	4603      	mov	r3, r0
 8001e92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e94:	e003      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	74fb      	strb	r3, [r7, #19]
      break;
 8001e9a:	e000      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8001e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea4:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	499d      	ldr	r1, [pc, #628]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001eba:	e001      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ebc:	7cfb      	ldrb	r3, [r7, #19]
 8001ebe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8099 	beq.w	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed2:	4b95      	ldr	r3, [pc, #596]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00d      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b8f      	ldr	r3, [pc, #572]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a8e      	ldr	r2, [pc, #568]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef4:	4b8c      	ldr	r3, [pc, #560]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f00:	2301      	movs	r3, #1
 8001f02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f04:	4b89      	ldr	r3, [pc, #548]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a88      	ldr	r2, [pc, #544]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fe6a 	bl	8000be8 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f16:	e009      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7fe fe66 	bl	8000be8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d902      	bls.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2a:	e005      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f2c:	4b7f      	ldr	r3, [pc, #508]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0ef      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8001f38:	7cfb      	ldrb	r3, [r7, #19]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d155      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f3e:	4b7a      	ldr	r3, [pc, #488]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01e      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d019      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f5a:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f66:	4b70      	ldr	r3, [pc, #448]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	4a6e      	ldr	r2, [pc, #440]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	4a6a      	ldr	r2, [pc, #424]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f86:	4a68      	ldr	r2, [pc, #416]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7fe fe26 	bl	8000be8 <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fe22 	bl	8000be8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d902      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	74fb      	strb	r3, [r7, #19]
            break;
 8001fb6:	e006      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ec      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fcc:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	4953      	ldr	r1, [pc, #332]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fe2:	e004      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
 8001fe8:	e001      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fea:	7cfb      	ldrb	r3, [r7, #19]
 8001fec:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fee:	7c7b      	ldrb	r3, [r7, #17]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	4a4b      	ldr	r2, [pc, #300]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 0203 	bic.w	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4943      	ldr	r1, [pc, #268]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800202e:	4b3e      	ldr	r3, [pc, #248]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f023 020c 	bic.w	r2, r3, #12
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203c:	493a      	ldr	r1, [pc, #232]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00a      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002050:	4b35      	ldr	r3, [pc, #212]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	4932      	ldr	r1, [pc, #200]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00a      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	4929      	ldr	r1, [pc, #164]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00a      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002094:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4921      	ldr	r1, [pc, #132]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020b6:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	4918      	ldr	r1, [pc, #96]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020d8:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4910      	ldr	r1, [pc, #64]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d02c      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002118:	d10a      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211a:	4b03      	ldr	r3, [pc, #12]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	4a02      	ldr	r2, [pc, #8]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002124:	60d3      	str	r3, [r2, #12]
 8002126:	e015      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002128:	40021000 	.word	0x40021000
 800212c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002138:	d10c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f881 	bl	8002248 <RCCEx_PLLSAI1_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d028      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	492d      	ldr	r1, [pc, #180]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800217e:	d106      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a27      	ldr	r2, [pc, #156]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800218a:	60d3      	str	r3, [r2, #12]
 800218c:	e011      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002196:	d10c      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3304      	adds	r3, #4
 800219c:	2101      	movs	r1, #1
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f852 	bl	8002248 <RCCEx_PLLSAI1_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021be:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021cc:	4915      	ldr	r1, [pc, #84]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 f82f 	bl	8002248 <RCCEx_PLLSAI1_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ee:	7cfb      	ldrb	r3, [r7, #19]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4904      	ldr	r1, [pc, #16]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800221a:	7cbb      	ldrb	r3, [r7, #18]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000

08002248 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002256:	4b73      	ldr	r3, [pc, #460]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002262:	4b70      	ldr	r3, [pc, #448]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0203 	and.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d10d      	bne.n	800228e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
       ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	d009      	beq.n	800228e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800227a:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
       ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d044      	beq.n	8002318 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e041      	b.n	8002318 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d00c      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x6e>
 800229c:	2b03      	cmp	r3, #3
 800229e:	d013      	beq.n	80022c8 <RCCEx_PLLSAI1_Config+0x80>
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d120      	bne.n	80022e6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022a4:	4b5f      	ldr	r3, [pc, #380]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11d      	bne.n	80022ec <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e01a      	b.n	80022ec <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022b6:	4b5b      	ldr	r3, [pc, #364]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d116      	bne.n	80022f0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c6:	e013      	b.n	80022f0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022c8:	4b56      	ldr	r3, [pc, #344]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022d4:	4b53      	ldr	r3, [pc, #332]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d109      	bne.n	80022f4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022e4:	e006      	b.n	80022f4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ea:	e004      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80022ec:	bf00      	nop
 80022ee:	e002      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80022f0:	bf00      	nop
 80022f2:	e000      	b.n	80022f6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80022f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10d      	bne.n	8002318 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	3b01      	subs	r3, #1
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	430b      	orrs	r3, r1
 8002312:	4944      	ldr	r1, [pc, #272]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d17c      	bne.n	8002418 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800231e:	4b41      	ldr	r3, [pc, #260]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a40      	ldr	r2, [pc, #256]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232a:	f7fe fc5d 	bl	8000be8 <HAL_GetTick>
 800232e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002330:	e009      	b.n	8002346 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002332:	f7fe fc59 	bl	8000be8 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d902      	bls.n	8002346 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	73fb      	strb	r3, [r7, #15]
        break;
 8002344:	e005      	b.n	8002352 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002346:	4b37      	ldr	r3, [pc, #220]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d15f      	bne.n	8002418 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d110      	bne.n	8002380 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002366:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6892      	ldr	r2, [r2, #8]
 800236e:	0211      	lsls	r1, r2, #8
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	68d2      	ldr	r2, [r2, #12]
 8002374:	06d2      	lsls	r2, r2, #27
 8002376:	430a      	orrs	r2, r1
 8002378:	492a      	ldr	r1, [pc, #168]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	610b      	str	r3, [r1, #16]
 800237e:	e027      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d112      	bne.n	80023ac <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800238e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	0211      	lsls	r1, r2, #8
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6912      	ldr	r2, [r2, #16]
 800239c:	0852      	lsrs	r2, r2, #1
 800239e:	3a01      	subs	r2, #1
 80023a0:	0552      	lsls	r2, r2, #21
 80023a2:	430a      	orrs	r2, r1
 80023a4:	491f      	ldr	r1, [pc, #124]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	610b      	str	r3, [r1, #16]
 80023aa:	e011      	b.n	80023d0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023ac:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6892      	ldr	r2, [r2, #8]
 80023bc:	0211      	lsls	r1, r2, #8
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6952      	ldr	r2, [r2, #20]
 80023c2:	0852      	lsrs	r2, r2, #1
 80023c4:	3a01      	subs	r2, #1
 80023c6:	0652      	lsls	r2, r2, #25
 80023c8:	430a      	orrs	r2, r1
 80023ca:	4916      	ldr	r1, [pc, #88]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023d0:	4b14      	ldr	r3, [pc, #80]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe fc04 	bl	8000be8 <HAL_GetTick>
 80023e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e2:	e009      	b.n	80023f8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023e4:	f7fe fc00 	bl	8000be8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d902      	bls.n	80023f8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	73fb      	strb	r3, [r7, #15]
          break;
 80023f6:	e005      	b.n	8002404 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0ef      	beq.n	80023e4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800240a:	4b06      	ldr	r3, [pc, #24]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4904      	ldr	r1, [pc, #16]	; (8002424 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e040      	b.n	80024bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe f9dc 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f98c 	bl	8002784 <UART_SetConfig>
 800246c:	4603      	mov	r3, r0
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e022      	b.n	80024bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fb90 	bl	8002ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002492:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fc17 	bl	8002ce8 <UART_CheckIdleState>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	; 0x28
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d8:	2b20      	cmp	r3, #32
 80024da:	f040 8081 	bne.w	80025e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_UART_Transmit+0x26>
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e079      	b.n	80025e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_UART_Transmit+0x38>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e072      	b.n	80025e2 <HAL_UART_Transmit+0x11e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2221      	movs	r2, #33	; 0x21
 800250e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fb6a 	bl	8000be8 <HAL_GetTick>
 8002514:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252e:	d108      	bne.n	8002542 <HAL_UART_Transmit+0x7e>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d104      	bne.n	8002542 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e003      	b.n	800254a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002552:	e02d      	b.n	80025b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2200      	movs	r2, #0
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 fc07 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e039      	b.n	80025e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002580:	b292      	uxth	r2, r2
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3302      	adds	r3, #2
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	e008      	b.n	800259e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	b292      	uxth	r2, r2
 8002596:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1cb      	bne.n	8002554 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fbd3 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e005      	b.n	80025e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2220      	movs	r2, #32
 80025da:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	; 0x28
 80025ee:	af02      	add	r7, sp, #8
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	2b20      	cmp	r3, #32
 8002600:	f040 80bb 	bne.w	800277a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_UART_Receive+0x26>
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b3      	b.n	800277c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_UART_Receive+0x38>
 800261e:	2302      	movs	r3, #2
 8002620:	e0ac      	b.n	800277c <HAL_UART_Receive+0x192>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2222      	movs	r2, #34	; 0x22
 8002634:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002636:	f7fe fad7 	bl	8000be8 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	88fa      	ldrh	r2, [r7, #6]
 8002640:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002654:	d10e      	bne.n	8002674 <HAL_UART_Receive+0x8a>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <HAL_UART_Receive+0x80>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002668:	e02d      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002672:	e028      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10d      	bne.n	8002698 <HAL_UART_Receive+0xae>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d104      	bne.n	800268e <HAL_UART_Receive+0xa4>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	22ff      	movs	r2, #255	; 0xff
 8002688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800268c:	e01b      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	227f      	movs	r2, #127	; 0x7f
 8002692:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002696:	e016      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a0:	d10d      	bne.n	80026be <HAL_UART_Receive+0xd4>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <HAL_UART_Receive+0xca>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	227f      	movs	r2, #127	; 0x7f
 80026ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026b2:	e008      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	223f      	movs	r2, #63	; 0x3f
 80026b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80026bc:	e003      	b.n	80026c6 <HAL_UART_Receive+0xdc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d6:	d108      	bne.n	80026ea <HAL_UART_Receive+0x100>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	e003      	b.n	80026f2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80026fa:	e033      	b.n	8002764 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2200      	movs	r2, #0
 8002704:	2120      	movs	r1, #32
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fb33 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e032      	b.n	800277c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10c      	bne.n	8002736 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002722:	b29a      	uxth	r2, r3
 8002724:	8a7b      	ldrh	r3, [r7, #18]
 8002726:	4013      	ands	r3, r2
 8002728:	b29a      	uxth	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3302      	adds	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e00d      	b.n	8002752 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800273c:	b29b      	uxth	r3, r3
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8a7b      	ldrh	r3, [r7, #18]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	4013      	ands	r3, r2
 8002746:	b2da      	uxtb	r2, r3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3301      	adds	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1c5      	bne.n	80026fc <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e000      	b.n	800277c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800277a:	2302      	movs	r3, #2
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3720      	adds	r7, #32
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002784:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002788:	b088      	sub	sp, #32
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4bb0      	ldr	r3, [pc, #704]	; (8002a74 <UART_SetConfig+0x2f0>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4aa6      	ldr	r2, [pc, #664]	; (8002a78 <UART_SetConfig+0x2f4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d004      	beq.n	80027ee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	69fa      	ldr	r2, [r7, #28]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a9d      	ldr	r2, [pc, #628]	; (8002a7c <UART_SetConfig+0x2f8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d121      	bne.n	8002850 <UART_SetConfig+0xcc>
 800280c:	4b9c      	ldr	r3, [pc, #624]	; (8002a80 <UART_SetConfig+0x2fc>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	2b03      	cmp	r3, #3
 8002818:	d816      	bhi.n	8002848 <UART_SetConfig+0xc4>
 800281a:	a201      	add	r2, pc, #4	; (adr r2, 8002820 <UART_SetConfig+0x9c>)
 800281c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002820:	08002831 	.word	0x08002831
 8002824:	0800283d 	.word	0x0800283d
 8002828:	08002837 	.word	0x08002837
 800282c:	08002843 	.word	0x08002843
 8002830:	2301      	movs	r3, #1
 8002832:	76fb      	strb	r3, [r7, #27]
 8002834:	e072      	b.n	800291c <UART_SetConfig+0x198>
 8002836:	2302      	movs	r3, #2
 8002838:	76fb      	strb	r3, [r7, #27]
 800283a:	e06f      	b.n	800291c <UART_SetConfig+0x198>
 800283c:	2304      	movs	r3, #4
 800283e:	76fb      	strb	r3, [r7, #27]
 8002840:	e06c      	b.n	800291c <UART_SetConfig+0x198>
 8002842:	2308      	movs	r3, #8
 8002844:	76fb      	strb	r3, [r7, #27]
 8002846:	e069      	b.n	800291c <UART_SetConfig+0x198>
 8002848:	2310      	movs	r3, #16
 800284a:	76fb      	strb	r3, [r7, #27]
 800284c:	bf00      	nop
 800284e:	e065      	b.n	800291c <UART_SetConfig+0x198>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8b      	ldr	r2, [pc, #556]	; (8002a84 <UART_SetConfig+0x300>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d134      	bne.n	80028c4 <UART_SetConfig+0x140>
 800285a:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <UART_SetConfig+0x2fc>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d829      	bhi.n	80028bc <UART_SetConfig+0x138>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <UART_SetConfig+0xec>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028bd 	.word	0x080028bd
 8002878:	080028bd 	.word	0x080028bd
 800287c:	080028bd 	.word	0x080028bd
 8002880:	080028b1 	.word	0x080028b1
 8002884:	080028bd 	.word	0x080028bd
 8002888:	080028bd 	.word	0x080028bd
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028ab 	.word	0x080028ab
 8002894:	080028bd 	.word	0x080028bd
 8002898:	080028bd 	.word	0x080028bd
 800289c:	080028bd 	.word	0x080028bd
 80028a0:	080028b7 	.word	0x080028b7
 80028a4:	2300      	movs	r3, #0
 80028a6:	76fb      	strb	r3, [r7, #27]
 80028a8:	e038      	b.n	800291c <UART_SetConfig+0x198>
 80028aa:	2302      	movs	r3, #2
 80028ac:	76fb      	strb	r3, [r7, #27]
 80028ae:	e035      	b.n	800291c <UART_SetConfig+0x198>
 80028b0:	2304      	movs	r3, #4
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e032      	b.n	800291c <UART_SetConfig+0x198>
 80028b6:	2308      	movs	r3, #8
 80028b8:	76fb      	strb	r3, [r7, #27]
 80028ba:	e02f      	b.n	800291c <UART_SetConfig+0x198>
 80028bc:	2310      	movs	r3, #16
 80028be:	76fb      	strb	r3, [r7, #27]
 80028c0:	bf00      	nop
 80028c2:	e02b      	b.n	800291c <UART_SetConfig+0x198>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a6b      	ldr	r2, [pc, #428]	; (8002a78 <UART_SetConfig+0x2f4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d124      	bne.n	8002918 <UART_SetConfig+0x194>
 80028ce:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <UART_SetConfig+0x2fc>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028dc:	d012      	beq.n	8002904 <UART_SetConfig+0x180>
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	d802      	bhi.n	80028ea <UART_SetConfig+0x166>
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <UART_SetConfig+0x174>
 80028e8:	e012      	b.n	8002910 <UART_SetConfig+0x18c>
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ee:	d006      	beq.n	80028fe <UART_SetConfig+0x17a>
 80028f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028f4:	d009      	beq.n	800290a <UART_SetConfig+0x186>
 80028f6:	e00b      	b.n	8002910 <UART_SetConfig+0x18c>
 80028f8:	2300      	movs	r3, #0
 80028fa:	76fb      	strb	r3, [r7, #27]
 80028fc:	e00e      	b.n	800291c <UART_SetConfig+0x198>
 80028fe:	2302      	movs	r3, #2
 8002900:	76fb      	strb	r3, [r7, #27]
 8002902:	e00b      	b.n	800291c <UART_SetConfig+0x198>
 8002904:	2304      	movs	r3, #4
 8002906:	76fb      	strb	r3, [r7, #27]
 8002908:	e008      	b.n	800291c <UART_SetConfig+0x198>
 800290a:	2308      	movs	r3, #8
 800290c:	76fb      	strb	r3, [r7, #27]
 800290e:	e005      	b.n	800291c <UART_SetConfig+0x198>
 8002910:	2310      	movs	r3, #16
 8002912:	76fb      	strb	r3, [r7, #27]
 8002914:	bf00      	nop
 8002916:	e001      	b.n	800291c <UART_SetConfig+0x198>
 8002918:	2310      	movs	r3, #16
 800291a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a55      	ldr	r2, [pc, #340]	; (8002a78 <UART_SetConfig+0x2f4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d174      	bne.n	8002a10 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002926:	7efb      	ldrb	r3, [r7, #27]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d824      	bhi.n	8002976 <UART_SetConfig+0x1f2>
 800292c:	a201      	add	r2, pc, #4	; (adr r2, 8002934 <UART_SetConfig+0x1b0>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002959 	.word	0x08002959
 8002938:	08002977 	.word	0x08002977
 800293c:	08002961 	.word	0x08002961
 8002940:	08002977 	.word	0x08002977
 8002944:	08002967 	.word	0x08002967
 8002948:	08002977 	.word	0x08002977
 800294c:	08002977 	.word	0x08002977
 8002950:	08002977 	.word	0x08002977
 8002954:	0800296f 	.word	0x0800296f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002958:	f7ff f9e8 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 800295c:	6178      	str	r0, [r7, #20]
        break;
 800295e:	e00f      	b.n	8002980 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002960:	4b49      	ldr	r3, [pc, #292]	; (8002a88 <UART_SetConfig+0x304>)
 8002962:	617b      	str	r3, [r7, #20]
        break;
 8002964:	e00c      	b.n	8002980 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002966:	f7ff f94b 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 800296a:	6178      	str	r0, [r7, #20]
        break;
 800296c:	e008      	b.n	8002980 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	e004      	b.n	8002980 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	76bb      	strb	r3, [r7, #26]
        break;
 800297e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 8100 	beq.w	8002b88 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d305      	bcc.n	80029a4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d902      	bls.n	80029aa <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	76bb      	strb	r3, [r7, #26]
 80029a8:	e0ee      	b.n	8002b88 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4619      	mov	r1, r3
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	f04f 0400 	mov.w	r4, #0
 80029ba:	0214      	lsls	r4, r2, #8
 80029bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80029c0:	020b      	lsls	r3, r1, #8
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6852      	ldr	r2, [r2, #4]
 80029c6:	0852      	lsrs	r2, r2, #1
 80029c8:	4611      	mov	r1, r2
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	eb13 0b01 	adds.w	fp, r3, r1
 80029d2:	eb44 0c02 	adc.w	ip, r4, r2
 80029d6:	4658      	mov	r0, fp
 80029d8:	4661      	mov	r1, ip
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f04f 0400 	mov.w	r4, #0
 80029e2:	461a      	mov	r2, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	f7fd fc43 	bl	8000270 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029f6:	d308      	bcc.n	8002a0a <UART_SetConfig+0x286>
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029fe:	d204      	bcs.n	8002a0a <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	e0be      	b.n	8002b88 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	76bb      	strb	r3, [r7, #26]
 8002a0e:	e0bb      	b.n	8002b88 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	d169      	bne.n	8002aee <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8002a1a:	7efb      	ldrb	r3, [r7, #27]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d835      	bhi.n	8002a8c <UART_SetConfig+0x308>
 8002a20:	a201      	add	r2, pc, #4	; (adr r2, 8002a28 <UART_SetConfig+0x2a4>)
 8002a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a26:	bf00      	nop
 8002a28:	08002a4d 	.word	0x08002a4d
 8002a2c:	08002a55 	.word	0x08002a55
 8002a30:	08002a5d 	.word	0x08002a5d
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002a63 	.word	0x08002a63
 8002a3c:	08002a8d 	.word	0x08002a8d
 8002a40:	08002a8d 	.word	0x08002a8d
 8002a44:	08002a8d 	.word	0x08002a8d
 8002a48:	08002a6b 	.word	0x08002a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff f96e 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002a50:	6178      	str	r0, [r7, #20]
        break;
 8002a52:	e020      	b.n	8002a96 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a54:	f7ff f980 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002a58:	6178      	str	r0, [r7, #20]
        break;
 8002a5a:	e01c      	b.n	8002a96 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <UART_SetConfig+0x304>)
 8002a5e:	617b      	str	r3, [r7, #20]
        break;
 8002a60:	e019      	b.n	8002a96 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a62:	f7ff f8cd 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8002a66:	6178      	str	r0, [r7, #20]
        break;
 8002a68:	e015      	b.n	8002a96 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6e:	617b      	str	r3, [r7, #20]
        break;
 8002a70:	e011      	b.n	8002a96 <UART_SetConfig+0x312>
 8002a72:	bf00      	nop
 8002a74:	efff69f3 	.word	0xefff69f3
 8002a78:	40008000 	.word	0x40008000
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40004400 	.word	0x40004400
 8002a88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	76bb      	strb	r3, [r7, #26]
        break;
 8002a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d075      	beq.n	8002b88 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005a      	lsls	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	441a      	add	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0f      	cmp	r3, #15
 8002ab8:	d916      	bls.n	8002ae8 <UART_SetConfig+0x364>
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac0:	d212      	bcs.n	8002ae8 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f023 030f 	bic.w	r3, r3, #15
 8002aca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	89fb      	ldrh	r3, [r7, #14]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	89fa      	ldrh	r2, [r7, #14]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	e04f      	b.n	8002b88 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	76bb      	strb	r3, [r7, #26]
 8002aec:	e04c      	b.n	8002b88 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002aee:	7efb      	ldrb	r3, [r7, #27]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d828      	bhi.n	8002b46 <UART_SetConfig+0x3c2>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <UART_SetConfig+0x378>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b21 	.word	0x08002b21
 8002b00:	08002b29 	.word	0x08002b29
 8002b04:	08002b31 	.word	0x08002b31
 8002b08:	08002b47 	.word	0x08002b47
 8002b0c:	08002b37 	.word	0x08002b37
 8002b10:	08002b47 	.word	0x08002b47
 8002b14:	08002b47 	.word	0x08002b47
 8002b18:	08002b47 	.word	0x08002b47
 8002b1c:	08002b3f 	.word	0x08002b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b20:	f7ff f904 	bl	8001d2c <HAL_RCC_GetPCLK1Freq>
 8002b24:	6178      	str	r0, [r7, #20]
        break;
 8002b26:	e013      	b.n	8002b50 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b28:	f7ff f916 	bl	8001d58 <HAL_RCC_GetPCLK2Freq>
 8002b2c:	6178      	str	r0, [r7, #20]
        break;
 8002b2e:	e00f      	b.n	8002b50 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <UART_SetConfig+0x41c>)
 8002b32:	617b      	str	r3, [r7, #20]
        break;
 8002b34:	e00c      	b.n	8002b50 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b36:	f7ff f863 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8002b3a:	6178      	str	r0, [r7, #20]
        break;
 8002b3c:	e008      	b.n	8002b50 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b42:	617b      	str	r3, [r7, #20]
        break;
 8002b44:	e004      	b.n	8002b50 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	76bb      	strb	r3, [r7, #26]
        break;
 8002b4e:	bf00      	nop
    }

    if (pclk != 0U)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d018      	beq.n	8002b88 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	085a      	lsrs	r2, r3, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	441a      	add	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d908      	bls.n	8002b84 <UART_SetConfig+0x400>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d204      	bcs.n	8002b84 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	e001      	b.n	8002b88 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002b94:	7ebb      	ldrb	r3, [r7, #26]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3720      	adds	r7, #32
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002ba0:	00f42400 	.word	0x00f42400

08002ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01a      	beq.n	8002cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d10a      	bne.n	8002cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002cf6:	f7fd ff77 	bl	8000be8 <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d10e      	bne.n	8002d28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f82a 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e020      	b.n	8002d6a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d10e      	bne.n	8002d54 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f814 	bl	8002d72 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e00a      	b.n	8002d6a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d82:	e05d      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d059      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fd ff2c 	bl	8000be8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11b      	bne.n	8002dda <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002db0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e042      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02b      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df6:	d123      	bne.n	8002e40 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e10:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e00f      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d092      	beq.n	8002d84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <__errno>:
 8002e68:	4b01      	ldr	r3, [pc, #4]	; (8002e70 <__errno+0x8>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	2000000c 	.word	0x2000000c

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4e0d      	ldr	r6, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1ba4      	subs	r4, r4, r6
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2500      	movs	r5, #0
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4e0b      	ldr	r6, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f001 fd12 	bl	80048b0 <_init>
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2500      	movs	r5, #0
 8002e92:	42a5      	cmp	r5, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9c:	4798      	blx	r3
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea6:	4798      	blx	r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08004b20 	.word	0x08004b20
 8002eb0:	08004b20 	.word	0x08004b20
 8002eb4:	08004b20 	.word	0x08004b20
 8002eb8:	08004b24 	.word	0x08004b24

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <iprintf>:
 8002ecc:	b40f      	push	{r0, r1, r2, r3}
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <iprintf+0x2c>)
 8002ed0:	b513      	push	{r0, r1, r4, lr}
 8002ed2:	681c      	ldr	r4, [r3, #0]
 8002ed4:	b124      	cbz	r4, 8002ee0 <iprintf+0x14>
 8002ed6:	69a3      	ldr	r3, [r4, #24]
 8002ed8:	b913      	cbnz	r3, 8002ee0 <iprintf+0x14>
 8002eda:	4620      	mov	r0, r4
 8002edc:	f000 f866 	bl	8002fac <__sinit>
 8002ee0:	ab05      	add	r3, sp, #20
 8002ee2:	9a04      	ldr	r2, [sp, #16]
 8002ee4:	68a1      	ldr	r1, [r4, #8]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f000 f989 	bl	8003200 <_vfiprintf_r>
 8002eee:	b002      	add	sp, #8
 8002ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <iscanf>:
 8002efc:	b40f      	push	{r0, r1, r2, r3}
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <iscanf+0x2c>)
 8002f00:	b513      	push	{r0, r1, r4, lr}
 8002f02:	681c      	ldr	r4, [r3, #0]
 8002f04:	b124      	cbz	r4, 8002f10 <iscanf+0x14>
 8002f06:	69a3      	ldr	r3, [r4, #24]
 8002f08:	b913      	cbnz	r3, 8002f10 <iscanf+0x14>
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f000 f84e 	bl	8002fac <__sinit>
 8002f10:	ab05      	add	r3, sp, #20
 8002f12:	9a04      	ldr	r2, [sp, #16]
 8002f14:	6861      	ldr	r1, [r4, #4]
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f000 fd5f 	bl	80039dc <_vfiscanf_r>
 8002f1e:	b002      	add	sp, #8
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f24:	b004      	add	sp, #16
 8002f26:	4770      	bx	lr
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <std>:
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	4604      	mov	r4, r0
 8002f32:	e9c0 3300 	strd	r3, r3, [r0]
 8002f36:	6083      	str	r3, [r0, #8]
 8002f38:	8181      	strh	r1, [r0, #12]
 8002f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8002f3c:	81c2      	strh	r2, [r0, #14]
 8002f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f42:	6183      	str	r3, [r0, #24]
 8002f44:	4619      	mov	r1, r3
 8002f46:	2208      	movs	r2, #8
 8002f48:	305c      	adds	r0, #92	; 0x5c
 8002f4a:	f7ff ffb7 	bl	8002ebc <memset>
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <std+0x38>)
 8002f50:	6263      	str	r3, [r4, #36]	; 0x24
 8002f52:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <std+0x3c>)
 8002f54:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <std+0x40>)
 8002f58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <std+0x44>)
 8002f5c:	6224      	str	r4, [r4, #32]
 8002f5e:	6323      	str	r3, [r4, #48]	; 0x30
 8002f60:	bd10      	pop	{r4, pc}
 8002f62:	bf00      	nop
 8002f64:	08003e8d 	.word	0x08003e8d
 8002f68:	08003eaf 	.word	0x08003eaf
 8002f6c:	08003ee7 	.word	0x08003ee7
 8002f70:	08003f0b 	.word	0x08003f0b

08002f74 <_cleanup_r>:
 8002f74:	4901      	ldr	r1, [pc, #4]	; (8002f7c <_cleanup_r+0x8>)
 8002f76:	f000 b8a1 	b.w	80030bc <_fwalk_reent>
 8002f7a:	bf00      	nop
 8002f7c:	0800456d 	.word	0x0800456d

08002f80 <__sfmoreglue>:
 8002f80:	b570      	push	{r4, r5, r6, lr}
 8002f82:	1e4a      	subs	r2, r1, #1
 8002f84:	2568      	movs	r5, #104	; 0x68
 8002f86:	4355      	muls	r5, r2
 8002f88:	460e      	mov	r6, r1
 8002f8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002f8e:	f000 f8b3 	bl	80030f8 <_malloc_r>
 8002f92:	4604      	mov	r4, r0
 8002f94:	b140      	cbz	r0, 8002fa8 <__sfmoreglue+0x28>
 8002f96:	2100      	movs	r1, #0
 8002f98:	e9c0 1600 	strd	r1, r6, [r0]
 8002f9c:	300c      	adds	r0, #12
 8002f9e:	60a0      	str	r0, [r4, #8]
 8002fa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002fa4:	f7ff ff8a 	bl	8002ebc <memset>
 8002fa8:	4620      	mov	r0, r4
 8002faa:	bd70      	pop	{r4, r5, r6, pc}

08002fac <__sinit>:
 8002fac:	6983      	ldr	r3, [r0, #24]
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	bb33      	cbnz	r3, 8003002 <__sinit+0x56>
 8002fb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002fb8:	6503      	str	r3, [r0, #80]	; 0x50
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <__sinit+0x58>)
 8002fbc:	4a12      	ldr	r2, [pc, #72]	; (8003008 <__sinit+0x5c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6282      	str	r2, [r0, #40]	; 0x28
 8002fc2:	4298      	cmp	r0, r3
 8002fc4:	bf04      	itt	eq
 8002fc6:	2301      	moveq	r3, #1
 8002fc8:	6183      	streq	r3, [r0, #24]
 8002fca:	f000 f81f 	bl	800300c <__sfp>
 8002fce:	6060      	str	r0, [r4, #4]
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f000 f81b 	bl	800300c <__sfp>
 8002fd6:	60a0      	str	r0, [r4, #8]
 8002fd8:	4620      	mov	r0, r4
 8002fda:	f000 f817 	bl	800300c <__sfp>
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60e0      	str	r0, [r4, #12]
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	6860      	ldr	r0, [r4, #4]
 8002fe6:	f7ff ffa1 	bl	8002f2c <std>
 8002fea:	2201      	movs	r2, #1
 8002fec:	2109      	movs	r1, #9
 8002fee:	68a0      	ldr	r0, [r4, #8]
 8002ff0:	f7ff ff9c 	bl	8002f2c <std>
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	2112      	movs	r1, #18
 8002ff8:	68e0      	ldr	r0, [r4, #12]
 8002ffa:	f7ff ff97 	bl	8002f2c <std>
 8002ffe:	2301      	movs	r3, #1
 8003000:	61a3      	str	r3, [r4, #24]
 8003002:	bd10      	pop	{r4, pc}
 8003004:	08004958 	.word	0x08004958
 8003008:	08002f75 	.word	0x08002f75

0800300c <__sfp>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <__sfp+0x70>)
 8003010:	681e      	ldr	r6, [r3, #0]
 8003012:	69b3      	ldr	r3, [r6, #24]
 8003014:	4607      	mov	r7, r0
 8003016:	b913      	cbnz	r3, 800301e <__sfp+0x12>
 8003018:	4630      	mov	r0, r6
 800301a:	f7ff ffc7 	bl	8002fac <__sinit>
 800301e:	3648      	adds	r6, #72	; 0x48
 8003020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003024:	3b01      	subs	r3, #1
 8003026:	d503      	bpl.n	8003030 <__sfp+0x24>
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	b133      	cbz	r3, 800303a <__sfp+0x2e>
 800302c:	6836      	ldr	r6, [r6, #0]
 800302e:	e7f7      	b.n	8003020 <__sfp+0x14>
 8003030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003034:	b16d      	cbz	r5, 8003052 <__sfp+0x46>
 8003036:	3468      	adds	r4, #104	; 0x68
 8003038:	e7f4      	b.n	8003024 <__sfp+0x18>
 800303a:	2104      	movs	r1, #4
 800303c:	4638      	mov	r0, r7
 800303e:	f7ff ff9f 	bl	8002f80 <__sfmoreglue>
 8003042:	6030      	str	r0, [r6, #0]
 8003044:	2800      	cmp	r0, #0
 8003046:	d1f1      	bne.n	800302c <__sfp+0x20>
 8003048:	230c      	movs	r3, #12
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4604      	mov	r4, r0
 800304e:	4620      	mov	r0, r4
 8003050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <__sfp+0x74>)
 8003054:	6665      	str	r5, [r4, #100]	; 0x64
 8003056:	e9c4 5500 	strd	r5, r5, [r4]
 800305a:	60a5      	str	r5, [r4, #8]
 800305c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003060:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003064:	2208      	movs	r2, #8
 8003066:	4629      	mov	r1, r5
 8003068:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800306c:	f7ff ff26 	bl	8002ebc <memset>
 8003070:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003074:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003078:	e7e9      	b.n	800304e <__sfp+0x42>
 800307a:	bf00      	nop
 800307c:	08004958 	.word	0x08004958
 8003080:	ffff0001 	.word	0xffff0001

08003084 <_fwalk>:
 8003084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003088:	4688      	mov	r8, r1
 800308a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800308e:	2600      	movs	r6, #0
 8003090:	b914      	cbnz	r4, 8003098 <_fwalk+0x14>
 8003092:	4630      	mov	r0, r6
 8003094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003098:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800309c:	3f01      	subs	r7, #1
 800309e:	d501      	bpl.n	80030a4 <_fwalk+0x20>
 80030a0:	6824      	ldr	r4, [r4, #0]
 80030a2:	e7f5      	b.n	8003090 <_fwalk+0xc>
 80030a4:	89ab      	ldrh	r3, [r5, #12]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d906      	bls.n	80030b8 <_fwalk+0x34>
 80030aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030ae:	3301      	adds	r3, #1
 80030b0:	d002      	beq.n	80030b8 <_fwalk+0x34>
 80030b2:	4628      	mov	r0, r5
 80030b4:	47c0      	blx	r8
 80030b6:	4306      	orrs	r6, r0
 80030b8:	3568      	adds	r5, #104	; 0x68
 80030ba:	e7ef      	b.n	800309c <_fwalk+0x18>

080030bc <_fwalk_reent>:
 80030bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	4680      	mov	r8, r0
 80030c2:	4689      	mov	r9, r1
 80030c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80030c8:	2600      	movs	r6, #0
 80030ca:	b914      	cbnz	r4, 80030d2 <_fwalk_reent+0x16>
 80030cc:	4630      	mov	r0, r6
 80030ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80030d6:	3f01      	subs	r7, #1
 80030d8:	d501      	bpl.n	80030de <_fwalk_reent+0x22>
 80030da:	6824      	ldr	r4, [r4, #0]
 80030dc:	e7f5      	b.n	80030ca <_fwalk_reent+0xe>
 80030de:	89ab      	ldrh	r3, [r5, #12]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d907      	bls.n	80030f4 <_fwalk_reent+0x38>
 80030e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030e8:	3301      	adds	r3, #1
 80030ea:	d003      	beq.n	80030f4 <_fwalk_reent+0x38>
 80030ec:	4629      	mov	r1, r5
 80030ee:	4640      	mov	r0, r8
 80030f0:	47c8      	blx	r9
 80030f2:	4306      	orrs	r6, r0
 80030f4:	3568      	adds	r5, #104	; 0x68
 80030f6:	e7ee      	b.n	80030d6 <_fwalk_reent+0x1a>

080030f8 <_malloc_r>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	1ccd      	adds	r5, r1, #3
 80030fc:	f025 0503 	bic.w	r5, r5, #3
 8003100:	3508      	adds	r5, #8
 8003102:	2d0c      	cmp	r5, #12
 8003104:	bf38      	it	cc
 8003106:	250c      	movcc	r5, #12
 8003108:	2d00      	cmp	r5, #0
 800310a:	4606      	mov	r6, r0
 800310c:	db01      	blt.n	8003112 <_malloc_r+0x1a>
 800310e:	42a9      	cmp	r1, r5
 8003110:	d903      	bls.n	800311a <_malloc_r+0x22>
 8003112:	230c      	movs	r3, #12
 8003114:	6033      	str	r3, [r6, #0]
 8003116:	2000      	movs	r0, #0
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	f001 fb08 	bl	800472e <__malloc_lock>
 800311e:	4a21      	ldr	r2, [pc, #132]	; (80031a4 <_malloc_r+0xac>)
 8003120:	6814      	ldr	r4, [r2, #0]
 8003122:	4621      	mov	r1, r4
 8003124:	b991      	cbnz	r1, 800314c <_malloc_r+0x54>
 8003126:	4c20      	ldr	r4, [pc, #128]	; (80031a8 <_malloc_r+0xb0>)
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	b91b      	cbnz	r3, 8003134 <_malloc_r+0x3c>
 800312c:	4630      	mov	r0, r6
 800312e:	f000 fe6b 	bl	8003e08 <_sbrk_r>
 8003132:	6020      	str	r0, [r4, #0]
 8003134:	4629      	mov	r1, r5
 8003136:	4630      	mov	r0, r6
 8003138:	f000 fe66 	bl	8003e08 <_sbrk_r>
 800313c:	1c43      	adds	r3, r0, #1
 800313e:	d124      	bne.n	800318a <_malloc_r+0x92>
 8003140:	230c      	movs	r3, #12
 8003142:	6033      	str	r3, [r6, #0]
 8003144:	4630      	mov	r0, r6
 8003146:	f001 faf3 	bl	8004730 <__malloc_unlock>
 800314a:	e7e4      	b.n	8003116 <_malloc_r+0x1e>
 800314c:	680b      	ldr	r3, [r1, #0]
 800314e:	1b5b      	subs	r3, r3, r5
 8003150:	d418      	bmi.n	8003184 <_malloc_r+0x8c>
 8003152:	2b0b      	cmp	r3, #11
 8003154:	d90f      	bls.n	8003176 <_malloc_r+0x7e>
 8003156:	600b      	str	r3, [r1, #0]
 8003158:	50cd      	str	r5, [r1, r3]
 800315a:	18cc      	adds	r4, r1, r3
 800315c:	4630      	mov	r0, r6
 800315e:	f001 fae7 	bl	8004730 <__malloc_unlock>
 8003162:	f104 000b 	add.w	r0, r4, #11
 8003166:	1d23      	adds	r3, r4, #4
 8003168:	f020 0007 	bic.w	r0, r0, #7
 800316c:	1ac3      	subs	r3, r0, r3
 800316e:	d0d3      	beq.n	8003118 <_malloc_r+0x20>
 8003170:	425a      	negs	r2, r3
 8003172:	50e2      	str	r2, [r4, r3]
 8003174:	e7d0      	b.n	8003118 <_malloc_r+0x20>
 8003176:	428c      	cmp	r4, r1
 8003178:	684b      	ldr	r3, [r1, #4]
 800317a:	bf16      	itet	ne
 800317c:	6063      	strne	r3, [r4, #4]
 800317e:	6013      	streq	r3, [r2, #0]
 8003180:	460c      	movne	r4, r1
 8003182:	e7eb      	b.n	800315c <_malloc_r+0x64>
 8003184:	460c      	mov	r4, r1
 8003186:	6849      	ldr	r1, [r1, #4]
 8003188:	e7cc      	b.n	8003124 <_malloc_r+0x2c>
 800318a:	1cc4      	adds	r4, r0, #3
 800318c:	f024 0403 	bic.w	r4, r4, #3
 8003190:	42a0      	cmp	r0, r4
 8003192:	d005      	beq.n	80031a0 <_malloc_r+0xa8>
 8003194:	1a21      	subs	r1, r4, r0
 8003196:	4630      	mov	r0, r6
 8003198:	f000 fe36 	bl	8003e08 <_sbrk_r>
 800319c:	3001      	adds	r0, #1
 800319e:	d0cf      	beq.n	8003140 <_malloc_r+0x48>
 80031a0:	6025      	str	r5, [r4, #0]
 80031a2:	e7db      	b.n	800315c <_malloc_r+0x64>
 80031a4:	200001fc 	.word	0x200001fc
 80031a8:	20000200 	.word	0x20000200

080031ac <__sfputc_r>:
 80031ac:	6893      	ldr	r3, [r2, #8]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	b410      	push	{r4}
 80031b4:	6093      	str	r3, [r2, #8]
 80031b6:	da08      	bge.n	80031ca <__sfputc_r+0x1e>
 80031b8:	6994      	ldr	r4, [r2, #24]
 80031ba:	42a3      	cmp	r3, r4
 80031bc:	db01      	blt.n	80031c2 <__sfputc_r+0x16>
 80031be:	290a      	cmp	r1, #10
 80031c0:	d103      	bne.n	80031ca <__sfputc_r+0x1e>
 80031c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c6:	f001 b869 	b.w	800429c <__swbuf_r>
 80031ca:	6813      	ldr	r3, [r2, #0]
 80031cc:	1c58      	adds	r0, r3, #1
 80031ce:	6010      	str	r0, [r2, #0]
 80031d0:	7019      	strb	r1, [r3, #0]
 80031d2:	4608      	mov	r0, r1
 80031d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031d8:	4770      	bx	lr

080031da <__sfputs_r>:
 80031da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031dc:	4606      	mov	r6, r0
 80031de:	460f      	mov	r7, r1
 80031e0:	4614      	mov	r4, r2
 80031e2:	18d5      	adds	r5, r2, r3
 80031e4:	42ac      	cmp	r4, r5
 80031e6:	d101      	bne.n	80031ec <__sfputs_r+0x12>
 80031e8:	2000      	movs	r0, #0
 80031ea:	e007      	b.n	80031fc <__sfputs_r+0x22>
 80031ec:	463a      	mov	r2, r7
 80031ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f2:	4630      	mov	r0, r6
 80031f4:	f7ff ffda 	bl	80031ac <__sfputc_r>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d1f3      	bne.n	80031e4 <__sfputs_r+0xa>
 80031fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003200 <_vfiprintf_r>:
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	460c      	mov	r4, r1
 8003206:	b09d      	sub	sp, #116	; 0x74
 8003208:	4617      	mov	r7, r2
 800320a:	461d      	mov	r5, r3
 800320c:	4606      	mov	r6, r0
 800320e:	b118      	cbz	r0, 8003218 <_vfiprintf_r+0x18>
 8003210:	6983      	ldr	r3, [r0, #24]
 8003212:	b90b      	cbnz	r3, 8003218 <_vfiprintf_r+0x18>
 8003214:	f7ff feca 	bl	8002fac <__sinit>
 8003218:	4b7c      	ldr	r3, [pc, #496]	; (800340c <_vfiprintf_r+0x20c>)
 800321a:	429c      	cmp	r4, r3
 800321c:	d158      	bne.n	80032d0 <_vfiprintf_r+0xd0>
 800321e:	6874      	ldr	r4, [r6, #4]
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	0718      	lsls	r0, r3, #28
 8003224:	d55e      	bpl.n	80032e4 <_vfiprintf_r+0xe4>
 8003226:	6923      	ldr	r3, [r4, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05b      	beq.n	80032e4 <_vfiprintf_r+0xe4>
 800322c:	2300      	movs	r3, #0
 800322e:	9309      	str	r3, [sp, #36]	; 0x24
 8003230:	2320      	movs	r3, #32
 8003232:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003236:	2330      	movs	r3, #48	; 0x30
 8003238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800323c:	9503      	str	r5, [sp, #12]
 800323e:	f04f 0b01 	mov.w	fp, #1
 8003242:	46b8      	mov	r8, r7
 8003244:	4645      	mov	r5, r8
 8003246:	f815 3b01 	ldrb.w	r3, [r5], #1
 800324a:	b10b      	cbz	r3, 8003250 <_vfiprintf_r+0x50>
 800324c:	2b25      	cmp	r3, #37	; 0x25
 800324e:	d154      	bne.n	80032fa <_vfiprintf_r+0xfa>
 8003250:	ebb8 0a07 	subs.w	sl, r8, r7
 8003254:	d00b      	beq.n	800326e <_vfiprintf_r+0x6e>
 8003256:	4653      	mov	r3, sl
 8003258:	463a      	mov	r2, r7
 800325a:	4621      	mov	r1, r4
 800325c:	4630      	mov	r0, r6
 800325e:	f7ff ffbc 	bl	80031da <__sfputs_r>
 8003262:	3001      	adds	r0, #1
 8003264:	f000 80c2 	beq.w	80033ec <_vfiprintf_r+0x1ec>
 8003268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800326a:	4453      	add	r3, sl
 800326c:	9309      	str	r3, [sp, #36]	; 0x24
 800326e:	f898 3000 	ldrb.w	r3, [r8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80ba 	beq.w	80033ec <_vfiprintf_r+0x1ec>
 8003278:	2300      	movs	r3, #0
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	9307      	str	r3, [sp, #28]
 8003286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800328a:	931a      	str	r3, [sp, #104]	; 0x68
 800328c:	46a8      	mov	r8, r5
 800328e:	2205      	movs	r2, #5
 8003290:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003294:	485e      	ldr	r0, [pc, #376]	; (8003410 <_vfiprintf_r+0x210>)
 8003296:	f7fc ff9b 	bl	80001d0 <memchr>
 800329a:	9b04      	ldr	r3, [sp, #16]
 800329c:	bb78      	cbnz	r0, 80032fe <_vfiprintf_r+0xfe>
 800329e:	06d9      	lsls	r1, r3, #27
 80032a0:	bf44      	itt	mi
 80032a2:	2220      	movmi	r2, #32
 80032a4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032a8:	071a      	lsls	r2, r3, #28
 80032aa:	bf44      	itt	mi
 80032ac:	222b      	movmi	r2, #43	; 0x2b
 80032ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80032b2:	782a      	ldrb	r2, [r5, #0]
 80032b4:	2a2a      	cmp	r2, #42	; 0x2a
 80032b6:	d02a      	beq.n	800330e <_vfiprintf_r+0x10e>
 80032b8:	9a07      	ldr	r2, [sp, #28]
 80032ba:	46a8      	mov	r8, r5
 80032bc:	2000      	movs	r0, #0
 80032be:	250a      	movs	r5, #10
 80032c0:	4641      	mov	r1, r8
 80032c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032c6:	3b30      	subs	r3, #48	; 0x30
 80032c8:	2b09      	cmp	r3, #9
 80032ca:	d969      	bls.n	80033a0 <_vfiprintf_r+0x1a0>
 80032cc:	b360      	cbz	r0, 8003328 <_vfiprintf_r+0x128>
 80032ce:	e024      	b.n	800331a <_vfiprintf_r+0x11a>
 80032d0:	4b50      	ldr	r3, [pc, #320]	; (8003414 <_vfiprintf_r+0x214>)
 80032d2:	429c      	cmp	r4, r3
 80032d4:	d101      	bne.n	80032da <_vfiprintf_r+0xda>
 80032d6:	68b4      	ldr	r4, [r6, #8]
 80032d8:	e7a2      	b.n	8003220 <_vfiprintf_r+0x20>
 80032da:	4b4f      	ldr	r3, [pc, #316]	; (8003418 <_vfiprintf_r+0x218>)
 80032dc:	429c      	cmp	r4, r3
 80032de:	bf08      	it	eq
 80032e0:	68f4      	ldreq	r4, [r6, #12]
 80032e2:	e79d      	b.n	8003220 <_vfiprintf_r+0x20>
 80032e4:	4621      	mov	r1, r4
 80032e6:	4630      	mov	r0, r6
 80032e8:	f001 f83c 	bl	8004364 <__swsetup_r>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d09d      	beq.n	800322c <_vfiprintf_r+0x2c>
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	b01d      	add	sp, #116	; 0x74
 80032f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fa:	46a8      	mov	r8, r5
 80032fc:	e7a2      	b.n	8003244 <_vfiprintf_r+0x44>
 80032fe:	4a44      	ldr	r2, [pc, #272]	; (8003410 <_vfiprintf_r+0x210>)
 8003300:	1a80      	subs	r0, r0, r2
 8003302:	fa0b f000 	lsl.w	r0, fp, r0
 8003306:	4318      	orrs	r0, r3
 8003308:	9004      	str	r0, [sp, #16]
 800330a:	4645      	mov	r5, r8
 800330c:	e7be      	b.n	800328c <_vfiprintf_r+0x8c>
 800330e:	9a03      	ldr	r2, [sp, #12]
 8003310:	1d11      	adds	r1, r2, #4
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	9103      	str	r1, [sp, #12]
 8003316:	2a00      	cmp	r2, #0
 8003318:	db01      	blt.n	800331e <_vfiprintf_r+0x11e>
 800331a:	9207      	str	r2, [sp, #28]
 800331c:	e004      	b.n	8003328 <_vfiprintf_r+0x128>
 800331e:	4252      	negs	r2, r2
 8003320:	f043 0302 	orr.w	r3, r3, #2
 8003324:	9207      	str	r2, [sp, #28]
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	f898 3000 	ldrb.w	r3, [r8]
 800332c:	2b2e      	cmp	r3, #46	; 0x2e
 800332e:	d10e      	bne.n	800334e <_vfiprintf_r+0x14e>
 8003330:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003334:	2b2a      	cmp	r3, #42	; 0x2a
 8003336:	d138      	bne.n	80033aa <_vfiprintf_r+0x1aa>
 8003338:	9b03      	ldr	r3, [sp, #12]
 800333a:	1d1a      	adds	r2, r3, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	9203      	str	r2, [sp, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	bfb8      	it	lt
 8003344:	f04f 33ff 	movlt.w	r3, #4294967295
 8003348:	f108 0802 	add.w	r8, r8, #2
 800334c:	9305      	str	r3, [sp, #20]
 800334e:	4d33      	ldr	r5, [pc, #204]	; (800341c <_vfiprintf_r+0x21c>)
 8003350:	f898 1000 	ldrb.w	r1, [r8]
 8003354:	2203      	movs	r2, #3
 8003356:	4628      	mov	r0, r5
 8003358:	f7fc ff3a 	bl	80001d0 <memchr>
 800335c:	b140      	cbz	r0, 8003370 <_vfiprintf_r+0x170>
 800335e:	2340      	movs	r3, #64	; 0x40
 8003360:	1b40      	subs	r0, r0, r5
 8003362:	fa03 f000 	lsl.w	r0, r3, r0
 8003366:	9b04      	ldr	r3, [sp, #16]
 8003368:	4303      	orrs	r3, r0
 800336a:	f108 0801 	add.w	r8, r8, #1
 800336e:	9304      	str	r3, [sp, #16]
 8003370:	f898 1000 	ldrb.w	r1, [r8]
 8003374:	482a      	ldr	r0, [pc, #168]	; (8003420 <_vfiprintf_r+0x220>)
 8003376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800337a:	2206      	movs	r2, #6
 800337c:	f108 0701 	add.w	r7, r8, #1
 8003380:	f7fc ff26 	bl	80001d0 <memchr>
 8003384:	2800      	cmp	r0, #0
 8003386:	d037      	beq.n	80033f8 <_vfiprintf_r+0x1f8>
 8003388:	4b26      	ldr	r3, [pc, #152]	; (8003424 <_vfiprintf_r+0x224>)
 800338a:	bb1b      	cbnz	r3, 80033d4 <_vfiprintf_r+0x1d4>
 800338c:	9b03      	ldr	r3, [sp, #12]
 800338e:	3307      	adds	r3, #7
 8003390:	f023 0307 	bic.w	r3, r3, #7
 8003394:	3308      	adds	r3, #8
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339a:	444b      	add	r3, r9
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	e750      	b.n	8003242 <_vfiprintf_r+0x42>
 80033a0:	fb05 3202 	mla	r2, r5, r2, r3
 80033a4:	2001      	movs	r0, #1
 80033a6:	4688      	mov	r8, r1
 80033a8:	e78a      	b.n	80032c0 <_vfiprintf_r+0xc0>
 80033aa:	2300      	movs	r3, #0
 80033ac:	f108 0801 	add.w	r8, r8, #1
 80033b0:	9305      	str	r3, [sp, #20]
 80033b2:	4619      	mov	r1, r3
 80033b4:	250a      	movs	r5, #10
 80033b6:	4640      	mov	r0, r8
 80033b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033bc:	3a30      	subs	r2, #48	; 0x30
 80033be:	2a09      	cmp	r2, #9
 80033c0:	d903      	bls.n	80033ca <_vfiprintf_r+0x1ca>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0c3      	beq.n	800334e <_vfiprintf_r+0x14e>
 80033c6:	9105      	str	r1, [sp, #20]
 80033c8:	e7c1      	b.n	800334e <_vfiprintf_r+0x14e>
 80033ca:	fb05 2101 	mla	r1, r5, r1, r2
 80033ce:	2301      	movs	r3, #1
 80033d0:	4680      	mov	r8, r0
 80033d2:	e7f0      	b.n	80033b6 <_vfiprintf_r+0x1b6>
 80033d4:	ab03      	add	r3, sp, #12
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4622      	mov	r2, r4
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <_vfiprintf_r+0x228>)
 80033dc:	a904      	add	r1, sp, #16
 80033de:	4630      	mov	r0, r6
 80033e0:	f3af 8000 	nop.w
 80033e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033e8:	4681      	mov	r9, r0
 80033ea:	d1d5      	bne.n	8003398 <_vfiprintf_r+0x198>
 80033ec:	89a3      	ldrh	r3, [r4, #12]
 80033ee:	065b      	lsls	r3, r3, #25
 80033f0:	f53f af7e 	bmi.w	80032f0 <_vfiprintf_r+0xf0>
 80033f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80033f6:	e77d      	b.n	80032f4 <_vfiprintf_r+0xf4>
 80033f8:	ab03      	add	r3, sp, #12
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	4622      	mov	r2, r4
 80033fe:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <_vfiprintf_r+0x228>)
 8003400:	a904      	add	r1, sp, #16
 8003402:	4630      	mov	r0, r6
 8003404:	f000 f888 	bl	8003518 <_printf_i>
 8003408:	e7ec      	b.n	80033e4 <_vfiprintf_r+0x1e4>
 800340a:	bf00      	nop
 800340c:	0800497c 	.word	0x0800497c
 8003410:	080049bc 	.word	0x080049bc
 8003414:	0800499c 	.word	0x0800499c
 8003418:	0800495c 	.word	0x0800495c
 800341c:	080049c2 	.word	0x080049c2
 8003420:	080049c6 	.word	0x080049c6
 8003424:	00000000 	.word	0x00000000
 8003428:	080031db 	.word	0x080031db

0800342c <_printf_common>:
 800342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003430:	4691      	mov	r9, r2
 8003432:	461f      	mov	r7, r3
 8003434:	688a      	ldr	r2, [r1, #8]
 8003436:	690b      	ldr	r3, [r1, #16]
 8003438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800343c:	4293      	cmp	r3, r2
 800343e:	bfb8      	it	lt
 8003440:	4613      	movlt	r3, r2
 8003442:	f8c9 3000 	str.w	r3, [r9]
 8003446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800344a:	4606      	mov	r6, r0
 800344c:	460c      	mov	r4, r1
 800344e:	b112      	cbz	r2, 8003456 <_printf_common+0x2a>
 8003450:	3301      	adds	r3, #1
 8003452:	f8c9 3000 	str.w	r3, [r9]
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	0699      	lsls	r1, r3, #26
 800345a:	bf42      	ittt	mi
 800345c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003460:	3302      	addmi	r3, #2
 8003462:	f8c9 3000 	strmi.w	r3, [r9]
 8003466:	6825      	ldr	r5, [r4, #0]
 8003468:	f015 0506 	ands.w	r5, r5, #6
 800346c:	d107      	bne.n	800347e <_printf_common+0x52>
 800346e:	f104 0a19 	add.w	sl, r4, #25
 8003472:	68e3      	ldr	r3, [r4, #12]
 8003474:	f8d9 2000 	ldr.w	r2, [r9]
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	42ab      	cmp	r3, r5
 800347c:	dc28      	bgt.n	80034d0 <_printf_common+0xa4>
 800347e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	3300      	adds	r3, #0
 8003486:	bf18      	it	ne
 8003488:	2301      	movne	r3, #1
 800348a:	0692      	lsls	r2, r2, #26
 800348c:	d42d      	bmi.n	80034ea <_printf_common+0xbe>
 800348e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003492:	4639      	mov	r1, r7
 8003494:	4630      	mov	r0, r6
 8003496:	47c0      	blx	r8
 8003498:	3001      	adds	r0, #1
 800349a:	d020      	beq.n	80034de <_printf_common+0xb2>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	68e5      	ldr	r5, [r4, #12]
 80034a0:	f8d9 2000 	ldr.w	r2, [r9]
 80034a4:	f003 0306 	and.w	r3, r3, #6
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	bf08      	it	eq
 80034ac:	1aad      	subeq	r5, r5, r2
 80034ae:	68a3      	ldr	r3, [r4, #8]
 80034b0:	6922      	ldr	r2, [r4, #16]
 80034b2:	bf0c      	ite	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	2500      	movne	r5, #0
 80034ba:	4293      	cmp	r3, r2
 80034bc:	bfc4      	itt	gt
 80034be:	1a9b      	subgt	r3, r3, r2
 80034c0:	18ed      	addgt	r5, r5, r3
 80034c2:	f04f 0900 	mov.w	r9, #0
 80034c6:	341a      	adds	r4, #26
 80034c8:	454d      	cmp	r5, r9
 80034ca:	d11a      	bne.n	8003502 <_printf_common+0xd6>
 80034cc:	2000      	movs	r0, #0
 80034ce:	e008      	b.n	80034e2 <_printf_common+0xb6>
 80034d0:	2301      	movs	r3, #1
 80034d2:	4652      	mov	r2, sl
 80034d4:	4639      	mov	r1, r7
 80034d6:	4630      	mov	r0, r6
 80034d8:	47c0      	blx	r8
 80034da:	3001      	adds	r0, #1
 80034dc:	d103      	bne.n	80034e6 <_printf_common+0xba>
 80034de:	f04f 30ff 	mov.w	r0, #4294967295
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	3501      	adds	r5, #1
 80034e8:	e7c3      	b.n	8003472 <_printf_common+0x46>
 80034ea:	18e1      	adds	r1, r4, r3
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	2030      	movs	r0, #48	; 0x30
 80034f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034f4:	4422      	add	r2, r4
 80034f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034fe:	3302      	adds	r3, #2
 8003500:	e7c5      	b.n	800348e <_printf_common+0x62>
 8003502:	2301      	movs	r3, #1
 8003504:	4622      	mov	r2, r4
 8003506:	4639      	mov	r1, r7
 8003508:	4630      	mov	r0, r6
 800350a:	47c0      	blx	r8
 800350c:	3001      	adds	r0, #1
 800350e:	d0e6      	beq.n	80034de <_printf_common+0xb2>
 8003510:	f109 0901 	add.w	r9, r9, #1
 8003514:	e7d8      	b.n	80034c8 <_printf_common+0x9c>
	...

08003518 <_printf_i>:
 8003518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800351c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003520:	460c      	mov	r4, r1
 8003522:	7e09      	ldrb	r1, [r1, #24]
 8003524:	b085      	sub	sp, #20
 8003526:	296e      	cmp	r1, #110	; 0x6e
 8003528:	4617      	mov	r7, r2
 800352a:	4606      	mov	r6, r0
 800352c:	4698      	mov	r8, r3
 800352e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003530:	f000 80b3 	beq.w	800369a <_printf_i+0x182>
 8003534:	d822      	bhi.n	800357c <_printf_i+0x64>
 8003536:	2963      	cmp	r1, #99	; 0x63
 8003538:	d036      	beq.n	80035a8 <_printf_i+0x90>
 800353a:	d80a      	bhi.n	8003552 <_printf_i+0x3a>
 800353c:	2900      	cmp	r1, #0
 800353e:	f000 80b9 	beq.w	80036b4 <_printf_i+0x19c>
 8003542:	2958      	cmp	r1, #88	; 0x58
 8003544:	f000 8083 	beq.w	800364e <_printf_i+0x136>
 8003548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800354c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003550:	e032      	b.n	80035b8 <_printf_i+0xa0>
 8003552:	2964      	cmp	r1, #100	; 0x64
 8003554:	d001      	beq.n	800355a <_printf_i+0x42>
 8003556:	2969      	cmp	r1, #105	; 0x69
 8003558:	d1f6      	bne.n	8003548 <_printf_i+0x30>
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	6813      	ldr	r3, [r2, #0]
 800355e:	0605      	lsls	r5, r0, #24
 8003560:	f103 0104 	add.w	r1, r3, #4
 8003564:	d52a      	bpl.n	80035bc <_printf_i+0xa4>
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6011      	str	r1, [r2, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	da03      	bge.n	8003576 <_printf_i+0x5e>
 800356e:	222d      	movs	r2, #45	; 0x2d
 8003570:	425b      	negs	r3, r3
 8003572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003576:	486f      	ldr	r0, [pc, #444]	; (8003734 <_printf_i+0x21c>)
 8003578:	220a      	movs	r2, #10
 800357a:	e039      	b.n	80035f0 <_printf_i+0xd8>
 800357c:	2973      	cmp	r1, #115	; 0x73
 800357e:	f000 809d 	beq.w	80036bc <_printf_i+0x1a4>
 8003582:	d808      	bhi.n	8003596 <_printf_i+0x7e>
 8003584:	296f      	cmp	r1, #111	; 0x6f
 8003586:	d020      	beq.n	80035ca <_printf_i+0xb2>
 8003588:	2970      	cmp	r1, #112	; 0x70
 800358a:	d1dd      	bne.n	8003548 <_printf_i+0x30>
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	f043 0320 	orr.w	r3, r3, #32
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	e003      	b.n	800359e <_printf_i+0x86>
 8003596:	2975      	cmp	r1, #117	; 0x75
 8003598:	d017      	beq.n	80035ca <_printf_i+0xb2>
 800359a:	2978      	cmp	r1, #120	; 0x78
 800359c:	d1d4      	bne.n	8003548 <_printf_i+0x30>
 800359e:	2378      	movs	r3, #120	; 0x78
 80035a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80035a4:	4864      	ldr	r0, [pc, #400]	; (8003738 <_printf_i+0x220>)
 80035a6:	e055      	b.n	8003654 <_printf_i+0x13c>
 80035a8:	6813      	ldr	r3, [r2, #0]
 80035aa:	1d19      	adds	r1, r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6011      	str	r1, [r2, #0]
 80035b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035b8:	2301      	movs	r3, #1
 80035ba:	e08c      	b.n	80036d6 <_printf_i+0x1be>
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6011      	str	r1, [r2, #0]
 80035c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035c4:	bf18      	it	ne
 80035c6:	b21b      	sxthne	r3, r3
 80035c8:	e7cf      	b.n	800356a <_printf_i+0x52>
 80035ca:	6813      	ldr	r3, [r2, #0]
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	1d18      	adds	r0, r3, #4
 80035d0:	6010      	str	r0, [r2, #0]
 80035d2:	0628      	lsls	r0, r5, #24
 80035d4:	d501      	bpl.n	80035da <_printf_i+0xc2>
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	e002      	b.n	80035e0 <_printf_i+0xc8>
 80035da:	0668      	lsls	r0, r5, #25
 80035dc:	d5fb      	bpl.n	80035d6 <_printf_i+0xbe>
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	4854      	ldr	r0, [pc, #336]	; (8003734 <_printf_i+0x21c>)
 80035e2:	296f      	cmp	r1, #111	; 0x6f
 80035e4:	bf14      	ite	ne
 80035e6:	220a      	movne	r2, #10
 80035e8:	2208      	moveq	r2, #8
 80035ea:	2100      	movs	r1, #0
 80035ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80035f0:	6865      	ldr	r5, [r4, #4]
 80035f2:	60a5      	str	r5, [r4, #8]
 80035f4:	2d00      	cmp	r5, #0
 80035f6:	f2c0 8095 	blt.w	8003724 <_printf_i+0x20c>
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	f021 0104 	bic.w	r1, r1, #4
 8003600:	6021      	str	r1, [r4, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d13d      	bne.n	8003682 <_printf_i+0x16a>
 8003606:	2d00      	cmp	r5, #0
 8003608:	f040 808e 	bne.w	8003728 <_printf_i+0x210>
 800360c:	4665      	mov	r5, ip
 800360e:	2a08      	cmp	r2, #8
 8003610:	d10b      	bne.n	800362a <_printf_i+0x112>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	07db      	lsls	r3, r3, #31
 8003616:	d508      	bpl.n	800362a <_printf_i+0x112>
 8003618:	6923      	ldr	r3, [r4, #16]
 800361a:	6862      	ldr	r2, [r4, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	bfde      	ittt	le
 8003620:	2330      	movle	r3, #48	; 0x30
 8003622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800362a:	ebac 0305 	sub.w	r3, ip, r5
 800362e:	6123      	str	r3, [r4, #16]
 8003630:	f8cd 8000 	str.w	r8, [sp]
 8003634:	463b      	mov	r3, r7
 8003636:	aa03      	add	r2, sp, #12
 8003638:	4621      	mov	r1, r4
 800363a:	4630      	mov	r0, r6
 800363c:	f7ff fef6 	bl	800342c <_printf_common>
 8003640:	3001      	adds	r0, #1
 8003642:	d14d      	bne.n	80036e0 <_printf_i+0x1c8>
 8003644:	f04f 30ff 	mov.w	r0, #4294967295
 8003648:	b005      	add	sp, #20
 800364a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800364e:	4839      	ldr	r0, [pc, #228]	; (8003734 <_printf_i+0x21c>)
 8003650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003654:	6813      	ldr	r3, [r2, #0]
 8003656:	6821      	ldr	r1, [r4, #0]
 8003658:	1d1d      	adds	r5, r3, #4
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6015      	str	r5, [r2, #0]
 800365e:	060a      	lsls	r2, r1, #24
 8003660:	d50b      	bpl.n	800367a <_printf_i+0x162>
 8003662:	07ca      	lsls	r2, r1, #31
 8003664:	bf44      	itt	mi
 8003666:	f041 0120 	orrmi.w	r1, r1, #32
 800366a:	6021      	strmi	r1, [r4, #0]
 800366c:	b91b      	cbnz	r3, 8003676 <_printf_i+0x15e>
 800366e:	6822      	ldr	r2, [r4, #0]
 8003670:	f022 0220 	bic.w	r2, r2, #32
 8003674:	6022      	str	r2, [r4, #0]
 8003676:	2210      	movs	r2, #16
 8003678:	e7b7      	b.n	80035ea <_printf_i+0xd2>
 800367a:	064d      	lsls	r5, r1, #25
 800367c:	bf48      	it	mi
 800367e:	b29b      	uxthmi	r3, r3
 8003680:	e7ef      	b.n	8003662 <_printf_i+0x14a>
 8003682:	4665      	mov	r5, ip
 8003684:	fbb3 f1f2 	udiv	r1, r3, r2
 8003688:	fb02 3311 	mls	r3, r2, r1, r3
 800368c:	5cc3      	ldrb	r3, [r0, r3]
 800368e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003692:	460b      	mov	r3, r1
 8003694:	2900      	cmp	r1, #0
 8003696:	d1f5      	bne.n	8003684 <_printf_i+0x16c>
 8003698:	e7b9      	b.n	800360e <_printf_i+0xf6>
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	6825      	ldr	r5, [r4, #0]
 800369e:	6961      	ldr	r1, [r4, #20]
 80036a0:	1d18      	adds	r0, r3, #4
 80036a2:	6010      	str	r0, [r2, #0]
 80036a4:	0628      	lsls	r0, r5, #24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	d501      	bpl.n	80036ae <_printf_i+0x196>
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	e002      	b.n	80036b4 <_printf_i+0x19c>
 80036ae:	066a      	lsls	r2, r5, #25
 80036b0:	d5fb      	bpl.n	80036aa <_printf_i+0x192>
 80036b2:	8019      	strh	r1, [r3, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	6123      	str	r3, [r4, #16]
 80036b8:	4665      	mov	r5, ip
 80036ba:	e7b9      	b.n	8003630 <_printf_i+0x118>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	1d19      	adds	r1, r3, #4
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	681d      	ldr	r5, [r3, #0]
 80036c4:	6862      	ldr	r2, [r4, #4]
 80036c6:	2100      	movs	r1, #0
 80036c8:	4628      	mov	r0, r5
 80036ca:	f7fc fd81 	bl	80001d0 <memchr>
 80036ce:	b108      	cbz	r0, 80036d4 <_printf_i+0x1bc>
 80036d0:	1b40      	subs	r0, r0, r5
 80036d2:	6060      	str	r0, [r4, #4]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036de:	e7a7      	b.n	8003630 <_printf_i+0x118>
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	462a      	mov	r2, r5
 80036e4:	4639      	mov	r1, r7
 80036e6:	4630      	mov	r0, r6
 80036e8:	47c0      	blx	r8
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0aa      	beq.n	8003644 <_printf_i+0x12c>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	079b      	lsls	r3, r3, #30
 80036f2:	d413      	bmi.n	800371c <_printf_i+0x204>
 80036f4:	68e0      	ldr	r0, [r4, #12]
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	4298      	cmp	r0, r3
 80036fa:	bfb8      	it	lt
 80036fc:	4618      	movlt	r0, r3
 80036fe:	e7a3      	b.n	8003648 <_printf_i+0x130>
 8003700:	2301      	movs	r3, #1
 8003702:	464a      	mov	r2, r9
 8003704:	4639      	mov	r1, r7
 8003706:	4630      	mov	r0, r6
 8003708:	47c0      	blx	r8
 800370a:	3001      	adds	r0, #1
 800370c:	d09a      	beq.n	8003644 <_printf_i+0x12c>
 800370e:	3501      	adds	r5, #1
 8003710:	68e3      	ldr	r3, [r4, #12]
 8003712:	9a03      	ldr	r2, [sp, #12]
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	42ab      	cmp	r3, r5
 8003718:	dcf2      	bgt.n	8003700 <_printf_i+0x1e8>
 800371a:	e7eb      	b.n	80036f4 <_printf_i+0x1dc>
 800371c:	2500      	movs	r5, #0
 800371e:	f104 0919 	add.w	r9, r4, #25
 8003722:	e7f5      	b.n	8003710 <_printf_i+0x1f8>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1ac      	bne.n	8003682 <_printf_i+0x16a>
 8003728:	7803      	ldrb	r3, [r0, #0]
 800372a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800372e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003732:	e76c      	b.n	800360e <_printf_i+0xf6>
 8003734:	080049cd 	.word	0x080049cd
 8003738:	080049de 	.word	0x080049de

0800373c <__svfiscanf_r>:
 800373c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003740:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003744:	460c      	mov	r4, r1
 8003746:	2100      	movs	r1, #0
 8003748:	9144      	str	r1, [sp, #272]	; 0x110
 800374a:	9145      	str	r1, [sp, #276]	; 0x114
 800374c:	499f      	ldr	r1, [pc, #636]	; (80039cc <__svfiscanf_r+0x290>)
 800374e:	91a0      	str	r1, [sp, #640]	; 0x280
 8003750:	f10d 0804 	add.w	r8, sp, #4
 8003754:	499e      	ldr	r1, [pc, #632]	; (80039d0 <__svfiscanf_r+0x294>)
 8003756:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80039d4 <__svfiscanf_r+0x298>
 800375a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800375e:	4606      	mov	r6, r0
 8003760:	4692      	mov	sl, r2
 8003762:	91a1      	str	r1, [sp, #644]	; 0x284
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	270a      	movs	r7, #10
 8003768:	f89a 3000 	ldrb.w	r3, [sl]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 812a 	beq.w	80039c6 <__svfiscanf_r+0x28a>
 8003772:	4655      	mov	r5, sl
 8003774:	f000 ff3a 	bl	80045ec <__locale_ctype_ptr>
 8003778:	f815 bb01 	ldrb.w	fp, [r5], #1
 800377c:	4458      	add	r0, fp
 800377e:	7843      	ldrb	r3, [r0, #1]
 8003780:	f013 0308 	ands.w	r3, r3, #8
 8003784:	d01c      	beq.n	80037c0 <__svfiscanf_r+0x84>
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	dd12      	ble.n	80037b2 <__svfiscanf_r+0x76>
 800378c:	f000 ff2e 	bl	80045ec <__locale_ctype_ptr>
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	4410      	add	r0, r2
 8003796:	7842      	ldrb	r2, [r0, #1]
 8003798:	0712      	lsls	r2, r2, #28
 800379a:	d401      	bmi.n	80037a0 <__svfiscanf_r+0x64>
 800379c:	46aa      	mov	sl, r5
 800379e:	e7e3      	b.n	8003768 <__svfiscanf_r+0x2c>
 80037a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80037a2:	3201      	adds	r2, #1
 80037a4:	9245      	str	r2, [sp, #276]	; 0x114
 80037a6:	6862      	ldr	r2, [r4, #4]
 80037a8:	3301      	adds	r3, #1
 80037aa:	3a01      	subs	r2, #1
 80037ac:	6062      	str	r2, [r4, #4]
 80037ae:	6023      	str	r3, [r4, #0]
 80037b0:	e7e9      	b.n	8003786 <__svfiscanf_r+0x4a>
 80037b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80037b4:	4621      	mov	r1, r4
 80037b6:	4630      	mov	r0, r6
 80037b8:	4798      	blx	r3
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d0e6      	beq.n	800378c <__svfiscanf_r+0x50>
 80037be:	e7ed      	b.n	800379c <__svfiscanf_r+0x60>
 80037c0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80037c4:	f040 8082 	bne.w	80038cc <__svfiscanf_r+0x190>
 80037c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80037ca:	9341      	str	r3, [sp, #260]	; 0x104
 80037cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80037d0:	2b2a      	cmp	r3, #42	; 0x2a
 80037d2:	d103      	bne.n	80037dc <__svfiscanf_r+0xa0>
 80037d4:	2310      	movs	r3, #16
 80037d6:	9341      	str	r3, [sp, #260]	; 0x104
 80037d8:	f10a 0502 	add.w	r5, sl, #2
 80037dc:	46aa      	mov	sl, r5
 80037de:	f815 1b01 	ldrb.w	r1, [r5], #1
 80037e2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80037e6:	2a09      	cmp	r2, #9
 80037e8:	d922      	bls.n	8003830 <__svfiscanf_r+0xf4>
 80037ea:	2203      	movs	r2, #3
 80037ec:	4879      	ldr	r0, [pc, #484]	; (80039d4 <__svfiscanf_r+0x298>)
 80037ee:	f7fc fcef 	bl	80001d0 <memchr>
 80037f2:	b138      	cbz	r0, 8003804 <__svfiscanf_r+0xc8>
 80037f4:	eba0 0309 	sub.w	r3, r0, r9
 80037f8:	2001      	movs	r0, #1
 80037fa:	4098      	lsls	r0, r3
 80037fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80037fe:	4318      	orrs	r0, r3
 8003800:	9041      	str	r0, [sp, #260]	; 0x104
 8003802:	46aa      	mov	sl, r5
 8003804:	f89a 3000 	ldrb.w	r3, [sl]
 8003808:	2b67      	cmp	r3, #103	; 0x67
 800380a:	f10a 0501 	add.w	r5, sl, #1
 800380e:	d82b      	bhi.n	8003868 <__svfiscanf_r+0x12c>
 8003810:	2b65      	cmp	r3, #101	; 0x65
 8003812:	f080 809f 	bcs.w	8003954 <__svfiscanf_r+0x218>
 8003816:	2b47      	cmp	r3, #71	; 0x47
 8003818:	d810      	bhi.n	800383c <__svfiscanf_r+0x100>
 800381a:	2b45      	cmp	r3, #69	; 0x45
 800381c:	f080 809a 	bcs.w	8003954 <__svfiscanf_r+0x218>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d06c      	beq.n	80038fe <__svfiscanf_r+0x1c2>
 8003824:	2b25      	cmp	r3, #37	; 0x25
 8003826:	d051      	beq.n	80038cc <__svfiscanf_r+0x190>
 8003828:	2303      	movs	r3, #3
 800382a:	9347      	str	r3, [sp, #284]	; 0x11c
 800382c:	9742      	str	r7, [sp, #264]	; 0x108
 800382e:	e027      	b.n	8003880 <__svfiscanf_r+0x144>
 8003830:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003832:	fb07 1303 	mla	r3, r7, r3, r1
 8003836:	3b30      	subs	r3, #48	; 0x30
 8003838:	9343      	str	r3, [sp, #268]	; 0x10c
 800383a:	e7cf      	b.n	80037dc <__svfiscanf_r+0xa0>
 800383c:	2b5b      	cmp	r3, #91	; 0x5b
 800383e:	d06a      	beq.n	8003916 <__svfiscanf_r+0x1da>
 8003840:	d80c      	bhi.n	800385c <__svfiscanf_r+0x120>
 8003842:	2b58      	cmp	r3, #88	; 0x58
 8003844:	d1f0      	bne.n	8003828 <__svfiscanf_r+0xec>
 8003846:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384c:	9241      	str	r2, [sp, #260]	; 0x104
 800384e:	2210      	movs	r2, #16
 8003850:	9242      	str	r2, [sp, #264]	; 0x108
 8003852:	2b6e      	cmp	r3, #110	; 0x6e
 8003854:	bf8c      	ite	hi
 8003856:	2304      	movhi	r3, #4
 8003858:	2303      	movls	r3, #3
 800385a:	e010      	b.n	800387e <__svfiscanf_r+0x142>
 800385c:	2b63      	cmp	r3, #99	; 0x63
 800385e:	d065      	beq.n	800392c <__svfiscanf_r+0x1f0>
 8003860:	2b64      	cmp	r3, #100	; 0x64
 8003862:	d1e1      	bne.n	8003828 <__svfiscanf_r+0xec>
 8003864:	9742      	str	r7, [sp, #264]	; 0x108
 8003866:	e7f4      	b.n	8003852 <__svfiscanf_r+0x116>
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d04b      	beq.n	8003904 <__svfiscanf_r+0x1c8>
 800386c:	d826      	bhi.n	80038bc <__svfiscanf_r+0x180>
 800386e:	2b6e      	cmp	r3, #110	; 0x6e
 8003870:	d062      	beq.n	8003938 <__svfiscanf_r+0x1fc>
 8003872:	d84c      	bhi.n	800390e <__svfiscanf_r+0x1d2>
 8003874:	2b69      	cmp	r3, #105	; 0x69
 8003876:	d1d7      	bne.n	8003828 <__svfiscanf_r+0xec>
 8003878:	2300      	movs	r3, #0
 800387a:	9342      	str	r3, [sp, #264]	; 0x108
 800387c:	2303      	movs	r3, #3
 800387e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003880:	6863      	ldr	r3, [r4, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	dd68      	ble.n	8003958 <__svfiscanf_r+0x21c>
 8003886:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003888:	0659      	lsls	r1, r3, #25
 800388a:	d407      	bmi.n	800389c <__svfiscanf_r+0x160>
 800388c:	f000 feae 	bl	80045ec <__locale_ctype_ptr>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	4410      	add	r0, r2
 8003896:	7842      	ldrb	r2, [r0, #1]
 8003898:	0712      	lsls	r2, r2, #28
 800389a:	d464      	bmi.n	8003966 <__svfiscanf_r+0x22a>
 800389c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800389e:	2b02      	cmp	r3, #2
 80038a0:	dc73      	bgt.n	800398a <__svfiscanf_r+0x24e>
 80038a2:	466b      	mov	r3, sp
 80038a4:	4622      	mov	r2, r4
 80038a6:	a941      	add	r1, sp, #260	; 0x104
 80038a8:	4630      	mov	r0, r6
 80038aa:	f000 f8bf 	bl	8003a2c <_scanf_chars>
 80038ae:	2801      	cmp	r0, #1
 80038b0:	f000 8089 	beq.w	80039c6 <__svfiscanf_r+0x28a>
 80038b4:	2802      	cmp	r0, #2
 80038b6:	f47f af71 	bne.w	800379c <__svfiscanf_r+0x60>
 80038ba:	e01d      	b.n	80038f8 <__svfiscanf_r+0x1bc>
 80038bc:	2b75      	cmp	r3, #117	; 0x75
 80038be:	d0d1      	beq.n	8003864 <__svfiscanf_r+0x128>
 80038c0:	2b78      	cmp	r3, #120	; 0x78
 80038c2:	d0c0      	beq.n	8003846 <__svfiscanf_r+0x10a>
 80038c4:	2b73      	cmp	r3, #115	; 0x73
 80038c6:	d1af      	bne.n	8003828 <__svfiscanf_r+0xec>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e7d8      	b.n	800387e <__svfiscanf_r+0x142>
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	dd0c      	ble.n	80038ec <__svfiscanf_r+0x1b0>
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	455a      	cmp	r2, fp
 80038d8:	d175      	bne.n	80039c6 <__svfiscanf_r+0x28a>
 80038da:	3301      	adds	r3, #1
 80038dc:	6862      	ldr	r2, [r4, #4]
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80038e2:	3a01      	subs	r2, #1
 80038e4:	3301      	adds	r3, #1
 80038e6:	6062      	str	r2, [r4, #4]
 80038e8:	9345      	str	r3, [sp, #276]	; 0x114
 80038ea:	e757      	b.n	800379c <__svfiscanf_r+0x60>
 80038ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80038ee:	4621      	mov	r1, r4
 80038f0:	4630      	mov	r0, r6
 80038f2:	4798      	blx	r3
 80038f4:	2800      	cmp	r0, #0
 80038f6:	d0ec      	beq.n	80038d2 <__svfiscanf_r+0x196>
 80038f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d159      	bne.n	80039b2 <__svfiscanf_r+0x276>
 80038fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003902:	e05c      	b.n	80039be <__svfiscanf_r+0x282>
 8003904:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003906:	f042 0220 	orr.w	r2, r2, #32
 800390a:	9241      	str	r2, [sp, #260]	; 0x104
 800390c:	e79b      	b.n	8003846 <__svfiscanf_r+0x10a>
 800390e:	2308      	movs	r3, #8
 8003910:	9342      	str	r3, [sp, #264]	; 0x108
 8003912:	2304      	movs	r3, #4
 8003914:	e7b3      	b.n	800387e <__svfiscanf_r+0x142>
 8003916:	4629      	mov	r1, r5
 8003918:	4640      	mov	r0, r8
 800391a:	f000 fa85 	bl	8003e28 <__sccl>
 800391e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003924:	9341      	str	r3, [sp, #260]	; 0x104
 8003926:	4605      	mov	r5, r0
 8003928:	2301      	movs	r3, #1
 800392a:	e7a8      	b.n	800387e <__svfiscanf_r+0x142>
 800392c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800392e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003932:	9341      	str	r3, [sp, #260]	; 0x104
 8003934:	2300      	movs	r3, #0
 8003936:	e7a2      	b.n	800387e <__svfiscanf_r+0x142>
 8003938:	9841      	ldr	r0, [sp, #260]	; 0x104
 800393a:	06c3      	lsls	r3, r0, #27
 800393c:	f53f af2e 	bmi.w	800379c <__svfiscanf_r+0x60>
 8003940:	9b00      	ldr	r3, [sp, #0]
 8003942:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003944:	1d19      	adds	r1, r3, #4
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	07c0      	lsls	r0, r0, #31
 800394c:	bf4c      	ite	mi
 800394e:	801a      	strhmi	r2, [r3, #0]
 8003950:	601a      	strpl	r2, [r3, #0]
 8003952:	e723      	b.n	800379c <__svfiscanf_r+0x60>
 8003954:	2305      	movs	r3, #5
 8003956:	e792      	b.n	800387e <__svfiscanf_r+0x142>
 8003958:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800395a:	4621      	mov	r1, r4
 800395c:	4630      	mov	r0, r6
 800395e:	4798      	blx	r3
 8003960:	2800      	cmp	r0, #0
 8003962:	d090      	beq.n	8003886 <__svfiscanf_r+0x14a>
 8003964:	e7c8      	b.n	80038f8 <__svfiscanf_r+0x1bc>
 8003966:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003968:	3201      	adds	r2, #1
 800396a:	9245      	str	r2, [sp, #276]	; 0x114
 800396c:	6862      	ldr	r2, [r4, #4]
 800396e:	3a01      	subs	r2, #1
 8003970:	2a00      	cmp	r2, #0
 8003972:	6062      	str	r2, [r4, #4]
 8003974:	dd02      	ble.n	800397c <__svfiscanf_r+0x240>
 8003976:	3301      	adds	r3, #1
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	e787      	b.n	800388c <__svfiscanf_r+0x150>
 800397c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800397e:	4621      	mov	r1, r4
 8003980:	4630      	mov	r0, r6
 8003982:	4798      	blx	r3
 8003984:	2800      	cmp	r0, #0
 8003986:	d081      	beq.n	800388c <__svfiscanf_r+0x150>
 8003988:	e7b6      	b.n	80038f8 <__svfiscanf_r+0x1bc>
 800398a:	2b04      	cmp	r3, #4
 800398c:	dc06      	bgt.n	800399c <__svfiscanf_r+0x260>
 800398e:	466b      	mov	r3, sp
 8003990:	4622      	mov	r2, r4
 8003992:	a941      	add	r1, sp, #260	; 0x104
 8003994:	4630      	mov	r0, r6
 8003996:	f000 f8ad 	bl	8003af4 <_scanf_i>
 800399a:	e788      	b.n	80038ae <__svfiscanf_r+0x172>
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <__svfiscanf_r+0x29c>)
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f43f aefc 	beq.w	800379c <__svfiscanf_r+0x60>
 80039a4:	466b      	mov	r3, sp
 80039a6:	4622      	mov	r2, r4
 80039a8:	a941      	add	r1, sp, #260	; 0x104
 80039aa:	4630      	mov	r0, r6
 80039ac:	f3af 8000 	nop.w
 80039b0:	e77d      	b.n	80038ae <__svfiscanf_r+0x172>
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039b8:	bf18      	it	ne
 80039ba:	f04f 30ff 	movne.w	r0, #4294967295
 80039be:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80039c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80039c8:	e7f9      	b.n	80039be <__svfiscanf_r+0x282>
 80039ca:	bf00      	nop
 80039cc:	080041b9 	.word	0x080041b9
 80039d0:	08003cf1 	.word	0x08003cf1
 80039d4:	080049c2 	.word	0x080049c2
 80039d8:	00000000 	.word	0x00000000

080039dc <_vfiscanf_r>:
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e0:	460c      	mov	r4, r1
 80039e2:	4616      	mov	r6, r2
 80039e4:	461f      	mov	r7, r3
 80039e6:	4605      	mov	r5, r0
 80039e8:	b118      	cbz	r0, 80039f2 <_vfiscanf_r+0x16>
 80039ea:	6983      	ldr	r3, [r0, #24]
 80039ec:	b90b      	cbnz	r3, 80039f2 <_vfiscanf_r+0x16>
 80039ee:	f7ff fadd 	bl	8002fac <__sinit>
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <_vfiscanf_r+0x44>)
 80039f4:	429c      	cmp	r4, r3
 80039f6:	d108      	bne.n	8003a0a <_vfiscanf_r+0x2e>
 80039f8:	686c      	ldr	r4, [r5, #4]
 80039fa:	463b      	mov	r3, r7
 80039fc:	4632      	mov	r2, r6
 80039fe:	4621      	mov	r1, r4
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	f7ff be99 	b.w	800373c <__svfiscanf_r>
 8003a0a:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <_vfiscanf_r+0x48>)
 8003a0c:	429c      	cmp	r4, r3
 8003a0e:	d101      	bne.n	8003a14 <_vfiscanf_r+0x38>
 8003a10:	68ac      	ldr	r4, [r5, #8]
 8003a12:	e7f2      	b.n	80039fa <_vfiscanf_r+0x1e>
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <_vfiscanf_r+0x4c>)
 8003a16:	429c      	cmp	r4, r3
 8003a18:	bf08      	it	eq
 8003a1a:	68ec      	ldreq	r4, [r5, #12]
 8003a1c:	e7ed      	b.n	80039fa <_vfiscanf_r+0x1e>
 8003a1e:	bf00      	nop
 8003a20:	0800497c 	.word	0x0800497c
 8003a24:	0800499c 	.word	0x0800499c
 8003a28:	0800495c 	.word	0x0800495c

08003a2c <_scanf_chars>:
 8003a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a30:	4615      	mov	r5, r2
 8003a32:	688a      	ldr	r2, [r1, #8]
 8003a34:	4680      	mov	r8, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	b932      	cbnz	r2, 8003a48 <_scanf_chars+0x1c>
 8003a3a:	698a      	ldr	r2, [r1, #24]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	f04f 32ff 	movne.w	r2, #4294967295
 8003a44:	2201      	moveq	r2, #1
 8003a46:	608a      	str	r2, [r1, #8]
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	06d1      	lsls	r1, r2, #27
 8003a4c:	bf5f      	itttt	pl
 8003a4e:	681a      	ldrpl	r2, [r3, #0]
 8003a50:	1d11      	addpl	r1, r2, #4
 8003a52:	6019      	strpl	r1, [r3, #0]
 8003a54:	6817      	ldrpl	r7, [r2, #0]
 8003a56:	2600      	movs	r6, #0
 8003a58:	69a3      	ldr	r3, [r4, #24]
 8003a5a:	b1db      	cbz	r3, 8003a94 <_scanf_chars+0x68>
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d107      	bne.n	8003a70 <_scanf_chars+0x44>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	6962      	ldr	r2, [r4, #20]
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	5cd3      	ldrb	r3, [r2, r3]
 8003a68:	b9a3      	cbnz	r3, 8003a94 <_scanf_chars+0x68>
 8003a6a:	2e00      	cmp	r6, #0
 8003a6c:	d132      	bne.n	8003ad4 <_scanf_chars+0xa8>
 8003a6e:	e006      	b.n	8003a7e <_scanf_chars+0x52>
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d007      	beq.n	8003a84 <_scanf_chars+0x58>
 8003a74:	2e00      	cmp	r6, #0
 8003a76:	d12d      	bne.n	8003ad4 <_scanf_chars+0xa8>
 8003a78:	69a3      	ldr	r3, [r4, #24]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d12a      	bne.n	8003ad4 <_scanf_chars+0xa8>
 8003a7e:	2001      	movs	r0, #1
 8003a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a84:	f000 fdb2 	bl	80045ec <__locale_ctype_ptr>
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4418      	add	r0, r3
 8003a8e:	7843      	ldrb	r3, [r0, #1]
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	d4ef      	bmi.n	8003a74 <_scanf_chars+0x48>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	06da      	lsls	r2, r3, #27
 8003a98:	bf5e      	ittt	pl
 8003a9a:	682b      	ldrpl	r3, [r5, #0]
 8003a9c:	781b      	ldrbpl	r3, [r3, #0]
 8003a9e:	703b      	strbpl	r3, [r7, #0]
 8003aa0:	682a      	ldr	r2, [r5, #0]
 8003aa2:	686b      	ldr	r3, [r5, #4]
 8003aa4:	f102 0201 	add.w	r2, r2, #1
 8003aa8:	602a      	str	r2, [r5, #0]
 8003aaa:	68a2      	ldr	r2, [r4, #8]
 8003aac:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ab0:	f102 32ff 	add.w	r2, r2, #4294967295
 8003ab4:	606b      	str	r3, [r5, #4]
 8003ab6:	f106 0601 	add.w	r6, r6, #1
 8003aba:	bf58      	it	pl
 8003abc:	3701      	addpl	r7, #1
 8003abe:	60a2      	str	r2, [r4, #8]
 8003ac0:	b142      	cbz	r2, 8003ad4 <_scanf_chars+0xa8>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	dcc8      	bgt.n	8003a58 <_scanf_chars+0x2c>
 8003ac6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003aca:	4629      	mov	r1, r5
 8003acc:	4640      	mov	r0, r8
 8003ace:	4798      	blx	r3
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	d0c1      	beq.n	8003a58 <_scanf_chars+0x2c>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	f013 0310 	ands.w	r3, r3, #16
 8003ada:	d105      	bne.n	8003ae8 <_scanf_chars+0xbc>
 8003adc:	68e2      	ldr	r2, [r4, #12]
 8003ade:	3201      	adds	r2, #1
 8003ae0:	60e2      	str	r2, [r4, #12]
 8003ae2:	69a2      	ldr	r2, [r4, #24]
 8003ae4:	b102      	cbz	r2, 8003ae8 <_scanf_chars+0xbc>
 8003ae6:	703b      	strb	r3, [r7, #0]
 8003ae8:	6923      	ldr	r3, [r4, #16]
 8003aea:	441e      	add	r6, r3
 8003aec:	6126      	str	r6, [r4, #16]
 8003aee:	2000      	movs	r0, #0
 8003af0:	e7c6      	b.n	8003a80 <_scanf_chars+0x54>
	...

08003af4 <_scanf_i>:
 8003af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af8:	469a      	mov	sl, r3
 8003afa:	4b74      	ldr	r3, [pc, #464]	; (8003ccc <_scanf_i+0x1d8>)
 8003afc:	460c      	mov	r4, r1
 8003afe:	4683      	mov	fp, r0
 8003b00:	4616      	mov	r6, r2
 8003b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b06:	b087      	sub	sp, #28
 8003b08:	ab03      	add	r3, sp, #12
 8003b0a:	68a7      	ldr	r7, [r4, #8]
 8003b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003b10:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <_scanf_i+0x1dc>)
 8003b12:	69a1      	ldr	r1, [r4, #24]
 8003b14:	4a6f      	ldr	r2, [pc, #444]	; (8003cd4 <_scanf_i+0x1e0>)
 8003b16:	2903      	cmp	r1, #3
 8003b18:	bf08      	it	eq
 8003b1a:	461a      	moveq	r2, r3
 8003b1c:	1e7b      	subs	r3, r7, #1
 8003b1e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003b22:	bf84      	itt	hi
 8003b24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003b28:	60a3      	strhi	r3, [r4, #8]
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	9200      	str	r2, [sp, #0]
 8003b2e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003b32:	bf88      	it	hi
 8003b34:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003b38:	f104 091c 	add.w	r9, r4, #28
 8003b3c:	6023      	str	r3, [r4, #0]
 8003b3e:	bf8c      	ite	hi
 8003b40:	197f      	addhi	r7, r7, r5
 8003b42:	2700      	movls	r7, #0
 8003b44:	464b      	mov	r3, r9
 8003b46:	f04f 0800 	mov.w	r8, #0
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	6831      	ldr	r1, [r6, #0]
 8003b4e:	ab03      	add	r3, sp, #12
 8003b50:	2202      	movs	r2, #2
 8003b52:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003b56:	7809      	ldrb	r1, [r1, #0]
 8003b58:	f7fc fb3a 	bl	80001d0 <memchr>
 8003b5c:	9b01      	ldr	r3, [sp, #4]
 8003b5e:	b330      	cbz	r0, 8003bae <_scanf_i+0xba>
 8003b60:	f1b8 0f01 	cmp.w	r8, #1
 8003b64:	d15a      	bne.n	8003c1c <_scanf_i+0x128>
 8003b66:	6862      	ldr	r2, [r4, #4]
 8003b68:	b92a      	cbnz	r2, 8003b76 <_scanf_i+0x82>
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	2108      	movs	r1, #8
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	6061      	str	r1, [r4, #4]
 8003b74:	6022      	str	r2, [r4, #0]
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003b7c:	6022      	str	r2, [r4, #0]
 8003b7e:	68a2      	ldr	r2, [r4, #8]
 8003b80:	1e51      	subs	r1, r2, #1
 8003b82:	60a1      	str	r1, [r4, #8]
 8003b84:	b19a      	cbz	r2, 8003bae <_scanf_i+0xba>
 8003b86:	6832      	ldr	r2, [r6, #0]
 8003b88:	1c51      	adds	r1, r2, #1
 8003b8a:	6031      	str	r1, [r6, #0]
 8003b8c:	7812      	ldrb	r2, [r2, #0]
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	1c5d      	adds	r5, r3, #1
 8003b92:	6873      	ldr	r3, [r6, #4]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	6073      	str	r3, [r6, #4]
 8003b9a:	dc07      	bgt.n	8003bac <_scanf_i+0xb8>
 8003b9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ba0:	4631      	mov	r1, r6
 8003ba2:	4658      	mov	r0, fp
 8003ba4:	4798      	blx	r3
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	f040 8086 	bne.w	8003cb8 <_scanf_i+0x1c4>
 8003bac:	462b      	mov	r3, r5
 8003bae:	f108 0801 	add.w	r8, r8, #1
 8003bb2:	f1b8 0f03 	cmp.w	r8, #3
 8003bb6:	d1c8      	bne.n	8003b4a <_scanf_i+0x56>
 8003bb8:	6862      	ldr	r2, [r4, #4]
 8003bba:	b90a      	cbnz	r2, 8003bc0 <_scanf_i+0xcc>
 8003bbc:	220a      	movs	r2, #10
 8003bbe:	6062      	str	r2, [r4, #4]
 8003bc0:	6862      	ldr	r2, [r4, #4]
 8003bc2:	4945      	ldr	r1, [pc, #276]	; (8003cd8 <_scanf_i+0x1e4>)
 8003bc4:	6960      	ldr	r0, [r4, #20]
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	1a89      	subs	r1, r1, r2
 8003bca:	f000 f92d 	bl	8003e28 <__sccl>
 8003bce:	9b01      	ldr	r3, [sp, #4]
 8003bd0:	f04f 0800 	mov.w	r8, #0
 8003bd4:	461d      	mov	r5, r3
 8003bd6:	68a3      	ldr	r3, [r4, #8]
 8003bd8:	6822      	ldr	r2, [r4, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d03a      	beq.n	8003c54 <_scanf_i+0x160>
 8003bde:	6831      	ldr	r1, [r6, #0]
 8003be0:	6960      	ldr	r0, [r4, #20]
 8003be2:	f891 c000 	ldrb.w	ip, [r1]
 8003be6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d032      	beq.n	8003c54 <_scanf_i+0x160>
 8003bee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8003bf2:	d121      	bne.n	8003c38 <_scanf_i+0x144>
 8003bf4:	0510      	lsls	r0, r2, #20
 8003bf6:	d51f      	bpl.n	8003c38 <_scanf_i+0x144>
 8003bf8:	f108 0801 	add.w	r8, r8, #1
 8003bfc:	b117      	cbz	r7, 8003c04 <_scanf_i+0x110>
 8003bfe:	3301      	adds	r3, #1
 8003c00:	3f01      	subs	r7, #1
 8003c02:	60a3      	str	r3, [r4, #8]
 8003c04:	6873      	ldr	r3, [r6, #4]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	6073      	str	r3, [r6, #4]
 8003c0c:	dd1b      	ble.n	8003c46 <_scanf_i+0x152>
 8003c0e:	6833      	ldr	r3, [r6, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	6033      	str	r3, [r6, #0]
 8003c14:	68a3      	ldr	r3, [r4, #8]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	60a3      	str	r3, [r4, #8]
 8003c1a:	e7dc      	b.n	8003bd6 <_scanf_i+0xe2>
 8003c1c:	f1b8 0f02 	cmp.w	r8, #2
 8003c20:	d1ad      	bne.n	8003b7e <_scanf_i+0x8a>
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003c28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003c2c:	d1bf      	bne.n	8003bae <_scanf_i+0xba>
 8003c2e:	2110      	movs	r1, #16
 8003c30:	6061      	str	r1, [r4, #4]
 8003c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c36:	e7a1      	b.n	8003b7c <_scanf_i+0x88>
 8003c38:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003c3c:	6022      	str	r2, [r4, #0]
 8003c3e:	780b      	ldrb	r3, [r1, #0]
 8003c40:	702b      	strb	r3, [r5, #0]
 8003c42:	3501      	adds	r5, #1
 8003c44:	e7de      	b.n	8003c04 <_scanf_i+0x110>
 8003c46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4658      	mov	r0, fp
 8003c4e:	4798      	blx	r3
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d0df      	beq.n	8003c14 <_scanf_i+0x120>
 8003c54:	6823      	ldr	r3, [r4, #0]
 8003c56:	05d9      	lsls	r1, r3, #23
 8003c58:	d50c      	bpl.n	8003c74 <_scanf_i+0x180>
 8003c5a:	454d      	cmp	r5, r9
 8003c5c:	d908      	bls.n	8003c70 <_scanf_i+0x17c>
 8003c5e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c66:	4632      	mov	r2, r6
 8003c68:	4658      	mov	r0, fp
 8003c6a:	4798      	blx	r3
 8003c6c:	1e6f      	subs	r7, r5, #1
 8003c6e:	463d      	mov	r5, r7
 8003c70:	454d      	cmp	r5, r9
 8003c72:	d029      	beq.n	8003cc8 <_scanf_i+0x1d4>
 8003c74:	6822      	ldr	r2, [r4, #0]
 8003c76:	f012 0210 	ands.w	r2, r2, #16
 8003c7a:	d113      	bne.n	8003ca4 <_scanf_i+0x1b0>
 8003c7c:	702a      	strb	r2, [r5, #0]
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	9e00      	ldr	r6, [sp, #0]
 8003c82:	4649      	mov	r1, r9
 8003c84:	4658      	mov	r0, fp
 8003c86:	47b0      	blx	r6
 8003c88:	f8da 3000 	ldr.w	r3, [sl]
 8003c8c:	6821      	ldr	r1, [r4, #0]
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	f8ca 2000 	str.w	r2, [sl]
 8003c94:	f011 0f20 	tst.w	r1, #32
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	d010      	beq.n	8003cbe <_scanf_i+0x1ca>
 8003c9c:	6018      	str	r0, [r3, #0]
 8003c9e:	68e3      	ldr	r3, [r4, #12]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	60e3      	str	r3, [r4, #12]
 8003ca4:	eba5 0509 	sub.w	r5, r5, r9
 8003ca8:	44a8      	add	r8, r5
 8003caa:	6925      	ldr	r5, [r4, #16]
 8003cac:	4445      	add	r5, r8
 8003cae:	6125      	str	r5, [r4, #16]
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	b007      	add	sp, #28
 8003cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb8:	f04f 0800 	mov.w	r8, #0
 8003cbc:	e7ca      	b.n	8003c54 <_scanf_i+0x160>
 8003cbe:	07ca      	lsls	r2, r1, #31
 8003cc0:	bf4c      	ite	mi
 8003cc2:	8018      	strhmi	r0, [r3, #0]
 8003cc4:	6018      	strpl	r0, [r3, #0]
 8003cc6:	e7ea      	b.n	8003c9e <_scanf_i+0x1aa>
 8003cc8:	2001      	movs	r0, #1
 8003cca:	e7f2      	b.n	8003cb2 <_scanf_i+0x1be>
 8003ccc:	08004904 	.word	0x08004904
 8003cd0:	08004009 	.word	0x08004009
 8003cd4:	08004121 	.word	0x08004121
 8003cd8:	080049ff 	.word	0x080049ff

08003cdc <lflush>:
 8003cdc:	8983      	ldrh	r3, [r0, #12]
 8003cde:	f003 0309 	and.w	r3, r3, #9
 8003ce2:	2b09      	cmp	r3, #9
 8003ce4:	d101      	bne.n	8003cea <lflush+0xe>
 8003ce6:	f000 bc6b 	b.w	80045c0 <fflush>
 8003cea:	2000      	movs	r0, #0
 8003cec:	4770      	bx	lr
	...

08003cf0 <__srefill_r>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	b118      	cbz	r0, 8003d00 <__srefill_r+0x10>
 8003cf8:	6983      	ldr	r3, [r0, #24]
 8003cfa:	b90b      	cbnz	r3, 8003d00 <__srefill_r+0x10>
 8003cfc:	f7ff f956 	bl	8002fac <__sinit>
 8003d00:	4b3c      	ldr	r3, [pc, #240]	; (8003df4 <__srefill_r+0x104>)
 8003d02:	429c      	cmp	r4, r3
 8003d04:	d10a      	bne.n	8003d1c <__srefill_r+0x2c>
 8003d06:	686c      	ldr	r4, [r5, #4]
 8003d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	6063      	str	r3, [r4, #4]
 8003d10:	b293      	uxth	r3, r2
 8003d12:	069e      	lsls	r6, r3, #26
 8003d14:	d50c      	bpl.n	8003d30 <__srefill_r+0x40>
 8003d16:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1a:	e067      	b.n	8003dec <__srefill_r+0xfc>
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <__srefill_r+0x108>)
 8003d1e:	429c      	cmp	r4, r3
 8003d20:	d101      	bne.n	8003d26 <__srefill_r+0x36>
 8003d22:	68ac      	ldr	r4, [r5, #8]
 8003d24:	e7f0      	b.n	8003d08 <__srefill_r+0x18>
 8003d26:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <__srefill_r+0x10c>)
 8003d28:	429c      	cmp	r4, r3
 8003d2a:	bf08      	it	eq
 8003d2c:	68ec      	ldreq	r4, [r5, #12]
 8003d2e:	e7eb      	b.n	8003d08 <__srefill_r+0x18>
 8003d30:	0758      	lsls	r0, r3, #29
 8003d32:	d449      	bmi.n	8003dc8 <__srefill_r+0xd8>
 8003d34:	06d9      	lsls	r1, r3, #27
 8003d36:	d405      	bmi.n	8003d44 <__srefill_r+0x54>
 8003d38:	2309      	movs	r3, #9
 8003d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3e:	602b      	str	r3, [r5, #0]
 8003d40:	81a2      	strh	r2, [r4, #12]
 8003d42:	e7e8      	b.n	8003d16 <__srefill_r+0x26>
 8003d44:	071a      	lsls	r2, r3, #28
 8003d46:	d50b      	bpl.n	8003d60 <__srefill_r+0x70>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 fc0e 	bl	800456c <_fflush_r>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	d1e0      	bne.n	8003d16 <__srefill_r+0x26>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	60a0      	str	r0, [r4, #8]
 8003d58:	f023 0308 	bic.w	r3, r3, #8
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	61a0      	str	r0, [r4, #24]
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	81a3      	strh	r3, [r4, #12]
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	b91b      	cbnz	r3, 8003d74 <__srefill_r+0x84>
 8003d6c:	4621      	mov	r1, r4
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f000 fc80 	bl	8004674 <__smakebuf_r>
 8003d74:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003d78:	b2be      	uxth	r6, r7
 8003d7a:	07b3      	lsls	r3, r6, #30
 8003d7c:	d00f      	beq.n	8003d9e <__srefill_r+0xae>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	81a3      	strh	r3, [r4, #12]
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <__srefill_r+0x110>)
 8003d84:	491f      	ldr	r1, [pc, #124]	; (8003e04 <__srefill_r+0x114>)
 8003d86:	6818      	ldr	r0, [r3, #0]
 8003d88:	f006 0609 	and.w	r6, r6, #9
 8003d8c:	f7ff f97a 	bl	8003084 <_fwalk>
 8003d90:	2e09      	cmp	r6, #9
 8003d92:	81a7      	strh	r7, [r4, #12]
 8003d94:	d103      	bne.n	8003d9e <__srefill_r+0xae>
 8003d96:	4621      	mov	r1, r4
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f000 fb61 	bl	8004460 <__sflush_r>
 8003d9e:	6922      	ldr	r2, [r4, #16]
 8003da0:	6022      	str	r2, [r4, #0]
 8003da2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003da4:	6963      	ldr	r3, [r4, #20]
 8003da6:	6a21      	ldr	r1, [r4, #32]
 8003da8:	4628      	mov	r0, r5
 8003daa:	47b0      	blx	r6
 8003dac:	2800      	cmp	r0, #0
 8003dae:	6060      	str	r0, [r4, #4]
 8003db0:	dc1d      	bgt.n	8003dee <__srefill_r+0xfe>
 8003db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db6:	bf17      	itett	ne
 8003db8:	2200      	movne	r2, #0
 8003dba:	f043 0320 	orreq.w	r3, r3, #32
 8003dbe:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003dc2:	6062      	strne	r2, [r4, #4]
 8003dc4:	81a3      	strh	r3, [r4, #12]
 8003dc6:	e7a6      	b.n	8003d16 <__srefill_r+0x26>
 8003dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dca:	2900      	cmp	r1, #0
 8003dcc:	d0cc      	beq.n	8003d68 <__srefill_r+0x78>
 8003dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	d002      	beq.n	8003ddc <__srefill_r+0xec>
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f000 fcac 	bl	8004734 <_free_r>
 8003ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003dde:	6063      	str	r3, [r4, #4]
 8003de0:	2000      	movs	r0, #0
 8003de2:	6360      	str	r0, [r4, #52]	; 0x34
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0bf      	beq.n	8003d68 <__srefill_r+0x78>
 8003de8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dee:	2000      	movs	r0, #0
 8003df0:	e7fc      	b.n	8003dec <__srefill_r+0xfc>
 8003df2:	bf00      	nop
 8003df4:	0800497c 	.word	0x0800497c
 8003df8:	0800499c 	.word	0x0800499c
 8003dfc:	0800495c 	.word	0x0800495c
 8003e00:	08004958 	.word	0x08004958
 8003e04:	08003cdd 	.word	0x08003cdd

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4c06      	ldr	r4, [pc, #24]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4605      	mov	r5, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	6023      	str	r3, [r4, #0]
 8003e14:	f7fc fdea 	bl	80009ec <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	602b      	str	r3, [r5, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000288 	.word	0x20000288

08003e28 <__sccl>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	780b      	ldrb	r3, [r1, #0]
 8003e2c:	2b5e      	cmp	r3, #94	; 0x5e
 8003e2e:	bf13      	iteet	ne
 8003e30:	1c4a      	addne	r2, r1, #1
 8003e32:	1c8a      	addeq	r2, r1, #2
 8003e34:	784b      	ldrbeq	r3, [r1, #1]
 8003e36:	2100      	movne	r1, #0
 8003e38:	bf08      	it	eq
 8003e3a:	2101      	moveq	r1, #1
 8003e3c:	1e44      	subs	r4, r0, #1
 8003e3e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8003e42:	f804 1f01 	strb.w	r1, [r4, #1]!
 8003e46:	42ac      	cmp	r4, r5
 8003e48:	d1fb      	bne.n	8003e42 <__sccl+0x1a>
 8003e4a:	b913      	cbnz	r3, 8003e52 <__sccl+0x2a>
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	4610      	mov	r0, r2
 8003e50:	bd70      	pop	{r4, r5, r6, pc}
 8003e52:	f081 0401 	eor.w	r4, r1, #1
 8003e56:	54c4      	strb	r4, [r0, r3]
 8003e58:	1c51      	adds	r1, r2, #1
 8003e5a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8003e5e:	2d2d      	cmp	r5, #45	; 0x2d
 8003e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8003e64:	460a      	mov	r2, r1
 8003e66:	d006      	beq.n	8003e76 <__sccl+0x4e>
 8003e68:	2d5d      	cmp	r5, #93	; 0x5d
 8003e6a:	d0f0      	beq.n	8003e4e <__sccl+0x26>
 8003e6c:	b90d      	cbnz	r5, 8003e72 <__sccl+0x4a>
 8003e6e:	4632      	mov	r2, r6
 8003e70:	e7ed      	b.n	8003e4e <__sccl+0x26>
 8003e72:	462b      	mov	r3, r5
 8003e74:	e7ef      	b.n	8003e56 <__sccl+0x2e>
 8003e76:	780e      	ldrb	r6, [r1, #0]
 8003e78:	2e5d      	cmp	r6, #93	; 0x5d
 8003e7a:	d0fa      	beq.n	8003e72 <__sccl+0x4a>
 8003e7c:	42b3      	cmp	r3, r6
 8003e7e:	dcf8      	bgt.n	8003e72 <__sccl+0x4a>
 8003e80:	3301      	adds	r3, #1
 8003e82:	429e      	cmp	r6, r3
 8003e84:	54c4      	strb	r4, [r0, r3]
 8003e86:	dcfb      	bgt.n	8003e80 <__sccl+0x58>
 8003e88:	3102      	adds	r1, #2
 8003e8a:	e7e6      	b.n	8003e5a <__sccl+0x32>

08003e8c <__sread>:
 8003e8c:	b510      	push	{r4, lr}
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e94:	f000 fcc2 	bl	800481c <_read_r>
 8003e98:	2800      	cmp	r0, #0
 8003e9a:	bfab      	itete	ge
 8003e9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e9e:	89a3      	ldrhlt	r3, [r4, #12]
 8003ea0:	181b      	addge	r3, r3, r0
 8003ea2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ea6:	bfac      	ite	ge
 8003ea8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003eaa:	81a3      	strhlt	r3, [r4, #12]
 8003eac:	bd10      	pop	{r4, pc}

08003eae <__swrite>:
 8003eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eb2:	461f      	mov	r7, r3
 8003eb4:	898b      	ldrh	r3, [r1, #12]
 8003eb6:	05db      	lsls	r3, r3, #23
 8003eb8:	4605      	mov	r5, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	d505      	bpl.n	8003ecc <__swrite+0x1e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec8:	f000 fb9e 	bl	8004608 <_lseek_r>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	4632      	mov	r2, r6
 8003eda:	463b      	mov	r3, r7
 8003edc:	4628      	mov	r0, r5
 8003ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee2:	f000 ba2d 	b.w	8004340 <_write_r>

08003ee6 <__sseek>:
 8003ee6:	b510      	push	{r4, lr}
 8003ee8:	460c      	mov	r4, r1
 8003eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eee:	f000 fb8b 	bl	8004608 <_lseek_r>
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	bf15      	itete	ne
 8003ef8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003efa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003efe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f02:	81a3      	strheq	r3, [r4, #12]
 8003f04:	bf18      	it	ne
 8003f06:	81a3      	strhne	r3, [r4, #12]
 8003f08:	bd10      	pop	{r4, pc}

08003f0a <__sclose>:
 8003f0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f0e:	f000 ba97 	b.w	8004440 <_close_r>

08003f12 <_strtol_l.isra.0>:
 8003f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f16:	4680      	mov	r8, r0
 8003f18:	4689      	mov	r9, r1
 8003f1a:	4692      	mov	sl, r2
 8003f1c:	461e      	mov	r6, r3
 8003f1e:	460f      	mov	r7, r1
 8003f20:	463d      	mov	r5, r7
 8003f22:	9808      	ldr	r0, [sp, #32]
 8003f24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f28:	f000 fb5c 	bl	80045e4 <__locale_ctype_ptr_l>
 8003f2c:	4420      	add	r0, r4
 8003f2e:	7843      	ldrb	r3, [r0, #1]
 8003f30:	f013 0308 	ands.w	r3, r3, #8
 8003f34:	d132      	bne.n	8003f9c <_strtol_l.isra.0+0x8a>
 8003f36:	2c2d      	cmp	r4, #45	; 0x2d
 8003f38:	d132      	bne.n	8003fa0 <_strtol_l.isra.0+0x8e>
 8003f3a:	787c      	ldrb	r4, [r7, #1]
 8003f3c:	1cbd      	adds	r5, r7, #2
 8003f3e:	2201      	movs	r2, #1
 8003f40:	2e00      	cmp	r6, #0
 8003f42:	d05d      	beq.n	8004000 <_strtol_l.isra.0+0xee>
 8003f44:	2e10      	cmp	r6, #16
 8003f46:	d109      	bne.n	8003f5c <_strtol_l.isra.0+0x4a>
 8003f48:	2c30      	cmp	r4, #48	; 0x30
 8003f4a:	d107      	bne.n	8003f5c <_strtol_l.isra.0+0x4a>
 8003f4c:	782b      	ldrb	r3, [r5, #0]
 8003f4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003f52:	2b58      	cmp	r3, #88	; 0x58
 8003f54:	d14f      	bne.n	8003ff6 <_strtol_l.isra.0+0xe4>
 8003f56:	786c      	ldrb	r4, [r5, #1]
 8003f58:	2610      	movs	r6, #16
 8003f5a:	3502      	adds	r5, #2
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	bf14      	ite	ne
 8003f60:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003f64:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003f68:	2700      	movs	r7, #0
 8003f6a:	fbb1 fcf6 	udiv	ip, r1, r6
 8003f6e:	4638      	mov	r0, r7
 8003f70:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003f74:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8003f78:	2b09      	cmp	r3, #9
 8003f7a:	d817      	bhi.n	8003fac <_strtol_l.isra.0+0x9a>
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	dd23      	ble.n	8003fca <_strtol_l.isra.0+0xb8>
 8003f82:	1c7b      	adds	r3, r7, #1
 8003f84:	d007      	beq.n	8003f96 <_strtol_l.isra.0+0x84>
 8003f86:	4584      	cmp	ip, r0
 8003f88:	d31c      	bcc.n	8003fc4 <_strtol_l.isra.0+0xb2>
 8003f8a:	d101      	bne.n	8003f90 <_strtol_l.isra.0+0x7e>
 8003f8c:	45a6      	cmp	lr, r4
 8003f8e:	db19      	blt.n	8003fc4 <_strtol_l.isra.0+0xb2>
 8003f90:	fb00 4006 	mla	r0, r0, r6, r4
 8003f94:	2701      	movs	r7, #1
 8003f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f9a:	e7eb      	b.n	8003f74 <_strtol_l.isra.0+0x62>
 8003f9c:	462f      	mov	r7, r5
 8003f9e:	e7bf      	b.n	8003f20 <_strtol_l.isra.0+0xe>
 8003fa0:	2c2b      	cmp	r4, #43	; 0x2b
 8003fa2:	bf04      	itt	eq
 8003fa4:	1cbd      	addeq	r5, r7, #2
 8003fa6:	787c      	ldrbeq	r4, [r7, #1]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	e7c9      	b.n	8003f40 <_strtol_l.isra.0+0x2e>
 8003fac:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003fb0:	2b19      	cmp	r3, #25
 8003fb2:	d801      	bhi.n	8003fb8 <_strtol_l.isra.0+0xa6>
 8003fb4:	3c37      	subs	r4, #55	; 0x37
 8003fb6:	e7e2      	b.n	8003f7e <_strtol_l.isra.0+0x6c>
 8003fb8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003fbc:	2b19      	cmp	r3, #25
 8003fbe:	d804      	bhi.n	8003fca <_strtol_l.isra.0+0xb8>
 8003fc0:	3c57      	subs	r4, #87	; 0x57
 8003fc2:	e7dc      	b.n	8003f7e <_strtol_l.isra.0+0x6c>
 8003fc4:	f04f 37ff 	mov.w	r7, #4294967295
 8003fc8:	e7e5      	b.n	8003f96 <_strtol_l.isra.0+0x84>
 8003fca:	1c7b      	adds	r3, r7, #1
 8003fcc:	d108      	bne.n	8003fe0 <_strtol_l.isra.0+0xce>
 8003fce:	2322      	movs	r3, #34	; 0x22
 8003fd0:	f8c8 3000 	str.w	r3, [r8]
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	f1ba 0f00 	cmp.w	sl, #0
 8003fda:	d107      	bne.n	8003fec <_strtol_l.isra.0+0xda>
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	b102      	cbz	r2, 8003fe4 <_strtol_l.isra.0+0xd2>
 8003fe2:	4240      	negs	r0, r0
 8003fe4:	f1ba 0f00 	cmp.w	sl, #0
 8003fe8:	d0f8      	beq.n	8003fdc <_strtol_l.isra.0+0xca>
 8003fea:	b10f      	cbz	r7, 8003ff0 <_strtol_l.isra.0+0xde>
 8003fec:	f105 39ff 	add.w	r9, r5, #4294967295
 8003ff0:	f8ca 9000 	str.w	r9, [sl]
 8003ff4:	e7f2      	b.n	8003fdc <_strtol_l.isra.0+0xca>
 8003ff6:	2430      	movs	r4, #48	; 0x30
 8003ff8:	2e00      	cmp	r6, #0
 8003ffa:	d1af      	bne.n	8003f5c <_strtol_l.isra.0+0x4a>
 8003ffc:	2608      	movs	r6, #8
 8003ffe:	e7ad      	b.n	8003f5c <_strtol_l.isra.0+0x4a>
 8004000:	2c30      	cmp	r4, #48	; 0x30
 8004002:	d0a3      	beq.n	8003f4c <_strtol_l.isra.0+0x3a>
 8004004:	260a      	movs	r6, #10
 8004006:	e7a9      	b.n	8003f5c <_strtol_l.isra.0+0x4a>

08004008 <_strtol_r>:
 8004008:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800400a:	4c06      	ldr	r4, [pc, #24]	; (8004024 <_strtol_r+0x1c>)
 800400c:	4d06      	ldr	r5, [pc, #24]	; (8004028 <_strtol_r+0x20>)
 800400e:	6824      	ldr	r4, [r4, #0]
 8004010:	6a24      	ldr	r4, [r4, #32]
 8004012:	2c00      	cmp	r4, #0
 8004014:	bf08      	it	eq
 8004016:	462c      	moveq	r4, r5
 8004018:	9400      	str	r4, [sp, #0]
 800401a:	f7ff ff7a 	bl	8003f12 <_strtol_l.isra.0>
 800401e:	b003      	add	sp, #12
 8004020:	bd30      	pop	{r4, r5, pc}
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c
 8004028:	20000070 	.word	0x20000070

0800402c <_strtoul_l.isra.0>:
 800402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004030:	4680      	mov	r8, r0
 8004032:	4689      	mov	r9, r1
 8004034:	4692      	mov	sl, r2
 8004036:	461e      	mov	r6, r3
 8004038:	460f      	mov	r7, r1
 800403a:	463d      	mov	r5, r7
 800403c:	9808      	ldr	r0, [sp, #32]
 800403e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004042:	f000 facf 	bl	80045e4 <__locale_ctype_ptr_l>
 8004046:	4420      	add	r0, r4
 8004048:	7843      	ldrb	r3, [r0, #1]
 800404a:	f013 0308 	ands.w	r3, r3, #8
 800404e:	d130      	bne.n	80040b2 <_strtoul_l.isra.0+0x86>
 8004050:	2c2d      	cmp	r4, #45	; 0x2d
 8004052:	d130      	bne.n	80040b6 <_strtoul_l.isra.0+0x8a>
 8004054:	787c      	ldrb	r4, [r7, #1]
 8004056:	1cbd      	adds	r5, r7, #2
 8004058:	2101      	movs	r1, #1
 800405a:	2e00      	cmp	r6, #0
 800405c:	d05c      	beq.n	8004118 <_strtoul_l.isra.0+0xec>
 800405e:	2e10      	cmp	r6, #16
 8004060:	d109      	bne.n	8004076 <_strtoul_l.isra.0+0x4a>
 8004062:	2c30      	cmp	r4, #48	; 0x30
 8004064:	d107      	bne.n	8004076 <_strtoul_l.isra.0+0x4a>
 8004066:	782b      	ldrb	r3, [r5, #0]
 8004068:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800406c:	2b58      	cmp	r3, #88	; 0x58
 800406e:	d14e      	bne.n	800410e <_strtoul_l.isra.0+0xe2>
 8004070:	786c      	ldrb	r4, [r5, #1]
 8004072:	2610      	movs	r6, #16
 8004074:	3502      	adds	r5, #2
 8004076:	f04f 32ff 	mov.w	r2, #4294967295
 800407a:	2300      	movs	r3, #0
 800407c:	fbb2 f2f6 	udiv	r2, r2, r6
 8004080:	fb06 fc02 	mul.w	ip, r6, r2
 8004084:	ea6f 0c0c 	mvn.w	ip, ip
 8004088:	4618      	mov	r0, r3
 800408a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800408e:	2f09      	cmp	r7, #9
 8004090:	d817      	bhi.n	80040c2 <_strtoul_l.isra.0+0x96>
 8004092:	463c      	mov	r4, r7
 8004094:	42a6      	cmp	r6, r4
 8004096:	dd23      	ble.n	80040e0 <_strtoul_l.isra.0+0xb4>
 8004098:	2b00      	cmp	r3, #0
 800409a:	db1e      	blt.n	80040da <_strtoul_l.isra.0+0xae>
 800409c:	4282      	cmp	r2, r0
 800409e:	d31c      	bcc.n	80040da <_strtoul_l.isra.0+0xae>
 80040a0:	d101      	bne.n	80040a6 <_strtoul_l.isra.0+0x7a>
 80040a2:	45a4      	cmp	ip, r4
 80040a4:	db19      	blt.n	80040da <_strtoul_l.isra.0+0xae>
 80040a6:	fb00 4006 	mla	r0, r0, r6, r4
 80040aa:	2301      	movs	r3, #1
 80040ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040b0:	e7eb      	b.n	800408a <_strtoul_l.isra.0+0x5e>
 80040b2:	462f      	mov	r7, r5
 80040b4:	e7c1      	b.n	800403a <_strtoul_l.isra.0+0xe>
 80040b6:	2c2b      	cmp	r4, #43	; 0x2b
 80040b8:	bf04      	itt	eq
 80040ba:	1cbd      	addeq	r5, r7, #2
 80040bc:	787c      	ldrbeq	r4, [r7, #1]
 80040be:	4619      	mov	r1, r3
 80040c0:	e7cb      	b.n	800405a <_strtoul_l.isra.0+0x2e>
 80040c2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80040c6:	2f19      	cmp	r7, #25
 80040c8:	d801      	bhi.n	80040ce <_strtoul_l.isra.0+0xa2>
 80040ca:	3c37      	subs	r4, #55	; 0x37
 80040cc:	e7e2      	b.n	8004094 <_strtoul_l.isra.0+0x68>
 80040ce:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80040d2:	2f19      	cmp	r7, #25
 80040d4:	d804      	bhi.n	80040e0 <_strtoul_l.isra.0+0xb4>
 80040d6:	3c57      	subs	r4, #87	; 0x57
 80040d8:	e7dc      	b.n	8004094 <_strtoul_l.isra.0+0x68>
 80040da:	f04f 33ff 	mov.w	r3, #4294967295
 80040de:	e7e5      	b.n	80040ac <_strtoul_l.isra.0+0x80>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	da09      	bge.n	80040f8 <_strtoul_l.isra.0+0xcc>
 80040e4:	2322      	movs	r3, #34	; 0x22
 80040e6:	f8c8 3000 	str.w	r3, [r8]
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295
 80040ee:	f1ba 0f00 	cmp.w	sl, #0
 80040f2:	d107      	bne.n	8004104 <_strtoul_l.isra.0+0xd8>
 80040f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f8:	b101      	cbz	r1, 80040fc <_strtoul_l.isra.0+0xd0>
 80040fa:	4240      	negs	r0, r0
 80040fc:	f1ba 0f00 	cmp.w	sl, #0
 8004100:	d0f8      	beq.n	80040f4 <_strtoul_l.isra.0+0xc8>
 8004102:	b10b      	cbz	r3, 8004108 <_strtoul_l.isra.0+0xdc>
 8004104:	f105 39ff 	add.w	r9, r5, #4294967295
 8004108:	f8ca 9000 	str.w	r9, [sl]
 800410c:	e7f2      	b.n	80040f4 <_strtoul_l.isra.0+0xc8>
 800410e:	2430      	movs	r4, #48	; 0x30
 8004110:	2e00      	cmp	r6, #0
 8004112:	d1b0      	bne.n	8004076 <_strtoul_l.isra.0+0x4a>
 8004114:	2608      	movs	r6, #8
 8004116:	e7ae      	b.n	8004076 <_strtoul_l.isra.0+0x4a>
 8004118:	2c30      	cmp	r4, #48	; 0x30
 800411a:	d0a4      	beq.n	8004066 <_strtoul_l.isra.0+0x3a>
 800411c:	260a      	movs	r6, #10
 800411e:	e7aa      	b.n	8004076 <_strtoul_l.isra.0+0x4a>

08004120 <_strtoul_r>:
 8004120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004122:	4c06      	ldr	r4, [pc, #24]	; (800413c <_strtoul_r+0x1c>)
 8004124:	4d06      	ldr	r5, [pc, #24]	; (8004140 <_strtoul_r+0x20>)
 8004126:	6824      	ldr	r4, [r4, #0]
 8004128:	6a24      	ldr	r4, [r4, #32]
 800412a:	2c00      	cmp	r4, #0
 800412c:	bf08      	it	eq
 800412e:	462c      	moveq	r4, r5
 8004130:	9400      	str	r4, [sp, #0]
 8004132:	f7ff ff7b 	bl	800402c <_strtoul_l.isra.0>
 8004136:	b003      	add	sp, #12
 8004138:	bd30      	pop	{r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c
 8004140:	20000070 	.word	0x20000070

08004144 <__submore>:
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	460c      	mov	r4, r1
 800414a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800414c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004150:	4299      	cmp	r1, r3
 8004152:	d11d      	bne.n	8004190 <__submore+0x4c>
 8004154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004158:	f7fe ffce 	bl	80030f8 <_malloc_r>
 800415c:	b918      	cbnz	r0, 8004166 <__submore+0x22>
 800415e:	f04f 30ff 	mov.w	r0, #4294967295
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416a:	63a3      	str	r3, [r4, #56]	; 0x38
 800416c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004170:	6360      	str	r0, [r4, #52]	; 0x34
 8004172:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004176:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800417a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800417e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004182:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004186:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800418a:	6020      	str	r0, [r4, #0]
 800418c:	2000      	movs	r0, #0
 800418e:	e7e8      	b.n	8004162 <__submore+0x1e>
 8004190:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004192:	0077      	lsls	r7, r6, #1
 8004194:	463a      	mov	r2, r7
 8004196:	f000 fb1b 	bl	80047d0 <_realloc_r>
 800419a:	4605      	mov	r5, r0
 800419c:	2800      	cmp	r0, #0
 800419e:	d0de      	beq.n	800415e <__submore+0x1a>
 80041a0:	eb00 0806 	add.w	r8, r0, r6
 80041a4:	4601      	mov	r1, r0
 80041a6:	4632      	mov	r2, r6
 80041a8:	4640      	mov	r0, r8
 80041aa:	f000 fab5 	bl	8004718 <memcpy>
 80041ae:	f8c4 8000 	str.w	r8, [r4]
 80041b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80041b6:	e7e9      	b.n	800418c <__submore+0x48>

080041b8 <_ungetc_r>:
 80041b8:	1c4b      	adds	r3, r1, #1
 80041ba:	b570      	push	{r4, r5, r6, lr}
 80041bc:	4606      	mov	r6, r0
 80041be:	460d      	mov	r5, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	d103      	bne.n	80041cc <_ungetc_r+0x14>
 80041c4:	f04f 35ff 	mov.w	r5, #4294967295
 80041c8:	4628      	mov	r0, r5
 80041ca:	bd70      	pop	{r4, r5, r6, pc}
 80041cc:	b118      	cbz	r0, 80041d6 <_ungetc_r+0x1e>
 80041ce:	6983      	ldr	r3, [r0, #24]
 80041d0:	b90b      	cbnz	r3, 80041d6 <_ungetc_r+0x1e>
 80041d2:	f7fe feeb 	bl	8002fac <__sinit>
 80041d6:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <_ungetc_r+0xd8>)
 80041d8:	429c      	cmp	r4, r3
 80041da:	d12c      	bne.n	8004236 <_ungetc_r+0x7e>
 80041dc:	6874      	ldr	r4, [r6, #4]
 80041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e2:	f023 0320 	bic.w	r3, r3, #32
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	0759      	lsls	r1, r3, #29
 80041ec:	d413      	bmi.n	8004216 <_ungetc_r+0x5e>
 80041ee:	06da      	lsls	r2, r3, #27
 80041f0:	d5e8      	bpl.n	80041c4 <_ungetc_r+0xc>
 80041f2:	071b      	lsls	r3, r3, #28
 80041f4:	d50b      	bpl.n	800420e <_ungetc_r+0x56>
 80041f6:	4621      	mov	r1, r4
 80041f8:	4630      	mov	r0, r6
 80041fa:	f000 f9b7 	bl	800456c <_fflush_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	d1e0      	bne.n	80041c4 <_ungetc_r+0xc>
 8004202:	89a3      	ldrh	r3, [r4, #12]
 8004204:	60a0      	str	r0, [r4, #8]
 8004206:	f023 0308 	bic.w	r3, r3, #8
 800420a:	81a3      	strh	r3, [r4, #12]
 800420c:	61a0      	str	r0, [r4, #24]
 800420e:	89a3      	ldrh	r3, [r4, #12]
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	81a3      	strh	r3, [r4, #12]
 8004216:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004218:	6862      	ldr	r2, [r4, #4]
 800421a:	b2ed      	uxtb	r5, r5
 800421c:	b1e3      	cbz	r3, 8004258 <_ungetc_r+0xa0>
 800421e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004220:	4293      	cmp	r3, r2
 8004222:	dd12      	ble.n	800424a <_ungetc_r+0x92>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	6022      	str	r2, [r4, #0]
 800422a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800422e:	6863      	ldr	r3, [r4, #4]
 8004230:	3301      	adds	r3, #1
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	e7c8      	b.n	80041c8 <_ungetc_r+0x10>
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <_ungetc_r+0xdc>)
 8004238:	429c      	cmp	r4, r3
 800423a:	d101      	bne.n	8004240 <_ungetc_r+0x88>
 800423c:	68b4      	ldr	r4, [r6, #8]
 800423e:	e7ce      	b.n	80041de <_ungetc_r+0x26>
 8004240:	4b15      	ldr	r3, [pc, #84]	; (8004298 <_ungetc_r+0xe0>)
 8004242:	429c      	cmp	r4, r3
 8004244:	bf08      	it	eq
 8004246:	68f4      	ldreq	r4, [r6, #12]
 8004248:	e7c9      	b.n	80041de <_ungetc_r+0x26>
 800424a:	4621      	mov	r1, r4
 800424c:	4630      	mov	r0, r6
 800424e:	f7ff ff79 	bl	8004144 <__submore>
 8004252:	2800      	cmp	r0, #0
 8004254:	d0e6      	beq.n	8004224 <_ungetc_r+0x6c>
 8004256:	e7b5      	b.n	80041c4 <_ungetc_r+0xc>
 8004258:	6921      	ldr	r1, [r4, #16]
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	b151      	cbz	r1, 8004274 <_ungetc_r+0xbc>
 800425e:	4299      	cmp	r1, r3
 8004260:	d208      	bcs.n	8004274 <_ungetc_r+0xbc>
 8004262:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004266:	42a9      	cmp	r1, r5
 8004268:	d104      	bne.n	8004274 <_ungetc_r+0xbc>
 800426a:	3b01      	subs	r3, #1
 800426c:	3201      	adds	r2, #1
 800426e:	6023      	str	r3, [r4, #0]
 8004270:	6062      	str	r2, [r4, #4]
 8004272:	e7a9      	b.n	80041c8 <_ungetc_r+0x10>
 8004274:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800427c:	6363      	str	r3, [r4, #52]	; 0x34
 800427e:	2303      	movs	r3, #3
 8004280:	63a3      	str	r3, [r4, #56]	; 0x38
 8004282:	4623      	mov	r3, r4
 8004284:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	2301      	movs	r3, #1
 800428c:	e7d1      	b.n	8004232 <_ungetc_r+0x7a>
 800428e:	bf00      	nop
 8004290:	0800497c 	.word	0x0800497c
 8004294:	0800499c 	.word	0x0800499c
 8004298:	0800495c 	.word	0x0800495c

0800429c <__swbuf_r>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	460e      	mov	r6, r1
 80042a0:	4614      	mov	r4, r2
 80042a2:	4605      	mov	r5, r0
 80042a4:	b118      	cbz	r0, 80042ae <__swbuf_r+0x12>
 80042a6:	6983      	ldr	r3, [r0, #24]
 80042a8:	b90b      	cbnz	r3, 80042ae <__swbuf_r+0x12>
 80042aa:	f7fe fe7f 	bl	8002fac <__sinit>
 80042ae:	4b21      	ldr	r3, [pc, #132]	; (8004334 <__swbuf_r+0x98>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d12a      	bne.n	800430a <__swbuf_r+0x6e>
 80042b4:	686c      	ldr	r4, [r5, #4]
 80042b6:	69a3      	ldr	r3, [r4, #24]
 80042b8:	60a3      	str	r3, [r4, #8]
 80042ba:	89a3      	ldrh	r3, [r4, #12]
 80042bc:	071a      	lsls	r2, r3, #28
 80042be:	d52e      	bpl.n	800431e <__swbuf_r+0x82>
 80042c0:	6923      	ldr	r3, [r4, #16]
 80042c2:	b363      	cbz	r3, 800431e <__swbuf_r+0x82>
 80042c4:	6923      	ldr	r3, [r4, #16]
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	1ac0      	subs	r0, r0, r3
 80042ca:	6963      	ldr	r3, [r4, #20]
 80042cc:	b2f6      	uxtb	r6, r6
 80042ce:	4283      	cmp	r3, r0
 80042d0:	4637      	mov	r7, r6
 80042d2:	dc04      	bgt.n	80042de <__swbuf_r+0x42>
 80042d4:	4621      	mov	r1, r4
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 f948 	bl	800456c <_fflush_r>
 80042dc:	bb28      	cbnz	r0, 800432a <__swbuf_r+0x8e>
 80042de:	68a3      	ldr	r3, [r4, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60a3      	str	r3, [r4, #8]
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	6022      	str	r2, [r4, #0]
 80042ea:	701e      	strb	r6, [r3, #0]
 80042ec:	6963      	ldr	r3, [r4, #20]
 80042ee:	3001      	adds	r0, #1
 80042f0:	4283      	cmp	r3, r0
 80042f2:	d004      	beq.n	80042fe <__swbuf_r+0x62>
 80042f4:	89a3      	ldrh	r3, [r4, #12]
 80042f6:	07db      	lsls	r3, r3, #31
 80042f8:	d519      	bpl.n	800432e <__swbuf_r+0x92>
 80042fa:	2e0a      	cmp	r6, #10
 80042fc:	d117      	bne.n	800432e <__swbuf_r+0x92>
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f000 f933 	bl	800456c <_fflush_r>
 8004306:	b190      	cbz	r0, 800432e <__swbuf_r+0x92>
 8004308:	e00f      	b.n	800432a <__swbuf_r+0x8e>
 800430a:	4b0b      	ldr	r3, [pc, #44]	; (8004338 <__swbuf_r+0x9c>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d101      	bne.n	8004314 <__swbuf_r+0x78>
 8004310:	68ac      	ldr	r4, [r5, #8]
 8004312:	e7d0      	b.n	80042b6 <__swbuf_r+0x1a>
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <__swbuf_r+0xa0>)
 8004316:	429c      	cmp	r4, r3
 8004318:	bf08      	it	eq
 800431a:	68ec      	ldreq	r4, [r5, #12]
 800431c:	e7cb      	b.n	80042b6 <__swbuf_r+0x1a>
 800431e:	4621      	mov	r1, r4
 8004320:	4628      	mov	r0, r5
 8004322:	f000 f81f 	bl	8004364 <__swsetup_r>
 8004326:	2800      	cmp	r0, #0
 8004328:	d0cc      	beq.n	80042c4 <__swbuf_r+0x28>
 800432a:	f04f 37ff 	mov.w	r7, #4294967295
 800432e:	4638      	mov	r0, r7
 8004330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004332:	bf00      	nop
 8004334:	0800497c 	.word	0x0800497c
 8004338:	0800499c 	.word	0x0800499c
 800433c:	0800495c 	.word	0x0800495c

08004340 <_write_r>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4c07      	ldr	r4, [pc, #28]	; (8004360 <_write_r+0x20>)
 8004344:	4605      	mov	r5, r0
 8004346:	4608      	mov	r0, r1
 8004348:	4611      	mov	r1, r2
 800434a:	2200      	movs	r2, #0
 800434c:	6022      	str	r2, [r4, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	f7fc faf6 	bl	8000940 <_write>
 8004354:	1c43      	adds	r3, r0, #1
 8004356:	d102      	bne.n	800435e <_write_r+0x1e>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	b103      	cbz	r3, 800435e <_write_r+0x1e>
 800435c:	602b      	str	r3, [r5, #0]
 800435e:	bd38      	pop	{r3, r4, r5, pc}
 8004360:	20000288 	.word	0x20000288

08004364 <__swsetup_r>:
 8004364:	4b32      	ldr	r3, [pc, #200]	; (8004430 <__swsetup_r+0xcc>)
 8004366:	b570      	push	{r4, r5, r6, lr}
 8004368:	681d      	ldr	r5, [r3, #0]
 800436a:	4606      	mov	r6, r0
 800436c:	460c      	mov	r4, r1
 800436e:	b125      	cbz	r5, 800437a <__swsetup_r+0x16>
 8004370:	69ab      	ldr	r3, [r5, #24]
 8004372:	b913      	cbnz	r3, 800437a <__swsetup_r+0x16>
 8004374:	4628      	mov	r0, r5
 8004376:	f7fe fe19 	bl	8002fac <__sinit>
 800437a:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <__swsetup_r+0xd0>)
 800437c:	429c      	cmp	r4, r3
 800437e:	d10f      	bne.n	80043a0 <__swsetup_r+0x3c>
 8004380:	686c      	ldr	r4, [r5, #4]
 8004382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004386:	b29a      	uxth	r2, r3
 8004388:	0715      	lsls	r5, r2, #28
 800438a:	d42c      	bmi.n	80043e6 <__swsetup_r+0x82>
 800438c:	06d0      	lsls	r0, r2, #27
 800438e:	d411      	bmi.n	80043b4 <__swsetup_r+0x50>
 8004390:	2209      	movs	r2, #9
 8004392:	6032      	str	r2, [r6, #0]
 8004394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004398:	81a3      	strh	r3, [r4, #12]
 800439a:	f04f 30ff 	mov.w	r0, #4294967295
 800439e:	e03e      	b.n	800441e <__swsetup_r+0xba>
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <__swsetup_r+0xd4>)
 80043a2:	429c      	cmp	r4, r3
 80043a4:	d101      	bne.n	80043aa <__swsetup_r+0x46>
 80043a6:	68ac      	ldr	r4, [r5, #8]
 80043a8:	e7eb      	b.n	8004382 <__swsetup_r+0x1e>
 80043aa:	4b24      	ldr	r3, [pc, #144]	; (800443c <__swsetup_r+0xd8>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	bf08      	it	eq
 80043b0:	68ec      	ldreq	r4, [r5, #12]
 80043b2:	e7e6      	b.n	8004382 <__swsetup_r+0x1e>
 80043b4:	0751      	lsls	r1, r2, #29
 80043b6:	d512      	bpl.n	80043de <__swsetup_r+0x7a>
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	b141      	cbz	r1, 80043ce <__swsetup_r+0x6a>
 80043bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c0:	4299      	cmp	r1, r3
 80043c2:	d002      	beq.n	80043ca <__swsetup_r+0x66>
 80043c4:	4630      	mov	r0, r6
 80043c6:	f000 f9b5 	bl	8004734 <_free_r>
 80043ca:	2300      	movs	r3, #0
 80043cc:	6363      	str	r3, [r4, #52]	; 0x34
 80043ce:	89a3      	ldrh	r3, [r4, #12]
 80043d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043d4:	81a3      	strh	r3, [r4, #12]
 80043d6:	2300      	movs	r3, #0
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6923      	ldr	r3, [r4, #16]
 80043dc:	6023      	str	r3, [r4, #0]
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	f043 0308 	orr.w	r3, r3, #8
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	b94b      	cbnz	r3, 80043fe <__swsetup_r+0x9a>
 80043ea:	89a3      	ldrh	r3, [r4, #12]
 80043ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d003      	beq.n	80043fe <__swsetup_r+0x9a>
 80043f6:	4621      	mov	r1, r4
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f93b 	bl	8004674 <__smakebuf_r>
 80043fe:	89a2      	ldrh	r2, [r4, #12]
 8004400:	f012 0301 	ands.w	r3, r2, #1
 8004404:	d00c      	beq.n	8004420 <__swsetup_r+0xbc>
 8004406:	2300      	movs	r3, #0
 8004408:	60a3      	str	r3, [r4, #8]
 800440a:	6963      	ldr	r3, [r4, #20]
 800440c:	425b      	negs	r3, r3
 800440e:	61a3      	str	r3, [r4, #24]
 8004410:	6923      	ldr	r3, [r4, #16]
 8004412:	b953      	cbnz	r3, 800442a <__swsetup_r+0xc6>
 8004414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004418:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800441c:	d1ba      	bne.n	8004394 <__swsetup_r+0x30>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	0792      	lsls	r2, r2, #30
 8004422:	bf58      	it	pl
 8004424:	6963      	ldrpl	r3, [r4, #20]
 8004426:	60a3      	str	r3, [r4, #8]
 8004428:	e7f2      	b.n	8004410 <__swsetup_r+0xac>
 800442a:	2000      	movs	r0, #0
 800442c:	e7f7      	b.n	800441e <__swsetup_r+0xba>
 800442e:	bf00      	nop
 8004430:	2000000c 	.word	0x2000000c
 8004434:	0800497c 	.word	0x0800497c
 8004438:	0800499c 	.word	0x0800499c
 800443c:	0800495c 	.word	0x0800495c

08004440 <_close_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4c06      	ldr	r4, [pc, #24]	; (800445c <_close_r+0x1c>)
 8004444:	2300      	movs	r3, #0
 8004446:	4605      	mov	r5, r0
 8004448:	4608      	mov	r0, r1
 800444a:	6023      	str	r3, [r4, #0]
 800444c:	f7fc fa9a 	bl	8000984 <_close>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_close_r+0x1a>
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	b103      	cbz	r3, 800445a <_close_r+0x1a>
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20000288 	.word	0x20000288

08004460 <__sflush_r>:
 8004460:	898a      	ldrh	r2, [r1, #12]
 8004462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004466:	4605      	mov	r5, r0
 8004468:	0710      	lsls	r0, r2, #28
 800446a:	460c      	mov	r4, r1
 800446c:	d458      	bmi.n	8004520 <__sflush_r+0xc0>
 800446e:	684b      	ldr	r3, [r1, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	dc05      	bgt.n	8004480 <__sflush_r+0x20>
 8004474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	dc02      	bgt.n	8004480 <__sflush_r+0x20>
 800447a:	2000      	movs	r0, #0
 800447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004482:	2e00      	cmp	r6, #0
 8004484:	d0f9      	beq.n	800447a <__sflush_r+0x1a>
 8004486:	2300      	movs	r3, #0
 8004488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800448c:	682f      	ldr	r7, [r5, #0]
 800448e:	6a21      	ldr	r1, [r4, #32]
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	d032      	beq.n	80044fa <__sflush_r+0x9a>
 8004494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	075a      	lsls	r2, r3, #29
 800449a:	d505      	bpl.n	80044a8 <__sflush_r+0x48>
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	1ac0      	subs	r0, r0, r3
 80044a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80044a2:	b10b      	cbz	r3, 80044a8 <__sflush_r+0x48>
 80044a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044a6:	1ac0      	subs	r0, r0, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	4602      	mov	r2, r0
 80044ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044ae:	6a21      	ldr	r1, [r4, #32]
 80044b0:	4628      	mov	r0, r5
 80044b2:	47b0      	blx	r6
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	89a3      	ldrh	r3, [r4, #12]
 80044b8:	d106      	bne.n	80044c8 <__sflush_r+0x68>
 80044ba:	6829      	ldr	r1, [r5, #0]
 80044bc:	291d      	cmp	r1, #29
 80044be:	d848      	bhi.n	8004552 <__sflush_r+0xf2>
 80044c0:	4a29      	ldr	r2, [pc, #164]	; (8004568 <__sflush_r+0x108>)
 80044c2:	40ca      	lsrs	r2, r1
 80044c4:	07d6      	lsls	r6, r2, #31
 80044c6:	d544      	bpl.n	8004552 <__sflush_r+0xf2>
 80044c8:	2200      	movs	r2, #0
 80044ca:	6062      	str	r2, [r4, #4]
 80044cc:	04d9      	lsls	r1, r3, #19
 80044ce:	6922      	ldr	r2, [r4, #16]
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	d504      	bpl.n	80044de <__sflush_r+0x7e>
 80044d4:	1c42      	adds	r2, r0, #1
 80044d6:	d101      	bne.n	80044dc <__sflush_r+0x7c>
 80044d8:	682b      	ldr	r3, [r5, #0]
 80044da:	b903      	cbnz	r3, 80044de <__sflush_r+0x7e>
 80044dc:	6560      	str	r0, [r4, #84]	; 0x54
 80044de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044e0:	602f      	str	r7, [r5, #0]
 80044e2:	2900      	cmp	r1, #0
 80044e4:	d0c9      	beq.n	800447a <__sflush_r+0x1a>
 80044e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044ea:	4299      	cmp	r1, r3
 80044ec:	d002      	beq.n	80044f4 <__sflush_r+0x94>
 80044ee:	4628      	mov	r0, r5
 80044f0:	f000 f920 	bl	8004734 <_free_r>
 80044f4:	2000      	movs	r0, #0
 80044f6:	6360      	str	r0, [r4, #52]	; 0x34
 80044f8:	e7c0      	b.n	800447c <__sflush_r+0x1c>
 80044fa:	2301      	movs	r3, #1
 80044fc:	4628      	mov	r0, r5
 80044fe:	47b0      	blx	r6
 8004500:	1c41      	adds	r1, r0, #1
 8004502:	d1c8      	bne.n	8004496 <__sflush_r+0x36>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0c5      	beq.n	8004496 <__sflush_r+0x36>
 800450a:	2b1d      	cmp	r3, #29
 800450c:	d001      	beq.n	8004512 <__sflush_r+0xb2>
 800450e:	2b16      	cmp	r3, #22
 8004510:	d101      	bne.n	8004516 <__sflush_r+0xb6>
 8004512:	602f      	str	r7, [r5, #0]
 8004514:	e7b1      	b.n	800447a <__sflush_r+0x1a>
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800451c:	81a3      	strh	r3, [r4, #12]
 800451e:	e7ad      	b.n	800447c <__sflush_r+0x1c>
 8004520:	690f      	ldr	r7, [r1, #16]
 8004522:	2f00      	cmp	r7, #0
 8004524:	d0a9      	beq.n	800447a <__sflush_r+0x1a>
 8004526:	0793      	lsls	r3, r2, #30
 8004528:	680e      	ldr	r6, [r1, #0]
 800452a:	bf08      	it	eq
 800452c:	694b      	ldreq	r3, [r1, #20]
 800452e:	600f      	str	r7, [r1, #0]
 8004530:	bf18      	it	ne
 8004532:	2300      	movne	r3, #0
 8004534:	eba6 0807 	sub.w	r8, r6, r7
 8004538:	608b      	str	r3, [r1, #8]
 800453a:	f1b8 0f00 	cmp.w	r8, #0
 800453e:	dd9c      	ble.n	800447a <__sflush_r+0x1a>
 8004540:	4643      	mov	r3, r8
 8004542:	463a      	mov	r2, r7
 8004544:	6a21      	ldr	r1, [r4, #32]
 8004546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004548:	4628      	mov	r0, r5
 800454a:	47b0      	blx	r6
 800454c:	2800      	cmp	r0, #0
 800454e:	dc06      	bgt.n	800455e <__sflush_r+0xfe>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	e78e      	b.n	800447c <__sflush_r+0x1c>
 800455e:	4407      	add	r7, r0
 8004560:	eba8 0800 	sub.w	r8, r8, r0
 8004564:	e7e9      	b.n	800453a <__sflush_r+0xda>
 8004566:	bf00      	nop
 8004568:	20400001 	.word	0x20400001

0800456c <_fflush_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	690b      	ldr	r3, [r1, #16]
 8004570:	4605      	mov	r5, r0
 8004572:	460c      	mov	r4, r1
 8004574:	b1db      	cbz	r3, 80045ae <_fflush_r+0x42>
 8004576:	b118      	cbz	r0, 8004580 <_fflush_r+0x14>
 8004578:	6983      	ldr	r3, [r0, #24]
 800457a:	b90b      	cbnz	r3, 8004580 <_fflush_r+0x14>
 800457c:	f7fe fd16 	bl	8002fac <__sinit>
 8004580:	4b0c      	ldr	r3, [pc, #48]	; (80045b4 <_fflush_r+0x48>)
 8004582:	429c      	cmp	r4, r3
 8004584:	d109      	bne.n	800459a <_fflush_r+0x2e>
 8004586:	686c      	ldr	r4, [r5, #4]
 8004588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458c:	b17b      	cbz	r3, 80045ae <_fflush_r+0x42>
 800458e:	4621      	mov	r1, r4
 8004590:	4628      	mov	r0, r5
 8004592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004596:	f7ff bf63 	b.w	8004460 <__sflush_r>
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <_fflush_r+0x4c>)
 800459c:	429c      	cmp	r4, r3
 800459e:	d101      	bne.n	80045a4 <_fflush_r+0x38>
 80045a0:	68ac      	ldr	r4, [r5, #8]
 80045a2:	e7f1      	b.n	8004588 <_fflush_r+0x1c>
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <_fflush_r+0x50>)
 80045a6:	429c      	cmp	r4, r3
 80045a8:	bf08      	it	eq
 80045aa:	68ec      	ldreq	r4, [r5, #12]
 80045ac:	e7ec      	b.n	8004588 <_fflush_r+0x1c>
 80045ae:	2000      	movs	r0, #0
 80045b0:	bd38      	pop	{r3, r4, r5, pc}
 80045b2:	bf00      	nop
 80045b4:	0800497c 	.word	0x0800497c
 80045b8:	0800499c 	.word	0x0800499c
 80045bc:	0800495c 	.word	0x0800495c

080045c0 <fflush>:
 80045c0:	4601      	mov	r1, r0
 80045c2:	b920      	cbnz	r0, 80045ce <fflush+0xe>
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <fflush+0x18>)
 80045c6:	4905      	ldr	r1, [pc, #20]	; (80045dc <fflush+0x1c>)
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	f7fe bd77 	b.w	80030bc <_fwalk_reent>
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <fflush+0x20>)
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	f7ff bfcb 	b.w	800456c <_fflush_r>
 80045d6:	bf00      	nop
 80045d8:	08004958 	.word	0x08004958
 80045dc:	0800456d 	.word	0x0800456d
 80045e0:	2000000c 	.word	0x2000000c

080045e4 <__locale_ctype_ptr_l>:
 80045e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80045e8:	4770      	bx	lr
	...

080045ec <__locale_ctype_ptr>:
 80045ec:	4b04      	ldr	r3, [pc, #16]	; (8004600 <__locale_ctype_ptr+0x14>)
 80045ee:	4a05      	ldr	r2, [pc, #20]	; (8004604 <__locale_ctype_ptr+0x18>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bf08      	it	eq
 80045f8:	4613      	moveq	r3, r2
 80045fa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80045fe:	4770      	bx	lr
 8004600:	2000000c 	.word	0x2000000c
 8004604:	20000070 	.word	0x20000070

08004608 <_lseek_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4c07      	ldr	r4, [pc, #28]	; (8004628 <_lseek_r+0x20>)
 800460c:	4605      	mov	r5, r0
 800460e:	4608      	mov	r0, r1
 8004610:	4611      	mov	r1, r2
 8004612:	2200      	movs	r2, #0
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	461a      	mov	r2, r3
 8004618:	f7fc f9db 	bl	80009d2 <_lseek>
 800461c:	1c43      	adds	r3, r0, #1
 800461e:	d102      	bne.n	8004626 <_lseek_r+0x1e>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	b103      	cbz	r3, 8004626 <_lseek_r+0x1e>
 8004624:	602b      	str	r3, [r5, #0]
 8004626:	bd38      	pop	{r3, r4, r5, pc}
 8004628:	20000288 	.word	0x20000288

0800462c <__swhatbuf_r>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	460e      	mov	r6, r1
 8004630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004634:	2900      	cmp	r1, #0
 8004636:	b096      	sub	sp, #88	; 0x58
 8004638:	4614      	mov	r4, r2
 800463a:	461d      	mov	r5, r3
 800463c:	da07      	bge.n	800464e <__swhatbuf_r+0x22>
 800463e:	2300      	movs	r3, #0
 8004640:	602b      	str	r3, [r5, #0]
 8004642:	89b3      	ldrh	r3, [r6, #12]
 8004644:	061a      	lsls	r2, r3, #24
 8004646:	d410      	bmi.n	800466a <__swhatbuf_r+0x3e>
 8004648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464c:	e00e      	b.n	800466c <__swhatbuf_r+0x40>
 800464e:	466a      	mov	r2, sp
 8004650:	f000 f904 	bl	800485c <_fstat_r>
 8004654:	2800      	cmp	r0, #0
 8004656:	dbf2      	blt.n	800463e <__swhatbuf_r+0x12>
 8004658:	9a01      	ldr	r2, [sp, #4]
 800465a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800465e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004662:	425a      	negs	r2, r3
 8004664:	415a      	adcs	r2, r3
 8004666:	602a      	str	r2, [r5, #0]
 8004668:	e7ee      	b.n	8004648 <__swhatbuf_r+0x1c>
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	2000      	movs	r0, #0
 800466e:	6023      	str	r3, [r4, #0]
 8004670:	b016      	add	sp, #88	; 0x58
 8004672:	bd70      	pop	{r4, r5, r6, pc}

08004674 <__smakebuf_r>:
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004678:	079d      	lsls	r5, r3, #30
 800467a:	4606      	mov	r6, r0
 800467c:	460c      	mov	r4, r1
 800467e:	d507      	bpl.n	8004690 <__smakebuf_r+0x1c>
 8004680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	6123      	str	r3, [r4, #16]
 8004688:	2301      	movs	r3, #1
 800468a:	6163      	str	r3, [r4, #20]
 800468c:	b002      	add	sp, #8
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	ab01      	add	r3, sp, #4
 8004692:	466a      	mov	r2, sp
 8004694:	f7ff ffca 	bl	800462c <__swhatbuf_r>
 8004698:	9900      	ldr	r1, [sp, #0]
 800469a:	4605      	mov	r5, r0
 800469c:	4630      	mov	r0, r6
 800469e:	f7fe fd2b 	bl	80030f8 <_malloc_r>
 80046a2:	b948      	cbnz	r0, 80046b8 <__smakebuf_r+0x44>
 80046a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046a8:	059a      	lsls	r2, r3, #22
 80046aa:	d4ef      	bmi.n	800468c <__smakebuf_r+0x18>
 80046ac:	f023 0303 	bic.w	r3, r3, #3
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	e7e3      	b.n	8004680 <__smakebuf_r+0xc>
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <__smakebuf_r+0x7c>)
 80046ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	6020      	str	r0, [r4, #0]
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	9b00      	ldr	r3, [sp, #0]
 80046c8:	6163      	str	r3, [r4, #20]
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	6120      	str	r0, [r4, #16]
 80046ce:	b15b      	cbz	r3, 80046e8 <__smakebuf_r+0x74>
 80046d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046d4:	4630      	mov	r0, r6
 80046d6:	f000 f8d3 	bl	8004880 <_isatty_r>
 80046da:	b128      	cbz	r0, 80046e8 <__smakebuf_r+0x74>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	f043 0301 	orr.w	r3, r3, #1
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	431d      	orrs	r5, r3
 80046ec:	81a5      	strh	r5, [r4, #12]
 80046ee:	e7cd      	b.n	800468c <__smakebuf_r+0x18>
 80046f0:	08002f75 	.word	0x08002f75

080046f4 <__ascii_mbtowc>:
 80046f4:	b082      	sub	sp, #8
 80046f6:	b901      	cbnz	r1, 80046fa <__ascii_mbtowc+0x6>
 80046f8:	a901      	add	r1, sp, #4
 80046fa:	b142      	cbz	r2, 800470e <__ascii_mbtowc+0x1a>
 80046fc:	b14b      	cbz	r3, 8004712 <__ascii_mbtowc+0x1e>
 80046fe:	7813      	ldrb	r3, [r2, #0]
 8004700:	600b      	str	r3, [r1, #0]
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	1c10      	adds	r0, r2, #0
 8004706:	bf18      	it	ne
 8004708:	2001      	movne	r0, #1
 800470a:	b002      	add	sp, #8
 800470c:	4770      	bx	lr
 800470e:	4610      	mov	r0, r2
 8004710:	e7fb      	b.n	800470a <__ascii_mbtowc+0x16>
 8004712:	f06f 0001 	mvn.w	r0, #1
 8004716:	e7f8      	b.n	800470a <__ascii_mbtowc+0x16>

08004718 <memcpy>:
 8004718:	b510      	push	{r4, lr}
 800471a:	1e43      	subs	r3, r0, #1
 800471c:	440a      	add	r2, r1
 800471e:	4291      	cmp	r1, r2
 8004720:	d100      	bne.n	8004724 <memcpy+0xc>
 8004722:	bd10      	pop	{r4, pc}
 8004724:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800472c:	e7f7      	b.n	800471e <memcpy+0x6>

0800472e <__malloc_lock>:
 800472e:	4770      	bx	lr

08004730 <__malloc_unlock>:
 8004730:	4770      	bx	lr
	...

08004734 <_free_r>:
 8004734:	b538      	push	{r3, r4, r5, lr}
 8004736:	4605      	mov	r5, r0
 8004738:	2900      	cmp	r1, #0
 800473a:	d045      	beq.n	80047c8 <_free_r+0x94>
 800473c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004740:	1f0c      	subs	r4, r1, #4
 8004742:	2b00      	cmp	r3, #0
 8004744:	bfb8      	it	lt
 8004746:	18e4      	addlt	r4, r4, r3
 8004748:	f7ff fff1 	bl	800472e <__malloc_lock>
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <_free_r+0x98>)
 800474e:	6813      	ldr	r3, [r2, #0]
 8004750:	4610      	mov	r0, r2
 8004752:	b933      	cbnz	r3, 8004762 <_free_r+0x2e>
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	6014      	str	r4, [r2, #0]
 8004758:	4628      	mov	r0, r5
 800475a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800475e:	f7ff bfe7 	b.w	8004730 <__malloc_unlock>
 8004762:	42a3      	cmp	r3, r4
 8004764:	d90c      	bls.n	8004780 <_free_r+0x4c>
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	1862      	adds	r2, r4, r1
 800476a:	4293      	cmp	r3, r2
 800476c:	bf04      	itt	eq
 800476e:	681a      	ldreq	r2, [r3, #0]
 8004770:	685b      	ldreq	r3, [r3, #4]
 8004772:	6063      	str	r3, [r4, #4]
 8004774:	bf04      	itt	eq
 8004776:	1852      	addeq	r2, r2, r1
 8004778:	6022      	streq	r2, [r4, #0]
 800477a:	6004      	str	r4, [r0, #0]
 800477c:	e7ec      	b.n	8004758 <_free_r+0x24>
 800477e:	4613      	mov	r3, r2
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	b10a      	cbz	r2, 8004788 <_free_r+0x54>
 8004784:	42a2      	cmp	r2, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x4a>
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	1858      	adds	r0, r3, r1
 800478c:	42a0      	cmp	r0, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x74>
 8004790:	6820      	ldr	r0, [r4, #0]
 8004792:	4401      	add	r1, r0
 8004794:	1858      	adds	r0, r3, r1
 8004796:	4282      	cmp	r2, r0
 8004798:	6019      	str	r1, [r3, #0]
 800479a:	d1dd      	bne.n	8004758 <_free_r+0x24>
 800479c:	6810      	ldr	r0, [r2, #0]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	605a      	str	r2, [r3, #4]
 80047a2:	4401      	add	r1, r0
 80047a4:	6019      	str	r1, [r3, #0]
 80047a6:	e7d7      	b.n	8004758 <_free_r+0x24>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x7c>
 80047aa:	230c      	movs	r3, #12
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	e7d3      	b.n	8004758 <_free_r+0x24>
 80047b0:	6820      	ldr	r0, [r4, #0]
 80047b2:	1821      	adds	r1, r4, r0
 80047b4:	428a      	cmp	r2, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6811      	ldreq	r1, [r2, #0]
 80047ba:	6852      	ldreq	r2, [r2, #4]
 80047bc:	6062      	str	r2, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1809      	addeq	r1, r1, r0
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	605c      	str	r4, [r3, #4]
 80047c6:	e7c7      	b.n	8004758 <_free_r+0x24>
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
 80047ca:	bf00      	nop
 80047cc:	200001fc 	.word	0x200001fc

080047d0 <_realloc_r>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	4607      	mov	r7, r0
 80047d4:	4614      	mov	r4, r2
 80047d6:	460e      	mov	r6, r1
 80047d8:	b921      	cbnz	r1, 80047e4 <_realloc_r+0x14>
 80047da:	4611      	mov	r1, r2
 80047dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047e0:	f7fe bc8a 	b.w	80030f8 <_malloc_r>
 80047e4:	b922      	cbnz	r2, 80047f0 <_realloc_r+0x20>
 80047e6:	f7ff ffa5 	bl	8004734 <_free_r>
 80047ea:	4625      	mov	r5, r4
 80047ec:	4628      	mov	r0, r5
 80047ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f0:	f000 f856 	bl	80048a0 <_malloc_usable_size_r>
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d20f      	bcs.n	8004818 <_realloc_r+0x48>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4638      	mov	r0, r7
 80047fc:	f7fe fc7c 	bl	80030f8 <_malloc_r>
 8004800:	4605      	mov	r5, r0
 8004802:	2800      	cmp	r0, #0
 8004804:	d0f2      	beq.n	80047ec <_realloc_r+0x1c>
 8004806:	4631      	mov	r1, r6
 8004808:	4622      	mov	r2, r4
 800480a:	f7ff ff85 	bl	8004718 <memcpy>
 800480e:	4631      	mov	r1, r6
 8004810:	4638      	mov	r0, r7
 8004812:	f7ff ff8f 	bl	8004734 <_free_r>
 8004816:	e7e9      	b.n	80047ec <_realloc_r+0x1c>
 8004818:	4635      	mov	r5, r6
 800481a:	e7e7      	b.n	80047ec <_realloc_r+0x1c>

0800481c <_read_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	4c07      	ldr	r4, [pc, #28]	; (800483c <_read_r+0x20>)
 8004820:	4605      	mov	r5, r0
 8004822:	4608      	mov	r0, r1
 8004824:	4611      	mov	r1, r2
 8004826:	2200      	movs	r2, #0
 8004828:	6022      	str	r2, [r4, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	f7fc f86a 	bl	8000904 <_read>
 8004830:	1c43      	adds	r3, r0, #1
 8004832:	d102      	bne.n	800483a <_read_r+0x1e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	b103      	cbz	r3, 800483a <_read_r+0x1e>
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	bd38      	pop	{r3, r4, r5, pc}
 800483c:	20000288 	.word	0x20000288

08004840 <__ascii_wctomb>:
 8004840:	b149      	cbz	r1, 8004856 <__ascii_wctomb+0x16>
 8004842:	2aff      	cmp	r2, #255	; 0xff
 8004844:	bf85      	ittet	hi
 8004846:	238a      	movhi	r3, #138	; 0x8a
 8004848:	6003      	strhi	r3, [r0, #0]
 800484a:	700a      	strbls	r2, [r1, #0]
 800484c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004850:	bf98      	it	ls
 8004852:	2001      	movls	r0, #1
 8004854:	4770      	bx	lr
 8004856:	4608      	mov	r0, r1
 8004858:	4770      	bx	lr
	...

0800485c <_fstat_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4c07      	ldr	r4, [pc, #28]	; (800487c <_fstat_r+0x20>)
 8004860:	2300      	movs	r3, #0
 8004862:	4605      	mov	r5, r0
 8004864:	4608      	mov	r0, r1
 8004866:	4611      	mov	r1, r2
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	f7fc f897 	bl	800099c <_fstat>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	d102      	bne.n	8004878 <_fstat_r+0x1c>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	b103      	cbz	r3, 8004878 <_fstat_r+0x1c>
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	bd38      	pop	{r3, r4, r5, pc}
 800487a:	bf00      	nop
 800487c:	20000288 	.word	0x20000288

08004880 <_isatty_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4c06      	ldr	r4, [pc, #24]	; (800489c <_isatty_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4605      	mov	r5, r0
 8004888:	4608      	mov	r0, r1
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	f7fc f896 	bl	80009bc <_isatty>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_isatty_r+0x1a>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	b103      	cbz	r3, 800489a <_isatty_r+0x1a>
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000288 	.word	0x20000288

080048a0 <_malloc_usable_size_r>:
 80048a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048a4:	1f18      	subs	r0, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bfbc      	itt	lt
 80048aa:	580b      	ldrlt	r3, [r1, r0]
 80048ac:	18c0      	addlt	r0, r0, r3
 80048ae:	4770      	bx	lr

080048b0 <_init>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	bf00      	nop
 80048b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b6:	bc08      	pop	{r3}
 80048b8:	469e      	mov	lr, r3
 80048ba:	4770      	bx	lr

080048bc <_fini>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr
