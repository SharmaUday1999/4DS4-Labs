
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000204  08005448  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08005448  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001057d  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fe2  00000000  00000000  000307b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f40  00000000  00000000  00032798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021fec  00000000  00000000  00034510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c071  00000000  00000000  000564fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc06f  00000000  00000000  0006256d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012e5dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a0c  00000000  00000000  0012e658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005010 	.word	0x08005010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	08005010 	.word	0x08005010

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fbf4 	bl	8000d62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f81f 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f95f 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f92d 	bl	80007e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000586:	f000 f89b 	bl	80006c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	printf("Please enter passcode for access:\n");
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <main+0x44>)
 800058c:	f003 fb26 	bl	8003bdc <puts>
	scanf("%d\n",&passcode);
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	4619      	mov	r1, r3
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x48>)
 8000596:	f003 fb29 	bl	8003bec <iscanf>
	if(passcodeIsIn(passcode)){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4618      	mov	r0, r3
 800059e:	f000 f9b9 	bl	8000914 <passcodeIsIn>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <main+0x3e>
		accessGranted();
 80005a8:	f000 f994 	bl	80008d4 <accessGranted>
 80005ac:	e001      	b.n	80005b2 <main+0x42>
	}
	else{
		accessDenied();
 80005ae:	f000 f9a1 	bl	80008f4 <accessDenied>
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <main+0x42>
 80005b4:	08005028 	.word	0x08005028
 80005b8:	0800504c 	.word	0x0800504c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0ac      	sub	sp, #176	; 0xb0
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005c6:	2244      	movs	r2, #68	; 0x44
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 faa2 	bl	8003b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2254      	movs	r2, #84	; 0x54
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 fa94 	bl	8003b14 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f000 fe96 	bl	800131c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <SystemClock_Config+0x100>)
 80005f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <SystemClock_Config+0x100>)
 80005f8:	f023 0318 	bic.w	r3, r3, #24
 80005fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2314      	movs	r3, #20
 8000602:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fedb 	bl	8001404 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000654:	f000 f97e 	bl	8000954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fae6 	bl	8001c44 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800067e:	f000 f969 	bl	8000954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000682:	2302      	movs	r3, #2
 8000684:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fcdd 	bl	800204c <HAL_RCCEx_PeriphCLKConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000698:	f000 f95c 	bl	8000954 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a0:	f000 fe5a 	bl	8001358 <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006aa:	f000 f953 	bl	8000954 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006ae:	f001 febf 	bl	8002430 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006b2:	bf00      	nop
 80006b4:	37b0      	adds	r7, #176	; 0xb0
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000

080006c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]
 80006e2:	615a      	str	r2, [r3, #20]
 80006e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	222c      	movs	r2, #44	; 0x2c
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f003 fa11 	bl	8003b14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f2:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_TIM1_Init+0x118>)
 80006f4:	4a39      	ldr	r2, [pc, #228]	; (80007dc <MX_TIM1_Init+0x11c>)
 80006f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f8:	4b37      	ldr	r3, [pc, #220]	; (80007d8 <MX_TIM1_Init+0x118>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000704:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_TIM1_Init+0x118>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_TIM1_Init+0x118>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800071e:	482e      	ldr	r0, [pc, #184]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000720:	f001 ff86 	bl	8002630 <HAL_TIM_PWM_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800072a:	f000 f913 	bl	8000954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800073a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800073e:	4619      	mov	r1, r3
 8000740:	4825      	ldr	r0, [pc, #148]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000742:	f002 fbbf 	bl	8002ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800074c:	f000 f902 	bl	8000954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32;
 8000754:	2320      	movs	r3, #32
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000758:	2300      	movs	r3, #0
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000770:	2200      	movs	r2, #0
 8000772:	4619      	mov	r1, r3
 8000774:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_TIM1_Init+0x118>)
 8000776:	f001 ffb3 	bl	80026e0 <HAL_TIM_PWM_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000780:	f000 f8e8 	bl	8000954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	4619      	mov	r1, r3
 80007b8:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM1_Init+0x118>)
 80007ba:	f002 fbe9 	bl	8002f90 <HAL_TIMEx_ConfigBreakDeadTime>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007c4:	f000 f8c6 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM1_Init+0x118>)
 80007ca:	f000 f90b 	bl	80009e4 <HAL_TIM_MspPostInit>

}
 80007ce:	bf00      	nop
 80007d0:	3758      	adds	r7, #88	; 0x58
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000022c 	.word	0x2000022c
 80007dc:	40012c00 	.word	0x40012c00

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <MX_USART2_UART_Init+0x5c>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x58>)
 8000824:	f002 fc2c 	bl	8003080 <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f891 	bl	8000954 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000278 	.word	0x20000278
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a1c      	ldr	r2, [pc, #112]	; (80008cc <MX_GPIO_Init+0x8c>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_GPIO_Init+0x8c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x8c>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_GPIO_Init+0x8c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2138      	movs	r1, #56	; 0x38
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x90>)
 80008a4:	f000 fd22 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80008a8:	2338      	movs	r3, #56	; 0x38
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0x90>)
 80008c0:	f000 fbaa 	bl	8001018 <HAL_GPIO_Init>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <accessGranted>:

/* USER CODE BEGIN 4 */

void accessGranted(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2120      	movs	r1, #32
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <accessGranted+0x1c>)
 80008de:	f000 fd05 	bl	80012ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2110      	movs	r1, #16
 80008e6:	4802      	ldr	r0, [pc, #8]	; (80008f0 <accessGranted+0x1c>)
 80008e8:	f000 fd00 	bl	80012ec <HAL_GPIO_WritePin>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	48000400 	.word	0x48000400

080008f4 <accessDenied>:

void accessDenied(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2110      	movs	r1, #16
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <accessDenied+0x1c>)
 80008fe:	f000 fcf5 	bl	80012ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2120      	movs	r1, #32
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <accessDenied+0x1c>)
 8000908:	f000 fcf0 	bl	80012ec <HAL_GPIO_WritePin>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	48000400 	.word	0x48000400

08000914 <passcodeIsIn>:


bool passcodeIsIn(int enteredValue)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 9; i++){
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	e00b      	b.n	800093a <passcodeIsIn+0x26>
		if(enteredValue == passcodes[i]){
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <passcodeIsIn+0x3c>)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	429a      	cmp	r2, r3
 800092e:	d101      	bne.n	8000934 <passcodeIsIn+0x20>
			return true;
 8000930:	2301      	movs	r3, #1
 8000932:	e006      	b.n	8000942 <passcodeIsIn+0x2e>
	for(int i = 0; i < 9; i++){
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b08      	cmp	r3, #8
 800093e:	ddf0      	ble.n	8000922 <passcodeIsIn+0xe>
		}
	}
	return false;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000000 	.word	0x20000000

08000954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000958:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800095a:	e7fe      	b.n	800095a <Error_Handler+0x6>

0800095c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <HAL_TIM_PWM_MspInit+0x38>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d10b      	bne.n	80009ce <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a09      	ldr	r2, [pc, #36]	; (80009e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <HAL_TIM_MspPostInit+0x68>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d11d      	bne.n	8000a42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_TIM_MspPostInit+0x6c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_TIM_MspPostInit+0x6c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_TIM_MspPostInit+0x6c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 faeb 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40012c00 	.word	0x40012c00
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <HAL_UART_MspInit+0xa0>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d13a      	bne.n	8000aec <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0xa4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab6:	2307      	movs	r3, #7
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 faa8 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ac8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ada:	2303      	movs	r3, #3
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f000 fa96 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 f960 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f04f 33ff 	mov.w	r3, #4294967295
 8000b68:	68b9      	ldr	r1, [r7, #8]
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <_read+0x38>)
 8000b6c:	f002 fb69 	bl	8003242 <HAL_UART_Receive>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	607b      	str	r3, [r7, #4]

	return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000278 	.word	0x20000278

08000b8c <_write>:

int _write(int file, char *ptr, int len)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	4809      	ldr	r0, [pc, #36]	; (8000bcc <_write+0x40>)
 8000ba8:	f002 fab8 	bl	800311c <HAL_UART_Transmit>
 8000bac:	4603      	mov	r3, r0
 8000bae:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d002      	beq.n	8000bbc <_write+0x30>
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d101      	bne.n	8000bc0 <_write+0x34>
	{
		Error_Handler();
 8000bbc:	f7ff feca 	bl	8000954 <Error_Handler>
	}

	return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000278 	.word	0x20000278

08000bd0 <_close>:



int _close(int file)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf8:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_isatty>:

int _isatty(int file)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
	return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f002 ff2a 	bl	8003ac0 <__errno>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	230c      	movs	r3, #12
 8000c70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20010000 	.word	0x20010000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	20000220 	.word	0x20000220
 8000ca0:	20000300 	.word	0x20000300

08000ca4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <SystemInit+0x64>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <SystemInit+0x64>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <SystemInit+0x68>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <SystemInit+0x68>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <SystemInit+0x68>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <SystemInit+0x68>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <SystemInit+0x68>)
 8000cd0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000cd4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000cd8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <SystemInit+0x68>)
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <SystemInit+0x68>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <SystemInit+0x68>)
 8000ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <SystemInit+0x68>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SystemInit+0x64>)
 8000cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	40021000 	.word	0x40021000

08000d10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d14:	f7ff ffc6 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d18:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d1a:	e003      	b.n	8000d24 <LoopCopyDataInit>

08000d1c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d1e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d20:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d22:	3104      	adds	r1, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d24:	480a      	ldr	r0, [pc, #40]	; (8000d50 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d28:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d2a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d2c:	d3f6      	bcc.n	8000d1c <CopyDataInit>
	ldr	r2, =_sbss
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d30:	e002      	b.n	8000d38 <LoopFillZerobss>

08000d32 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d32:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d34:	f842 3b04 	str.w	r3, [r2], #4

08000d38 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <LoopForever+0x16>)
	cmp	r2, r3
 8000d3a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d3c:	d3f9      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f002 fec5 	bl	8003acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d42:	f7ff fc15 	bl	8000570 <main>

08000d46 <LoopForever>:

LoopForever:
    b LoopForever
 8000d46:	e7fe      	b.n	8000d46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d48:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000d4c:	08005244 	.word	0x08005244
	ldr	r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d54:	20000204 	.word	0x20000204
	ldr	r2, =_sbss
 8000d58:	20000204 	.word	0x20000204
	ldr	r3, = _ebss
 8000d5c:	20000300 	.word	0x20000300

08000d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_IRQHandler>

08000d62 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f91f 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f80e 	bl	8000d94 <HAL_InitTick>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	71fb      	strb	r3, [r7, #7]
 8000d82:	e001      	b.n	8000d88 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d84:	f7ff fdea 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f91d 	bl	8000ffe <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f8f5 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000030 	.word	0x20000030
 8000e04:	20000028 	.word	0x20000028
 8000e08:	2000002c 	.word	0x2000002c

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000030 	.word	0x20000030
 8000e30:	200002f8 	.word	0x200002f8

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200002f8 	.word	0x200002f8

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e148      	b.n	80012ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 813a 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00b      	beq.n	8001060 <HAL_GPIO_Init+0x48>
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d007      	beq.n	8001060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001054:	2b11      	cmp	r3, #17
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b12      	cmp	r3, #18
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0xea>
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 8094 	beq.w	80012b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b52      	ldr	r3, [pc, #328]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	; 0x60
 8001198:	4b4f      	ldr	r3, [pc, #316]	; (80012d8 <HAL_GPIO_Init+0x2c0>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a4d      	ldr	r2, [pc, #308]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d00d      	beq.n	80011ec <HAL_GPIO_Init+0x1d4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <HAL_GPIO_Init+0x2c8>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d007      	beq.n	80011e8 <HAL_GPIO_Init+0x1d0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_GPIO_Init+0x2cc>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d101      	bne.n	80011e4 <HAL_GPIO_Init+0x1cc>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e004      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e4:	2307      	movs	r3, #7
 80011e6:	e002      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <HAL_GPIO_Init+0x1d6>
 80011ec:	2300      	movs	r3, #0
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	f002 0203 	and.w	r2, r2, #3
 80011f4:	0092      	lsls	r2, r2, #2
 80011f6:	4093      	lsls	r3, r2
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011fe:	4937      	ldr	r1, [pc, #220]	; (80012dc <HAL_GPIO_Init+0x2c4>)
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800120c:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001230:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001236:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800125a:	4a23      	ldr	r2, [pc, #140]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001284:	4a18      	ldr	r2, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ae:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <HAL_GPIO_Init+0x2d0>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	3301      	adds	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f47f aeaf 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012ca:	bf00      	nop
 80012cc:	371c      	adds	r7, #28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010000 	.word	0x40010000
 80012e0:	48000400 	.word	0x48000400
 80012e4:	48000800 	.word	0x48000800
 80012e8:	40010400 	.word	0x40010400

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001308:	e002      	b.n	8001310 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a04      	ldr	r2, [pc, #16]	; (8001338 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40007000 	.word	0x40007000

0800133c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_PWREx_GetVoltageRange+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001366:	d130      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001374:	d038      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139c:	e002      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b0:	d102      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c4:	d110      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e00f      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d007      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000
 80013fc:	20000028 	.word	0x20000028
 8001400:	431bde83 	.word	0x431bde83

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 bc11 	b.w	8001c3a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001418:	4ba0      	ldr	r3, [pc, #640]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001422:	4b9e      	ldr	r3, [pc, #632]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80e4 	beq.w	8001602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_RCC_OscConfig+0x4c>
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	f040 808b 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 8087 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001450:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x64>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e3e8      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4b8b      	ldr	r3, [pc, #556]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_RCC_OscConfig+0x7e>
 8001478:	4b88      	ldr	r3, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001480:	e005      	b.n	800148e <HAL_RCC_OscConfig+0x8a>
 8001482:	4b86      	ldr	r3, [pc, #536]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148e:	4293      	cmp	r3, r2
 8001490:	d223      	bcs.n	80014da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd78 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e3c9      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b7a      	ldr	r3, [pc, #488]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4977      	ldr	r1, [pc, #476]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b75      	ldr	r3, [pc, #468]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4972      	ldr	r1, [pc, #456]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e025      	b.n	8001526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6d      	ldr	r3, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	496a      	ldr	r1, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	4965      	ldr	r1, [pc, #404]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd38 	bl	8001f8c <RCC_SetFlashLatencyFromMSIRange>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e389      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001526:	f000 fc6f 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 800152a:	4601      	mov	r1, r0
 800152c:	4b5b      	ldr	r3, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4a5a      	ldr	r2, [pc, #360]	; (80016a0 <HAL_RCC_OscConfig+0x29c>)
 8001538:	5cd3      	ldrb	r3, [r2, r3]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	fa21 f303 	lsr.w	r3, r1, r3
 8001542:	4a58      	ldr	r2, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x2a0>)
 8001544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001546:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x2a4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fc22 	bl	8000d94 <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d052      	beq.n	8001600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	e36d      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d032      	beq.n	80015cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001566:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001572:	f7ff fc5f 	bl	8000e34 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157a:	f7ff fc5b 	bl	8000e34 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e356      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b40      	ldr	r3, [pc, #256]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3f      	ldr	r2, [pc, #252]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	493a      	ldr	r1, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015cc:	4b33      	ldr	r3, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a32      	ldr	r2, [pc, #200]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc2c 	bl	8000e34 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc28 	bl	8000e34 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e323      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x298>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1dc>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d073      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x21c>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d063      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d15f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e300      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x24c>
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e01d      	b.n	800168c <HAL_RCC_OscConfig+0x288>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d10c      	bne.n	8001674 <HAL_RCC_OscConfig+0x270>
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e00b      	b.n	800168c <HAL_RCC_OscConfig+0x288>
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a08      	ldr	r2, [pc, #32]	; (800169c <HAL_RCC_OscConfig+0x298>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_RCC_OscConfig+0x298>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01b      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fbce 	bl	8000e34 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169a:	e010      	b.n	80016be <HAL_RCC_OscConfig+0x2ba>
 800169c:	40021000 	.word	0x40021000
 80016a0:	0800505c 	.word	0x0800505c
 80016a4:	20000028 	.word	0x20000028
 80016a8:	2000002c 	.word	0x2000002c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fbc2 	bl	8000e34 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e2bd      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4baf      	ldr	r3, [pc, #700]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fbb2 	bl	8000e34 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fbae 	bl	8000e34 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e2a9      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4ba5      	ldr	r3, [pc, #660]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d0>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x310>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d119      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d116      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b99      	ldr	r3, [pc, #612]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e286      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b93      	ldr	r3, [pc, #588]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4990      	ldr	r1, [pc, #576]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e040      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b8c      	ldr	r3, [pc, #560]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a8b      	ldr	r2, [pc, #556]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb6d 	bl	8000e34 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fb69 	bl	8000e34 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e264      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b82      	ldr	r3, [pc, #520]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b7f      	ldr	r3, [pc, #508]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	497c      	ldr	r1, [pc, #496]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b7a      	ldr	r3, [pc, #488]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a79      	ldr	r2, [pc, #484]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fb49 	bl	8000e34 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb45 	bl	8000e34 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e240      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b70      	ldr	r3, [pc, #448]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b68      	ldr	r3, [pc, #416]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	4a67      	ldr	r2, [pc, #412]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb24 	bl	8000e34 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb20 	bl	8000e34 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e21b      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	4b5e      	ldr	r3, [pc, #376]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3ec>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b5a      	ldr	r3, [pc, #360]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fb07 	bl	8000e34 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fb03 	bl	8000e34 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1fe      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a43      	ldr	r2, [pc, #268]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <HAL_RCC_OscConfig+0x57c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x57c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a3a      	ldr	r2, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x57c>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff faca 	bl	8000e34 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a4:	f7ff fac6 	bl	8000e34 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1c1      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b32      	ldr	r3, [pc, #200]	; (8001980 <HAL_RCC_OscConfig+0x57c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x4d8>
 80018ca:	4b2c      	ldr	r3, [pc, #176]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	4a2a      	ldr	r2, [pc, #168]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018da:	e024      	b.n	8001926 <HAL_RCC_OscConfig+0x522>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d110      	bne.n	8001906 <HAL_RCC_OscConfig+0x502>
 80018e4:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f4:	4b21      	ldr	r3, [pc, #132]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <HAL_RCC_OscConfig+0x578>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	e00f      	b.n	8001926 <HAL_RCC_OscConfig+0x522>
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_OscConfig+0x578>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	4a17      	ldr	r2, [pc, #92]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800191e:	f023 0304 	bic.w	r3, r3, #4
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d016      	beq.n	800195c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa81 	bl	8000e34 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff fa7d 	bl	8000e34 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e176      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x578>)
 800194e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0ed      	beq.n	8001936 <HAL_RCC_OscConfig+0x532>
 800195a:	e01a      	b.n	8001992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff fa6a 	bl	8000e34 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001962:	e00f      	b.n	8001984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff fa66 	bl	8000e34 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d906      	bls.n	8001984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e15f      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4baa      	ldr	r3, [pc, #680]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e8      	bne.n	8001964 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4ba5      	ldr	r3, [pc, #660]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4aa4      	ldr	r2, [pc, #656]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b8:	4b9d      	ldr	r3, [pc, #628]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 80019ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019be:	4a9c      	ldr	r2, [pc, #624]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa34 	bl	8000e34 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d0:	f7ff fa30 	bl	8000e34 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e12b      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e2:	4b93      	ldr	r3, [pc, #588]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ef      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5cc>
 80019f0:	e01b      	b.n	8001a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019f2:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 80019f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f8:	4a8d      	ldr	r2, [pc, #564]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa17 	bl	8000e34 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7ff fa13 	bl	8000e34 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e10e      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a1c:	4b84      	ldr	r3, [pc, #528]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8102 	beq.w	8001c38 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	f040 80c5 	bne.w	8001bc8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3e:	4b7c      	ldr	r3, [pc, #496]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d12c      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d123      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d11b      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d113      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d067      	beq.n	8001b7c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d062      	beq.n	8001b78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0bb      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b5b      	ldr	r3, [pc, #364]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5a      	ldr	r2, [pc, #360]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ace:	f7ff f9b1 	bl	8000e34 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f9ad 	bl	8000e34 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0a8      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <HAL_RCC_OscConfig+0x830>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b04:	3a01      	subs	r2, #1
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0e:	0212      	lsls	r2, r2, #8
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b16:	0852      	lsrs	r2, r2, #1
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	0552      	lsls	r2, r2, #21
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b22:	0852      	lsrs	r2, r2, #1
 8001b24:	3a01      	subs	r2, #1
 8001b26:	0652      	lsls	r2, r2, #25
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2e:	06d2      	lsls	r2, r2, #27
 8001b30:	430a      	orrs	r2, r1
 8001b32:	493f      	ldr	r1, [pc, #252]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3c      	ldr	r2, [pc, #240]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b44:	4b3a      	ldr	r3, [pc, #232]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a39      	ldr	r2, [pc, #228]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b50:	f7ff f970 	bl	8000e34 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f96c 	bl	8000e34 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e067      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b76:	e05f      	b.n	8001c38 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e05e      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d157      	bne.n	8001c38 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4a25      	ldr	r2, [pc, #148]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba0:	f7ff f948 	bl	8000e34 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba8:	f7ff f944 	bl	8000e34 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e03f      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x7a4>
 8001bc6:	e037      	b.n	8001c38 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d02d      	beq.n	8001c2a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bd8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bec:	f023 0303 	bic.w	r3, r3, #3
 8001bf0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001bf8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c00:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff f917 	bl	8000e34 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff f913 	bl	8000e34 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e00e      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_RCC_OscConfig+0x82c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f0      	bne.n	8001c0a <HAL_RCC_OscConfig+0x806>
 8001c28:	e006      	b.n	8001c38 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e005      	b.n	8001c3a <HAL_RCC_OscConfig+0x836>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop

08001c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0c8      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c58:	4b66      	ldr	r3, [pc, #408]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d910      	bls.n	8001c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b63      	ldr	r3, [pc, #396]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f023 0207 	bic.w	r2, r3, #7
 8001c6e:	4961      	ldr	r1, [pc, #388]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b5f      	ldr	r3, [pc, #380]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0b0      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d04c      	beq.n	8001d2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b56      	ldr	r3, [pc, #344]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d121      	bne.n	8001cec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e09e      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d115      	bne.n	8001cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e092      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ccc:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e086      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e07e      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cec:	4b42      	ldr	r3, [pc, #264]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 0203 	bic.w	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	493f      	ldr	r1, [pc, #252]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cfe:	f7ff f899 	bl	8000e34 <HAL_GetTick>
 8001d02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7ff f895 	bl	8000e34 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e066      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1c:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 020c 	and.w	r2, r3, #12
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d1eb      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d3a:	4b2f      	ldr	r3, [pc, #188]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	492c      	ldr	r1, [pc, #176]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d210      	bcs.n	8001d7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0207 	bic.w	r2, r3, #7
 8001d62:	4924      	ldr	r1, [pc, #144]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6a:	4b22      	ldr	r3, [pc, #136]	; (8001df4 <HAL_RCC_ClockConfig+0x1b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d001      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e036      	b.n	8001dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d008      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d88:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	4918      	ldr	r1, [pc, #96]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d009      	beq.n	8001dba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4910      	ldr	r1, [pc, #64]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dba:	f000 f825 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a0c      	ldr	r2, [pc, #48]	; (8001dfc <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	f003 031f 	and.w	r3, r3, #31
 8001dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe ffd8 	bl	8000d94 <HAL_InitTick>
 8001de4:	4603      	mov	r3, r0
 8001de6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001de8:	7afb      	ldrb	r3, [r7, #11]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40022000 	.word	0x40022000
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	0800505c 	.word	0x0800505c
 8001e00:	20000028 	.word	0x20000028
 8001e04:	2000002c 	.word	0x2000002c

08001e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_GetSysClockFreq+0x34>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d121      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d11e      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d107      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e005      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	091b      	lsrs	r3, r3, #4
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e64:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	e004      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	2b0c      	cmp	r3, #12
 8001e94:	d133      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d002      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xa4>
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d003      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0xaa>
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eae:	617b      	str	r3, [r7, #20]
      break;
 8001eb0:	e005      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb4:	617b      	str	r3, [r7, #20]
      break;
 8001eb6:	e002      	b.n	8001ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	617b      	str	r3, [r7, #20]
      break;
 8001ebc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	3301      	adds	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	fb02 f203 	mul.w	r2, r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0e5b      	lsrs	r3, r3, #25
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001efe:	69bb      	ldr	r3, [r7, #24]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	08005074 	.word	0x08005074
 8001f14:	00f42400 	.word	0x00f42400
 8001f18:	007a1200 	.word	0x007a1200

08001f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	20000028 	.word	0x20000028

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f38:	f7ff fff0 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	0800506c 	.word	0x0800506c

08001f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f64:	f7ff ffda 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f68:	4601      	mov	r1, r0
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0adb      	lsrs	r3, r3, #11
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f76:	5cd3      	ldrb	r3, [r2, r3]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40021000 	.word	0x40021000
 8001f88:	0800506c 	.word	0x0800506c

08001f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f94:	2300      	movs	r3, #0
 8001f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fa4:	f7ff f9ca 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001fa8:	6178      	str	r0, [r7, #20]
 8001faa:	e014      	b.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fc4:	f7ff f9ba 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	4a1d      	ldr	r2, [pc, #116]	; (8002044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fdc:	d10b      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d919      	bls.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fe8:	d902      	bls.n	8001ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fea:	2302      	movs	r3, #2
 8001fec:	613b      	str	r3, [r7, #16]
 8001fee:	e013      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e010      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d902      	bls.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e00a      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d102      	bne.n	800200e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002008:	2302      	movs	r3, #2
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	e004      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b70      	cmp	r3, #112	; 0x70
 8002012:	d101      	bne.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 0207 	bic.w	r2, r3, #7
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	429a      	cmp	r2, r3
 8002034:	d001      	beq.n	800203a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40021000 	.word	0x40021000
 8002048:	40022000 	.word	0x40022000

0800204c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002054:	2300      	movs	r3, #0
 8002056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002058:	2300      	movs	r3, #0
 800205a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	2b00      	cmp	r3, #0
 8002066:	d02f      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002070:	d005      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002072:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002076:	d015      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800207c:	e00f      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800207e:	4bac      	ldr	r3, [pc, #688]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	4aab      	ldr	r2, [pc, #684]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002088:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800208a:	e00c      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3304      	adds	r3, #4
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f9dc 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800209c:	e003      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	74fb      	strb	r3, [r7, #19]
      break;
 80020a2:	e000      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80020a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020a6:	7cfb      	ldrb	r3, [r7, #19]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020ac:	4ba0      	ldr	r3, [pc, #640]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	499d      	ldr	r1, [pc, #628]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020c2:	e001      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 8099 	beq.w	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020da:	4b95      	ldr	r3, [pc, #596]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00d      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b8f      	ldr	r3, [pc, #572]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a8e      	ldr	r2, [pc, #568]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b8c      	ldr	r3, [pc, #560]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002108:	2301      	movs	r3, #1
 800210a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800210c:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a88      	ldr	r2, [pc, #544]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002116:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002118:	f7fe fe8c 	bl	8000e34 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800211e:	e009      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7fe fe88 	bl	8000e34 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	74fb      	strb	r3, [r7, #19]
        break;
 8002132:	e005      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002134:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0ef      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002140:	7cfb      	ldrb	r3, [r7, #19]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d155      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002146:	4b7a      	ldr	r3, [pc, #488]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002150:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d01e      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	429a      	cmp	r2, r3
 8002160:	d019      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	4a6e      	ldr	r2, [pc, #440]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800217e:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	4a6a      	ldr	r2, [pc, #424]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800218e:	4a68      	ldr	r2, [pc, #416]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d016      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7fe fe48 	bl	8000e34 <HAL_GetTick>
 80021a4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	e00b      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe fe44 	bl	8000e34 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d902      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	74fb      	strb	r3, [r7, #19]
            break;
 80021be:	e006      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c0:	4b5b      	ldr	r3, [pc, #364]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0ec      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 80021ce:	7cfb      	ldrb	r3, [r7, #19]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	4b56      	ldr	r3, [pc, #344]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	4953      	ldr	r1, [pc, #332]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021ea:	e004      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	74bb      	strb	r3, [r7, #18]
 80021f0:	e001      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f2:	7cfb      	ldrb	r3, [r7, #19]
 80021f4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7c7b      	ldrb	r3, [r7, #17]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a4b      	ldr	r2, [pc, #300]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002214:	4b46      	ldr	r3, [pc, #280]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 0203 	bic.w	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	4943      	ldr	r1, [pc, #268]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f023 020c 	bic.w	r2, r3, #12
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	493a      	ldr	r1, [pc, #232]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002258:	4b35      	ldr	r3, [pc, #212]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	4932      	ldr	r1, [pc, #200]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800227a:	4b2d      	ldr	r3, [pc, #180]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002288:	4929      	ldr	r1, [pc, #164]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	4921      	ldr	r1, [pc, #132]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	4918      	ldr	r1, [pc, #96]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022e0:	4b13      	ldr	r3, [pc, #76]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4910      	ldr	r1, [pc, #64]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d02c      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	4907      	ldr	r1, [pc, #28]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002320:	d10a      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	4a02      	ldr	r2, [pc, #8]	; (8002330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002328:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800232c:	60d3      	str	r3, [r2, #12]
 800232e:	e015      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002330:	40021000 	.word	0x40021000
 8002334:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002340:	d10c      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3304      	adds	r3, #4
 8002346:	2101      	movs	r1, #1
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f881 	bl	8002450 <RCCEx_PLLSAI1_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002352:	7cfb      	ldrb	r3, [r7, #19]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d028      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002368:	4b30      	ldr	r3, [pc, #192]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	492d      	ldr	r1, [pc, #180]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002382:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002386:	d106      	bne.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002388:	4b28      	ldr	r3, [pc, #160]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60d3      	str	r3, [r2, #12]
 8002394:	e011      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d10c      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	2101      	movs	r1, #1
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f852 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01c      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	4915      	ldr	r1, [pc, #84]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2102      	movs	r1, #2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f82f 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002422:	7cbb      	ldrb	r3, [r7, #18]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a04      	ldr	r2, [pc, #16]	; (800244c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800243a:	f043 0304 	orr.w	r3, r3, #4
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000

08002450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800245e:	4b73      	ldr	r3, [pc, #460]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d018      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800246a:	4b70      	ldr	r3, [pc, #448]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
       ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002482:	4b6a      	ldr	r3, [pc, #424]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
       ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d044      	beq.n	8002520 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e041      	b.n	8002520 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d00c      	beq.n	80024be <RCCEx_PLLSAI1_Config+0x6e>
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d013      	beq.n	80024d0 <RCCEx_PLLSAI1_Config+0x80>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d120      	bne.n	80024ee <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024ac:	4b5f      	ldr	r3, [pc, #380]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11d      	bne.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024bc:	e01a      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024be:	4b5b      	ldr	r3, [pc, #364]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ce:	e013      	b.n	80024f8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024d0:	4b56      	ldr	r3, [pc, #344]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10f      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024dc:	4b53      	ldr	r3, [pc, #332]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ec:	e006      	b.n	80024fc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
      break;
 80024f2:	e004      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024f4:	bf00      	nop
 80024f6:	e002      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024f8:	bf00      	nop
 80024fa:	e000      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      break;
 80024fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10d      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002504:	4b49      	ldr	r3, [pc, #292]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	3b01      	subs	r3, #1
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	430b      	orrs	r3, r1
 800251a:	4944      	ldr	r1, [pc, #272]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 800251c:	4313      	orrs	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d17c      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002526:	4b41      	ldr	r3, [pc, #260]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a40      	ldr	r2, [pc, #256]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 800252c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002532:	f7fe fc7f 	bl	8000e34 <HAL_GetTick>
 8002536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002538:	e009      	b.n	800254e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800253a:	f7fe fc7b 	bl	8000e34 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d902      	bls.n	800254e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	73fb      	strb	r3, [r7, #15]
        break;
 800254c:	e005      	b.n	800255a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800254e:	4b37      	ldr	r3, [pc, #220]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d15f      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d110      	bne.n	8002588 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800256e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6892      	ldr	r2, [r2, #8]
 8002576:	0211      	lsls	r1, r2, #8
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68d2      	ldr	r2, [r2, #12]
 800257c:	06d2      	lsls	r2, r2, #27
 800257e:	430a      	orrs	r2, r1
 8002580:	492a      	ldr	r1, [pc, #168]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	610b      	str	r3, [r1, #16]
 8002586:	e027      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d112      	bne.n	80025b4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258e:	4b27      	ldr	r3, [pc, #156]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002596:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6892      	ldr	r2, [r2, #8]
 800259e:	0211      	lsls	r1, r2, #8
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6912      	ldr	r2, [r2, #16]
 80025a4:	0852      	lsrs	r2, r2, #1
 80025a6:	3a01      	subs	r2, #1
 80025a8:	0552      	lsls	r2, r2, #21
 80025aa:	430a      	orrs	r2, r1
 80025ac:	491f      	ldr	r1, [pc, #124]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	610b      	str	r3, [r1, #16]
 80025b2:	e011      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80025bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6892      	ldr	r2, [r2, #8]
 80025c4:	0211      	lsls	r1, r2, #8
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6952      	ldr	r2, [r2, #20]
 80025ca:	0852      	lsrs	r2, r2, #1
 80025cc:	3a01      	subs	r2, #1
 80025ce:	0652      	lsls	r2, r2, #25
 80025d0:	430a      	orrs	r2, r1
 80025d2:	4916      	ldr	r1, [pc, #88]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a13      	ldr	r2, [pc, #76]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fe fc26 	bl	8000e34 <HAL_GetTick>
 80025e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ea:	e009      	b.n	8002600 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ec:	f7fe fc22 	bl	8000e34 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d902      	bls.n	8002600 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	73fb      	strb	r3, [r7, #15]
          break;
 80025fe:	e005      	b.n	800260c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ef      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	4904      	ldr	r1, [pc, #16]	; (800262c <RCCEx_PLLSAI1_Config+0x1dc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e049      	b.n	80026d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe f9a4 	bl	80009a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f000 f946 	bl	8002900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0fd      	b.n	80028f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b14      	cmp	r3, #20
 8002706:	f200 80f0 	bhi.w	80028ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002765 	.word	0x08002765
 8002714:	080028eb 	.word	0x080028eb
 8002718:	080028eb 	.word	0x080028eb
 800271c:	080028eb 	.word	0x080028eb
 8002720:	080027a5 	.word	0x080027a5
 8002724:	080028eb 	.word	0x080028eb
 8002728:	080028eb 	.word	0x080028eb
 800272c:	080028eb 	.word	0x080028eb
 8002730:	080027e7 	.word	0x080027e7
 8002734:	080028eb 	.word	0x080028eb
 8002738:	080028eb 	.word	0x080028eb
 800273c:	080028eb 	.word	0x080028eb
 8002740:	08002827 	.word	0x08002827
 8002744:	080028eb 	.word	0x080028eb
 8002748:	080028eb 	.word	0x080028eb
 800274c:	080028eb 	.word	0x080028eb
 8002750:	08002869 	.word	0x08002869
 8002754:	080028eb 	.word	0x080028eb
 8002758:	080028eb 	.word	0x080028eb
 800275c:	080028eb 	.word	0x080028eb
 8002760:	080028a9 	.word	0x080028a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f92c 	bl	80029c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0208 	orr.w	r2, r2, #8
 800277e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0204 	bic.w	r2, r2, #4
 800278e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6999      	ldr	r1, [r3, #24]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	619a      	str	r2, [r3, #24]
      break;
 80027a2:	e0a3      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f988 	bl	8002ac0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699a      	ldr	r2, [r3, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6999      	ldr	r1, [r3, #24]
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	021a      	lsls	r2, r3, #8
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	619a      	str	r2, [r3, #24]
      break;
 80027e4:	e082      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f9e1 	bl	8002bb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0208 	orr.w	r2, r2, #8
 8002800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0204 	bic.w	r2, r2, #4
 8002810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69d9      	ldr	r1, [r3, #28]
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	61da      	str	r2, [r3, #28]
      break;
 8002824:	e062      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68b9      	ldr	r1, [r7, #8]
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fa39 	bl	8002ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69da      	ldr	r2, [r3, #28]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69d9      	ldr	r1, [r3, #28]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	021a      	lsls	r2, r3, #8
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	61da      	str	r2, [r3, #28]
      break;
 8002866:	e041      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fa76 	bl	8002d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0208 	orr.w	r2, r2, #8
 8002882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0204 	bic.w	r2, r2, #4
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028a6:	e021      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 faae 	bl	8002e10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	021a      	lsls	r2, r3, #8
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028e8:	e000      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80028ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop

08002900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <TIM_Base_SetConfig+0xbc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x20>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a21      	ldr	r2, [pc, #132]	; (80029bc <TIM_Base_SetConfig+0xbc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00b      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d007      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1e      	ldr	r2, [pc, #120]	; (80029c0 <TIM_Base_SetConfig+0xc0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d003      	beq.n	8002952 <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <TIM_Base_SetConfig+0xc4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d108      	bne.n	8002964 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <TIM_Base_SetConfig+0xbc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d007      	beq.n	80029a0 <TIM_Base_SetConfig+0xa0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <TIM_Base_SetConfig+0xc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0xa0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <TIM_Base_SetConfig+0xc4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d103      	bne.n	80029a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	615a      	str	r2, [r3, #20]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	40014400 	.word	0x40014400

080029c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f023 0201 	bic.w	r2, r3, #1
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 0302 	bic.w	r3, r3, #2
 8002a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <TIM_OC1_SetConfig+0xec>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_OC1_SetConfig+0x70>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <TIM_OC1_SetConfig+0xf0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_OC1_SetConfig+0x70>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a22      	ldr	r2, [pc, #136]	; (8002abc <TIM_OC1_SetConfig+0xf4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10c      	bne.n	8002a52 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 0308 	bic.w	r3, r3, #8
 8002a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f023 0304 	bic.w	r3, r3, #4
 8002a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <TIM_OC1_SetConfig+0xec>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <TIM_OC1_SetConfig+0xa2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	; (8002ab8 <TIM_OC1_SetConfig+0xf0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d003      	beq.n	8002a6a <TIM_OC1_SetConfig+0xa2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a15      	ldr	r2, [pc, #84]	; (8002abc <TIM_OC1_SetConfig+0xf4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d111      	bne.n	8002a8e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	621a      	str	r2, [r3, #32]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014400 	.word	0x40014400

08002ac0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b087      	sub	sp, #28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f023 0210 	bic.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	021b      	lsls	r3, r3, #8
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0320 	bic.w	r3, r3, #32
 8002b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <TIM_OC2_SetConfig+0xe8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d10d      	bne.n	8002b40 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a19      	ldr	r2, [pc, #100]	; (8002ba8 <TIM_OC2_SetConfig+0xe8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <TIM_OC2_SetConfig+0x98>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <TIM_OC2_SetConfig+0xec>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <TIM_OC2_SetConfig+0x98>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <TIM_OC2_SetConfig+0xf0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d113      	bne.n	8002b80 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	697a      	ldr	r2, [r7, #20]
 8002b98:	621a      	str	r2, [r3, #32]
}
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400

08002bb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <TIM_OC3_SetConfig+0xe4>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d10d      	bne.n	8002c32 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	021b      	lsls	r3, r3, #8
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a18      	ldr	r2, [pc, #96]	; (8002c98 <TIM_OC3_SetConfig+0xe4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d007      	beq.n	8002c4a <TIM_OC3_SetConfig+0x96>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <TIM_OC3_SetConfig+0xe8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d003      	beq.n	8002c4a <TIM_OC3_SetConfig+0x96>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <TIM_OC3_SetConfig+0xec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d113      	bne.n	8002c72 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40012c00 	.word	0x40012c00
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400

08002ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <TIM_OC4_SetConfig+0xb0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <TIM_OC4_SetConfig+0x74>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <TIM_OC4_SetConfig+0xb4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <TIM_OC4_SetConfig+0x74>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <TIM_OC4_SetConfig+0xb8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d109      	bne.n	8002d2c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	019b      	lsls	r3, r3, #6
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40014000 	.word	0x40014000
 8002d5c:	40014400 	.word	0x40014400

08002d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	041b      	lsls	r3, r3, #16
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <TIM_OC5_SetConfig+0xa4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_OC5_SetConfig+0x6a>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <TIM_OC5_SetConfig+0xa8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_OC5_SetConfig+0x6a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a11      	ldr	r2, [pc, #68]	; (8002e0c <TIM_OC5_SetConfig+0xac>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d109      	bne.n	8002dde <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	621a      	str	r2, [r3, #32]
}
 8002df8:	bf00      	nop
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40014400 	.word	0x40014400

08002e10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b087      	sub	sp, #28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	051b      	lsls	r3, r3, #20
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <TIM_OC6_SetConfig+0xa8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <TIM_OC6_SetConfig+0x6c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <TIM_OC6_SetConfig+0xac>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d003      	beq.n	8002e7c <TIM_OC6_SetConfig+0x6c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a12      	ldr	r2, [pc, #72]	; (8002ec0 <TIM_OC6_SetConfig+0xb0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	029b      	lsls	r3, r3, #10
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400

08002ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e04f      	b.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f44:	d004      	beq.n	8002f50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10c      	bne.n	8002f6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40014000 	.word	0x40014000

08002f90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e060      	b.n	800306e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a14      	ldr	r2, [pc, #80]	; (800307c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d115      	bne.n	800305c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	051b      	lsls	r3, r3, #20
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40012c00 	.word	0x40012c00

08003080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e040      	b.n	8003114 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fd fcd6 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2224      	movs	r2, #36	; 0x24
 80030ac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 0201 	bic.w	r2, r2, #1
 80030bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f98c 	bl	80033dc <UART_SetConfig>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e022      	b.n	8003114 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fb90 	bl	80037fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc17 	bl	8003940 <UART_CheckIdleState>
 8003112:	4603      	mov	r3, r0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	603b      	str	r3, [r7, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003130:	2b20      	cmp	r3, #32
 8003132:	f040 8081 	bne.w	8003238 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_UART_Transmit+0x26>
 800313c:	88fb      	ldrh	r3, [r7, #6]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e079      	b.n	800323a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_UART_Transmit+0x38>
 8003150:	2302      	movs	r3, #2
 8003152:	e072      	b.n	800323a <HAL_UART_Transmit+0x11e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2221      	movs	r2, #33	; 0x21
 8003166:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003168:	f7fd fe64 	bl	8000e34 <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	88fa      	ldrh	r2, [r7, #6]
 8003172:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	88fa      	ldrh	r2, [r7, #6]
 800317a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d108      	bne.n	800319a <HAL_UART_Transmit+0x7e>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d104      	bne.n	800319a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	61bb      	str	r3, [r7, #24]
 8003198:	e003      	b.n	80031a2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80031aa:	e02d      	b.n	8003208 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fc07 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e039      	b.n	800323a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10b      	bne.n	80031e4 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d8:	b292      	uxth	r2, r2
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	3302      	adds	r3, #2
 80031e0:	61bb      	str	r3, [r7, #24]
 80031e2:	e008      	b.n	80031f6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	b292      	uxth	r2, r2
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	3301      	adds	r3, #1
 80031f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1cb      	bne.n	80031ac <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2200      	movs	r2, #0
 800321c:	2140      	movs	r1, #64	; 0x40
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fbd3 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e005      	b.n	800323a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e000      	b.n	800323a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003238:	2302      	movs	r3, #2
  }
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	; 0x28
 8003246:	af02      	add	r7, sp, #8
 8003248:	60f8      	str	r0, [r7, #12]
 800324a:	60b9      	str	r1, [r7, #8]
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003256:	2b20      	cmp	r3, #32
 8003258:	f040 80bb 	bne.w	80033d2 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <HAL_UART_Receive+0x26>
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b3      	b.n	80033d4 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_UART_Receive+0x38>
 8003276:	2302      	movs	r3, #2
 8003278:	e0ac      	b.n	80033d4 <HAL_UART_Receive+0x192>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2222      	movs	r2, #34	; 0x22
 800328c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800328e:	f7fd fdd1 	bl	8000e34 <HAL_GetTick>
 8003292:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d10e      	bne.n	80032cc <HAL_UART_Receive+0x8a>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_UART_Receive+0x80>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032c0:	e02d      	b.n	800331e <HAL_UART_Receive+0xdc>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	22ff      	movs	r2, #255	; 0xff
 80032c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032ca:	e028      	b.n	800331e <HAL_UART_Receive+0xdc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_UART_Receive+0xae>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_UART_Receive+0xa4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032e4:	e01b      	b.n	800331e <HAL_UART_Receive+0xdc>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	227f      	movs	r2, #127	; 0x7f
 80032ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032ee:	e016      	b.n	800331e <HAL_UART_Receive+0xdc>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f8:	d10d      	bne.n	8003316 <HAL_UART_Receive+0xd4>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_UART_Receive+0xca>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	227f      	movs	r2, #127	; 0x7f
 8003306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800330a:	e008      	b.n	800331e <HAL_UART_Receive+0xdc>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	223f      	movs	r2, #63	; 0x3f
 8003310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003314:	e003      	b.n	800331e <HAL_UART_Receive+0xdc>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003324:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800332e:	d108      	bne.n	8003342 <HAL_UART_Receive+0x100>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d104      	bne.n	8003342 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	e003      	b.n	800334a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003352:	e033      	b.n	80033bc <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	2120      	movs	r1, #32
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fb33 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e032      	b.n	80033d4 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10c      	bne.n	800338e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800337a:	b29a      	uxth	r2, r3
 800337c:	8a7b      	ldrh	r3, [r7, #18]
 800337e:	4013      	ands	r3, r2
 8003380:	b29a      	uxth	r2, r3
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	3302      	adds	r3, #2
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	e00d      	b.n	80033aa <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003394:	b29b      	uxth	r3, r3
 8003396:	b2da      	uxtb	r2, r3
 8003398:	8a7b      	ldrh	r3, [r7, #18]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4013      	ands	r3, r2
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	3301      	adds	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1c5      	bne.n	8003354 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3720      	adds	r7, #32
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80033e0:	b088      	sub	sp, #32
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689a      	ldr	r2, [r3, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	431a      	orrs	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4bb0      	ldr	r3, [pc, #704]	; (80036cc <UART_SetConfig+0x2f0>)
 800340a:	4013      	ands	r3, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6812      	ldr	r2, [r2, #0]
 8003410:	69f9      	ldr	r1, [r7, #28]
 8003412:	430b      	orrs	r3, r1
 8003414:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4aa6      	ldr	r2, [pc, #664]	; (80036d0 <UART_SetConfig+0x2f4>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a9d      	ldr	r2, [pc, #628]	; (80036d4 <UART_SetConfig+0x2f8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d121      	bne.n	80034a8 <UART_SetConfig+0xcc>
 8003464:	4b9c      	ldr	r3, [pc, #624]	; (80036d8 <UART_SetConfig+0x2fc>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f003 0303 	and.w	r3, r3, #3
 800346e:	2b03      	cmp	r3, #3
 8003470:	d816      	bhi.n	80034a0 <UART_SetConfig+0xc4>
 8003472:	a201      	add	r2, pc, #4	; (adr r2, 8003478 <UART_SetConfig+0x9c>)
 8003474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003478:	08003489 	.word	0x08003489
 800347c:	08003495 	.word	0x08003495
 8003480:	0800348f 	.word	0x0800348f
 8003484:	0800349b 	.word	0x0800349b
 8003488:	2301      	movs	r3, #1
 800348a:	76fb      	strb	r3, [r7, #27]
 800348c:	e072      	b.n	8003574 <UART_SetConfig+0x198>
 800348e:	2302      	movs	r3, #2
 8003490:	76fb      	strb	r3, [r7, #27]
 8003492:	e06f      	b.n	8003574 <UART_SetConfig+0x198>
 8003494:	2304      	movs	r3, #4
 8003496:	76fb      	strb	r3, [r7, #27]
 8003498:	e06c      	b.n	8003574 <UART_SetConfig+0x198>
 800349a:	2308      	movs	r3, #8
 800349c:	76fb      	strb	r3, [r7, #27]
 800349e:	e069      	b.n	8003574 <UART_SetConfig+0x198>
 80034a0:	2310      	movs	r3, #16
 80034a2:	76fb      	strb	r3, [r7, #27]
 80034a4:	bf00      	nop
 80034a6:	e065      	b.n	8003574 <UART_SetConfig+0x198>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a8b      	ldr	r2, [pc, #556]	; (80036dc <UART_SetConfig+0x300>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d134      	bne.n	800351c <UART_SetConfig+0x140>
 80034b2:	4b89      	ldr	r3, [pc, #548]	; (80036d8 <UART_SetConfig+0x2fc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	d829      	bhi.n	8003514 <UART_SetConfig+0x138>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <UART_SetConfig+0xec>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	08003515 	.word	0x08003515
 80034d0:	08003515 	.word	0x08003515
 80034d4:	08003515 	.word	0x08003515
 80034d8:	08003509 	.word	0x08003509
 80034dc:	08003515 	.word	0x08003515
 80034e0:	08003515 	.word	0x08003515
 80034e4:	08003515 	.word	0x08003515
 80034e8:	08003503 	.word	0x08003503
 80034ec:	08003515 	.word	0x08003515
 80034f0:	08003515 	.word	0x08003515
 80034f4:	08003515 	.word	0x08003515
 80034f8:	0800350f 	.word	0x0800350f
 80034fc:	2300      	movs	r3, #0
 80034fe:	76fb      	strb	r3, [r7, #27]
 8003500:	e038      	b.n	8003574 <UART_SetConfig+0x198>
 8003502:	2302      	movs	r3, #2
 8003504:	76fb      	strb	r3, [r7, #27]
 8003506:	e035      	b.n	8003574 <UART_SetConfig+0x198>
 8003508:	2304      	movs	r3, #4
 800350a:	76fb      	strb	r3, [r7, #27]
 800350c:	e032      	b.n	8003574 <UART_SetConfig+0x198>
 800350e:	2308      	movs	r3, #8
 8003510:	76fb      	strb	r3, [r7, #27]
 8003512:	e02f      	b.n	8003574 <UART_SetConfig+0x198>
 8003514:	2310      	movs	r3, #16
 8003516:	76fb      	strb	r3, [r7, #27]
 8003518:	bf00      	nop
 800351a:	e02b      	b.n	8003574 <UART_SetConfig+0x198>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <UART_SetConfig+0x2f4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d124      	bne.n	8003570 <UART_SetConfig+0x194>
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <UART_SetConfig+0x2fc>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	d012      	beq.n	800355c <UART_SetConfig+0x180>
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d802      	bhi.n	8003542 <UART_SetConfig+0x166>
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <UART_SetConfig+0x174>
 8003540:	e012      	b.n	8003568 <UART_SetConfig+0x18c>
 8003542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003546:	d006      	beq.n	8003556 <UART_SetConfig+0x17a>
 8003548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800354c:	d009      	beq.n	8003562 <UART_SetConfig+0x186>
 800354e:	e00b      	b.n	8003568 <UART_SetConfig+0x18c>
 8003550:	2300      	movs	r3, #0
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e00e      	b.n	8003574 <UART_SetConfig+0x198>
 8003556:	2302      	movs	r3, #2
 8003558:	76fb      	strb	r3, [r7, #27]
 800355a:	e00b      	b.n	8003574 <UART_SetConfig+0x198>
 800355c:	2304      	movs	r3, #4
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e008      	b.n	8003574 <UART_SetConfig+0x198>
 8003562:	2308      	movs	r3, #8
 8003564:	76fb      	strb	r3, [r7, #27]
 8003566:	e005      	b.n	8003574 <UART_SetConfig+0x198>
 8003568:	2310      	movs	r3, #16
 800356a:	76fb      	strb	r3, [r7, #27]
 800356c:	bf00      	nop
 800356e:	e001      	b.n	8003574 <UART_SetConfig+0x198>
 8003570:	2310      	movs	r3, #16
 8003572:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a55      	ldr	r2, [pc, #340]	; (80036d0 <UART_SetConfig+0x2f4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d174      	bne.n	8003668 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800357e:	7efb      	ldrb	r3, [r7, #27]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d824      	bhi.n	80035ce <UART_SetConfig+0x1f2>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <UART_SetConfig+0x1b0>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035cf 	.word	0x080035cf
 8003594:	080035b9 	.word	0x080035b9
 8003598:	080035cf 	.word	0x080035cf
 800359c:	080035bf 	.word	0x080035bf
 80035a0:	080035cf 	.word	0x080035cf
 80035a4:	080035cf 	.word	0x080035cf
 80035a8:	080035cf 	.word	0x080035cf
 80035ac:	080035c7 	.word	0x080035c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fcc0 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80035b4:	6178      	str	r0, [r7, #20]
        break;
 80035b6:	e00f      	b.n	80035d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b8:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <UART_SetConfig+0x304>)
 80035ba:	617b      	str	r3, [r7, #20]
        break;
 80035bc:	e00c      	b.n	80035d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035be:	f7fe fc23 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 80035c2:	6178      	str	r0, [r7, #20]
        break;
 80035c4:	e008      	b.n	80035d8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ca:	617b      	str	r3, [r7, #20]
        break;
 80035cc:	e004      	b.n	80035d8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	76bb      	strb	r3, [r7, #26]
        break;
 80035d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8100 	beq.w	80037e0 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d305      	bcc.n	80035fc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d902      	bls.n	8003602 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	76bb      	strb	r3, [r7, #26]
 8003600:	e0ee      	b.n	80037e0 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	4619      	mov	r1, r3
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	f04f 0400 	mov.w	r4, #0
 8003612:	0214      	lsls	r4, r2, #8
 8003614:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003618:	020b      	lsls	r3, r1, #8
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6852      	ldr	r2, [r2, #4]
 800361e:	0852      	lsrs	r2, r2, #1
 8003620:	4611      	mov	r1, r2
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	eb13 0b01 	adds.w	fp, r3, r1
 800362a:	eb44 0c02 	adc.w	ip, r4, r2
 800362e:	4658      	mov	r0, fp
 8003630:	4661      	mov	r1, ip
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f04f 0400 	mov.w	r4, #0
 800363a:	461a      	mov	r2, r3
 800363c:	4623      	mov	r3, r4
 800363e:	f7fc fe17 	bl	8000270 <__aeabi_uldivmod>
 8003642:	4603      	mov	r3, r0
 8003644:	460c      	mov	r4, r1
 8003646:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800364e:	d308      	bcc.n	8003662 <UART_SetConfig+0x286>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003656:	d204      	bcs.n	8003662 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e0be      	b.n	80037e0 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	76bb      	strb	r3, [r7, #26]
 8003666:	e0bb      	b.n	80037e0 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003670:	d169      	bne.n	8003746 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003672:	7efb      	ldrb	r3, [r7, #27]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d835      	bhi.n	80036e4 <UART_SetConfig+0x308>
 8003678:	a201      	add	r2, pc, #4	; (adr r2, 8003680 <UART_SetConfig+0x2a4>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036a5 	.word	0x080036a5
 8003684:	080036ad 	.word	0x080036ad
 8003688:	080036b5 	.word	0x080036b5
 800368c:	080036e5 	.word	0x080036e5
 8003690:	080036bb 	.word	0x080036bb
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036e5 	.word	0x080036e5
 800369c:	080036e5 	.word	0x080036e5
 80036a0:	080036c3 	.word	0x080036c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a4:	f7fe fc46 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80036a8:	6178      	str	r0, [r7, #20]
        break;
 80036aa:	e020      	b.n	80036ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ac:	f7fe fc58 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 80036b0:	6178      	str	r0, [r7, #20]
        break;
 80036b2:	e01c      	b.n	80036ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <UART_SetConfig+0x304>)
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e019      	b.n	80036ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ba:	f7fe fba5 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 80036be:	6178      	str	r0, [r7, #20]
        break;
 80036c0:	e015      	b.n	80036ee <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036c6:	617b      	str	r3, [r7, #20]
        break;
 80036c8:	e011      	b.n	80036ee <UART_SetConfig+0x312>
 80036ca:	bf00      	nop
 80036cc:	efff69f3 	.word	0xefff69f3
 80036d0:	40008000 	.word	0x40008000
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40004400 	.word	0x40004400
 80036e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	76bb      	strb	r3, [r7, #26]
        break;
 80036ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d075      	beq.n	80037e0 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	005a      	lsls	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	441a      	add	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	b29b      	uxth	r3, r3
 800370a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b0f      	cmp	r3, #15
 8003710:	d916      	bls.n	8003740 <UART_SetConfig+0x364>
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003718:	d212      	bcs.n	8003740 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	b29b      	uxth	r3, r3
 800371e:	f023 030f 	bic.w	r3, r3, #15
 8003722:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	b29b      	uxth	r3, r3
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	b29a      	uxth	r2, r3
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	4313      	orrs	r3, r2
 8003734:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	89fa      	ldrh	r2, [r7, #14]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e04f      	b.n	80037e0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	76bb      	strb	r3, [r7, #26]
 8003744:	e04c      	b.n	80037e0 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003746:	7efb      	ldrb	r3, [r7, #27]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d828      	bhi.n	800379e <UART_SetConfig+0x3c2>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0x378>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003779 	.word	0x08003779
 8003758:	08003781 	.word	0x08003781
 800375c:	08003789 	.word	0x08003789
 8003760:	0800379f 	.word	0x0800379f
 8003764:	0800378f 	.word	0x0800378f
 8003768:	0800379f 	.word	0x0800379f
 800376c:	0800379f 	.word	0x0800379f
 8003770:	0800379f 	.word	0x0800379f
 8003774:	08003797 	.word	0x08003797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003778:	f7fe fbdc 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 800377c:	6178      	str	r0, [r7, #20]
        break;
 800377e:	e013      	b.n	80037a8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003780:	f7fe fbee 	bl	8001f60 <HAL_RCC_GetPCLK2Freq>
 8003784:	6178      	str	r0, [r7, #20]
        break;
 8003786:	e00f      	b.n	80037a8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <UART_SetConfig+0x41c>)
 800378a:	617b      	str	r3, [r7, #20]
        break;
 800378c:	e00c      	b.n	80037a8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378e:	f7fe fb3b 	bl	8001e08 <HAL_RCC_GetSysClockFreq>
 8003792:	6178      	str	r0, [r7, #20]
        break;
 8003794:	e008      	b.n	80037a8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800379a:	617b      	str	r3, [r7, #20]
        break;
 800379c:	e004      	b.n	80037a8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800379e:	2300      	movs	r3, #0
 80037a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	76bb      	strb	r3, [r7, #26]
        break;
 80037a6:	bf00      	nop
    }

    if (pclk != 0U)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d018      	beq.n	80037e0 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085a      	lsrs	r2, r3, #1
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	441a      	add	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	2b0f      	cmp	r3, #15
 80037c8:	d908      	bls.n	80037dc <UART_SetConfig+0x400>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d0:	d204      	bcs.n	80037dc <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e001      	b.n	80037e0 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80037ec:	7ebb      	ldrb	r3, [r7, #26]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80037f8:	00f42400 	.word	0x00f42400

080037fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00a      	beq.n	8003826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00a      	beq.n	800386a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00a      	beq.n	80038ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01a      	beq.n	8003912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038fa:	d10a      	bne.n	8003912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800394e:	f7fd fa71 	bl	8000e34 <HAL_GetTick>
 8003952:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b08      	cmp	r3, #8
 8003960:	d10e      	bne.n	8003980 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003962:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f82a 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e020      	b.n	80039c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d10e      	bne.n	80039ac <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f814 	bl	80039ca <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e00a      	b.n	80039c2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2220      	movs	r2, #32
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039da:	e05d      	b.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d059      	beq.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd fa26 	bl	8000e34 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <UART_WaitOnFlagUntilTimeout+0x30>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11b      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a08:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e042      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d02b      	beq.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d123      	bne.n	8003a98 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a68:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e00f      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	69da      	ldr	r2, [r3, #28]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	461a      	mov	r2, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d092      	beq.n	80039dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <__errno>:
 8003ac0:	4b01      	ldr	r3, [pc, #4]	; (8003ac8 <__errno+0x8>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000034 	.word	0x20000034

08003acc <__libc_init_array>:
 8003acc:	b570      	push	{r4, r5, r6, lr}
 8003ace:	4e0d      	ldr	r6, [pc, #52]	; (8003b04 <__libc_init_array+0x38>)
 8003ad0:	4c0d      	ldr	r4, [pc, #52]	; (8003b08 <__libc_init_array+0x3c>)
 8003ad2:	1ba4      	subs	r4, r4, r6
 8003ad4:	10a4      	asrs	r4, r4, #2
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	42a5      	cmp	r5, r4
 8003ada:	d109      	bne.n	8003af0 <__libc_init_array+0x24>
 8003adc:	4e0b      	ldr	r6, [pc, #44]	; (8003b0c <__libc_init_array+0x40>)
 8003ade:	4c0c      	ldr	r4, [pc, #48]	; (8003b10 <__libc_init_array+0x44>)
 8003ae0:	f001 fa96 	bl	8005010 <_init>
 8003ae4:	1ba4      	subs	r4, r4, r6
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	2500      	movs	r5, #0
 8003aea:	42a5      	cmp	r5, r4
 8003aec:	d105      	bne.n	8003afa <__libc_init_array+0x2e>
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003af4:	4798      	blx	r3
 8003af6:	3501      	adds	r5, #1
 8003af8:	e7ee      	b.n	8003ad8 <__libc_init_array+0xc>
 8003afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003afe:	4798      	blx	r3
 8003b00:	3501      	adds	r5, #1
 8003b02:	e7f2      	b.n	8003aea <__libc_init_array+0x1e>
 8003b04:	0800523c 	.word	0x0800523c
 8003b08:	0800523c 	.word	0x0800523c
 8003b0c:	0800523c 	.word	0x0800523c
 8003b10:	08005240 	.word	0x08005240

08003b14 <memset>:
 8003b14:	4402      	add	r2, r0
 8003b16:	4603      	mov	r3, r0
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d100      	bne.n	8003b1e <memset+0xa>
 8003b1c:	4770      	bx	lr
 8003b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b22:	e7f9      	b.n	8003b18 <memset+0x4>

08003b24 <_puts_r>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	460e      	mov	r6, r1
 8003b28:	4605      	mov	r5, r0
 8003b2a:	b118      	cbz	r0, 8003b34 <_puts_r+0x10>
 8003b2c:	6983      	ldr	r3, [r0, #24]
 8003b2e:	b90b      	cbnz	r3, 8003b34 <_puts_r+0x10>
 8003b30:	f000 fa36 	bl	8003fa0 <__sinit>
 8003b34:	69ab      	ldr	r3, [r5, #24]
 8003b36:	68ac      	ldr	r4, [r5, #8]
 8003b38:	b913      	cbnz	r3, 8003b40 <_puts_r+0x1c>
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	f000 fa30 	bl	8003fa0 <__sinit>
 8003b40:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <_puts_r+0xac>)
 8003b42:	429c      	cmp	r4, r3
 8003b44:	d117      	bne.n	8003b76 <_puts_r+0x52>
 8003b46:	686c      	ldr	r4, [r5, #4]
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	071b      	lsls	r3, r3, #28
 8003b4c:	d51d      	bpl.n	8003b8a <_puts_r+0x66>
 8003b4e:	6923      	ldr	r3, [r4, #16]
 8003b50:	b1db      	cbz	r3, 8003b8a <_puts_r+0x66>
 8003b52:	3e01      	subs	r6, #1
 8003b54:	68a3      	ldr	r3, [r4, #8]
 8003b56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	60a3      	str	r3, [r4, #8]
 8003b5e:	b9e9      	cbnz	r1, 8003b9c <_puts_r+0x78>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	da2e      	bge.n	8003bc2 <_puts_r+0x9e>
 8003b64:	4622      	mov	r2, r4
 8003b66:	210a      	movs	r1, #10
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f000 f857 	bl	8003c1c <__swbuf_r>
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d011      	beq.n	8003b96 <_puts_r+0x72>
 8003b72:	200a      	movs	r0, #10
 8003b74:	e011      	b.n	8003b9a <_puts_r+0x76>
 8003b76:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <_puts_r+0xb0>)
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	d101      	bne.n	8003b80 <_puts_r+0x5c>
 8003b7c:	68ac      	ldr	r4, [r5, #8]
 8003b7e:	e7e3      	b.n	8003b48 <_puts_r+0x24>
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <_puts_r+0xb4>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	bf08      	it	eq
 8003b86:	68ec      	ldreq	r4, [r5, #12]
 8003b88:	e7de      	b.n	8003b48 <_puts_r+0x24>
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	4628      	mov	r0, r5
 8003b8e:	f000 f897 	bl	8003cc0 <__swsetup_r>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d0dd      	beq.n	8003b52 <_puts_r+0x2e>
 8003b96:	f04f 30ff 	mov.w	r0, #4294967295
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da04      	bge.n	8003baa <_puts_r+0x86>
 8003ba0:	69a2      	ldr	r2, [r4, #24]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	dc06      	bgt.n	8003bb4 <_puts_r+0x90>
 8003ba6:	290a      	cmp	r1, #10
 8003ba8:	d004      	beq.n	8003bb4 <_puts_r+0x90>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	6022      	str	r2, [r4, #0]
 8003bb0:	7019      	strb	r1, [r3, #0]
 8003bb2:	e7cf      	b.n	8003b54 <_puts_r+0x30>
 8003bb4:	4622      	mov	r2, r4
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 f830 	bl	8003c1c <__swbuf_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d1c9      	bne.n	8003b54 <_puts_r+0x30>
 8003bc0:	e7e9      	b.n	8003b96 <_puts_r+0x72>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	200a      	movs	r0, #10
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	6022      	str	r2, [r4, #0]
 8003bca:	7018      	strb	r0, [r3, #0]
 8003bcc:	e7e5      	b.n	8003b9a <_puts_r+0x76>
 8003bce:	bf00      	nop
 8003bd0:	080050c8 	.word	0x080050c8
 8003bd4:	080050e8 	.word	0x080050e8
 8003bd8:	080050a8 	.word	0x080050a8

08003bdc <puts>:
 8003bdc:	4b02      	ldr	r3, [pc, #8]	; (8003be8 <puts+0xc>)
 8003bde:	4601      	mov	r1, r0
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	f7ff bf9f 	b.w	8003b24 <_puts_r>
 8003be6:	bf00      	nop
 8003be8:	20000034 	.word	0x20000034

08003bec <iscanf>:
 8003bec:	b40f      	push	{r0, r1, r2, r3}
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <iscanf+0x2c>)
 8003bf0:	b513      	push	{r0, r1, r4, lr}
 8003bf2:	681c      	ldr	r4, [r3, #0]
 8003bf4:	b124      	cbz	r4, 8003c00 <iscanf+0x14>
 8003bf6:	69a3      	ldr	r3, [r4, #24]
 8003bf8:	b913      	cbnz	r3, 8003c00 <iscanf+0x14>
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	f000 f9d0 	bl	8003fa0 <__sinit>
 8003c00:	ab05      	add	r3, sp, #20
 8003c02:	9a04      	ldr	r2, [sp, #16]
 8003c04:	6861      	ldr	r1, [r4, #4]
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	4620      	mov	r0, r4
 8003c0a:	f000 fccb 	bl	80045a4 <_vfiscanf_r>
 8003c0e:	b002      	add	sp, #8
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c14:	b004      	add	sp, #16
 8003c16:	4770      	bx	lr
 8003c18:	20000034 	.word	0x20000034

08003c1c <__swbuf_r>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	460e      	mov	r6, r1
 8003c20:	4614      	mov	r4, r2
 8003c22:	4605      	mov	r5, r0
 8003c24:	b118      	cbz	r0, 8003c2e <__swbuf_r+0x12>
 8003c26:	6983      	ldr	r3, [r0, #24]
 8003c28:	b90b      	cbnz	r3, 8003c2e <__swbuf_r+0x12>
 8003c2a:	f000 f9b9 	bl	8003fa0 <__sinit>
 8003c2e:	4b21      	ldr	r3, [pc, #132]	; (8003cb4 <__swbuf_r+0x98>)
 8003c30:	429c      	cmp	r4, r3
 8003c32:	d12a      	bne.n	8003c8a <__swbuf_r+0x6e>
 8003c34:	686c      	ldr	r4, [r5, #4]
 8003c36:	69a3      	ldr	r3, [r4, #24]
 8003c38:	60a3      	str	r3, [r4, #8]
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	071a      	lsls	r2, r3, #28
 8003c3e:	d52e      	bpl.n	8003c9e <__swbuf_r+0x82>
 8003c40:	6923      	ldr	r3, [r4, #16]
 8003c42:	b363      	cbz	r3, 8003c9e <__swbuf_r+0x82>
 8003c44:	6923      	ldr	r3, [r4, #16]
 8003c46:	6820      	ldr	r0, [r4, #0]
 8003c48:	1ac0      	subs	r0, r0, r3
 8003c4a:	6963      	ldr	r3, [r4, #20]
 8003c4c:	b2f6      	uxtb	r6, r6
 8003c4e:	4283      	cmp	r3, r0
 8003c50:	4637      	mov	r7, r6
 8003c52:	dc04      	bgt.n	8003c5e <__swbuf_r+0x42>
 8003c54:	4621      	mov	r1, r4
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f926 	bl	8003ea8 <_fflush_r>
 8003c5c:	bb28      	cbnz	r0, 8003caa <__swbuf_r+0x8e>
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	60a3      	str	r3, [r4, #8]
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	6022      	str	r2, [r4, #0]
 8003c6a:	701e      	strb	r6, [r3, #0]
 8003c6c:	6963      	ldr	r3, [r4, #20]
 8003c6e:	3001      	adds	r0, #1
 8003c70:	4283      	cmp	r3, r0
 8003c72:	d004      	beq.n	8003c7e <__swbuf_r+0x62>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	07db      	lsls	r3, r3, #31
 8003c78:	d519      	bpl.n	8003cae <__swbuf_r+0x92>
 8003c7a:	2e0a      	cmp	r6, #10
 8003c7c:	d117      	bne.n	8003cae <__swbuf_r+0x92>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f911 	bl	8003ea8 <_fflush_r>
 8003c86:	b190      	cbz	r0, 8003cae <__swbuf_r+0x92>
 8003c88:	e00f      	b.n	8003caa <__swbuf_r+0x8e>
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <__swbuf_r+0x9c>)
 8003c8c:	429c      	cmp	r4, r3
 8003c8e:	d101      	bne.n	8003c94 <__swbuf_r+0x78>
 8003c90:	68ac      	ldr	r4, [r5, #8]
 8003c92:	e7d0      	b.n	8003c36 <__swbuf_r+0x1a>
 8003c94:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <__swbuf_r+0xa0>)
 8003c96:	429c      	cmp	r4, r3
 8003c98:	bf08      	it	eq
 8003c9a:	68ec      	ldreq	r4, [r5, #12]
 8003c9c:	e7cb      	b.n	8003c36 <__swbuf_r+0x1a>
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f000 f80d 	bl	8003cc0 <__swsetup_r>
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0cc      	beq.n	8003c44 <__swbuf_r+0x28>
 8003caa:	f04f 37ff 	mov.w	r7, #4294967295
 8003cae:	4638      	mov	r0, r7
 8003cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	080050c8 	.word	0x080050c8
 8003cb8:	080050e8 	.word	0x080050e8
 8003cbc:	080050a8 	.word	0x080050a8

08003cc0 <__swsetup_r>:
 8003cc0:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <__swsetup_r+0xcc>)
 8003cc2:	b570      	push	{r4, r5, r6, lr}
 8003cc4:	681d      	ldr	r5, [r3, #0]
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	b125      	cbz	r5, 8003cd6 <__swsetup_r+0x16>
 8003ccc:	69ab      	ldr	r3, [r5, #24]
 8003cce:	b913      	cbnz	r3, 8003cd6 <__swsetup_r+0x16>
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f000 f965 	bl	8003fa0 <__sinit>
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <__swsetup_r+0xd0>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	d10f      	bne.n	8003cfc <__swsetup_r+0x3c>
 8003cdc:	686c      	ldr	r4, [r5, #4]
 8003cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	0715      	lsls	r5, r2, #28
 8003ce6:	d42c      	bmi.n	8003d42 <__swsetup_r+0x82>
 8003ce8:	06d0      	lsls	r0, r2, #27
 8003cea:	d411      	bmi.n	8003d10 <__swsetup_r+0x50>
 8003cec:	2209      	movs	r2, #9
 8003cee:	6032      	str	r2, [r6, #0]
 8003cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cfa:	e03e      	b.n	8003d7a <__swsetup_r+0xba>
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <__swsetup_r+0xd4>)
 8003cfe:	429c      	cmp	r4, r3
 8003d00:	d101      	bne.n	8003d06 <__swsetup_r+0x46>
 8003d02:	68ac      	ldr	r4, [r5, #8]
 8003d04:	e7eb      	b.n	8003cde <__swsetup_r+0x1e>
 8003d06:	4b24      	ldr	r3, [pc, #144]	; (8003d98 <__swsetup_r+0xd8>)
 8003d08:	429c      	cmp	r4, r3
 8003d0a:	bf08      	it	eq
 8003d0c:	68ec      	ldreq	r4, [r5, #12]
 8003d0e:	e7e6      	b.n	8003cde <__swsetup_r+0x1e>
 8003d10:	0751      	lsls	r1, r2, #29
 8003d12:	d512      	bpl.n	8003d3a <__swsetup_r+0x7a>
 8003d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d16:	b141      	cbz	r1, 8003d2a <__swsetup_r+0x6a>
 8003d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d1c:	4299      	cmp	r1, r3
 8003d1e:	d002      	beq.n	8003d26 <__swsetup_r+0x66>
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 fa47 	bl	80041b4 <_free_r>
 8003d26:	2300      	movs	r3, #0
 8003d28:	6363      	str	r3, [r4, #52]	; 0x34
 8003d2a:	89a3      	ldrh	r3, [r4, #12]
 8003d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d30:	81a3      	strh	r3, [r4, #12]
 8003d32:	2300      	movs	r3, #0
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	6923      	ldr	r3, [r4, #16]
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	89a3      	ldrh	r3, [r4, #12]
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	81a3      	strh	r3, [r4, #12]
 8003d42:	6923      	ldr	r3, [r4, #16]
 8003d44:	b94b      	cbnz	r3, 8003d5a <__swsetup_r+0x9a>
 8003d46:	89a3      	ldrh	r3, [r4, #12]
 8003d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d50:	d003      	beq.n	8003d5a <__swsetup_r+0x9a>
 8003d52:	4621      	mov	r1, r4
 8003d54:	4630      	mov	r0, r6
 8003d56:	f000 f9ed 	bl	8004134 <__smakebuf_r>
 8003d5a:	89a2      	ldrh	r2, [r4, #12]
 8003d5c:	f012 0301 	ands.w	r3, r2, #1
 8003d60:	d00c      	beq.n	8003d7c <__swsetup_r+0xbc>
 8003d62:	2300      	movs	r3, #0
 8003d64:	60a3      	str	r3, [r4, #8]
 8003d66:	6963      	ldr	r3, [r4, #20]
 8003d68:	425b      	negs	r3, r3
 8003d6a:	61a3      	str	r3, [r4, #24]
 8003d6c:	6923      	ldr	r3, [r4, #16]
 8003d6e:	b953      	cbnz	r3, 8003d86 <__swsetup_r+0xc6>
 8003d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d78:	d1ba      	bne.n	8003cf0 <__swsetup_r+0x30>
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	0792      	lsls	r2, r2, #30
 8003d7e:	bf58      	it	pl
 8003d80:	6963      	ldrpl	r3, [r4, #20]
 8003d82:	60a3      	str	r3, [r4, #8]
 8003d84:	e7f2      	b.n	8003d6c <__swsetup_r+0xac>
 8003d86:	2000      	movs	r0, #0
 8003d88:	e7f7      	b.n	8003d7a <__swsetup_r+0xba>
 8003d8a:	bf00      	nop
 8003d8c:	20000034 	.word	0x20000034
 8003d90:	080050c8 	.word	0x080050c8
 8003d94:	080050e8 	.word	0x080050e8
 8003d98:	080050a8 	.word	0x080050a8

08003d9c <__sflush_r>:
 8003d9c:	898a      	ldrh	r2, [r1, #12]
 8003d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da2:	4605      	mov	r5, r0
 8003da4:	0710      	lsls	r0, r2, #28
 8003da6:	460c      	mov	r4, r1
 8003da8:	d458      	bmi.n	8003e5c <__sflush_r+0xc0>
 8003daa:	684b      	ldr	r3, [r1, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	dc05      	bgt.n	8003dbc <__sflush_r+0x20>
 8003db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	dc02      	bgt.n	8003dbc <__sflush_r+0x20>
 8003db6:	2000      	movs	r0, #0
 8003db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dbe:	2e00      	cmp	r6, #0
 8003dc0:	d0f9      	beq.n	8003db6 <__sflush_r+0x1a>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003dc8:	682f      	ldr	r7, [r5, #0]
 8003dca:	6a21      	ldr	r1, [r4, #32]
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	d032      	beq.n	8003e36 <__sflush_r+0x9a>
 8003dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dd2:	89a3      	ldrh	r3, [r4, #12]
 8003dd4:	075a      	lsls	r2, r3, #29
 8003dd6:	d505      	bpl.n	8003de4 <__sflush_r+0x48>
 8003dd8:	6863      	ldr	r3, [r4, #4]
 8003dda:	1ac0      	subs	r0, r0, r3
 8003ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003dde:	b10b      	cbz	r3, 8003de4 <__sflush_r+0x48>
 8003de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003de2:	1ac0      	subs	r0, r0, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	4602      	mov	r2, r0
 8003de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003dea:	6a21      	ldr	r1, [r4, #32]
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b0      	blx	r6
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	d106      	bne.n	8003e04 <__sflush_r+0x68>
 8003df6:	6829      	ldr	r1, [r5, #0]
 8003df8:	291d      	cmp	r1, #29
 8003dfa:	d848      	bhi.n	8003e8e <__sflush_r+0xf2>
 8003dfc:	4a29      	ldr	r2, [pc, #164]	; (8003ea4 <__sflush_r+0x108>)
 8003dfe:	40ca      	lsrs	r2, r1
 8003e00:	07d6      	lsls	r6, r2, #31
 8003e02:	d544      	bpl.n	8003e8e <__sflush_r+0xf2>
 8003e04:	2200      	movs	r2, #0
 8003e06:	6062      	str	r2, [r4, #4]
 8003e08:	04d9      	lsls	r1, r3, #19
 8003e0a:	6922      	ldr	r2, [r4, #16]
 8003e0c:	6022      	str	r2, [r4, #0]
 8003e0e:	d504      	bpl.n	8003e1a <__sflush_r+0x7e>
 8003e10:	1c42      	adds	r2, r0, #1
 8003e12:	d101      	bne.n	8003e18 <__sflush_r+0x7c>
 8003e14:	682b      	ldr	r3, [r5, #0]
 8003e16:	b903      	cbnz	r3, 8003e1a <__sflush_r+0x7e>
 8003e18:	6560      	str	r0, [r4, #84]	; 0x54
 8003e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e1c:	602f      	str	r7, [r5, #0]
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	d0c9      	beq.n	8003db6 <__sflush_r+0x1a>
 8003e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e26:	4299      	cmp	r1, r3
 8003e28:	d002      	beq.n	8003e30 <__sflush_r+0x94>
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 f9c2 	bl	80041b4 <_free_r>
 8003e30:	2000      	movs	r0, #0
 8003e32:	6360      	str	r0, [r4, #52]	; 0x34
 8003e34:	e7c0      	b.n	8003db8 <__sflush_r+0x1c>
 8003e36:	2301      	movs	r3, #1
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b0      	blx	r6
 8003e3c:	1c41      	adds	r1, r0, #1
 8003e3e:	d1c8      	bne.n	8003dd2 <__sflush_r+0x36>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0c5      	beq.n	8003dd2 <__sflush_r+0x36>
 8003e46:	2b1d      	cmp	r3, #29
 8003e48:	d001      	beq.n	8003e4e <__sflush_r+0xb2>
 8003e4a:	2b16      	cmp	r3, #22
 8003e4c:	d101      	bne.n	8003e52 <__sflush_r+0xb6>
 8003e4e:	602f      	str	r7, [r5, #0]
 8003e50:	e7b1      	b.n	8003db6 <__sflush_r+0x1a>
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e58:	81a3      	strh	r3, [r4, #12]
 8003e5a:	e7ad      	b.n	8003db8 <__sflush_r+0x1c>
 8003e5c:	690f      	ldr	r7, [r1, #16]
 8003e5e:	2f00      	cmp	r7, #0
 8003e60:	d0a9      	beq.n	8003db6 <__sflush_r+0x1a>
 8003e62:	0793      	lsls	r3, r2, #30
 8003e64:	680e      	ldr	r6, [r1, #0]
 8003e66:	bf08      	it	eq
 8003e68:	694b      	ldreq	r3, [r1, #20]
 8003e6a:	600f      	str	r7, [r1, #0]
 8003e6c:	bf18      	it	ne
 8003e6e:	2300      	movne	r3, #0
 8003e70:	eba6 0807 	sub.w	r8, r6, r7
 8003e74:	608b      	str	r3, [r1, #8]
 8003e76:	f1b8 0f00 	cmp.w	r8, #0
 8003e7a:	dd9c      	ble.n	8003db6 <__sflush_r+0x1a>
 8003e7c:	4643      	mov	r3, r8
 8003e7e:	463a      	mov	r2, r7
 8003e80:	6a21      	ldr	r1, [r4, #32]
 8003e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e84:	4628      	mov	r0, r5
 8003e86:	47b0      	blx	r6
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	dc06      	bgt.n	8003e9a <__sflush_r+0xfe>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295
 8003e98:	e78e      	b.n	8003db8 <__sflush_r+0x1c>
 8003e9a:	4407      	add	r7, r0
 8003e9c:	eba8 0800 	sub.w	r8, r8, r0
 8003ea0:	e7e9      	b.n	8003e76 <__sflush_r+0xda>
 8003ea2:	bf00      	nop
 8003ea4:	20400001 	.word	0x20400001

08003ea8 <_fflush_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	690b      	ldr	r3, [r1, #16]
 8003eac:	4605      	mov	r5, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	b1db      	cbz	r3, 8003eea <_fflush_r+0x42>
 8003eb2:	b118      	cbz	r0, 8003ebc <_fflush_r+0x14>
 8003eb4:	6983      	ldr	r3, [r0, #24]
 8003eb6:	b90b      	cbnz	r3, 8003ebc <_fflush_r+0x14>
 8003eb8:	f000 f872 	bl	8003fa0 <__sinit>
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <_fflush_r+0x48>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	d109      	bne.n	8003ed6 <_fflush_r+0x2e>
 8003ec2:	686c      	ldr	r4, [r5, #4]
 8003ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ec8:	b17b      	cbz	r3, 8003eea <_fflush_r+0x42>
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4628      	mov	r0, r5
 8003ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed2:	f7ff bf63 	b.w	8003d9c <__sflush_r>
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <_fflush_r+0x4c>)
 8003ed8:	429c      	cmp	r4, r3
 8003eda:	d101      	bne.n	8003ee0 <_fflush_r+0x38>
 8003edc:	68ac      	ldr	r4, [r5, #8]
 8003ede:	e7f1      	b.n	8003ec4 <_fflush_r+0x1c>
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <_fflush_r+0x50>)
 8003ee2:	429c      	cmp	r4, r3
 8003ee4:	bf08      	it	eq
 8003ee6:	68ec      	ldreq	r4, [r5, #12]
 8003ee8:	e7ec      	b.n	8003ec4 <_fflush_r+0x1c>
 8003eea:	2000      	movs	r0, #0
 8003eec:	bd38      	pop	{r3, r4, r5, pc}
 8003eee:	bf00      	nop
 8003ef0:	080050c8 	.word	0x080050c8
 8003ef4:	080050e8 	.word	0x080050e8
 8003ef8:	080050a8 	.word	0x080050a8

08003efc <fflush>:
 8003efc:	4601      	mov	r1, r0
 8003efe:	b920      	cbnz	r0, 8003f0a <fflush+0xe>
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <fflush+0x18>)
 8003f02:	4905      	ldr	r1, [pc, #20]	; (8003f18 <fflush+0x1c>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f000 b8d3 	b.w	80040b0 <_fwalk_reent>
 8003f0a:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <fflush+0x20>)
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f7ff bfcb 	b.w	8003ea8 <_fflush_r>
 8003f12:	bf00      	nop
 8003f14:	080050a4 	.word	0x080050a4
 8003f18:	08003ea9 	.word	0x08003ea9
 8003f1c:	20000034 	.word	0x20000034

08003f20 <std>:
 8003f20:	2300      	movs	r3, #0
 8003f22:	b510      	push	{r4, lr}
 8003f24:	4604      	mov	r4, r0
 8003f26:	e9c0 3300 	strd	r3, r3, [r0]
 8003f2a:	6083      	str	r3, [r0, #8]
 8003f2c:	8181      	strh	r1, [r0, #12]
 8003f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f30:	81c2      	strh	r2, [r0, #14]
 8003f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f36:	6183      	str	r3, [r0, #24]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	305c      	adds	r0, #92	; 0x5c
 8003f3e:	f7ff fde9 	bl	8003b14 <memset>
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <std+0x38>)
 8003f44:	6263      	str	r3, [r4, #36]	; 0x24
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <std+0x3c>)
 8003f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f4a:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <std+0x40>)
 8003f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <std+0x44>)
 8003f50:	6224      	str	r4, [r4, #32]
 8003f52:	6323      	str	r3, [r4, #48]	; 0x30
 8003f54:	bd10      	pop	{r4, pc}
 8003f56:	bf00      	nop
 8003f58:	08004a55 	.word	0x08004a55
 8003f5c:	08004a77 	.word	0x08004a77
 8003f60:	08004aaf 	.word	0x08004aaf
 8003f64:	08004ad3 	.word	0x08004ad3

08003f68 <_cleanup_r>:
 8003f68:	4901      	ldr	r1, [pc, #4]	; (8003f70 <_cleanup_r+0x8>)
 8003f6a:	f000 b8a1 	b.w	80040b0 <_fwalk_reent>
 8003f6e:	bf00      	nop
 8003f70:	08003ea9 	.word	0x08003ea9

08003f74 <__sfmoreglue>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	1e4a      	subs	r2, r1, #1
 8003f78:	2568      	movs	r5, #104	; 0x68
 8003f7a:	4355      	muls	r5, r2
 8003f7c:	460e      	mov	r6, r1
 8003f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f82:	f000 f965 	bl	8004250 <_malloc_r>
 8003f86:	4604      	mov	r4, r0
 8003f88:	b140      	cbz	r0, 8003f9c <__sfmoreglue+0x28>
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8003f90:	300c      	adds	r0, #12
 8003f92:	60a0      	str	r0, [r4, #8]
 8003f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f98:	f7ff fdbc 	bl	8003b14 <memset>
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	bd70      	pop	{r4, r5, r6, pc}

08003fa0 <__sinit>:
 8003fa0:	6983      	ldr	r3, [r0, #24]
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	bb33      	cbnz	r3, 8003ff6 <__sinit+0x56>
 8003fa8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003fac:	6503      	str	r3, [r0, #80]	; 0x50
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <__sinit+0x58>)
 8003fb0:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <__sinit+0x5c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6282      	str	r2, [r0, #40]	; 0x28
 8003fb6:	4298      	cmp	r0, r3
 8003fb8:	bf04      	itt	eq
 8003fba:	2301      	moveq	r3, #1
 8003fbc:	6183      	streq	r3, [r0, #24]
 8003fbe:	f000 f81f 	bl	8004000 <__sfp>
 8003fc2:	6060      	str	r0, [r4, #4]
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 f81b 	bl	8004000 <__sfp>
 8003fca:	60a0      	str	r0, [r4, #8]
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f000 f817 	bl	8004000 <__sfp>
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	60e0      	str	r0, [r4, #12]
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	6860      	ldr	r0, [r4, #4]
 8003fda:	f7ff ffa1 	bl	8003f20 <std>
 8003fde:	2201      	movs	r2, #1
 8003fe0:	2109      	movs	r1, #9
 8003fe2:	68a0      	ldr	r0, [r4, #8]
 8003fe4:	f7ff ff9c 	bl	8003f20 <std>
 8003fe8:	2202      	movs	r2, #2
 8003fea:	2112      	movs	r1, #18
 8003fec:	68e0      	ldr	r0, [r4, #12]
 8003fee:	f7ff ff97 	bl	8003f20 <std>
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61a3      	str	r3, [r4, #24]
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	080050a4 	.word	0x080050a4
 8003ffc:	08003f69 	.word	0x08003f69

08004000 <__sfp>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <__sfp+0x70>)
 8004004:	681e      	ldr	r6, [r3, #0]
 8004006:	69b3      	ldr	r3, [r6, #24]
 8004008:	4607      	mov	r7, r0
 800400a:	b913      	cbnz	r3, 8004012 <__sfp+0x12>
 800400c:	4630      	mov	r0, r6
 800400e:	f7ff ffc7 	bl	8003fa0 <__sinit>
 8004012:	3648      	adds	r6, #72	; 0x48
 8004014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004018:	3b01      	subs	r3, #1
 800401a:	d503      	bpl.n	8004024 <__sfp+0x24>
 800401c:	6833      	ldr	r3, [r6, #0]
 800401e:	b133      	cbz	r3, 800402e <__sfp+0x2e>
 8004020:	6836      	ldr	r6, [r6, #0]
 8004022:	e7f7      	b.n	8004014 <__sfp+0x14>
 8004024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004028:	b16d      	cbz	r5, 8004046 <__sfp+0x46>
 800402a:	3468      	adds	r4, #104	; 0x68
 800402c:	e7f4      	b.n	8004018 <__sfp+0x18>
 800402e:	2104      	movs	r1, #4
 8004030:	4638      	mov	r0, r7
 8004032:	f7ff ff9f 	bl	8003f74 <__sfmoreglue>
 8004036:	6030      	str	r0, [r6, #0]
 8004038:	2800      	cmp	r0, #0
 800403a:	d1f1      	bne.n	8004020 <__sfp+0x20>
 800403c:	230c      	movs	r3, #12
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4604      	mov	r4, r0
 8004042:	4620      	mov	r0, r4
 8004044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <__sfp+0x74>)
 8004048:	6665      	str	r5, [r4, #100]	; 0x64
 800404a:	e9c4 5500 	strd	r5, r5, [r4]
 800404e:	60a5      	str	r5, [r4, #8]
 8004050:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004054:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004058:	2208      	movs	r2, #8
 800405a:	4629      	mov	r1, r5
 800405c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004060:	f7ff fd58 	bl	8003b14 <memset>
 8004064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800406c:	e7e9      	b.n	8004042 <__sfp+0x42>
 800406e:	bf00      	nop
 8004070:	080050a4 	.word	0x080050a4
 8004074:	ffff0001 	.word	0xffff0001

08004078 <_fwalk>:
 8004078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800407c:	4688      	mov	r8, r1
 800407e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004082:	2600      	movs	r6, #0
 8004084:	b914      	cbnz	r4, 800408c <_fwalk+0x14>
 8004086:	4630      	mov	r0, r6
 8004088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800408c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004090:	3f01      	subs	r7, #1
 8004092:	d501      	bpl.n	8004098 <_fwalk+0x20>
 8004094:	6824      	ldr	r4, [r4, #0]
 8004096:	e7f5      	b.n	8004084 <_fwalk+0xc>
 8004098:	89ab      	ldrh	r3, [r5, #12]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d906      	bls.n	80040ac <_fwalk+0x34>
 800409e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040a2:	3301      	adds	r3, #1
 80040a4:	d002      	beq.n	80040ac <_fwalk+0x34>
 80040a6:	4628      	mov	r0, r5
 80040a8:	47c0      	blx	r8
 80040aa:	4306      	orrs	r6, r0
 80040ac:	3568      	adds	r5, #104	; 0x68
 80040ae:	e7ef      	b.n	8004090 <_fwalk+0x18>

080040b0 <_fwalk_reent>:
 80040b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b4:	4680      	mov	r8, r0
 80040b6:	4689      	mov	r9, r1
 80040b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80040bc:	2600      	movs	r6, #0
 80040be:	b914      	cbnz	r4, 80040c6 <_fwalk_reent+0x16>
 80040c0:	4630      	mov	r0, r6
 80040c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80040ca:	3f01      	subs	r7, #1
 80040cc:	d501      	bpl.n	80040d2 <_fwalk_reent+0x22>
 80040ce:	6824      	ldr	r4, [r4, #0]
 80040d0:	e7f5      	b.n	80040be <_fwalk_reent+0xe>
 80040d2:	89ab      	ldrh	r3, [r5, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d907      	bls.n	80040e8 <_fwalk_reent+0x38>
 80040d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040dc:	3301      	adds	r3, #1
 80040de:	d003      	beq.n	80040e8 <_fwalk_reent+0x38>
 80040e0:	4629      	mov	r1, r5
 80040e2:	4640      	mov	r0, r8
 80040e4:	47c8      	blx	r9
 80040e6:	4306      	orrs	r6, r0
 80040e8:	3568      	adds	r5, #104	; 0x68
 80040ea:	e7ee      	b.n	80040ca <_fwalk_reent+0x1a>

080040ec <__swhatbuf_r>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	460e      	mov	r6, r1
 80040f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f4:	2900      	cmp	r1, #0
 80040f6:	b096      	sub	sp, #88	; 0x58
 80040f8:	4614      	mov	r4, r2
 80040fa:	461d      	mov	r5, r3
 80040fc:	da07      	bge.n	800410e <__swhatbuf_r+0x22>
 80040fe:	2300      	movs	r3, #0
 8004100:	602b      	str	r3, [r5, #0]
 8004102:	89b3      	ldrh	r3, [r6, #12]
 8004104:	061a      	lsls	r2, r3, #24
 8004106:	d410      	bmi.n	800412a <__swhatbuf_r+0x3e>
 8004108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800410c:	e00e      	b.n	800412c <__swhatbuf_r+0x40>
 800410e:	466a      	mov	r2, sp
 8004110:	f000 feca 	bl	8004ea8 <_fstat_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	dbf2      	blt.n	80040fe <__swhatbuf_r+0x12>
 8004118:	9a01      	ldr	r2, [sp, #4]
 800411a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800411e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004122:	425a      	negs	r2, r3
 8004124:	415a      	adcs	r2, r3
 8004126:	602a      	str	r2, [r5, #0]
 8004128:	e7ee      	b.n	8004108 <__swhatbuf_r+0x1c>
 800412a:	2340      	movs	r3, #64	; 0x40
 800412c:	2000      	movs	r0, #0
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	b016      	add	sp, #88	; 0x58
 8004132:	bd70      	pop	{r4, r5, r6, pc}

08004134 <__smakebuf_r>:
 8004134:	898b      	ldrh	r3, [r1, #12]
 8004136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004138:	079d      	lsls	r5, r3, #30
 800413a:	4606      	mov	r6, r0
 800413c:	460c      	mov	r4, r1
 800413e:	d507      	bpl.n	8004150 <__smakebuf_r+0x1c>
 8004140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	2301      	movs	r3, #1
 800414a:	6163      	str	r3, [r4, #20]
 800414c:	b002      	add	sp, #8
 800414e:	bd70      	pop	{r4, r5, r6, pc}
 8004150:	ab01      	add	r3, sp, #4
 8004152:	466a      	mov	r2, sp
 8004154:	f7ff ffca 	bl	80040ec <__swhatbuf_r>
 8004158:	9900      	ldr	r1, [sp, #0]
 800415a:	4605      	mov	r5, r0
 800415c:	4630      	mov	r0, r6
 800415e:	f000 f877 	bl	8004250 <_malloc_r>
 8004162:	b948      	cbnz	r0, 8004178 <__smakebuf_r+0x44>
 8004164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004168:	059a      	lsls	r2, r3, #22
 800416a:	d4ef      	bmi.n	800414c <__smakebuf_r+0x18>
 800416c:	f023 0303 	bic.w	r3, r3, #3
 8004170:	f043 0302 	orr.w	r3, r3, #2
 8004174:	81a3      	strh	r3, [r4, #12]
 8004176:	e7e3      	b.n	8004140 <__smakebuf_r+0xc>
 8004178:	4b0d      	ldr	r3, [pc, #52]	; (80041b0 <__smakebuf_r+0x7c>)
 800417a:	62b3      	str	r3, [r6, #40]	; 0x28
 800417c:	89a3      	ldrh	r3, [r4, #12]
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004184:	81a3      	strh	r3, [r4, #12]
 8004186:	9b00      	ldr	r3, [sp, #0]
 8004188:	6163      	str	r3, [r4, #20]
 800418a:	9b01      	ldr	r3, [sp, #4]
 800418c:	6120      	str	r0, [r4, #16]
 800418e:	b15b      	cbz	r3, 80041a8 <__smakebuf_r+0x74>
 8004190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004194:	4630      	mov	r0, r6
 8004196:	f000 fe99 	bl	8004ecc <_isatty_r>
 800419a:	b128      	cbz	r0, 80041a8 <__smakebuf_r+0x74>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	f023 0303 	bic.w	r3, r3, #3
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	89a3      	ldrh	r3, [r4, #12]
 80041aa:	431d      	orrs	r5, r3
 80041ac:	81a5      	strh	r5, [r4, #12]
 80041ae:	e7cd      	b.n	800414c <__smakebuf_r+0x18>
 80041b0:	08003f69 	.word	0x08003f69

080041b4 <_free_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d045      	beq.n	8004248 <_free_r+0x94>
 80041bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c0:	1f0c      	subs	r4, r1, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bfb8      	it	lt
 80041c6:	18e4      	addlt	r4, r4, r3
 80041c8:	f000 fed1 	bl	8004f6e <__malloc_lock>
 80041cc:	4a1f      	ldr	r2, [pc, #124]	; (800424c <_free_r+0x98>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	4610      	mov	r0, r2
 80041d2:	b933      	cbnz	r3, 80041e2 <_free_r+0x2e>
 80041d4:	6063      	str	r3, [r4, #4]
 80041d6:	6014      	str	r4, [r2, #0]
 80041d8:	4628      	mov	r0, r5
 80041da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041de:	f000 bec7 	b.w	8004f70 <__malloc_unlock>
 80041e2:	42a3      	cmp	r3, r4
 80041e4:	d90c      	bls.n	8004200 <_free_r+0x4c>
 80041e6:	6821      	ldr	r1, [r4, #0]
 80041e8:	1862      	adds	r2, r4, r1
 80041ea:	4293      	cmp	r3, r2
 80041ec:	bf04      	itt	eq
 80041ee:	681a      	ldreq	r2, [r3, #0]
 80041f0:	685b      	ldreq	r3, [r3, #4]
 80041f2:	6063      	str	r3, [r4, #4]
 80041f4:	bf04      	itt	eq
 80041f6:	1852      	addeq	r2, r2, r1
 80041f8:	6022      	streq	r2, [r4, #0]
 80041fa:	6004      	str	r4, [r0, #0]
 80041fc:	e7ec      	b.n	80041d8 <_free_r+0x24>
 80041fe:	4613      	mov	r3, r2
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	b10a      	cbz	r2, 8004208 <_free_r+0x54>
 8004204:	42a2      	cmp	r2, r4
 8004206:	d9fa      	bls.n	80041fe <_free_r+0x4a>
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	1858      	adds	r0, r3, r1
 800420c:	42a0      	cmp	r0, r4
 800420e:	d10b      	bne.n	8004228 <_free_r+0x74>
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	4401      	add	r1, r0
 8004214:	1858      	adds	r0, r3, r1
 8004216:	4282      	cmp	r2, r0
 8004218:	6019      	str	r1, [r3, #0]
 800421a:	d1dd      	bne.n	80041d8 <_free_r+0x24>
 800421c:	6810      	ldr	r0, [r2, #0]
 800421e:	6852      	ldr	r2, [r2, #4]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	4401      	add	r1, r0
 8004224:	6019      	str	r1, [r3, #0]
 8004226:	e7d7      	b.n	80041d8 <_free_r+0x24>
 8004228:	d902      	bls.n	8004230 <_free_r+0x7c>
 800422a:	230c      	movs	r3, #12
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	e7d3      	b.n	80041d8 <_free_r+0x24>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	1821      	adds	r1, r4, r0
 8004234:	428a      	cmp	r2, r1
 8004236:	bf04      	itt	eq
 8004238:	6811      	ldreq	r1, [r2, #0]
 800423a:	6852      	ldreq	r2, [r2, #4]
 800423c:	6062      	str	r2, [r4, #4]
 800423e:	bf04      	itt	eq
 8004240:	1809      	addeq	r1, r1, r0
 8004242:	6021      	streq	r1, [r4, #0]
 8004244:	605c      	str	r4, [r3, #4]
 8004246:	e7c7      	b.n	80041d8 <_free_r+0x24>
 8004248:	bd38      	pop	{r3, r4, r5, pc}
 800424a:	bf00      	nop
 800424c:	20000224 	.word	0x20000224

08004250 <_malloc_r>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	1ccd      	adds	r5, r1, #3
 8004254:	f025 0503 	bic.w	r5, r5, #3
 8004258:	3508      	adds	r5, #8
 800425a:	2d0c      	cmp	r5, #12
 800425c:	bf38      	it	cc
 800425e:	250c      	movcc	r5, #12
 8004260:	2d00      	cmp	r5, #0
 8004262:	4606      	mov	r6, r0
 8004264:	db01      	blt.n	800426a <_malloc_r+0x1a>
 8004266:	42a9      	cmp	r1, r5
 8004268:	d903      	bls.n	8004272 <_malloc_r+0x22>
 800426a:	230c      	movs	r3, #12
 800426c:	6033      	str	r3, [r6, #0]
 800426e:	2000      	movs	r0, #0
 8004270:	bd70      	pop	{r4, r5, r6, pc}
 8004272:	f000 fe7c 	bl	8004f6e <__malloc_lock>
 8004276:	4a21      	ldr	r2, [pc, #132]	; (80042fc <_malloc_r+0xac>)
 8004278:	6814      	ldr	r4, [r2, #0]
 800427a:	4621      	mov	r1, r4
 800427c:	b991      	cbnz	r1, 80042a4 <_malloc_r+0x54>
 800427e:	4c20      	ldr	r4, [pc, #128]	; (8004300 <_malloc_r+0xb0>)
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	b91b      	cbnz	r3, 800428c <_malloc_r+0x3c>
 8004284:	4630      	mov	r0, r6
 8004286:	f000 fba3 	bl	80049d0 <_sbrk_r>
 800428a:	6020      	str	r0, [r4, #0]
 800428c:	4629      	mov	r1, r5
 800428e:	4630      	mov	r0, r6
 8004290:	f000 fb9e 	bl	80049d0 <_sbrk_r>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d124      	bne.n	80042e2 <_malloc_r+0x92>
 8004298:	230c      	movs	r3, #12
 800429a:	6033      	str	r3, [r6, #0]
 800429c:	4630      	mov	r0, r6
 800429e:	f000 fe67 	bl	8004f70 <__malloc_unlock>
 80042a2:	e7e4      	b.n	800426e <_malloc_r+0x1e>
 80042a4:	680b      	ldr	r3, [r1, #0]
 80042a6:	1b5b      	subs	r3, r3, r5
 80042a8:	d418      	bmi.n	80042dc <_malloc_r+0x8c>
 80042aa:	2b0b      	cmp	r3, #11
 80042ac:	d90f      	bls.n	80042ce <_malloc_r+0x7e>
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	50cd      	str	r5, [r1, r3]
 80042b2:	18cc      	adds	r4, r1, r3
 80042b4:	4630      	mov	r0, r6
 80042b6:	f000 fe5b 	bl	8004f70 <__malloc_unlock>
 80042ba:	f104 000b 	add.w	r0, r4, #11
 80042be:	1d23      	adds	r3, r4, #4
 80042c0:	f020 0007 	bic.w	r0, r0, #7
 80042c4:	1ac3      	subs	r3, r0, r3
 80042c6:	d0d3      	beq.n	8004270 <_malloc_r+0x20>
 80042c8:	425a      	negs	r2, r3
 80042ca:	50e2      	str	r2, [r4, r3]
 80042cc:	e7d0      	b.n	8004270 <_malloc_r+0x20>
 80042ce:	428c      	cmp	r4, r1
 80042d0:	684b      	ldr	r3, [r1, #4]
 80042d2:	bf16      	itet	ne
 80042d4:	6063      	strne	r3, [r4, #4]
 80042d6:	6013      	streq	r3, [r2, #0]
 80042d8:	460c      	movne	r4, r1
 80042da:	e7eb      	b.n	80042b4 <_malloc_r+0x64>
 80042dc:	460c      	mov	r4, r1
 80042de:	6849      	ldr	r1, [r1, #4]
 80042e0:	e7cc      	b.n	800427c <_malloc_r+0x2c>
 80042e2:	1cc4      	adds	r4, r0, #3
 80042e4:	f024 0403 	bic.w	r4, r4, #3
 80042e8:	42a0      	cmp	r0, r4
 80042ea:	d005      	beq.n	80042f8 <_malloc_r+0xa8>
 80042ec:	1a21      	subs	r1, r4, r0
 80042ee:	4630      	mov	r0, r6
 80042f0:	f000 fb6e 	bl	80049d0 <_sbrk_r>
 80042f4:	3001      	adds	r0, #1
 80042f6:	d0cf      	beq.n	8004298 <_malloc_r+0x48>
 80042f8:	6025      	str	r5, [r4, #0]
 80042fa:	e7db      	b.n	80042b4 <_malloc_r+0x64>
 80042fc:	20000224 	.word	0x20000224
 8004300:	20000228 	.word	0x20000228

08004304 <__svfiscanf_r>:
 8004304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004308:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800430c:	460c      	mov	r4, r1
 800430e:	2100      	movs	r1, #0
 8004310:	9144      	str	r1, [sp, #272]	; 0x110
 8004312:	9145      	str	r1, [sp, #276]	; 0x114
 8004314:	499f      	ldr	r1, [pc, #636]	; (8004594 <__svfiscanf_r+0x290>)
 8004316:	91a0      	str	r1, [sp, #640]	; 0x280
 8004318:	f10d 0804 	add.w	r8, sp, #4
 800431c:	499e      	ldr	r1, [pc, #632]	; (8004598 <__svfiscanf_r+0x294>)
 800431e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800459c <__svfiscanf_r+0x298>
 8004322:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8004326:	4606      	mov	r6, r0
 8004328:	4692      	mov	sl, r2
 800432a:	91a1      	str	r1, [sp, #644]	; 0x284
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	270a      	movs	r7, #10
 8004330:	f89a 3000 	ldrb.w	r3, [sl]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 812a 	beq.w	800458e <__svfiscanf_r+0x28a>
 800433a:	4655      	mov	r5, sl
 800433c:	f000 fdda 	bl	8004ef4 <__locale_ctype_ptr>
 8004340:	f815 bb01 	ldrb.w	fp, [r5], #1
 8004344:	4458      	add	r0, fp
 8004346:	7843      	ldrb	r3, [r0, #1]
 8004348:	f013 0308 	ands.w	r3, r3, #8
 800434c:	d01c      	beq.n	8004388 <__svfiscanf_r+0x84>
 800434e:	6863      	ldr	r3, [r4, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	dd12      	ble.n	800437a <__svfiscanf_r+0x76>
 8004354:	f000 fdce 	bl	8004ef4 <__locale_ctype_ptr>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4410      	add	r0, r2
 800435e:	7842      	ldrb	r2, [r0, #1]
 8004360:	0712      	lsls	r2, r2, #28
 8004362:	d401      	bmi.n	8004368 <__svfiscanf_r+0x64>
 8004364:	46aa      	mov	sl, r5
 8004366:	e7e3      	b.n	8004330 <__svfiscanf_r+0x2c>
 8004368:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800436a:	3201      	adds	r2, #1
 800436c:	9245      	str	r2, [sp, #276]	; 0x114
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	3301      	adds	r3, #1
 8004372:	3a01      	subs	r2, #1
 8004374:	6062      	str	r2, [r4, #4]
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	e7e9      	b.n	800434e <__svfiscanf_r+0x4a>
 800437a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800437c:	4621      	mov	r1, r4
 800437e:	4630      	mov	r0, r6
 8004380:	4798      	blx	r3
 8004382:	2800      	cmp	r0, #0
 8004384:	d0e6      	beq.n	8004354 <__svfiscanf_r+0x50>
 8004386:	e7ed      	b.n	8004364 <__svfiscanf_r+0x60>
 8004388:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800438c:	f040 8082 	bne.w	8004494 <__svfiscanf_r+0x190>
 8004390:	9343      	str	r3, [sp, #268]	; 0x10c
 8004392:	9341      	str	r3, [sp, #260]	; 0x104
 8004394:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8004398:	2b2a      	cmp	r3, #42	; 0x2a
 800439a:	d103      	bne.n	80043a4 <__svfiscanf_r+0xa0>
 800439c:	2310      	movs	r3, #16
 800439e:	9341      	str	r3, [sp, #260]	; 0x104
 80043a0:	f10a 0502 	add.w	r5, sl, #2
 80043a4:	46aa      	mov	sl, r5
 80043a6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80043aa:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80043ae:	2a09      	cmp	r2, #9
 80043b0:	d922      	bls.n	80043f8 <__svfiscanf_r+0xf4>
 80043b2:	2203      	movs	r2, #3
 80043b4:	4879      	ldr	r0, [pc, #484]	; (800459c <__svfiscanf_r+0x298>)
 80043b6:	f7fb ff0b 	bl	80001d0 <memchr>
 80043ba:	b138      	cbz	r0, 80043cc <__svfiscanf_r+0xc8>
 80043bc:	eba0 0309 	sub.w	r3, r0, r9
 80043c0:	2001      	movs	r0, #1
 80043c2:	4098      	lsls	r0, r3
 80043c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80043c6:	4318      	orrs	r0, r3
 80043c8:	9041      	str	r0, [sp, #260]	; 0x104
 80043ca:	46aa      	mov	sl, r5
 80043cc:	f89a 3000 	ldrb.w	r3, [sl]
 80043d0:	2b67      	cmp	r3, #103	; 0x67
 80043d2:	f10a 0501 	add.w	r5, sl, #1
 80043d6:	d82b      	bhi.n	8004430 <__svfiscanf_r+0x12c>
 80043d8:	2b65      	cmp	r3, #101	; 0x65
 80043da:	f080 809f 	bcs.w	800451c <__svfiscanf_r+0x218>
 80043de:	2b47      	cmp	r3, #71	; 0x47
 80043e0:	d810      	bhi.n	8004404 <__svfiscanf_r+0x100>
 80043e2:	2b45      	cmp	r3, #69	; 0x45
 80043e4:	f080 809a 	bcs.w	800451c <__svfiscanf_r+0x218>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06c      	beq.n	80044c6 <__svfiscanf_r+0x1c2>
 80043ec:	2b25      	cmp	r3, #37	; 0x25
 80043ee:	d051      	beq.n	8004494 <__svfiscanf_r+0x190>
 80043f0:	2303      	movs	r3, #3
 80043f2:	9347      	str	r3, [sp, #284]	; 0x11c
 80043f4:	9742      	str	r7, [sp, #264]	; 0x108
 80043f6:	e027      	b.n	8004448 <__svfiscanf_r+0x144>
 80043f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80043fa:	fb07 1303 	mla	r3, r7, r3, r1
 80043fe:	3b30      	subs	r3, #48	; 0x30
 8004400:	9343      	str	r3, [sp, #268]	; 0x10c
 8004402:	e7cf      	b.n	80043a4 <__svfiscanf_r+0xa0>
 8004404:	2b5b      	cmp	r3, #91	; 0x5b
 8004406:	d06a      	beq.n	80044de <__svfiscanf_r+0x1da>
 8004408:	d80c      	bhi.n	8004424 <__svfiscanf_r+0x120>
 800440a:	2b58      	cmp	r3, #88	; 0x58
 800440c:	d1f0      	bne.n	80043f0 <__svfiscanf_r+0xec>
 800440e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004414:	9241      	str	r2, [sp, #260]	; 0x104
 8004416:	2210      	movs	r2, #16
 8004418:	9242      	str	r2, [sp, #264]	; 0x108
 800441a:	2b6e      	cmp	r3, #110	; 0x6e
 800441c:	bf8c      	ite	hi
 800441e:	2304      	movhi	r3, #4
 8004420:	2303      	movls	r3, #3
 8004422:	e010      	b.n	8004446 <__svfiscanf_r+0x142>
 8004424:	2b63      	cmp	r3, #99	; 0x63
 8004426:	d065      	beq.n	80044f4 <__svfiscanf_r+0x1f0>
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d1e1      	bne.n	80043f0 <__svfiscanf_r+0xec>
 800442c:	9742      	str	r7, [sp, #264]	; 0x108
 800442e:	e7f4      	b.n	800441a <__svfiscanf_r+0x116>
 8004430:	2b70      	cmp	r3, #112	; 0x70
 8004432:	d04b      	beq.n	80044cc <__svfiscanf_r+0x1c8>
 8004434:	d826      	bhi.n	8004484 <__svfiscanf_r+0x180>
 8004436:	2b6e      	cmp	r3, #110	; 0x6e
 8004438:	d062      	beq.n	8004500 <__svfiscanf_r+0x1fc>
 800443a:	d84c      	bhi.n	80044d6 <__svfiscanf_r+0x1d2>
 800443c:	2b69      	cmp	r3, #105	; 0x69
 800443e:	d1d7      	bne.n	80043f0 <__svfiscanf_r+0xec>
 8004440:	2300      	movs	r3, #0
 8004442:	9342      	str	r3, [sp, #264]	; 0x108
 8004444:	2303      	movs	r3, #3
 8004446:	9347      	str	r3, [sp, #284]	; 0x11c
 8004448:	6863      	ldr	r3, [r4, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	dd68      	ble.n	8004520 <__svfiscanf_r+0x21c>
 800444e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004450:	0659      	lsls	r1, r3, #25
 8004452:	d407      	bmi.n	8004464 <__svfiscanf_r+0x160>
 8004454:	f000 fd4e 	bl	8004ef4 <__locale_ctype_ptr>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	4410      	add	r0, r2
 800445e:	7842      	ldrb	r2, [r0, #1]
 8004460:	0712      	lsls	r2, r2, #28
 8004462:	d464      	bmi.n	800452e <__svfiscanf_r+0x22a>
 8004464:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004466:	2b02      	cmp	r3, #2
 8004468:	dc73      	bgt.n	8004552 <__svfiscanf_r+0x24e>
 800446a:	466b      	mov	r3, sp
 800446c:	4622      	mov	r2, r4
 800446e:	a941      	add	r1, sp, #260	; 0x104
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f8bf 	bl	80045f4 <_scanf_chars>
 8004476:	2801      	cmp	r0, #1
 8004478:	f000 8089 	beq.w	800458e <__svfiscanf_r+0x28a>
 800447c:	2802      	cmp	r0, #2
 800447e:	f47f af71 	bne.w	8004364 <__svfiscanf_r+0x60>
 8004482:	e01d      	b.n	80044c0 <__svfiscanf_r+0x1bc>
 8004484:	2b75      	cmp	r3, #117	; 0x75
 8004486:	d0d1      	beq.n	800442c <__svfiscanf_r+0x128>
 8004488:	2b78      	cmp	r3, #120	; 0x78
 800448a:	d0c0      	beq.n	800440e <__svfiscanf_r+0x10a>
 800448c:	2b73      	cmp	r3, #115	; 0x73
 800448e:	d1af      	bne.n	80043f0 <__svfiscanf_r+0xec>
 8004490:	2302      	movs	r3, #2
 8004492:	e7d8      	b.n	8004446 <__svfiscanf_r+0x142>
 8004494:	6863      	ldr	r3, [r4, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	dd0c      	ble.n	80044b4 <__svfiscanf_r+0x1b0>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	455a      	cmp	r2, fp
 80044a0:	d175      	bne.n	800458e <__svfiscanf_r+0x28a>
 80044a2:	3301      	adds	r3, #1
 80044a4:	6862      	ldr	r2, [r4, #4]
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80044aa:	3a01      	subs	r2, #1
 80044ac:	3301      	adds	r3, #1
 80044ae:	6062      	str	r2, [r4, #4]
 80044b0:	9345      	str	r3, [sp, #276]	; 0x114
 80044b2:	e757      	b.n	8004364 <__svfiscanf_r+0x60>
 80044b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80044b6:	4621      	mov	r1, r4
 80044b8:	4630      	mov	r0, r6
 80044ba:	4798      	blx	r3
 80044bc:	2800      	cmp	r0, #0
 80044be:	d0ec      	beq.n	800449a <__svfiscanf_r+0x196>
 80044c0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80044c2:	2800      	cmp	r0, #0
 80044c4:	d159      	bne.n	800457a <__svfiscanf_r+0x276>
 80044c6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ca:	e05c      	b.n	8004586 <__svfiscanf_r+0x282>
 80044cc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80044ce:	f042 0220 	orr.w	r2, r2, #32
 80044d2:	9241      	str	r2, [sp, #260]	; 0x104
 80044d4:	e79b      	b.n	800440e <__svfiscanf_r+0x10a>
 80044d6:	2308      	movs	r3, #8
 80044d8:	9342      	str	r3, [sp, #264]	; 0x108
 80044da:	2304      	movs	r3, #4
 80044dc:	e7b3      	b.n	8004446 <__svfiscanf_r+0x142>
 80044de:	4629      	mov	r1, r5
 80044e0:	4640      	mov	r0, r8
 80044e2:	f000 fa85 	bl	80049f0 <__sccl>
 80044e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	9341      	str	r3, [sp, #260]	; 0x104
 80044ee:	4605      	mov	r5, r0
 80044f0:	2301      	movs	r3, #1
 80044f2:	e7a8      	b.n	8004446 <__svfiscanf_r+0x142>
 80044f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80044f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044fa:	9341      	str	r3, [sp, #260]	; 0x104
 80044fc:	2300      	movs	r3, #0
 80044fe:	e7a2      	b.n	8004446 <__svfiscanf_r+0x142>
 8004500:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004502:	06c3      	lsls	r3, r0, #27
 8004504:	f53f af2e 	bmi.w	8004364 <__svfiscanf_r+0x60>
 8004508:	9b00      	ldr	r3, [sp, #0]
 800450a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800450c:	1d19      	adds	r1, r3, #4
 800450e:	9100      	str	r1, [sp, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	07c0      	lsls	r0, r0, #31
 8004514:	bf4c      	ite	mi
 8004516:	801a      	strhmi	r2, [r3, #0]
 8004518:	601a      	strpl	r2, [r3, #0]
 800451a:	e723      	b.n	8004364 <__svfiscanf_r+0x60>
 800451c:	2305      	movs	r3, #5
 800451e:	e792      	b.n	8004446 <__svfiscanf_r+0x142>
 8004520:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004522:	4621      	mov	r1, r4
 8004524:	4630      	mov	r0, r6
 8004526:	4798      	blx	r3
 8004528:	2800      	cmp	r0, #0
 800452a:	d090      	beq.n	800444e <__svfiscanf_r+0x14a>
 800452c:	e7c8      	b.n	80044c0 <__svfiscanf_r+0x1bc>
 800452e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004530:	3201      	adds	r2, #1
 8004532:	9245      	str	r2, [sp, #276]	; 0x114
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	3a01      	subs	r2, #1
 8004538:	2a00      	cmp	r2, #0
 800453a:	6062      	str	r2, [r4, #4]
 800453c:	dd02      	ble.n	8004544 <__svfiscanf_r+0x240>
 800453e:	3301      	adds	r3, #1
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	e787      	b.n	8004454 <__svfiscanf_r+0x150>
 8004544:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004546:	4621      	mov	r1, r4
 8004548:	4630      	mov	r0, r6
 800454a:	4798      	blx	r3
 800454c:	2800      	cmp	r0, #0
 800454e:	d081      	beq.n	8004454 <__svfiscanf_r+0x150>
 8004550:	e7b6      	b.n	80044c0 <__svfiscanf_r+0x1bc>
 8004552:	2b04      	cmp	r3, #4
 8004554:	dc06      	bgt.n	8004564 <__svfiscanf_r+0x260>
 8004556:	466b      	mov	r3, sp
 8004558:	4622      	mov	r2, r4
 800455a:	a941      	add	r1, sp, #260	; 0x104
 800455c:	4630      	mov	r0, r6
 800455e:	f000 f8ad 	bl	80046bc <_scanf_i>
 8004562:	e788      	b.n	8004476 <__svfiscanf_r+0x172>
 8004564:	4b0e      	ldr	r3, [pc, #56]	; (80045a0 <__svfiscanf_r+0x29c>)
 8004566:	2b00      	cmp	r3, #0
 8004568:	f43f aefc 	beq.w	8004364 <__svfiscanf_r+0x60>
 800456c:	466b      	mov	r3, sp
 800456e:	4622      	mov	r2, r4
 8004570:	a941      	add	r1, sp, #260	; 0x104
 8004572:	4630      	mov	r0, r6
 8004574:	f3af 8000 	nop.w
 8004578:	e77d      	b.n	8004476 <__svfiscanf_r+0x172>
 800457a:	89a3      	ldrh	r3, [r4, #12]
 800457c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004580:	bf18      	it	ne
 8004582:	f04f 30ff 	movne.w	r0, #4294967295
 8004586:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800458a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004590:	e7f9      	b.n	8004586 <__svfiscanf_r+0x282>
 8004592:	bf00      	nop
 8004594:	08004d81 	.word	0x08004d81
 8004598:	080048b9 	.word	0x080048b9
 800459c:	08005108 	.word	0x08005108
 80045a0:	00000000 	.word	0x00000000

080045a4 <_vfiscanf_r>:
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	460c      	mov	r4, r1
 80045aa:	4616      	mov	r6, r2
 80045ac:	461f      	mov	r7, r3
 80045ae:	4605      	mov	r5, r0
 80045b0:	b118      	cbz	r0, 80045ba <_vfiscanf_r+0x16>
 80045b2:	6983      	ldr	r3, [r0, #24]
 80045b4:	b90b      	cbnz	r3, 80045ba <_vfiscanf_r+0x16>
 80045b6:	f7ff fcf3 	bl	8003fa0 <__sinit>
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <_vfiscanf_r+0x44>)
 80045bc:	429c      	cmp	r4, r3
 80045be:	d108      	bne.n	80045d2 <_vfiscanf_r+0x2e>
 80045c0:	686c      	ldr	r4, [r5, #4]
 80045c2:	463b      	mov	r3, r7
 80045c4:	4632      	mov	r2, r6
 80045c6:	4621      	mov	r1, r4
 80045c8:	4628      	mov	r0, r5
 80045ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	f7ff be99 	b.w	8004304 <__svfiscanf_r>
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <_vfiscanf_r+0x48>)
 80045d4:	429c      	cmp	r4, r3
 80045d6:	d101      	bne.n	80045dc <_vfiscanf_r+0x38>
 80045d8:	68ac      	ldr	r4, [r5, #8]
 80045da:	e7f2      	b.n	80045c2 <_vfiscanf_r+0x1e>
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <_vfiscanf_r+0x4c>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	bf08      	it	eq
 80045e2:	68ec      	ldreq	r4, [r5, #12]
 80045e4:	e7ed      	b.n	80045c2 <_vfiscanf_r+0x1e>
 80045e6:	bf00      	nop
 80045e8:	080050c8 	.word	0x080050c8
 80045ec:	080050e8 	.word	0x080050e8
 80045f0:	080050a8 	.word	0x080050a8

080045f4 <_scanf_chars>:
 80045f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f8:	4615      	mov	r5, r2
 80045fa:	688a      	ldr	r2, [r1, #8]
 80045fc:	4680      	mov	r8, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	b932      	cbnz	r2, 8004610 <_scanf_chars+0x1c>
 8004602:	698a      	ldr	r2, [r1, #24]
 8004604:	2a00      	cmp	r2, #0
 8004606:	bf14      	ite	ne
 8004608:	f04f 32ff 	movne.w	r2, #4294967295
 800460c:	2201      	moveq	r2, #1
 800460e:	608a      	str	r2, [r1, #8]
 8004610:	6822      	ldr	r2, [r4, #0]
 8004612:	06d1      	lsls	r1, r2, #27
 8004614:	bf5f      	itttt	pl
 8004616:	681a      	ldrpl	r2, [r3, #0]
 8004618:	1d11      	addpl	r1, r2, #4
 800461a:	6019      	strpl	r1, [r3, #0]
 800461c:	6817      	ldrpl	r7, [r2, #0]
 800461e:	2600      	movs	r6, #0
 8004620:	69a3      	ldr	r3, [r4, #24]
 8004622:	b1db      	cbz	r3, 800465c <_scanf_chars+0x68>
 8004624:	2b01      	cmp	r3, #1
 8004626:	d107      	bne.n	8004638 <_scanf_chars+0x44>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	6962      	ldr	r2, [r4, #20]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	5cd3      	ldrb	r3, [r2, r3]
 8004630:	b9a3      	cbnz	r3, 800465c <_scanf_chars+0x68>
 8004632:	2e00      	cmp	r6, #0
 8004634:	d132      	bne.n	800469c <_scanf_chars+0xa8>
 8004636:	e006      	b.n	8004646 <_scanf_chars+0x52>
 8004638:	2b02      	cmp	r3, #2
 800463a:	d007      	beq.n	800464c <_scanf_chars+0x58>
 800463c:	2e00      	cmp	r6, #0
 800463e:	d12d      	bne.n	800469c <_scanf_chars+0xa8>
 8004640:	69a3      	ldr	r3, [r4, #24]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d12a      	bne.n	800469c <_scanf_chars+0xa8>
 8004646:	2001      	movs	r0, #1
 8004648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800464c:	f000 fc52 	bl	8004ef4 <__locale_ctype_ptr>
 8004650:	682b      	ldr	r3, [r5, #0]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4418      	add	r0, r3
 8004656:	7843      	ldrb	r3, [r0, #1]
 8004658:	071b      	lsls	r3, r3, #28
 800465a:	d4ef      	bmi.n	800463c <_scanf_chars+0x48>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	06da      	lsls	r2, r3, #27
 8004660:	bf5e      	ittt	pl
 8004662:	682b      	ldrpl	r3, [r5, #0]
 8004664:	781b      	ldrbpl	r3, [r3, #0]
 8004666:	703b      	strbpl	r3, [r7, #0]
 8004668:	682a      	ldr	r2, [r5, #0]
 800466a:	686b      	ldr	r3, [r5, #4]
 800466c:	f102 0201 	add.w	r2, r2, #1
 8004670:	602a      	str	r2, [r5, #0]
 8004672:	68a2      	ldr	r2, [r4, #8]
 8004674:	f103 33ff 	add.w	r3, r3, #4294967295
 8004678:	f102 32ff 	add.w	r2, r2, #4294967295
 800467c:	606b      	str	r3, [r5, #4]
 800467e:	f106 0601 	add.w	r6, r6, #1
 8004682:	bf58      	it	pl
 8004684:	3701      	addpl	r7, #1
 8004686:	60a2      	str	r2, [r4, #8]
 8004688:	b142      	cbz	r2, 800469c <_scanf_chars+0xa8>
 800468a:	2b00      	cmp	r3, #0
 800468c:	dcc8      	bgt.n	8004620 <_scanf_chars+0x2c>
 800468e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004692:	4629      	mov	r1, r5
 8004694:	4640      	mov	r0, r8
 8004696:	4798      	blx	r3
 8004698:	2800      	cmp	r0, #0
 800469a:	d0c1      	beq.n	8004620 <_scanf_chars+0x2c>
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f013 0310 	ands.w	r3, r3, #16
 80046a2:	d105      	bne.n	80046b0 <_scanf_chars+0xbc>
 80046a4:	68e2      	ldr	r2, [r4, #12]
 80046a6:	3201      	adds	r2, #1
 80046a8:	60e2      	str	r2, [r4, #12]
 80046aa:	69a2      	ldr	r2, [r4, #24]
 80046ac:	b102      	cbz	r2, 80046b0 <_scanf_chars+0xbc>
 80046ae:	703b      	strb	r3, [r7, #0]
 80046b0:	6923      	ldr	r3, [r4, #16]
 80046b2:	441e      	add	r6, r3
 80046b4:	6126      	str	r6, [r4, #16]
 80046b6:	2000      	movs	r0, #0
 80046b8:	e7c6      	b.n	8004648 <_scanf_chars+0x54>
	...

080046bc <_scanf_i>:
 80046bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c0:	469a      	mov	sl, r3
 80046c2:	4b74      	ldr	r3, [pc, #464]	; (8004894 <_scanf_i+0x1d8>)
 80046c4:	460c      	mov	r4, r1
 80046c6:	4683      	mov	fp, r0
 80046c8:	4616      	mov	r6, r2
 80046ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046ce:	b087      	sub	sp, #28
 80046d0:	ab03      	add	r3, sp, #12
 80046d2:	68a7      	ldr	r7, [r4, #8]
 80046d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80046d8:	4b6f      	ldr	r3, [pc, #444]	; (8004898 <_scanf_i+0x1dc>)
 80046da:	69a1      	ldr	r1, [r4, #24]
 80046dc:	4a6f      	ldr	r2, [pc, #444]	; (800489c <_scanf_i+0x1e0>)
 80046de:	2903      	cmp	r1, #3
 80046e0:	bf08      	it	eq
 80046e2:	461a      	moveq	r2, r3
 80046e4:	1e7b      	subs	r3, r7, #1
 80046e6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80046ea:	bf84      	itt	hi
 80046ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80046f0:	60a3      	strhi	r3, [r4, #8]
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	9200      	str	r2, [sp, #0]
 80046f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80046fa:	bf88      	it	hi
 80046fc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004700:	f104 091c 	add.w	r9, r4, #28
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bf8c      	ite	hi
 8004708:	197f      	addhi	r7, r7, r5
 800470a:	2700      	movls	r7, #0
 800470c:	464b      	mov	r3, r9
 800470e:	f04f 0800 	mov.w	r8, #0
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	6831      	ldr	r1, [r6, #0]
 8004716:	ab03      	add	r3, sp, #12
 8004718:	2202      	movs	r2, #2
 800471a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800471e:	7809      	ldrb	r1, [r1, #0]
 8004720:	f7fb fd56 	bl	80001d0 <memchr>
 8004724:	9b01      	ldr	r3, [sp, #4]
 8004726:	b330      	cbz	r0, 8004776 <_scanf_i+0xba>
 8004728:	f1b8 0f01 	cmp.w	r8, #1
 800472c:	d15a      	bne.n	80047e4 <_scanf_i+0x128>
 800472e:	6862      	ldr	r2, [r4, #4]
 8004730:	b92a      	cbnz	r2, 800473e <_scanf_i+0x82>
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	2108      	movs	r1, #8
 8004736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800473a:	6061      	str	r1, [r4, #4]
 800473c:	6022      	str	r2, [r4, #0]
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	68a2      	ldr	r2, [r4, #8]
 8004748:	1e51      	subs	r1, r2, #1
 800474a:	60a1      	str	r1, [r4, #8]
 800474c:	b19a      	cbz	r2, 8004776 <_scanf_i+0xba>
 800474e:	6832      	ldr	r2, [r6, #0]
 8004750:	1c51      	adds	r1, r2, #1
 8004752:	6031      	str	r1, [r6, #0]
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	701a      	strb	r2, [r3, #0]
 8004758:	1c5d      	adds	r5, r3, #1
 800475a:	6873      	ldr	r3, [r6, #4]
 800475c:	3b01      	subs	r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	6073      	str	r3, [r6, #4]
 8004762:	dc07      	bgt.n	8004774 <_scanf_i+0xb8>
 8004764:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004768:	4631      	mov	r1, r6
 800476a:	4658      	mov	r0, fp
 800476c:	4798      	blx	r3
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 8086 	bne.w	8004880 <_scanf_i+0x1c4>
 8004774:	462b      	mov	r3, r5
 8004776:	f108 0801 	add.w	r8, r8, #1
 800477a:	f1b8 0f03 	cmp.w	r8, #3
 800477e:	d1c8      	bne.n	8004712 <_scanf_i+0x56>
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	b90a      	cbnz	r2, 8004788 <_scanf_i+0xcc>
 8004784:	220a      	movs	r2, #10
 8004786:	6062      	str	r2, [r4, #4]
 8004788:	6862      	ldr	r2, [r4, #4]
 800478a:	4945      	ldr	r1, [pc, #276]	; (80048a0 <_scanf_i+0x1e4>)
 800478c:	6960      	ldr	r0, [r4, #20]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	1a89      	subs	r1, r1, r2
 8004792:	f000 f92d 	bl	80049f0 <__sccl>
 8004796:	9b01      	ldr	r3, [sp, #4]
 8004798:	f04f 0800 	mov.w	r8, #0
 800479c:	461d      	mov	r5, r3
 800479e:	68a3      	ldr	r3, [r4, #8]
 80047a0:	6822      	ldr	r2, [r4, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03a      	beq.n	800481c <_scanf_i+0x160>
 80047a6:	6831      	ldr	r1, [r6, #0]
 80047a8:	6960      	ldr	r0, [r4, #20]
 80047aa:	f891 c000 	ldrb.w	ip, [r1]
 80047ae:	f810 000c 	ldrb.w	r0, [r0, ip]
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d032      	beq.n	800481c <_scanf_i+0x160>
 80047b6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80047ba:	d121      	bne.n	8004800 <_scanf_i+0x144>
 80047bc:	0510      	lsls	r0, r2, #20
 80047be:	d51f      	bpl.n	8004800 <_scanf_i+0x144>
 80047c0:	f108 0801 	add.w	r8, r8, #1
 80047c4:	b117      	cbz	r7, 80047cc <_scanf_i+0x110>
 80047c6:	3301      	adds	r3, #1
 80047c8:	3f01      	subs	r7, #1
 80047ca:	60a3      	str	r3, [r4, #8]
 80047cc:	6873      	ldr	r3, [r6, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	6073      	str	r3, [r6, #4]
 80047d4:	dd1b      	ble.n	800480e <_scanf_i+0x152>
 80047d6:	6833      	ldr	r3, [r6, #0]
 80047d8:	3301      	adds	r3, #1
 80047da:	6033      	str	r3, [r6, #0]
 80047dc:	68a3      	ldr	r3, [r4, #8]
 80047de:	3b01      	subs	r3, #1
 80047e0:	60a3      	str	r3, [r4, #8]
 80047e2:	e7dc      	b.n	800479e <_scanf_i+0xe2>
 80047e4:	f1b8 0f02 	cmp.w	r8, #2
 80047e8:	d1ad      	bne.n	8004746 <_scanf_i+0x8a>
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80047f0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80047f4:	d1bf      	bne.n	8004776 <_scanf_i+0xba>
 80047f6:	2110      	movs	r1, #16
 80047f8:	6061      	str	r1, [r4, #4]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047fe:	e7a1      	b.n	8004744 <_scanf_i+0x88>
 8004800:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	780b      	ldrb	r3, [r1, #0]
 8004808:	702b      	strb	r3, [r5, #0]
 800480a:	3501      	adds	r5, #1
 800480c:	e7de      	b.n	80047cc <_scanf_i+0x110>
 800480e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004812:	4631      	mov	r1, r6
 8004814:	4658      	mov	r0, fp
 8004816:	4798      	blx	r3
 8004818:	2800      	cmp	r0, #0
 800481a:	d0df      	beq.n	80047dc <_scanf_i+0x120>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	05d9      	lsls	r1, r3, #23
 8004820:	d50c      	bpl.n	800483c <_scanf_i+0x180>
 8004822:	454d      	cmp	r5, r9
 8004824:	d908      	bls.n	8004838 <_scanf_i+0x17c>
 8004826:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800482a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800482e:	4632      	mov	r2, r6
 8004830:	4658      	mov	r0, fp
 8004832:	4798      	blx	r3
 8004834:	1e6f      	subs	r7, r5, #1
 8004836:	463d      	mov	r5, r7
 8004838:	454d      	cmp	r5, r9
 800483a:	d029      	beq.n	8004890 <_scanf_i+0x1d4>
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	f012 0210 	ands.w	r2, r2, #16
 8004842:	d113      	bne.n	800486c <_scanf_i+0x1b0>
 8004844:	702a      	strb	r2, [r5, #0]
 8004846:	6863      	ldr	r3, [r4, #4]
 8004848:	9e00      	ldr	r6, [sp, #0]
 800484a:	4649      	mov	r1, r9
 800484c:	4658      	mov	r0, fp
 800484e:	47b0      	blx	r6
 8004850:	f8da 3000 	ldr.w	r3, [sl]
 8004854:	6821      	ldr	r1, [r4, #0]
 8004856:	1d1a      	adds	r2, r3, #4
 8004858:	f8ca 2000 	str.w	r2, [sl]
 800485c:	f011 0f20 	tst.w	r1, #32
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	d010      	beq.n	8004886 <_scanf_i+0x1ca>
 8004864:	6018      	str	r0, [r3, #0]
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60e3      	str	r3, [r4, #12]
 800486c:	eba5 0509 	sub.w	r5, r5, r9
 8004870:	44a8      	add	r8, r5
 8004872:	6925      	ldr	r5, [r4, #16]
 8004874:	4445      	add	r5, r8
 8004876:	6125      	str	r5, [r4, #16]
 8004878:	2000      	movs	r0, #0
 800487a:	b007      	add	sp, #28
 800487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004880:	f04f 0800 	mov.w	r8, #0
 8004884:	e7ca      	b.n	800481c <_scanf_i+0x160>
 8004886:	07ca      	lsls	r2, r1, #31
 8004888:	bf4c      	ite	mi
 800488a:	8018      	strhmi	r0, [r3, #0]
 800488c:	6018      	strpl	r0, [r3, #0]
 800488e:	e7ea      	b.n	8004866 <_scanf_i+0x1aa>
 8004890:	2001      	movs	r0, #1
 8004892:	e7f2      	b.n	800487a <_scanf_i+0x1be>
 8004894:	08005050 	.word	0x08005050
 8004898:	08004bd1 	.word	0x08004bd1
 800489c:	08004ce9 	.word	0x08004ce9
 80048a0:	0800511c 	.word	0x0800511c

080048a4 <lflush>:
 80048a4:	8983      	ldrh	r3, [r0, #12]
 80048a6:	f003 0309 	and.w	r3, r3, #9
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	d101      	bne.n	80048b2 <lflush+0xe>
 80048ae:	f7ff bb25 	b.w	8003efc <fflush>
 80048b2:	2000      	movs	r0, #0
 80048b4:	4770      	bx	lr
	...

080048b8 <__srefill_r>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	4605      	mov	r5, r0
 80048be:	b118      	cbz	r0, 80048c8 <__srefill_r+0x10>
 80048c0:	6983      	ldr	r3, [r0, #24]
 80048c2:	b90b      	cbnz	r3, 80048c8 <__srefill_r+0x10>
 80048c4:	f7ff fb6c 	bl	8003fa0 <__sinit>
 80048c8:	4b3c      	ldr	r3, [pc, #240]	; (80049bc <__srefill_r+0x104>)
 80048ca:	429c      	cmp	r4, r3
 80048cc:	d10a      	bne.n	80048e4 <__srefill_r+0x2c>
 80048ce:	686c      	ldr	r4, [r5, #4]
 80048d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048d4:	2300      	movs	r3, #0
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	b293      	uxth	r3, r2
 80048da:	069e      	lsls	r6, r3, #26
 80048dc:	d50c      	bpl.n	80048f8 <__srefill_r+0x40>
 80048de:	f04f 30ff 	mov.w	r0, #4294967295
 80048e2:	e067      	b.n	80049b4 <__srefill_r+0xfc>
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <__srefill_r+0x108>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <__srefill_r+0x36>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7f0      	b.n	80048d0 <__srefill_r+0x18>
 80048ee:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <__srefill_r+0x10c>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7eb      	b.n	80048d0 <__srefill_r+0x18>
 80048f8:	0758      	lsls	r0, r3, #29
 80048fa:	d449      	bmi.n	8004990 <__srefill_r+0xd8>
 80048fc:	06d9      	lsls	r1, r3, #27
 80048fe:	d405      	bmi.n	800490c <__srefill_r+0x54>
 8004900:	2309      	movs	r3, #9
 8004902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	81a2      	strh	r2, [r4, #12]
 800490a:	e7e8      	b.n	80048de <__srefill_r+0x26>
 800490c:	071a      	lsls	r2, r3, #28
 800490e:	d50b      	bpl.n	8004928 <__srefill_r+0x70>
 8004910:	4621      	mov	r1, r4
 8004912:	4628      	mov	r0, r5
 8004914:	f7ff fac8 	bl	8003ea8 <_fflush_r>
 8004918:	2800      	cmp	r0, #0
 800491a:	d1e0      	bne.n	80048de <__srefill_r+0x26>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	60a0      	str	r0, [r4, #8]
 8004920:	f023 0308 	bic.w	r3, r3, #8
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	61a0      	str	r0, [r4, #24]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f043 0304 	orr.w	r3, r3, #4
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	b91b      	cbnz	r3, 800493c <__srefill_r+0x84>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f7ff fbfc 	bl	8004134 <__smakebuf_r>
 800493c:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004940:	b2be      	uxth	r6, r7
 8004942:	07b3      	lsls	r3, r6, #30
 8004944:	d00f      	beq.n	8004966 <__srefill_r+0xae>
 8004946:	2301      	movs	r3, #1
 8004948:	81a3      	strh	r3, [r4, #12]
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <__srefill_r+0x110>)
 800494c:	491f      	ldr	r1, [pc, #124]	; (80049cc <__srefill_r+0x114>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	f006 0609 	and.w	r6, r6, #9
 8004954:	f7ff fb90 	bl	8004078 <_fwalk>
 8004958:	2e09      	cmp	r6, #9
 800495a:	81a7      	strh	r7, [r4, #12]
 800495c:	d103      	bne.n	8004966 <__srefill_r+0xae>
 800495e:	4621      	mov	r1, r4
 8004960:	4628      	mov	r0, r5
 8004962:	f7ff fa1b 	bl	8003d9c <__sflush_r>
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	6022      	str	r2, [r4, #0]
 800496a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800496c:	6963      	ldr	r3, [r4, #20]
 800496e:	6a21      	ldr	r1, [r4, #32]
 8004970:	4628      	mov	r0, r5
 8004972:	47b0      	blx	r6
 8004974:	2800      	cmp	r0, #0
 8004976:	6060      	str	r0, [r4, #4]
 8004978:	dc1d      	bgt.n	80049b6 <__srefill_r+0xfe>
 800497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497e:	bf17      	itett	ne
 8004980:	2200      	movne	r2, #0
 8004982:	f043 0320 	orreq.w	r3, r3, #32
 8004986:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800498a:	6062      	strne	r2, [r4, #4]
 800498c:	81a3      	strh	r3, [r4, #12]
 800498e:	e7a6      	b.n	80048de <__srefill_r+0x26>
 8004990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004992:	2900      	cmp	r1, #0
 8004994:	d0cc      	beq.n	8004930 <__srefill_r+0x78>
 8004996:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800499a:	4299      	cmp	r1, r3
 800499c:	d002      	beq.n	80049a4 <__srefill_r+0xec>
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff fc08 	bl	80041b4 <_free_r>
 80049a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049a6:	6063      	str	r3, [r4, #4]
 80049a8:	2000      	movs	r0, #0
 80049aa:	6360      	str	r0, [r4, #52]	; 0x34
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0bf      	beq.n	8004930 <__srefill_r+0x78>
 80049b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049b2:	6023      	str	r3, [r4, #0]
 80049b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049b6:	2000      	movs	r0, #0
 80049b8:	e7fc      	b.n	80049b4 <__srefill_r+0xfc>
 80049ba:	bf00      	nop
 80049bc:	080050c8 	.word	0x080050c8
 80049c0:	080050e8 	.word	0x080050e8
 80049c4:	080050a8 	.word	0x080050a8
 80049c8:	080050a4 	.word	0x080050a4
 80049cc:	080048a5 	.word	0x080048a5

080049d0 <_sbrk_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4c06      	ldr	r4, [pc, #24]	; (80049ec <_sbrk_r+0x1c>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4605      	mov	r5, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	f7fc f92c 	bl	8000c38 <_sbrk>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_sbrk_r+0x1a>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_sbrk_r+0x1a>
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	200002fc 	.word	0x200002fc

080049f0 <__sccl>:
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	780b      	ldrb	r3, [r1, #0]
 80049f4:	2b5e      	cmp	r3, #94	; 0x5e
 80049f6:	bf13      	iteet	ne
 80049f8:	1c4a      	addne	r2, r1, #1
 80049fa:	1c8a      	addeq	r2, r1, #2
 80049fc:	784b      	ldrbeq	r3, [r1, #1]
 80049fe:	2100      	movne	r1, #0
 8004a00:	bf08      	it	eq
 8004a02:	2101      	moveq	r1, #1
 8004a04:	1e44      	subs	r4, r0, #1
 8004a06:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8004a0a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8004a0e:	42ac      	cmp	r4, r5
 8004a10:	d1fb      	bne.n	8004a0a <__sccl+0x1a>
 8004a12:	b913      	cbnz	r3, 8004a1a <__sccl+0x2a>
 8004a14:	3a01      	subs	r2, #1
 8004a16:	4610      	mov	r0, r2
 8004a18:	bd70      	pop	{r4, r5, r6, pc}
 8004a1a:	f081 0401 	eor.w	r4, r1, #1
 8004a1e:	54c4      	strb	r4, [r0, r3]
 8004a20:	1c51      	adds	r1, r2, #1
 8004a22:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8004a26:	2d2d      	cmp	r5, #45	; 0x2d
 8004a28:	f101 36ff 	add.w	r6, r1, #4294967295
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	d006      	beq.n	8004a3e <__sccl+0x4e>
 8004a30:	2d5d      	cmp	r5, #93	; 0x5d
 8004a32:	d0f0      	beq.n	8004a16 <__sccl+0x26>
 8004a34:	b90d      	cbnz	r5, 8004a3a <__sccl+0x4a>
 8004a36:	4632      	mov	r2, r6
 8004a38:	e7ed      	b.n	8004a16 <__sccl+0x26>
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	e7ef      	b.n	8004a1e <__sccl+0x2e>
 8004a3e:	780e      	ldrb	r6, [r1, #0]
 8004a40:	2e5d      	cmp	r6, #93	; 0x5d
 8004a42:	d0fa      	beq.n	8004a3a <__sccl+0x4a>
 8004a44:	42b3      	cmp	r3, r6
 8004a46:	dcf8      	bgt.n	8004a3a <__sccl+0x4a>
 8004a48:	3301      	adds	r3, #1
 8004a4a:	429e      	cmp	r6, r3
 8004a4c:	54c4      	strb	r4, [r0, r3]
 8004a4e:	dcfb      	bgt.n	8004a48 <__sccl+0x58>
 8004a50:	3102      	adds	r1, #2
 8004a52:	e7e6      	b.n	8004a22 <__sccl+0x32>

08004a54 <__sread>:
 8004a54:	b510      	push	{r4, lr}
 8004a56:	460c      	mov	r4, r1
 8004a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5c:	f000 fab0 	bl	8004fc0 <_read_r>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	bfab      	itete	ge
 8004a64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a66:	89a3      	ldrhlt	r3, [r4, #12]
 8004a68:	181b      	addge	r3, r3, r0
 8004a6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a6e:	bfac      	ite	ge
 8004a70:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a72:	81a3      	strhlt	r3, [r4, #12]
 8004a74:	bd10      	pop	{r4, pc}

08004a76 <__swrite>:
 8004a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a7a:	461f      	mov	r7, r3
 8004a7c:	898b      	ldrh	r3, [r1, #12]
 8004a7e:	05db      	lsls	r3, r3, #23
 8004a80:	4605      	mov	r5, r0
 8004a82:	460c      	mov	r4, r1
 8004a84:	4616      	mov	r6, r2
 8004a86:	d505      	bpl.n	8004a94 <__swrite+0x1e>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	f000 fa3e 	bl	8004f10 <_lseek_r>
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a9e:	81a3      	strh	r3, [r4, #12]
 8004aa0:	4632      	mov	r2, r6
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	f000 b9db 	b.w	8004e64 <_write_r>

08004aae <__sseek>:
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab6:	f000 fa2b 	bl	8004f10 <_lseek_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	89a3      	ldrh	r3, [r4, #12]
 8004abe:	bf15      	itete	ne
 8004ac0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ac2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ac6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004aca:	81a3      	strheq	r3, [r4, #12]
 8004acc:	bf18      	it	ne
 8004ace:	81a3      	strhne	r3, [r4, #12]
 8004ad0:	bd10      	pop	{r4, pc}

08004ad2 <__sclose>:
 8004ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ad6:	f000 b9d7 	b.w	8004e88 <_close_r>

08004ada <_strtol_l.isra.0>:
 8004ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ade:	4680      	mov	r8, r0
 8004ae0:	4689      	mov	r9, r1
 8004ae2:	4692      	mov	sl, r2
 8004ae4:	461e      	mov	r6, r3
 8004ae6:	460f      	mov	r7, r1
 8004ae8:	463d      	mov	r5, r7
 8004aea:	9808      	ldr	r0, [sp, #32]
 8004aec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004af0:	f000 f9fc 	bl	8004eec <__locale_ctype_ptr_l>
 8004af4:	4420      	add	r0, r4
 8004af6:	7843      	ldrb	r3, [r0, #1]
 8004af8:	f013 0308 	ands.w	r3, r3, #8
 8004afc:	d132      	bne.n	8004b64 <_strtol_l.isra.0+0x8a>
 8004afe:	2c2d      	cmp	r4, #45	; 0x2d
 8004b00:	d132      	bne.n	8004b68 <_strtol_l.isra.0+0x8e>
 8004b02:	787c      	ldrb	r4, [r7, #1]
 8004b04:	1cbd      	adds	r5, r7, #2
 8004b06:	2201      	movs	r2, #1
 8004b08:	2e00      	cmp	r6, #0
 8004b0a:	d05d      	beq.n	8004bc8 <_strtol_l.isra.0+0xee>
 8004b0c:	2e10      	cmp	r6, #16
 8004b0e:	d109      	bne.n	8004b24 <_strtol_l.isra.0+0x4a>
 8004b10:	2c30      	cmp	r4, #48	; 0x30
 8004b12:	d107      	bne.n	8004b24 <_strtol_l.isra.0+0x4a>
 8004b14:	782b      	ldrb	r3, [r5, #0]
 8004b16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b1a:	2b58      	cmp	r3, #88	; 0x58
 8004b1c:	d14f      	bne.n	8004bbe <_strtol_l.isra.0+0xe4>
 8004b1e:	786c      	ldrb	r4, [r5, #1]
 8004b20:	2610      	movs	r6, #16
 8004b22:	3502      	adds	r5, #2
 8004b24:	2a00      	cmp	r2, #0
 8004b26:	bf14      	ite	ne
 8004b28:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004b2c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004b30:	2700      	movs	r7, #0
 8004b32:	fbb1 fcf6 	udiv	ip, r1, r6
 8004b36:	4638      	mov	r0, r7
 8004b38:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004b3c:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d817      	bhi.n	8004b74 <_strtol_l.isra.0+0x9a>
 8004b44:	461c      	mov	r4, r3
 8004b46:	42a6      	cmp	r6, r4
 8004b48:	dd23      	ble.n	8004b92 <_strtol_l.isra.0+0xb8>
 8004b4a:	1c7b      	adds	r3, r7, #1
 8004b4c:	d007      	beq.n	8004b5e <_strtol_l.isra.0+0x84>
 8004b4e:	4584      	cmp	ip, r0
 8004b50:	d31c      	bcc.n	8004b8c <_strtol_l.isra.0+0xb2>
 8004b52:	d101      	bne.n	8004b58 <_strtol_l.isra.0+0x7e>
 8004b54:	45a6      	cmp	lr, r4
 8004b56:	db19      	blt.n	8004b8c <_strtol_l.isra.0+0xb2>
 8004b58:	fb00 4006 	mla	r0, r0, r6, r4
 8004b5c:	2701      	movs	r7, #1
 8004b5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b62:	e7eb      	b.n	8004b3c <_strtol_l.isra.0+0x62>
 8004b64:	462f      	mov	r7, r5
 8004b66:	e7bf      	b.n	8004ae8 <_strtol_l.isra.0+0xe>
 8004b68:	2c2b      	cmp	r4, #43	; 0x2b
 8004b6a:	bf04      	itt	eq
 8004b6c:	1cbd      	addeq	r5, r7, #2
 8004b6e:	787c      	ldrbeq	r4, [r7, #1]
 8004b70:	461a      	mov	r2, r3
 8004b72:	e7c9      	b.n	8004b08 <_strtol_l.isra.0+0x2e>
 8004b74:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004b78:	2b19      	cmp	r3, #25
 8004b7a:	d801      	bhi.n	8004b80 <_strtol_l.isra.0+0xa6>
 8004b7c:	3c37      	subs	r4, #55	; 0x37
 8004b7e:	e7e2      	b.n	8004b46 <_strtol_l.isra.0+0x6c>
 8004b80:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b84:	2b19      	cmp	r3, #25
 8004b86:	d804      	bhi.n	8004b92 <_strtol_l.isra.0+0xb8>
 8004b88:	3c57      	subs	r4, #87	; 0x57
 8004b8a:	e7dc      	b.n	8004b46 <_strtol_l.isra.0+0x6c>
 8004b8c:	f04f 37ff 	mov.w	r7, #4294967295
 8004b90:	e7e5      	b.n	8004b5e <_strtol_l.isra.0+0x84>
 8004b92:	1c7b      	adds	r3, r7, #1
 8004b94:	d108      	bne.n	8004ba8 <_strtol_l.isra.0+0xce>
 8004b96:	2322      	movs	r3, #34	; 0x22
 8004b98:	f8c8 3000 	str.w	r3, [r8]
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	f1ba 0f00 	cmp.w	sl, #0
 8004ba2:	d107      	bne.n	8004bb4 <_strtol_l.isra.0+0xda>
 8004ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba8:	b102      	cbz	r2, 8004bac <_strtol_l.isra.0+0xd2>
 8004baa:	4240      	negs	r0, r0
 8004bac:	f1ba 0f00 	cmp.w	sl, #0
 8004bb0:	d0f8      	beq.n	8004ba4 <_strtol_l.isra.0+0xca>
 8004bb2:	b10f      	cbz	r7, 8004bb8 <_strtol_l.isra.0+0xde>
 8004bb4:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bb8:	f8ca 9000 	str.w	r9, [sl]
 8004bbc:	e7f2      	b.n	8004ba4 <_strtol_l.isra.0+0xca>
 8004bbe:	2430      	movs	r4, #48	; 0x30
 8004bc0:	2e00      	cmp	r6, #0
 8004bc2:	d1af      	bne.n	8004b24 <_strtol_l.isra.0+0x4a>
 8004bc4:	2608      	movs	r6, #8
 8004bc6:	e7ad      	b.n	8004b24 <_strtol_l.isra.0+0x4a>
 8004bc8:	2c30      	cmp	r4, #48	; 0x30
 8004bca:	d0a3      	beq.n	8004b14 <_strtol_l.isra.0+0x3a>
 8004bcc:	260a      	movs	r6, #10
 8004bce:	e7a9      	b.n	8004b24 <_strtol_l.isra.0+0x4a>

08004bd0 <_strtol_r>:
 8004bd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bd2:	4c06      	ldr	r4, [pc, #24]	; (8004bec <_strtol_r+0x1c>)
 8004bd4:	4d06      	ldr	r5, [pc, #24]	; (8004bf0 <_strtol_r+0x20>)
 8004bd6:	6824      	ldr	r4, [r4, #0]
 8004bd8:	6a24      	ldr	r4, [r4, #32]
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	bf08      	it	eq
 8004bde:	462c      	moveq	r4, r5
 8004be0:	9400      	str	r4, [sp, #0]
 8004be2:	f7ff ff7a 	bl	8004ada <_strtol_l.isra.0>
 8004be6:	b003      	add	sp, #12
 8004be8:	bd30      	pop	{r4, r5, pc}
 8004bea:	bf00      	nop
 8004bec:	20000034 	.word	0x20000034
 8004bf0:	20000098 	.word	0x20000098

08004bf4 <_strtoul_l.isra.0>:
 8004bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf8:	4680      	mov	r8, r0
 8004bfa:	4689      	mov	r9, r1
 8004bfc:	4692      	mov	sl, r2
 8004bfe:	461e      	mov	r6, r3
 8004c00:	460f      	mov	r7, r1
 8004c02:	463d      	mov	r5, r7
 8004c04:	9808      	ldr	r0, [sp, #32]
 8004c06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c0a:	f000 f96f 	bl	8004eec <__locale_ctype_ptr_l>
 8004c0e:	4420      	add	r0, r4
 8004c10:	7843      	ldrb	r3, [r0, #1]
 8004c12:	f013 0308 	ands.w	r3, r3, #8
 8004c16:	d130      	bne.n	8004c7a <_strtoul_l.isra.0+0x86>
 8004c18:	2c2d      	cmp	r4, #45	; 0x2d
 8004c1a:	d130      	bne.n	8004c7e <_strtoul_l.isra.0+0x8a>
 8004c1c:	787c      	ldrb	r4, [r7, #1]
 8004c1e:	1cbd      	adds	r5, r7, #2
 8004c20:	2101      	movs	r1, #1
 8004c22:	2e00      	cmp	r6, #0
 8004c24:	d05c      	beq.n	8004ce0 <_strtoul_l.isra.0+0xec>
 8004c26:	2e10      	cmp	r6, #16
 8004c28:	d109      	bne.n	8004c3e <_strtoul_l.isra.0+0x4a>
 8004c2a:	2c30      	cmp	r4, #48	; 0x30
 8004c2c:	d107      	bne.n	8004c3e <_strtoul_l.isra.0+0x4a>
 8004c2e:	782b      	ldrb	r3, [r5, #0]
 8004c30:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c34:	2b58      	cmp	r3, #88	; 0x58
 8004c36:	d14e      	bne.n	8004cd6 <_strtoul_l.isra.0+0xe2>
 8004c38:	786c      	ldrb	r4, [r5, #1]
 8004c3a:	2610      	movs	r6, #16
 8004c3c:	3502      	adds	r5, #2
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	2300      	movs	r3, #0
 8004c44:	fbb2 f2f6 	udiv	r2, r2, r6
 8004c48:	fb06 fc02 	mul.w	ip, r6, r2
 8004c4c:	ea6f 0c0c 	mvn.w	ip, ip
 8004c50:	4618      	mov	r0, r3
 8004c52:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004c56:	2f09      	cmp	r7, #9
 8004c58:	d817      	bhi.n	8004c8a <_strtoul_l.isra.0+0x96>
 8004c5a:	463c      	mov	r4, r7
 8004c5c:	42a6      	cmp	r6, r4
 8004c5e:	dd23      	ble.n	8004ca8 <_strtoul_l.isra.0+0xb4>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	db1e      	blt.n	8004ca2 <_strtoul_l.isra.0+0xae>
 8004c64:	4282      	cmp	r2, r0
 8004c66:	d31c      	bcc.n	8004ca2 <_strtoul_l.isra.0+0xae>
 8004c68:	d101      	bne.n	8004c6e <_strtoul_l.isra.0+0x7a>
 8004c6a:	45a4      	cmp	ip, r4
 8004c6c:	db19      	blt.n	8004ca2 <_strtoul_l.isra.0+0xae>
 8004c6e:	fb00 4006 	mla	r0, r0, r6, r4
 8004c72:	2301      	movs	r3, #1
 8004c74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c78:	e7eb      	b.n	8004c52 <_strtoul_l.isra.0+0x5e>
 8004c7a:	462f      	mov	r7, r5
 8004c7c:	e7c1      	b.n	8004c02 <_strtoul_l.isra.0+0xe>
 8004c7e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c80:	bf04      	itt	eq
 8004c82:	1cbd      	addeq	r5, r7, #2
 8004c84:	787c      	ldrbeq	r4, [r7, #1]
 8004c86:	4619      	mov	r1, r3
 8004c88:	e7cb      	b.n	8004c22 <_strtoul_l.isra.0+0x2e>
 8004c8a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004c8e:	2f19      	cmp	r7, #25
 8004c90:	d801      	bhi.n	8004c96 <_strtoul_l.isra.0+0xa2>
 8004c92:	3c37      	subs	r4, #55	; 0x37
 8004c94:	e7e2      	b.n	8004c5c <_strtoul_l.isra.0+0x68>
 8004c96:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004c9a:	2f19      	cmp	r7, #25
 8004c9c:	d804      	bhi.n	8004ca8 <_strtoul_l.isra.0+0xb4>
 8004c9e:	3c57      	subs	r4, #87	; 0x57
 8004ca0:	e7dc      	b.n	8004c5c <_strtoul_l.isra.0+0x68>
 8004ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca6:	e7e5      	b.n	8004c74 <_strtoul_l.isra.0+0x80>
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da09      	bge.n	8004cc0 <_strtoul_l.isra.0+0xcc>
 8004cac:	2322      	movs	r3, #34	; 0x22
 8004cae:	f8c8 3000 	str.w	r3, [r8]
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	f1ba 0f00 	cmp.w	sl, #0
 8004cba:	d107      	bne.n	8004ccc <_strtoul_l.isra.0+0xd8>
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	b101      	cbz	r1, 8004cc4 <_strtoul_l.isra.0+0xd0>
 8004cc2:	4240      	negs	r0, r0
 8004cc4:	f1ba 0f00 	cmp.w	sl, #0
 8004cc8:	d0f8      	beq.n	8004cbc <_strtoul_l.isra.0+0xc8>
 8004cca:	b10b      	cbz	r3, 8004cd0 <_strtoul_l.isra.0+0xdc>
 8004ccc:	f105 39ff 	add.w	r9, r5, #4294967295
 8004cd0:	f8ca 9000 	str.w	r9, [sl]
 8004cd4:	e7f2      	b.n	8004cbc <_strtoul_l.isra.0+0xc8>
 8004cd6:	2430      	movs	r4, #48	; 0x30
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	d1b0      	bne.n	8004c3e <_strtoul_l.isra.0+0x4a>
 8004cdc:	2608      	movs	r6, #8
 8004cde:	e7ae      	b.n	8004c3e <_strtoul_l.isra.0+0x4a>
 8004ce0:	2c30      	cmp	r4, #48	; 0x30
 8004ce2:	d0a4      	beq.n	8004c2e <_strtoul_l.isra.0+0x3a>
 8004ce4:	260a      	movs	r6, #10
 8004ce6:	e7aa      	b.n	8004c3e <_strtoul_l.isra.0+0x4a>

08004ce8 <_strtoul_r>:
 8004ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cea:	4c06      	ldr	r4, [pc, #24]	; (8004d04 <_strtoul_r+0x1c>)
 8004cec:	4d06      	ldr	r5, [pc, #24]	; (8004d08 <_strtoul_r+0x20>)
 8004cee:	6824      	ldr	r4, [r4, #0]
 8004cf0:	6a24      	ldr	r4, [r4, #32]
 8004cf2:	2c00      	cmp	r4, #0
 8004cf4:	bf08      	it	eq
 8004cf6:	462c      	moveq	r4, r5
 8004cf8:	9400      	str	r4, [sp, #0]
 8004cfa:	f7ff ff7b 	bl	8004bf4 <_strtoul_l.isra.0>
 8004cfe:	b003      	add	sp, #12
 8004d00:	bd30      	pop	{r4, r5, pc}
 8004d02:	bf00      	nop
 8004d04:	20000034 	.word	0x20000034
 8004d08:	20000098 	.word	0x20000098

08004d0c <__submore>:
 8004d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d10:	460c      	mov	r4, r1
 8004d12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8004d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d18:	4299      	cmp	r1, r3
 8004d1a:	d11d      	bne.n	8004d58 <__submore+0x4c>
 8004d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d20:	f7ff fa96 	bl	8004250 <_malloc_r>
 8004d24:	b918      	cbnz	r0, 8004d2e <__submore+0x22>
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d32:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004d38:	6360      	str	r0, [r4, #52]	; 0x34
 8004d3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8004d3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004d42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004d46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004d4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8004d4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004d52:	6020      	str	r0, [r4, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e7e8      	b.n	8004d2a <__submore+0x1e>
 8004d58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004d5a:	0077      	lsls	r7, r6, #1
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	f000 f908 	bl	8004f72 <_realloc_r>
 8004d62:	4605      	mov	r5, r0
 8004d64:	2800      	cmp	r0, #0
 8004d66:	d0de      	beq.n	8004d26 <__submore+0x1a>
 8004d68:	eb00 0806 	add.w	r8, r0, r6
 8004d6c:	4601      	mov	r1, r0
 8004d6e:	4632      	mov	r2, r6
 8004d70:	4640      	mov	r0, r8
 8004d72:	f000 f8f1 	bl	8004f58 <memcpy>
 8004d76:	f8c4 8000 	str.w	r8, [r4]
 8004d7a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8004d7e:	e7e9      	b.n	8004d54 <__submore+0x48>

08004d80 <_ungetc_r>:
 8004d80:	1c4b      	adds	r3, r1, #1
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	4606      	mov	r6, r0
 8004d86:	460d      	mov	r5, r1
 8004d88:	4614      	mov	r4, r2
 8004d8a:	d103      	bne.n	8004d94 <_ungetc_r+0x14>
 8004d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d90:	4628      	mov	r0, r5
 8004d92:	bd70      	pop	{r4, r5, r6, pc}
 8004d94:	b118      	cbz	r0, 8004d9e <_ungetc_r+0x1e>
 8004d96:	6983      	ldr	r3, [r0, #24]
 8004d98:	b90b      	cbnz	r3, 8004d9e <_ungetc_r+0x1e>
 8004d9a:	f7ff f901 	bl	8003fa0 <__sinit>
 8004d9e:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <_ungetc_r+0xd8>)
 8004da0:	429c      	cmp	r4, r3
 8004da2:	d12c      	bne.n	8004dfe <_ungetc_r+0x7e>
 8004da4:	6874      	ldr	r4, [r6, #4]
 8004da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004daa:	f023 0320 	bic.w	r3, r3, #32
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	0759      	lsls	r1, r3, #29
 8004db4:	d413      	bmi.n	8004dde <_ungetc_r+0x5e>
 8004db6:	06da      	lsls	r2, r3, #27
 8004db8:	d5e8      	bpl.n	8004d8c <_ungetc_r+0xc>
 8004dba:	071b      	lsls	r3, r3, #28
 8004dbc:	d50b      	bpl.n	8004dd6 <_ungetc_r+0x56>
 8004dbe:	4621      	mov	r1, r4
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f7ff f871 	bl	8003ea8 <_fflush_r>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d1e0      	bne.n	8004d8c <_ungetc_r+0xc>
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	60a0      	str	r0, [r4, #8]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	81a3      	strh	r3, [r4, #12]
 8004dd4:	61a0      	str	r0, [r4, #24]
 8004dd6:	89a3      	ldrh	r3, [r4, #12]
 8004dd8:	f043 0304 	orr.w	r3, r3, #4
 8004ddc:	81a3      	strh	r3, [r4, #12]
 8004dde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de0:	6862      	ldr	r2, [r4, #4]
 8004de2:	b2ed      	uxtb	r5, r5
 8004de4:	b1e3      	cbz	r3, 8004e20 <_ungetc_r+0xa0>
 8004de6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004de8:	4293      	cmp	r3, r2
 8004dea:	dd12      	ble.n	8004e12 <_ungetc_r+0x92>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	1e5a      	subs	r2, r3, #1
 8004df0:	6022      	str	r2, [r4, #0]
 8004df2:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004df6:	6863      	ldr	r3, [r4, #4]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	6063      	str	r3, [r4, #4]
 8004dfc:	e7c8      	b.n	8004d90 <_ungetc_r+0x10>
 8004dfe:	4b17      	ldr	r3, [pc, #92]	; (8004e5c <_ungetc_r+0xdc>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d101      	bne.n	8004e08 <_ungetc_r+0x88>
 8004e04:	68b4      	ldr	r4, [r6, #8]
 8004e06:	e7ce      	b.n	8004da6 <_ungetc_r+0x26>
 8004e08:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <_ungetc_r+0xe0>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	bf08      	it	eq
 8004e0e:	68f4      	ldreq	r4, [r6, #12]
 8004e10:	e7c9      	b.n	8004da6 <_ungetc_r+0x26>
 8004e12:	4621      	mov	r1, r4
 8004e14:	4630      	mov	r0, r6
 8004e16:	f7ff ff79 	bl	8004d0c <__submore>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d0e6      	beq.n	8004dec <_ungetc_r+0x6c>
 8004e1e:	e7b5      	b.n	8004d8c <_ungetc_r+0xc>
 8004e20:	6921      	ldr	r1, [r4, #16]
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	b151      	cbz	r1, 8004e3c <_ungetc_r+0xbc>
 8004e26:	4299      	cmp	r1, r3
 8004e28:	d208      	bcs.n	8004e3c <_ungetc_r+0xbc>
 8004e2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8004e2e:	42a9      	cmp	r1, r5
 8004e30:	d104      	bne.n	8004e3c <_ungetc_r+0xbc>
 8004e32:	3b01      	subs	r3, #1
 8004e34:	3201      	adds	r2, #1
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	6062      	str	r2, [r4, #4]
 8004e3a:	e7a9      	b.n	8004d90 <_ungetc_r+0x10>
 8004e3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e44:	6363      	str	r3, [r4, #52]	; 0x34
 8004e46:	2303      	movs	r3, #3
 8004e48:	63a3      	str	r3, [r4, #56]	; 0x38
 8004e4a:	4623      	mov	r3, r4
 8004e4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	2301      	movs	r3, #1
 8004e54:	e7d1      	b.n	8004dfa <_ungetc_r+0x7a>
 8004e56:	bf00      	nop
 8004e58:	080050c8 	.word	0x080050c8
 8004e5c:	080050e8 	.word	0x080050e8
 8004e60:	080050a8 	.word	0x080050a8

08004e64 <_write_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4c07      	ldr	r4, [pc, #28]	; (8004e84 <_write_r+0x20>)
 8004e68:	4605      	mov	r5, r0
 8004e6a:	4608      	mov	r0, r1
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	2200      	movs	r2, #0
 8004e70:	6022      	str	r2, [r4, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f7fb fe8a 	bl	8000b8c <_write>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_write_r+0x1e>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_write_r+0x1e>
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	200002fc 	.word	0x200002fc

08004e88 <_close_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4c06      	ldr	r4, [pc, #24]	; (8004ea4 <_close_r+0x1c>)
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4605      	mov	r5, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	6023      	str	r3, [r4, #0]
 8004e94:	f7fb fe9c 	bl	8000bd0 <_close>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_close_r+0x1a>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_close_r+0x1a>
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	200002fc 	.word	0x200002fc

08004ea8 <_fstat_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4c07      	ldr	r4, [pc, #28]	; (8004ec8 <_fstat_r+0x20>)
 8004eac:	2300      	movs	r3, #0
 8004eae:	4605      	mov	r5, r0
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	f7fb fe97 	bl	8000be8 <_fstat>
 8004eba:	1c43      	adds	r3, r0, #1
 8004ebc:	d102      	bne.n	8004ec4 <_fstat_r+0x1c>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	b103      	cbz	r3, 8004ec4 <_fstat_r+0x1c>
 8004ec2:	602b      	str	r3, [r5, #0]
 8004ec4:	bd38      	pop	{r3, r4, r5, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200002fc 	.word	0x200002fc

08004ecc <_isatty_r>:
 8004ecc:	b538      	push	{r3, r4, r5, lr}
 8004ece:	4c06      	ldr	r4, [pc, #24]	; (8004ee8 <_isatty_r+0x1c>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4605      	mov	r5, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	6023      	str	r3, [r4, #0]
 8004ed8:	f7fb fe96 	bl	8000c08 <_isatty>
 8004edc:	1c43      	adds	r3, r0, #1
 8004ede:	d102      	bne.n	8004ee6 <_isatty_r+0x1a>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	b103      	cbz	r3, 8004ee6 <_isatty_r+0x1a>
 8004ee4:	602b      	str	r3, [r5, #0]
 8004ee6:	bd38      	pop	{r3, r4, r5, pc}
 8004ee8:	200002fc 	.word	0x200002fc

08004eec <__locale_ctype_ptr_l>:
 8004eec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8004ef0:	4770      	bx	lr
	...

08004ef4 <__locale_ctype_ptr>:
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <__locale_ctype_ptr+0x14>)
 8004ef6:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <__locale_ctype_ptr+0x18>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf08      	it	eq
 8004f00:	4613      	moveq	r3, r2
 8004f02:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8004f06:	4770      	bx	lr
 8004f08:	20000034 	.word	0x20000034
 8004f0c:	20000098 	.word	0x20000098

08004f10 <_lseek_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4c07      	ldr	r4, [pc, #28]	; (8004f30 <_lseek_r+0x20>)
 8004f14:	4605      	mov	r5, r0
 8004f16:	4608      	mov	r0, r1
 8004f18:	4611      	mov	r1, r2
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	6022      	str	r2, [r4, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7fb fe7d 	bl	8000c1e <_lseek>
 8004f24:	1c43      	adds	r3, r0, #1
 8004f26:	d102      	bne.n	8004f2e <_lseek_r+0x1e>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	b103      	cbz	r3, 8004f2e <_lseek_r+0x1e>
 8004f2c:	602b      	str	r3, [r5, #0]
 8004f2e:	bd38      	pop	{r3, r4, r5, pc}
 8004f30:	200002fc 	.word	0x200002fc

08004f34 <__ascii_mbtowc>:
 8004f34:	b082      	sub	sp, #8
 8004f36:	b901      	cbnz	r1, 8004f3a <__ascii_mbtowc+0x6>
 8004f38:	a901      	add	r1, sp, #4
 8004f3a:	b142      	cbz	r2, 8004f4e <__ascii_mbtowc+0x1a>
 8004f3c:	b14b      	cbz	r3, 8004f52 <__ascii_mbtowc+0x1e>
 8004f3e:	7813      	ldrb	r3, [r2, #0]
 8004f40:	600b      	str	r3, [r1, #0]
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	1c10      	adds	r0, r2, #0
 8004f46:	bf18      	it	ne
 8004f48:	2001      	movne	r0, #1
 8004f4a:	b002      	add	sp, #8
 8004f4c:	4770      	bx	lr
 8004f4e:	4610      	mov	r0, r2
 8004f50:	e7fb      	b.n	8004f4a <__ascii_mbtowc+0x16>
 8004f52:	f06f 0001 	mvn.w	r0, #1
 8004f56:	e7f8      	b.n	8004f4a <__ascii_mbtowc+0x16>

08004f58 <memcpy>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	1e43      	subs	r3, r0, #1
 8004f5c:	440a      	add	r2, r1
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	d100      	bne.n	8004f64 <memcpy+0xc>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6c:	e7f7      	b.n	8004f5e <memcpy+0x6>

08004f6e <__malloc_lock>:
 8004f6e:	4770      	bx	lr

08004f70 <__malloc_unlock>:
 8004f70:	4770      	bx	lr

08004f72 <_realloc_r>:
 8004f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f74:	4607      	mov	r7, r0
 8004f76:	4614      	mov	r4, r2
 8004f78:	460e      	mov	r6, r1
 8004f7a:	b921      	cbnz	r1, 8004f86 <_realloc_r+0x14>
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f82:	f7ff b965 	b.w	8004250 <_malloc_r>
 8004f86:	b922      	cbnz	r2, 8004f92 <_realloc_r+0x20>
 8004f88:	f7ff f914 	bl	80041b4 <_free_r>
 8004f8c:	4625      	mov	r5, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f92:	f000 f834 	bl	8004ffe <_malloc_usable_size_r>
 8004f96:	42a0      	cmp	r0, r4
 8004f98:	d20f      	bcs.n	8004fba <_realloc_r+0x48>
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f7ff f957 	bl	8004250 <_malloc_r>
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0f2      	beq.n	8004f8e <_realloc_r+0x1c>
 8004fa8:	4631      	mov	r1, r6
 8004faa:	4622      	mov	r2, r4
 8004fac:	f7ff ffd4 	bl	8004f58 <memcpy>
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	f7ff f8fe 	bl	80041b4 <_free_r>
 8004fb8:	e7e9      	b.n	8004f8e <_realloc_r+0x1c>
 8004fba:	4635      	mov	r5, r6
 8004fbc:	e7e7      	b.n	8004f8e <_realloc_r+0x1c>
	...

08004fc0 <_read_r>:
 8004fc0:	b538      	push	{r3, r4, r5, lr}
 8004fc2:	4c07      	ldr	r4, [pc, #28]	; (8004fe0 <_read_r+0x20>)
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	4608      	mov	r0, r1
 8004fc8:	4611      	mov	r1, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6022      	str	r2, [r4, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f7fb fdbe 	bl	8000b50 <_read>
 8004fd4:	1c43      	adds	r3, r0, #1
 8004fd6:	d102      	bne.n	8004fde <_read_r+0x1e>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	b103      	cbz	r3, 8004fde <_read_r+0x1e>
 8004fdc:	602b      	str	r3, [r5, #0]
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
 8004fe0:	200002fc 	.word	0x200002fc

08004fe4 <__ascii_wctomb>:
 8004fe4:	b149      	cbz	r1, 8004ffa <__ascii_wctomb+0x16>
 8004fe6:	2aff      	cmp	r2, #255	; 0xff
 8004fe8:	bf85      	ittet	hi
 8004fea:	238a      	movhi	r3, #138	; 0x8a
 8004fec:	6003      	strhi	r3, [r0, #0]
 8004fee:	700a      	strbls	r2, [r1, #0]
 8004ff0:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ff4:	bf98      	it	ls
 8004ff6:	2001      	movls	r0, #1
 8004ff8:	4770      	bx	lr
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4770      	bx	lr

08004ffe <_malloc_usable_size_r>:
 8004ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005002:	1f18      	subs	r0, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	bfbc      	itt	lt
 8005008:	580b      	ldrlt	r3, [r1, r0]
 800500a:	18c0      	addlt	r0, r0, r3
 800500c:	4770      	bx	lr
	...

08005010 <_init>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr

0800501c <_fini>:
 800501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501e:	bf00      	nop
 8005020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005022:	bc08      	pop	{r3}
 8005024:	469e      	mov	lr, r3
 8005026:	4770      	bx	lr
