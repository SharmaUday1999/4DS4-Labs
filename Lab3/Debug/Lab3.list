
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000563c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005908  08005908  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005910  08005910  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08005988  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08005988  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2c8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fdf  00000000  00000000  0002f368  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  00031348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b50  00000000  00000000  00031fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023202  00000000  00000000  00032af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4fd  00000000  00000000  00055cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3441  00000000  00000000  000601ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003acc  00000000  00000000  001336ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057b4 	.word	0x080057b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080057b4 	.word	0x080057b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f002 f916 	bl	80027b4 <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f002 f906 	bl	80027b4 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005c4:	2110      	movs	r1, #16
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005c8:	f7ff ffd2 	bl	8000570 <GPIO_SetBits>
 80005cc:	e003      	b.n	80005d6 <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005ce:	2110      	movs	r1, #16
 80005d0:	481e      	ldr	r0, [pc, #120]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005d2:	f7ff ffdd 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005e0:	2120      	movs	r1, #32
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005e4:	f7ff ffc4 	bl	8000570 <GPIO_SetBits>
 80005e8:	e003      	b.n	80005f2 <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005ea:	2120      	movs	r1, #32
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005ee:	f7ff ffcf 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d004      	beq.n	8000606 <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000600:	f7ff ffb6 	bl	8000570 <GPIO_SetBits>
 8000604:	e003      	b.n	800060e <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800060a:	f7ff ffc1 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	da04      	bge.n	8000620 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800061a:	f7ff ffa9 	bl	8000570 <GPIO_SetBits>
 800061e:	e003      	b.n	8000628 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000624:	f7ff ffb4 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800062e:	f002 f8c1 	bl	80027b4 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8000632:	2002      	movs	r0, #2
 8000634:	f000 fe0e 	bl	8001254 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800063e:	f002 f8b9 	bl	80027b4 <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	48000400 	.word	0x48000400

08000650 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000664:	2110      	movs	r1, #16
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000668:	f7ff ff82 	bl	8000570 <GPIO_SetBits>
 800066c:	e003      	b.n	8000676 <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800066e:	2110      	movs	r1, #16
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000672:	f7ff ff8d 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000680:	2120      	movs	r1, #32
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000684:	f7ff ff74 	bl	8000570 <GPIO_SetBits>
 8000688:	e003      	b.n	8000692 <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800068a:	2120      	movs	r1, #32
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 800068e:	f7ff ff7f 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	2b00      	cmp	r3, #0
 800069a:	d004      	beq.n	80006a6 <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006a0:	f7ff ff66 	bl	8000570 <GPIO_SetBits>
 80006a4:	e003      	b.n	80006ae <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006aa:	f7ff ff71 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006bc:	f7ff ff58 	bl	8000570 <GPIO_SetBits>
 80006c0:	e003      	b.n	80006ca <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006c6:	f7ff ff63 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2102      	movs	r1, #2
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006d0:	f002 f870 	bl	80027b4 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80006d4:	2002      	movs	r0, #2
 80006d6:	f000 fdbd 	bl	8001254 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006e0:	f002 f868 	bl	80027b4 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	48000400 	.word	0x48000400

080006f0 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff57 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffa3 	bl	8000650 <hd44780_wr_lo_nibble>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <hd44780_wr_cmd+0x24>)
 8000724:	f002 f846 	bl	80027b4 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffe0 	bl	80006f0 <hd44780_write>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000400 	.word	0x48000400

0800073c <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 8000746:	2201      	movs	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <hd44780_wr_data+0x24>)
 800074c:	f002 f832 	bl	80027b4 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffcc 	bl	80006f0 <hd44780_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	48000400 	.word	0x48000400

08000764 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HD44780_Init+0xbc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <HD44780_Init+0xbc>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <HD44780_Init+0xbc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8000782:	23f0      	movs	r3, #240	; 0xf0
 8000784:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <HD44780_Init+0xc0>)
 8000798:	f001 fea2 	bl	80024e0 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800079c:	230b      	movs	r3, #11
 800079e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <HD44780_Init+0xc0>)
 80007b2:	f001 fe95 	bl	80024e0 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <HD44780_Init+0xc0>)
 80007bc:	f001 fffa 	bl	80027b4 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <HD44780_Init+0xc0>)
 80007c6:	f001 fff5 	bl	80027b4 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <HD44780_Init+0xc0>)
 80007d0:	f001 fff0 	bl	80027b4 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80007d4:	2010      	movs	r0, #16
 80007d6:	f000 fd3d 	bl	8001254 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	f7ff fee8 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80007e0:	2005      	movs	r0, #5
 80007e2:	f000 fd37 	bl	8001254 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff fee2 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 fd31 	bl	8001254 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007f2:	2030      	movs	r0, #48	; 0x30
 80007f4:	f7ff fedc 	bl	80005b0 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff fed9 	bl	80005b0 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f7ff ff88 	bl	8000714 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8000804:	200c      	movs	r0, #12
 8000806:	f7ff ff85 	bl	8000714 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff82 	bl	8000714 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8000810:	2006      	movs	r0, #6
 8000812:	f7ff ff7f 	bl	8000714 <hd44780_wr_cmd>

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff81 	bl	800073c <hd44780_wr_data>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 8000842:	b580      	push	{r7, lr}
 8000844:	b084      	sub	sp, #16
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4413      	add	r3, r2
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffe6 	bl	8000828 <HD44780_PutChar>
		i++;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3301      	adds	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1ef      	bne.n	800084e <HD44780_PutStr+0xc>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff4a 	bl	8000714 <hd44780_wr_cmd>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <measureVoltagePA0>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);

volatile measureVoltagePA0(ADC_HandleTypeDef *hadc1,
	volatile uhADCxConvertedValue) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 3 */
	if (HAL_ADC_Start(&*hadc1) != HAL_OK) {
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f001 f810 	bl	80018b4 <HAL_ADC_Start>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <measureVoltagePA0+0x1c>
		printf("HAL_ADC_START ERROR\r\n");
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <measureVoltagePA0+0x48>)
 800089c:	f003 fef2 	bl	8004684 <puts>
	}
	if (HAL_ADC_PollForConversion(&*hadc1, 10) != HAL_OK) {
 80008a0:	210a      	movs	r1, #10
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f001 f869 	bl	800197a <HAL_ADC_PollForConversion>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d003      	beq.n	80008b6 <measureVoltagePA0+0x32>
		printf("HAL_ADC_PollForConversion ERROR\r\n");
 80008ae:	4808      	ldr	r0, [pc, #32]	; (80008d0 <measureVoltagePA0+0x4c>)
 80008b0:	f003 fee8 	bl	8004684 <puts>
 80008b4:	e004      	b.n	80008c0 <measureVoltagePA0+0x3c>
	} else {
		uhADCxConvertedValue = HAL_ADC_GetValue(&*hadc1);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f001 f8e7 	bl	8001a8a <HAL_ADC_GetValue>
 80008bc:	4603      	mov	r3, r0
 80008be:	603b      	str	r3, [r7, #0]
	}
	return uhADCxConvertedValue;
 80008c0:	683b      	ldr	r3, [r7, #0]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	080057cc 	.word	0x080057cc
 80008d0:	080057e4 	.word	0x080057e4

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09e      	sub	sp, #120	; 0x78
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008da:	f000 fc46 	bl	800116a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008de:	f000 f8ef 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e2:	f000 fa15 	bl	8000d10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e6:	f000 f9e3 	bl	8000cb0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80008ea:	f000 f97d 	bl	8000be8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init();
 80008ee:	f7ff ff39 	bl	8000764 <HD44780_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	volatile uhADCxConvertedValue = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	667b      	str	r3, [r7, #100]	; 0x64
    /* USER CODE BEGIN 3 */
	int32_t sum = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	677b      	str	r3, [r7, #116]	; 0x74
	int16_t avgMeasuredVoltagePA0 = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t sampleMeasured[40] = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2250      	movs	r2, #80	; 0x50
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fe40 	bl	800458c <memset>

	for(int16_t x = 0; x < 40; x++) {
 800090c:	2300      	movs	r3, #0
 800090e:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8000912:	e017      	b.n	8000944 <main+0x70>
		uhADCxConvertedValue = measureVoltagePA0(&hadc1, uhADCxConvertedValue);
 8000914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000916:	4619      	mov	r1, r3
 8000918:	4865      	ldr	r0, [pc, #404]	; (8000ab0 <main+0x1dc>)
 800091a:	f7ff ffb3 	bl	8000884 <measureVoltagePA0>
 800091e:	4603      	mov	r3, r0
 8000920:	667b      	str	r3, [r7, #100]	; 0x64
		sampleMeasured[x] = uhADCxConvertedValue;
 8000922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000924:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8000928:	b212      	sxth	r2, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000930:	440b      	add	r3, r1
 8000932:	f823 2c78 	strh.w	r2, [r3, #-120]
	for(int16_t x = 0; x < 40; x++) {
 8000936:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800093a:	b29b      	uxth	r3, r3
 800093c:	3301      	adds	r3, #1
 800093e:	b29b      	uxth	r3, r3
 8000940:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8000944:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8000948:	2b27      	cmp	r3, #39	; 0x27
 800094a:	dde3      	ble.n	8000914 <main+0x40>
	}

	for(int16_t x = 0; x < 40; x++) {
 800094c:	2300      	movs	r3, #0
 800094e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8000952:	e012      	b.n	800097a <main+0xa6>
		sum += sampleMeasured[x];
 8000954:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800095e:	4413      	add	r3, r2
 8000960:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 8000964:	461a      	mov	r2, r3
 8000966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000968:	4413      	add	r3, r2
 800096a:	677b      	str	r3, [r7, #116]	; 0x74
	for(int16_t x = 0; x < 40; x++) {
 800096c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8000970:	b29b      	uxth	r3, r3
 8000972:	3301      	adds	r3, #1
 8000974:	b29b      	uxth	r3, r3
 8000976:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800097a:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800097e:	2b27      	cmp	r3, #39	; 0x27
 8000980:	dde8      	ble.n	8000954 <main+0x80>
	}

	avgMeasuredVoltagePA0 = sum/40;
 8000982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000984:	4a4b      	ldr	r2, [pc, #300]	; (8000ab4 <main+0x1e0>)
 8000986:	fb82 1203 	smull	r1, r2, r2, r3
 800098a:	1112      	asrs	r2, r2, #4
 800098c:	17db      	asrs	r3, r3, #31
 800098e:	1ad3      	subs	r3, r2, r3
 8000990:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int temp = (avgMeasuredVoltagePA0 - 580)/10;
 8000994:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	; 0x6e
 8000998:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800099c:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <main+0x1e0>)
 800099e:	fb82 1203 	smull	r1, r2, r2, r3
 80009a2:	1092      	asrs	r2, r2, #2
 80009a4:	17db      	asrs	r3, r3, #31
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	66bb      	str	r3, [r7, #104]	; 0x68
	printf("Measured Temperature = %d\r\n", temp);
 80009aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80009ac:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <main+0x1e4>)
 80009ae:	f003 fdf5 	bl	800459c <iprintf>

	if(temp >= -40 && temp < 20) {
 80009b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009b4:	f113 0f28 	cmn.w	r3, #40	; 0x28
 80009b8:	db15      	blt.n	80009e6 <main+0x112>
 80009ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009bc:	2b13      	cmp	r3, #19
 80009be:	dc12      	bgt.n	80009e6 <main+0x112>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ca:	f001 fef3 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 80009ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009d2:	f000 fc3f 	bl	8001254 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e0:	f001 fee8 	bl	80027b4 <HAL_GPIO_WritePin>
 80009e4:	e051      	b.n	8000a8a <main+0x1b6>
	} else if (temp >= 20 && temp < 37) {
 80009e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e8:	2b13      	cmp	r3, #19
 80009ea:	dd15      	ble.n	8000a18 <main+0x144>
 80009ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ee:	2b24      	cmp	r3, #36	; 0x24
 80009f0:	dc12      	bgt.n	8000a18 <main+0x144>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fc:	f001 feda 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f000 fc26 	bl	8001254 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a12:	f001 fecf 	bl	80027b4 <HAL_GPIO_WritePin>
 8000a16:	e038      	b.n	8000a8a <main+0x1b6>
	} else if (temp >= 38 && temp < 40) {
 8000a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a1a:	2b25      	cmp	r3, #37	; 0x25
 8000a1c:	dd23      	ble.n	8000a66 <main+0x192>
 8000a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a20:	2b27      	cmp	r3, #39	; 0x27
 8000a22:	dc20      	bgt.n	8000a66 <main+0x192>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2e:	f001 fec1 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000a32:	2201      	movs	r2, #1
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f001 feba 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f000 fc06 	bl	8001254 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f001 feaf 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f001 fea8 	bl	80027b4 <HAL_GPIO_WritePin>
 8000a64:	e011      	b.n	8000a8a <main+0x1b6>
	} else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f001 fea0 	bl	80027b4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000a74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a78:	f000 fbec 	bl	8001254 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f001 fe95 	bl	80027b4 <HAL_GPIO_WritePin>
	}

	char str[20];
	sprintf(str, "%d", temp);
 8000a8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a8e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000a90:	490a      	ldr	r1, [pc, #40]	; (8000abc <main+0x1e8>)
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fdfe 	bl	8004694 <siprintf>
	HD44780_PutStr(str);
 8000a98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fed0 	bl	8000842 <HD44780_PutStr>
	HAL_Delay(1000);
 8000aa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aa6:	f000 fbd5 	bl	8001254 <HAL_Delay>
	HD44780_ClrScr();
 8000aaa:	f7ff fee4 	bl	8000876 <HD44780_ClrScr>
  {
 8000aae:	e720      	b.n	80008f2 <main+0x1e>
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	66666667 	.word	0x66666667
 8000ab8:	08005808 	.word	0x08005808
 8000abc:	08005824 	.word	0x08005824

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b0ac      	sub	sp, #176	; 0xb0
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aca:	2244      	movs	r2, #68	; 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 fd5c 	bl	800458c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	2254      	movs	r2, #84	; 0x54
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fd4e 	bl	800458c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af0:	f001 fe78 	bl	80027e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af4:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <SystemClock_Config+0x124>)
 8000af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afa:	4a3a      	ldr	r2, [pc, #232]	; (8000be4 <SystemClock_Config+0x124>)
 8000afc:	f023 0318 	bic.w	r3, r3, #24
 8000b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000b04:	2314      	movs	r3, #20
 8000b06:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b18:	2360      	movs	r3, #96	; 0x60
 8000b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 febd 	bl	80028cc <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b58:	f000 f91a 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2303      	movs	r3, #3
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b74:	2101      	movs	r1, #1
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fac8 	bl	800310c <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b82:	f000 f905 	bl	8000d90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000b86:	f244 0302 	movw	r3, #16386	; 0x4002
 8000b8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 fcac 	bl	8003514 <HAL_RCCEx_PeriphCLKConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000bc2:	f000 f8e5 	bl	8000d90 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bca:	f001 fe29 	bl	8002820 <HAL_PWREx_ControlVoltageScaling>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000bd4:	f000 f8dc 	bl	8000d90 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000bd8:	f002 fe8e 	bl	80038f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000bdc:	bf00      	nop
 8000bde:	37b0      	adds	r7, #176	; 0xb0
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40021000 	.word	0x40021000

08000be8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b086      	sub	sp, #24
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c00:	4a29      	ldr	r2, [pc, #164]	; (8000ca8 <MX_ADC1_Init+0xc0>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c04:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1c:	4b21      	ldr	r3, [pc, #132]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5e:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c60:	f000 fce2 	bl	8001628 <HAL_ADC_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c6a:	f000 f891 	bl	8000d90 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_ADC1_Init+0xc4>)
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c72:	2306      	movs	r3, #6
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c7a:	237f      	movs	r3, #127	; 0x7f
 8000c7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_ADC1_Init+0xbc>)
 8000c8c:	f000 ff0a 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c96:	f000 f87b 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000098 	.word	0x20000098
 8000ca8:	50040000 	.word	0x50040000
 8000cac:	14f00020 	.word	0x14f00020

08000cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <MX_USART2_UART_Init+0x5c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_USART2_UART_Init+0x58>)
 8000cf4:	f002 ff00 	bl	8003af8 <HAL_UART_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cfe:	f000 f847 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000fc 	.word	0x200000fc
 8000d0c:	40004400 	.word	0x40004400

08000d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a12      	ldr	r2, [pc, #72]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_GPIO_Init+0x7c>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f001 fd28 	bl	80027b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d64:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f001 fbae 	bl	80024e0 <HAL_GPIO_Init>

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40021000 	.word	0x40021000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <Error_Handler+0x6>

08000d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6613      	str	r3, [r2, #96]	; 0x60
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a08      	ldr	r2, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	603b      	str	r3, [r7, #0]
 8000dcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0x74>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d124      	bne.n	8000e4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_ADC_MspInit+0x78>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e32:	2301      	movs	r3, #1
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e36:	230b      	movs	r3, #11
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e48:	f001 fb4a 	bl	80024e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	50040000 	.word	0x50040000
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_UART_MspInit+0xa0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d13a      	bne.n	8000ef4 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_UART_MspInit+0xa4>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f001 fb08 	bl	80024e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef0:	f001 faf6 	bl	80024e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40004400 	.word	0x40004400
 8000f00:	40021000 	.word	0x40021000

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 f960 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8000f64:	2301      	movs	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <_read+0x38>)
 8000f74:	f002 fea1 	bl	8003cba <HAL_UART_Receive>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d002      	beq.n	8000f84 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	607b      	str	r3, [r7, #4]

	return len;
 8000f84:	687b      	ldr	r3, [r7, #4]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000fc 	.word	0x200000fc

08000f94 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <_write+0x40>)
 8000fb0:	f002 fdf0 	bl	8003b94 <HAL_UART_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <_write+0x30>
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d101      	bne.n	8000fc8 <_write+0x34>
	{
		Error_Handler();
 8000fc4:	f7ff fee4 	bl	8000d90 <Error_Handler>
	}

	return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000fc 	.word	0x200000fc

08000fd8 <_close>:



int _close(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	return -1;
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001000:	605a      	str	r2, [r3, #4]
	return 0;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_isatty>:

int _isatty(int file)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	return 1;
 8001018:	2301      	movs	r3, #1
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001026:	b480      	push	{r7}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
	return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f003 fa62 	bl	8004538 <__errno>
 8001074:	4602      	mov	r2, r0
 8001076:	230c      	movs	r3, #12
 8001078:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20010000 	.word	0x20010000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	2000008c 	.word	0x2000008c
 80010a8:	20000188 	.word	0x20000188

080010ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <SystemInit+0x64>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a16      	ldr	r2, [pc, #88]	; (8001110 <SystemInit+0x64>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <SystemInit+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <SystemInit+0x68>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <SystemInit+0x68>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <SystemInit+0x68>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <SystemInit+0x68>)
 80010d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <SystemInit+0x68>)
 80010e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <SystemInit+0x68>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <SystemInit+0x68>)
 80010f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <SystemInit+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SystemInit+0x64>)
 80010fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001102:	609a      	str	r2, [r3, #8]
#endif
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000ed00 	.word	0xe000ed00
 8001114:	40021000 	.word	0x40021000

08001118 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001150 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff ffc6 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001120:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800112c:	480a      	ldr	r0, [pc, #40]	; (8001158 <LoopForever+0xa>)
	ldr	r3, =_edata
 800112e:	4b0b      	ldr	r3, [pc, #44]	; (800115c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001132:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
	ldr	r2, =_sbss
 8001136:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800113a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800113c:	f842 3b04 	str.w	r3, [r2], #4

08001140 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <LoopForever+0x16>)
	cmp	r2, r3
 8001142:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 f9fd 	bl	8004544 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800114a:	f7ff fbc3 	bl	80008d4 <main>

0800114e <LoopForever>:

LoopForever:
    b LoopForever
 800114e:	e7fe      	b.n	800114e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001150:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001154:	08005918 	.word	0x08005918
	ldr	r0, =_sdata
 8001158:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800115c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001160:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001164:	20000184 	.word	0x20000184

08001168 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_IRQHandler>

0800116a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001170:	2300      	movs	r3, #0
 8001172:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f001 f97f 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117a:	2000      	movs	r0, #0
 800117c:	f000 f80e 	bl	800119c <HAL_InitTick>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	e001      	b.n	8001190 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118c:	f7ff fe04 	bl	8000d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_InitTick+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d023      	beq.n	80011f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_InitTick+0x70>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_InitTick+0x6c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	4619      	mov	r1, r3
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 f97d 	bl	80024c6 <HAL_SYSTICK_Config>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10f      	bne.n	80011f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d809      	bhi.n	80011ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f001 f955 	bl	800248e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_InitTick+0x74>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e007      	b.n	80011fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e004      	b.n	80011fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e001      	b.n	80011fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20000000 	.word	0x20000000
 8001210:	20000004 	.word	0x20000004

08001214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_IncTick+0x20>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x24>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_IncTick+0x24>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000008 	.word	0x20000008
 8001238:	2000017c 	.word	0x2000017c

0800123c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return uwTick;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <HAL_GetTick+0x14>)
 8001242:	681b      	ldr	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000017c 	.word	0x2000017c

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff ffee 	bl	800123c <HAL_GetTick>
 8001260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800126c:	d005      	beq.n	800127a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_Delay+0x40>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4413      	add	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127a:	bf00      	nop
 800127c:	f7ff ffde 	bl	800123c <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d8f7      	bhi.n	800127c <HAL_Delay+0x28>
  {
  }
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000008 	.word	0x20000008

08001298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3360      	adds	r3, #96	; 0x60
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_ADC_SetOffset+0x44>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	4313      	orrs	r3, r2
 8001330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	03fff000 	.word	0x03fff000

08001348 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3360      	adds	r3, #96	; 0x60
 8001384:	461a      	mov	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3330      	adds	r3, #48	; 0x30
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	211f      	movs	r1, #31
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0e9b      	lsrs	r3, r3, #26
 8001408:	f003 011f 	and.w	r1, r3, #31
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	431a      	orrs	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3314      	adds	r3, #20
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0e5b      	lsrs	r3, r3, #25
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0d1b      	lsrs	r3, r3, #20
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2107      	movs	r1, #7
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	0d1b      	lsrs	r3, r3, #20
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0318 	and.w	r3, r3, #24
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014a4:	40d9      	lsrs	r1, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	400b      	ands	r3, r1
 80014aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ae:	431a      	orrs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	0007ffff 	.word	0x0007ffff

080014c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80014d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6093      	str	r3, [r2, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001500:	d101      	bne.n	8001506 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001524:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001528:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001550:	d101      	bne.n	8001556 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <LL_ADC_IsEnabled+0x18>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <LL_ADC_IsEnabled+0x1a>
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015c6:	f043 0204 	orr.w	r2, r3, #4
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d101      	bne.n	80015f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b08      	cmp	r3, #8
 8001612:	d101      	bne.n	8001618 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e12a      	b.n	8001898 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff fbc5 	bl	8000de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff3f 	bl	80014ec <LL_ADC_IsDeepPowerDownEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff25 	bl	80014c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff5a 	bl	800153c <LL_ADC_IsInternalRegulatorEnabled>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d113      	bne.n	80016b6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff3e 	bl	8001514 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001698:	4b81      	ldr	r3, [pc, #516]	; (80018a0 <HAL_ADC_Init+0x278>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	4a81      	ldr	r2, [pc, #516]	; (80018a4 <HAL_ADC_Init+0x27c>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ff3e 	bl	800153c <LL_ADC_IsInternalRegulatorEnabled>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ca:	f043 0210 	orr.w	r2, r3, #16
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ff77 	bl	80015da <LL_ADC_REG_IsConversionOngoing>
 80016ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80c5 	bne.w	8001886 <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f040 80c1 	bne.w	8001886 <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800170c:	f043 0202 	orr.w	r2, r3, #2
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff37 	bl	800158c <LL_ADC_IsEnabled>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10b      	bne.n	800173c <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001724:	4860      	ldr	r0, [pc, #384]	; (80018a8 <HAL_ADC_Init+0x280>)
 8001726:	f7ff ff31 	bl	800158c <LL_ADC_IsEnabled>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d105      	bne.n	800173c <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4619      	mov	r1, r3
 8001736:	485d      	ldr	r0, [pc, #372]	; (80018ac <HAL_ADC_Init+0x284>)
 8001738:	f7ff fdae 	bl	8001298 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7e5b      	ldrb	r3, [r3, #25]
 8001740:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001746:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800174c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001752:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f893 3020 	ldrb.w	r3, [r3, #32]
 800175a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d106      	bne.n	8001778 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	3b01      	subs	r3, #1
 8001770:	045b      	lsls	r3, r3, #17
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177c:	2b00      	cmp	r3, #0
 800177e:	d009      	beq.n	8001794 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	4b45      	ldr	r3, [pc, #276]	; (80018b0 <HAL_ADC_Init+0x288>)
 800179c:	4013      	ands	r3, r2
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	69b9      	ldr	r1, [r7, #24]
 80017a4:	430b      	orrs	r3, r1
 80017a6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff14 	bl	80015da <LL_ADC_REG_IsConversionOngoing>
 80017b2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff21 	bl	8001600 <LL_ADC_INJ_IsConversionOngoing>
 80017be:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d13d      	bne.n	8001842 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13a      	bne.n	8001842 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017d0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017d8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e8:	f023 0302 	bic.w	r3, r3, #2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	69b9      	ldr	r1, [r7, #24]
 80017f2:	430b      	orrs	r3, r1
 80017f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d118      	bne.n	8001832 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800180a:	f023 0304 	bic.w	r3, r3, #4
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001822:	430a      	orrs	r2, r1
 8001824:	431a      	orrs	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0201 	bic.w	r2, r2, #1
 8001840:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10c      	bne.n	8001864 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	f023 010f 	bic.w	r1, r3, #15
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
 8001862:	e007      	b.n	8001874 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020f 	bic.w	r2, r2, #15
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001878:	f023 0303 	bic.w	r3, r3, #3
 800187c:	f043 0201 	orr.w	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
 8001884:	e007      	b.n	8001896 <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	f043 0210 	orr.w	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001896:	7ffb      	ldrb	r3, [r7, #31]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3720      	adds	r7, #32
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000000 	.word	0x20000000
 80018a4:	053e2d63 	.word	0x053e2d63
 80018a8:	50040000 	.word	0x50040000
 80018ac:	50040300 	.word	0x50040300
 80018b0:	fff0c007 	.word	0xfff0c007

080018b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fe8a 	bl	80015da <LL_ADC_REG_IsConversionOngoing>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d14f      	bne.n	800196c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_ADC_Start+0x26>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e04b      	b.n	8001972 <HAL_ADC_Start+0xbe>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 fcbc 	bl	8002260 <ADC_Enable>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d137      	bne.n	8001962 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001912:	d106      	bne.n	8001922 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f023 0206 	bic.w	r2, r3, #6
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58
 8001920:	e002      	b.n	8001928 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	221c      	movs	r2, #28
 800192e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800194e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fe29 	bl	80015b2 <LL_ADC_REG_StartConversion>
 8001960:	e006      	b.n	8001970 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800196a:	e001      	b.n	8001970 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800196c:	2302      	movs	r3, #2
 800196e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b08      	cmp	r3, #8
 800198a:	d102      	bne.n	8001992 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800198c:	2308      	movs	r3, #8
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e010      	b.n	80019b4 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d007      	beq.n	80019b0 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a4:	f043 0220 	orr.w	r2, r3, #32
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e068      	b.n	8001a82 <HAL_ADC_PollForConversion+0x108>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019b0:	2304      	movs	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019b4:	f7ff fc42 	bl	800123c <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ba:	e01a      	b.n	80019f2 <HAL_ADC_PollForConversion+0x78>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c2:	d016      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x78>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019c4:	f7ff fc3a 	bl	800123c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d302      	bcc.n	80019da <HAL_ADC_PollForConversion+0x60>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x78>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e047      	b.n	8001a82 <HAL_ADC_PollForConversion+0x108>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0dd      	beq.n	80019bc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fcca 	bl	80013aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01c      	beq.n	8001a56 <HAL_ADC_PollForConversion+0xdc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e5b      	ldrb	r3, [r3, #25]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xdc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xdc>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xdc>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d104      	bne.n	8001a6e <HAL_ADC_PollForConversion+0xf4>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e008      	b.n	8001a80 <HAL_ADC_PollForConversion+0x106>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x106>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b0b6      	sub	sp, #216	; 0xd8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e3b8      	b.n	8002238 <HAL_ADC_ConfigChannel+0x794>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd81 	bl	80015da <LL_ADC_REG_IsConversionOngoing>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 839d 	bne.w	800221a <HAL_ADC_ConfigChannel+0x776>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d824      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d81b      	bhi.n	8001b2a <HAL_ADC_ConfigChannel+0x86>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_ADC_ConfigChannel+0x54>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b11 	.word	0x08001b11
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b21 	.word	0x08001b21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	605a      	str	r2, [r3, #4]
          break;
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2212      	movs	r2, #18
 8001b14:	605a      	str	r2, [r3, #4]
          break;
 8001b16:	e00d      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2218      	movs	r2, #24
 8001b1c:	605a      	str	r2, [r3, #4]
          break;
 8001b1e:	e009      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b26:	605a      	str	r2, [r3, #4]
          break;
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	605a      	str	r2, [r3, #4]
          break;
 8001b30:	e000      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff fc45 	bl	80013d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fd45 	bl	80015da <LL_ADC_REG_IsConversionOngoing>
 8001b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd51 	bl	8001600 <LL_ADC_INJ_IsConversionOngoing>
 8001b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 81a6 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 81a1 	bne.w	8001eb8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f7ff fc50 	bl	8001428 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	08db      	lsrs	r3, r3, #3
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6818      	ldr	r0, [r3, #0]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bba:	f7ff fba1 	bl	8001300 <LL_ADC_SetOffset>
 8001bbe:	e17b      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fbbe 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x148>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fbb3 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 021f 	and.w	r2, r3, #31
 8001bea:	e01e      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x186>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fba8 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	e004      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x19e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	e018      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x1d0>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c66:	2320      	movs	r3, #32
 8001c68:	e004      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001c6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d106      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fb77 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb5b 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x20e>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fb50 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	e01e      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x24c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fb45 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x264>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0e9b      	lsrs	r3, r3, #26
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	e018      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x296>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d106      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fb14 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2102      	movs	r1, #2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff faf8 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x2d4>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2102      	movs	r1, #2
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff faed 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	e01e      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x312>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fae2 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e004      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x32a>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	e016      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x358>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001de6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001dee:	2320      	movs	r3, #32
 8001df0:	e004      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2102      	movs	r1, #2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fab3 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2103      	movs	r1, #3
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fa97 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10a      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x396>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2103      	movs	r1, #3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fa8c 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	0e9b      	lsrs	r3, r3, #26
 8001e34:	f003 021f 	and.w	r2, r3, #31
 8001e38:	e017      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x3c6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2103      	movs	r1, #3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fa81 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e46:	4603      	mov	r3, r0
 8001e48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	e003      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x3de>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0e9b      	lsrs	r3, r3, #26
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	e011      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x402>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	fa93 f3a3 	rbit	r3, r3
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001e9a:	2320      	movs	r3, #32
 8001e9c:	e003      	b.n	8001ea6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001e9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa5e 	bl	8001374 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fb65 	bl	800158c <LL_ADC_IsEnabled>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 813f 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fad2 	bl	8001480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a8e      	ldr	r2, [pc, #568]	; (800211c <HAL_ADC_ConfigChannel+0x678>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	f040 8130 	bne.w	8002148 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x46c>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	bf94      	ite	ls
 8001f08:	2301      	movls	r3, #1
 8001f0a:	2300      	movhi	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	e019      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x4a0>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f20:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e003      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	bf94      	ite	ls
 8001f3e:	2301      	movls	r3, #1
 8001f40:	2300      	movhi	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d079      	beq.n	800203c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x4c0>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	069b      	lsls	r3, r3, #26
 8001f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f62:	e015      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x4ec>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	069b      	lsls	r3, r3, #26
 8001f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d109      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x50c>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	e017      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x53c>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	ea42 0103 	orr.w	r1, r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10a      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x562>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	f003 021f 	and.w	r2, r3, #31
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	4413      	add	r3, r2
 8002002:	051b      	lsls	r3, r3, #20
 8002004:	e018      	b.n	8002038 <HAL_ADC_ConfigChannel+0x594>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800201e:	2320      	movs	r3, #32
 8002020:	e003      	b.n	800202a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002038:	430b      	orrs	r3, r1
 800203a:	e080      	b.n	800213e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002044:	2b00      	cmp	r3, #0
 8002046:	d107      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x5b4>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	3301      	adds	r3, #1
 8002050:	069b      	lsls	r3, r3, #26
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002056:	e015      	b.n	8002084 <HAL_ADC_ConfigChannel+0x5e0>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	069b      	lsls	r3, r3, #26
 8002080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208c:	2b00      	cmp	r3, #0
 800208e:	d109      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x600>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0e9b      	lsrs	r3, r3, #26
 8002096:	3301      	adds	r3, #1
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	e017      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x630>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	61fb      	str	r3, [r7, #28]
  return result;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e003      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3301      	adds	r3, #1
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f303 	lsl.w	r3, r1, r3
 80020d4:	ea42 0103 	orr.w	r1, r2, r3
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10d      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x65c>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	0e9b      	lsrs	r3, r3, #26
 80020ea:	3301      	adds	r3, #1
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4613      	mov	r3, r2
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	3b1e      	subs	r3, #30
 80020f8:	051b      	lsls	r3, r3, #20
 80020fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020fe:	e01d      	b.n	800213c <HAL_ADC_ConfigChannel+0x698>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa93 f3a3 	rbit	r3, r3
 800210c:	613b      	str	r3, [r7, #16]
  return result;
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d103      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002118:	2320      	movs	r3, #32
 800211a:	e005      	b.n	8002128 <HAL_ADC_ConfigChannel+0x684>
 800211c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	fab3 f383 	clz	r3, r3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f003 021f 	and.w	r2, r3, #31
 800212e:	4613      	mov	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4413      	add	r3, r2
 8002134:	3b1e      	subs	r3, #30
 8002136:	051b      	lsls	r3, r3, #20
 8002138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213c:	430b      	orrs	r3, r1
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6892      	ldr	r2, [r2, #8]
 8002142:	4619      	mov	r1, r3
 8002144:	f7ff f970 	bl	8001428 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <HAL_ADC_ConfigChannel+0x79c>)
 800214e:	4013      	ands	r3, r2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d06b      	beq.n	800222c <HAL_ADC_ConfigChannel+0x788>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002154:	483b      	ldr	r0, [pc, #236]	; (8002244 <HAL_ADC_ConfigChannel+0x7a0>)
 8002156:	f7ff f8c5 	bl	80012e4 <LL_ADC_GetCommonPathInternalCh>
 800215a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a39      	ldr	r2, [pc, #228]	; (8002248 <HAL_ADC_ConfigChannel+0x7a4>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d126      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x712>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002168:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800216c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d120      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x712>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a34      	ldr	r2, [pc, #208]	; (800224c <HAL_ADC_ConfigChannel+0x7a8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d156      	bne.n	800222c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800217e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002186:	4619      	mov	r1, r3
 8002188:	482e      	ldr	r0, [pc, #184]	; (8002244 <HAL_ADC_ConfigChannel+0x7a0>)
 800218a:	f7ff f898 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800218e:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_ADC_ConfigChannel+0x7ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <HAL_ADC_ConfigChannel+0x7b0>)
 8002196:	fba2 2303 	umull	r2, r3, r2, r3
 800219a:	099a      	lsrs	r2, r3, #6
 800219c:	4613      	mov	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021a6:	e002      	b.n	80021ae <HAL_ADC_ConfigChannel+0x70a>
          {
            wait_loop_index--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f9      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x704>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021b4:	e03a      	b.n	800222c <HAL_ADC_ConfigChannel+0x788>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a27      	ldr	r2, [pc, #156]	; (8002258 <HAL_ADC_ConfigChannel+0x7b4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d113      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x744>
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x744>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a1e      	ldr	r2, [pc, #120]	; (800224c <HAL_ADC_ConfigChannel+0x7a8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12a      	bne.n	800222c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	4619      	mov	r1, r3
 80021e0:	4818      	ldr	r0, [pc, #96]	; (8002244 <HAL_ADC_ConfigChannel+0x7a0>)
 80021e2:	f7ff f86c 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e6:	e021      	b.n	800222c <HAL_ADC_ConfigChannel+0x788>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_ADC_ConfigChannel+0x7b8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11c      	bne.n	800222c <HAL_ADC_ConfigChannel+0x788>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_ADC_ConfigChannel+0x788>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a12      	ldr	r2, [pc, #72]	; (800224c <HAL_ADC_ConfigChannel+0x7a8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d111      	bne.n	800222c <HAL_ADC_ConfigChannel+0x788>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002210:	4619      	mov	r1, r3
 8002212:	480c      	ldr	r0, [pc, #48]	; (8002244 <HAL_ADC_ConfigChannel+0x7a0>)
 8002214:	f7ff f853 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
 8002218:	e008      	b.n	800222c <HAL_ADC_ConfigChannel+0x788>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f043 0220 	orr.w	r2, r3, #32
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002234:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002238:	4618      	mov	r0, r3
 800223a:	37d8      	adds	r7, #216	; 0xd8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	80080000 	.word	0x80080000
 8002244:	50040300 	.word	0x50040300
 8002248:	c7520000 	.word	0xc7520000
 800224c:	50040000 	.word	0x50040000
 8002250:	20000000 	.word	0x20000000
 8002254:	053e2d63 	.word	0x053e2d63
 8002258:	cb840000 	.word	0xcb840000
 800225c:	80000001 	.word	0x80000001

08002260 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f98d 	bl	800158c <LL_ADC_IsEnabled>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d146      	bne.n	8002306 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <ADC_Enable+0xb0>)
 8002280:	4013      	ands	r3, r2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f043 0210 	orr.w	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002296:	f043 0201 	orr.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e032      	b.n	8002308 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f95c 	bl	8001564 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022ac:	f7fe ffc6 	bl	800123c <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b2:	e021      	b.n	80022f8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f967 	bl	800158c <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff f94b 	bl	8001564 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ce:	f7fe ffb5 	bl	800123c <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d90d      	bls.n	80022f8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e0:	f043 0210 	orr.w	r2, r3, #16
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f043 0201 	orr.w	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b01      	cmp	r3, #1
 8002304:	d1d6      	bne.n	80022b4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	8000003f 	.word	0x8000003f

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff47 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff5c 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffb0 	bl	8002434 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ee:	e148      	b.n	8002782 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 813a 	beq.w	800277c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d00b      	beq.n	8002528 <HAL_GPIO_Init+0x48>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d007      	beq.n	8002528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251c:	2b11      	cmp	r3, #17
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b12      	cmp	r3, #18
 8002526:	d130      	bne.n	800258a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800255e:	2201      	movs	r2, #1
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43db      	mvns	r3, r3
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 0201 	and.w	r2, r3, #1
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0xea>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d123      	bne.n	8002612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	08da      	lsrs	r2, r3, #3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3208      	adds	r2, #8
 800260c:	6939      	ldr	r1, [r7, #16]
 800260e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0203 	and.w	r2, r3, #3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8094 	beq.w	800277c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002654:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <HAL_GPIO_Init+0x2c0>)
 8002656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002658:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_GPIO_Init+0x2c0>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6613      	str	r3, [r2, #96]	; 0x60
 8002660:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x2c0>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800266c:	4a4d      	ldr	r2, [pc, #308]	; (80027a4 <HAL_GPIO_Init+0x2c4>)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	220f      	movs	r2, #15
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4013      	ands	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002696:	d00d      	beq.n	80026b4 <HAL_GPIO_Init+0x1d4>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a43      	ldr	r2, [pc, #268]	; (80027a8 <HAL_GPIO_Init+0x2c8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <HAL_GPIO_Init+0x1d0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a42      	ldr	r2, [pc, #264]	; (80027ac <HAL_GPIO_Init+0x2cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d101      	bne.n	80026ac <HAL_GPIO_Init+0x1cc>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026ac:	2307      	movs	r3, #7
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x1d6>
 80026b4:	2300      	movs	r3, #0
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026c6:	4937      	ldr	r1, [pc, #220]	; (80027a4 <HAL_GPIO_Init+0x2c4>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026f8:	4a2d      	ldr	r2, [pc, #180]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002722:	4a23      	ldr	r2, [pc, #140]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800274c:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002752:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <HAL_GPIO_Init+0x2d0>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	3301      	adds	r3, #1
 8002780:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	f47f aeaf 	bne.w	80024f0 <HAL_GPIO_Init+0x10>
  }
}
 8002792:	bf00      	nop
 8002794:	371c      	adds	r7, #28
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40010000 	.word	0x40010000
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48000800 	.word	0x48000800
 80027b0:	40010400 	.word	0x40010400

080027b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	807b      	strh	r3, [r7, #2]
 80027c0:	4613      	mov	r3, r2
 80027c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c4:	787b      	ldrb	r3, [r7, #1]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027ca:	887a      	ldrh	r2, [r7, #2]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d0:	e002      	b.n	80027d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027d2:	887a      	ldrh	r2, [r7, #2]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_PWREx_GetVoltageRange+0x18>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40007000 	.word	0x40007000

08002820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282e:	d130      	bne.n	8002892 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800283c:	d038      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800283e:	4b20      	ldr	r3, [pc, #128]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002846:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2232      	movs	r2, #50	; 0x32
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	4a1b      	ldr	r2, [pc, #108]	; (80028c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0c9b      	lsrs	r3, r3, #18
 8002860:	3301      	adds	r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002864:	e002      	b.n	800286c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b01      	subs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d102      	bne.n	8002880 <HAL_PWREx_ControlVoltageScaling+0x60>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002880:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800288c:	d110      	bne.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e00f      	b.n	80028b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800289a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289e:	d007      	beq.n	80028b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028a8:	4a05      	ldr	r2, [pc, #20]	; (80028c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40007000 	.word	0x40007000
 80028c4:	20000000 	.word	0x20000000
 80028c8:	431bde83 	.word	0x431bde83

080028cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d102      	bne.n	80028e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f000 bc11 	b.w	8003102 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028e0:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ea:	4b9e      	ldr	r3, [pc, #632]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 80e4 	beq.w	8002aca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_RCC_OscConfig+0x4c>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b0c      	cmp	r3, #12
 800290c:	f040 808b 	bne.w	8002a26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b01      	cmp	r3, #1
 8002914:	f040 8087 	bne.w	8002a26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002918:	4b92      	ldr	r3, [pc, #584]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_OscConfig+0x64>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e3e8      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	4b8b      	ldr	r3, [pc, #556]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d004      	beq.n	800294a <HAL_RCC_OscConfig+0x7e>
 8002940:	4b88      	ldr	r3, [pc, #544]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002948:	e005      	b.n	8002956 <HAL_RCC_OscConfig+0x8a>
 800294a:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800294c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002956:	4293      	cmp	r3, r2
 8002958:	d223      	bcs.n	80029a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd78 	bl	8003454 <RCC_SetFlashLatencyFromMSIRange>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e3c9      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296e:	4b7d      	ldr	r3, [pc, #500]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7c      	ldr	r2, [pc, #496]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4977      	ldr	r1, [pc, #476]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002988:	4313      	orrs	r3, r2
 800298a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800298c:	4b75      	ldr	r3, [pc, #468]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	021b      	lsls	r3, r3, #8
 800299a:	4972      	ldr	r1, [pc, #456]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
 80029a0:	e025      	b.n	80029ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029a8:	f043 0308 	orr.w	r3, r3, #8
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	4b68      	ldr	r3, [pc, #416]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	4965      	ldr	r1, [pc, #404]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fd38 	bl	8003454 <RCC_SetFlashLatencyFromMSIRange>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e389      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ee:	f000 fc6f 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80029f2:	4601      	mov	r1, r0
 80029f4:	4b5b      	ldr	r3, [pc, #364]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HAL_RCC_OscConfig+0x29c>)
 8002a00:	5cd3      	ldrb	r3, [r2, r3]
 8002a02:	f003 031f 	and.w	r3, r3, #31
 8002a06:	fa21 f303 	lsr.w	r3, r1, r3
 8002a0a:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_OscConfig+0x2a0>)
 8002a0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a0e:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_RCC_OscConfig+0x2a4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fbc2 	bl	800119c <HAL_InitTick>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d052      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	e36d      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d032      	beq.n	8002a94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a2e:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a4c      	ldr	r2, [pc, #304]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fbff 	bl	800123c <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a42:	f7fe fbfb 	bl	800123c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e356      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a54:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a60:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3f      	ldr	r2, [pc, #252]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a66:	f043 0308 	orr.w	r3, r3, #8
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	493a      	ldr	r1, [pc, #232]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	4935      	ldr	r1, [pc, #212]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	604b      	str	r3, [r1, #4]
 8002a92:	e01a      	b.n	8002aca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a32      	ldr	r2, [pc, #200]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002a9a:	f023 0301 	bic.w	r3, r3, #1
 8002a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fbcc 	bl	800123c <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fbc8 	bl	800123c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e323      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x1dc>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d073      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x21c>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d10e      	bne.n	8002b00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae8:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d063      	beq.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d15f      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e300      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d106      	bne.n	8002b18 <HAL_RCC_OscConfig+0x24c>
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a15      	ldr	r2, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
 8002b16:	e01d      	b.n	8002b54 <HAL_RCC_OscConfig+0x288>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x270>
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0f      	ldr	r2, [pc, #60]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x288>
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <HAL_RCC_OscConfig+0x298>)
 8002b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb6e 	bl	800123c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b62:	e010      	b.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
 8002b64:	40021000 	.word	0x40021000
 8002b68:	08005828 	.word	0x08005828
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b74:	f7fe fb62 	bl	800123c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e2bd      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4baf      	ldr	r3, [pc, #700]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2a8>
 8002b92:	e014      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fb52 	bl	800123c <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b9c:	f7fe fb4e 	bl	800123c <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e2a9      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bae:	4ba5      	ldr	r3, [pc, #660]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d0>
 8002bba:	e000      	b.n	8002bbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d060      	beq.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_OscConfig+0x310>
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d116      	bne.n	8002c0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bdc:	4b99      	ldr	r3, [pc, #612]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x328>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e286      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf4:	4b93      	ldr	r3, [pc, #588]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	061b      	lsls	r3, r3, #24
 8002c02:	4990      	ldr	r1, [pc, #576]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c08:	e040      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d023      	beq.n	8002c5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c12:	4b8c      	ldr	r3, [pc, #560]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a8b      	ldr	r2, [pc, #556]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe fb0d 	bl	800123c <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe fb09 	bl	800123c <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e264      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c38:	4b82      	ldr	r3, [pc, #520]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c44:	4b7f      	ldr	r3, [pc, #508]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	497c      	ldr	r1, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
 8002c58:	e018      	b.n	8002c8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a79      	ldr	r2, [pc, #484]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fae9 	bl	800123c <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c6e:	f7fe fae5 	bl	800123c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e240      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c80:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d03c      	beq.n	8002d12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d01c      	beq.n	8002cda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca6:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fe fac4 	bl	800123c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb8:	f7fe fac0 	bl	800123c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e21b      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cca:	4b5e      	ldr	r3, [pc, #376]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0ef      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x3ec>
 8002cd8:	e01b      	b.n	8002d12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cda:	4b5a      	ldr	r3, [pc, #360]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ce0:	4a58      	ldr	r2, [pc, #352]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe faa7 	bl	800123c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf2:	f7fe faa3 	bl	800123c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e1fe      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d04:	4b4f      	ldr	r3, [pc, #316]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80a6 	beq.w	8002e6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d24:	4b47      	ldr	r3, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	4a43      	ldr	r2, [pc, #268]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d4c:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d118      	bne.n	8002d8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d58:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe fa6a 	bl	800123c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fa66 	bl	800123c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e1c1      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7e:	4b32      	ldr	r3, [pc, #200]	; (8002e48 <HAL_RCC_OscConfig+0x57c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4d8>
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002da2:	e024      	b.n	8002dee <HAL_RCC_OscConfig+0x522>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d110      	bne.n	8002dce <HAL_RCC_OscConfig+0x502>
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dcc:	e00f      	b.n	8002dee <HAL_RCC_OscConfig+0x522>
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dd4:	4a1b      	ldr	r2, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de4:	4a17      	ldr	r2, [pc, #92]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe fa21 	bl	800123c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fa1d 	bl	800123c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e176      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e14:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ed      	beq.n	8002dfe <HAL_RCC_OscConfig+0x532>
 8002e22:	e01a      	b.n	8002e5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa0a 	bl	800123c <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fa06 	bl	800123c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d906      	bls.n	8002e4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e15f      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
 8002e42:	bf00      	nop
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e4c:	4baa      	ldr	r3, [pc, #680]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1e8      	bne.n	8002e2c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7ffb      	ldrb	r3, [r7, #31]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4ba5      	ldr	r3, [pc, #660]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4aa4      	ldr	r2, [pc, #656]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e80:	4b9d      	ldr	r3, [pc, #628]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e86:	4a9c      	ldr	r2, [pc, #624]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe f9d4 	bl	800123c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e98:	f7fe f9d0 	bl	800123c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e12b      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eaa:	4b93      	ldr	r3, [pc, #588]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ef      	beq.n	8002e98 <HAL_RCC_OscConfig+0x5cc>
 8002eb8:	e01b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002eba:	4b8f      	ldr	r3, [pc, #572]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ec0:	4a8d      	ldr	r2, [pc, #564]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe f9b7 	bl	800123c <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ed2:	f7fe f9b3 	bl	800123c <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e10e      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ee4:	4b84      	ldr	r3, [pc, #528]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ef      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 8102 	beq.w	8003100 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	f040 80c5 	bne.w	8003090 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f06:	4b7c      	ldr	r3, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f003 0203 	and.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d12c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	3b01      	subs	r3, #1
 8002f26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d123      	bne.n	8002f74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d11b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d113      	bne.n	8002f74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d109      	bne.n	8002f74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	085b      	lsrs	r3, r3, #1
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d067      	beq.n	8003044 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d062      	beq.n	8003040 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0bb      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b5b      	ldr	r3, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a5a      	ldr	r2, [pc, #360]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f96:	f7fe f951 	bl	800123c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe f94d 	bl	800123c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0a8      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	4b51      	ldr	r3, [pc, #324]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <HAL_RCC_OscConfig+0x830>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fd6:	0212      	lsls	r2, r2, #8
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0552      	lsls	r2, r2, #21
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	4311      	orrs	r1, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ff6:	06d2      	lsls	r2, r2, #27
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	493f      	ldr	r1, [pc, #252]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3c      	ldr	r2, [pc, #240]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003018:	f7fe f910 	bl	800123c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe f90c 	bl	800123c <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e067      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	4b31      	ldr	r3, [pc, #196]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800303e:	e05f      	b.n	8003100 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e05e      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d157      	bne.n	8003100 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003050:	4b29      	ldr	r3, [pc, #164]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a28      	ldr	r2, [pc, #160]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a25      	ldr	r2, [pc, #148]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003068:	f7fe f8e8 	bl	800123c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe f8e4 	bl	800123c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e03f      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x7a4>
 800308e:	e037      	b.n	8003100 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d02d      	beq.n	80030f2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a17      	ldr	r2, [pc, #92]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030ae:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030b4:	f023 0303 	bic.w	r3, r3, #3
 80030b8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80030ba:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe f8b7 	bl	800123c <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d2:	f7fe f8b3 	bl	800123c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e00e      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e4:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <HAL_RCC_OscConfig+0x82c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f0      	bne.n	80030d2 <HAL_RCC_OscConfig+0x806>
 80030f0:	e006      	b.n	8003100 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e005      	b.n	8003102 <HAL_RCC_OscConfig+0x836>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
 80030fc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop

0800310c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e0c8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003120:	4b66      	ldr	r3, [pc, #408]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d910      	bls.n	8003150 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	4961      	ldr	r1, [pc, #388]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	4313      	orrs	r3, r2
 800313c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	429a      	cmp	r2, r3
 800314a:	d001      	beq.n	8003150 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0b0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d04c      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d107      	bne.n	8003174 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003164:	4b56      	ldr	r3, [pc, #344]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d121      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e09e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d115      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e092      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003194:	4b4a      	ldr	r3, [pc, #296]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d109      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e086      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031a4:	4b46      	ldr	r3, [pc, #280]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e07e      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f023 0203 	bic.w	r2, r3, #3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	493f      	ldr	r1, [pc, #252]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031c6:	f7fe f839 	bl	800123c <HAL_GetTick>
 80031ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ce:	f7fe f835 	bl	800123c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031dc:	4293      	cmp	r3, r2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e066      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 020c 	and.w	r2, r3, #12
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d1eb      	bne.n	80031ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003202:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	492c      	ldr	r1, [pc, #176]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003214:	4b29      	ldr	r3, [pc, #164]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d210      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003222:	4b26      	ldr	r3, [pc, #152]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0207 	bic.w	r2, r3, #7
 800322a:	4924      	ldr	r1, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e036      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d008      	beq.n	8003262 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4918      	ldr	r1, [pc, #96]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800326e:	4b14      	ldr	r3, [pc, #80]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4910      	ldr	r1, [pc, #64]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003282:	f000 f825 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8003286:	4601      	mov	r1, r0
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_ClockConfig+0x1b4>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	fa21 f303 	lsr.w	r3, r1, r3
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd ff78 	bl	800119c <HAL_InitTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80032b0:	7afb      	ldrb	r3, [r7, #11]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40022000 	.word	0x40022000
 80032c0:	40021000 	.word	0x40021000
 80032c4:	08005828 	.word	0x08005828
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
 80032da:	2300      	movs	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0c      	cmp	r3, #12
 80032fc:	d121      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d11e      	bne.n	8003342 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003304:	4b33      	ldr	r3, [pc, #204]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d107      	bne.n	8003320 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003310:	4b30      	ldr	r3, [pc, #192]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e005      	b.n	800332c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800332c:	4a2a      	ldr	r2, [pc, #168]	; (80033d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10d      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b04      	cmp	r3, #4
 8003346:	d102      	bne.n	800334e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800334a:	61bb      	str	r3, [r7, #24]
 800334c:	e004      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b08      	cmp	r3, #8
 8003352:	d101      	bne.n	8003358 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003354:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003356:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d133      	bne.n	80033c6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d002      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0xa4>
 800336e:	2b03      	cmp	r3, #3
 8003370:	d003      	beq.n	800337a <HAL_RCC_GetSysClockFreq+0xaa>
 8003372:	e005      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003376:	617b      	str	r3, [r7, #20]
      break;
 8003378:	e005      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800337c:	617b      	str	r3, [r7, #20]
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	617b      	str	r3, [r7, #20]
      break;
 8003384:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	091b      	lsrs	r3, r3, #4
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	3301      	adds	r3, #1
 8003392:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	0a1b      	lsrs	r3, r3, #8
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	fb02 f203 	mul.w	r2, r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0e5b      	lsrs	r3, r3, #25
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033c6:	69bb      	ldr	r3, [r7, #24]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3724      	adds	r7, #36	; 0x24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08005840 	.word	0x08005840
 80033dc:	00f42400 	.word	0x00f42400
 80033e0:	007a1200 	.word	0x007a1200

080033e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e8:	4b03      	ldr	r3, [pc, #12]	; (80033f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000000 	.word	0x20000000

080033fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003400:	f7ff fff0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003404:	4601      	mov	r1, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08005838 	.word	0x08005838

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800342c:	f7ff ffda 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003430:	4601      	mov	r1, r0
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0adb      	lsrs	r3, r3, #11
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4a04      	ldr	r2, [pc, #16]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x28>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	08005838 	.word	0x08005838

08003454 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003460:	4b2a      	ldr	r3, [pc, #168]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800346c:	f7ff f9ca 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003470:	6178      	str	r0, [r7, #20]
 8003472:	e014      	b.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b25      	ldr	r3, [pc, #148]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	4a24      	ldr	r2, [pc, #144]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	6593      	str	r3, [r2, #88]	; 0x58
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff f9ba 	bl	8002804 <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	4a1d      	ldr	r2, [pc, #116]	; (800350c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a4:	d10b      	bne.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d919      	bls.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2ba0      	cmp	r3, #160	; 0xa0
 80034b0:	d902      	bls.n	80034b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b2:	2302      	movs	r3, #2
 80034b4:	613b      	str	r3, [r7, #16]
 80034b6:	e013      	b.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b8:	2301      	movs	r3, #1
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	e010      	b.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b80      	cmp	r3, #128	; 0x80
 80034c2:	d902      	bls.n	80034ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034c4:	2303      	movs	r3, #3
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	e00a      	b.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b80      	cmp	r3, #128	; 0x80
 80034ce:	d102      	bne.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d0:	2302      	movs	r3, #2
 80034d2:	613b      	str	r3, [r7, #16]
 80034d4:	e004      	b.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b70      	cmp	r3, #112	; 0x70
 80034da:	d101      	bne.n	80034e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034dc:	2301      	movs	r3, #1
 80034de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 0207 	bic.w	r2, r3, #7
 80034e8:	4909      	ldr	r1, [pc, #36]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d001      	beq.n	8003502 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	40022000 	.word	0x40022000

08003514 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800351c:	2300      	movs	r3, #0
 800351e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003520:	2300      	movs	r3, #0
 8003522:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	2b00      	cmp	r3, #0
 800352e:	d02f      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003538:	d005      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800353a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800353e:	d015      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003544:	e00f      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003546:	4bac      	ldr	r3, [pc, #688]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4aab      	ldr	r2, [pc, #684]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003552:	e00c      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9dc 	bl	8003918 <RCCEx_PLLSAI1_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003564:	e003      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	74fb      	strb	r3, [r7, #19]
      break;
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800356c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003574:	4ba0      	ldr	r3, [pc, #640]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	499d      	ldr	r1, [pc, #628]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800358a:	e001      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 8099 	beq.w	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035a2:	4b95      	ldr	r3, [pc, #596]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80035b2:	2300      	movs	r3, #0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00d      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035bc:	4a8e      	ldr	r2, [pc, #568]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	; 0x58
 80035c4:	4b8c      	ldr	r3, [pc, #560]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60bb      	str	r3, [r7, #8]
 80035ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d0:	2301      	movs	r3, #1
 80035d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035d4:	4b89      	ldr	r3, [pc, #548]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a88      	ldr	r2, [pc, #544]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035e0:	f7fd fe2c 	bl	800123c <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e6:	e009      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035e8:	f7fd fe28 	bl	800123c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d902      	bls.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	74fb      	strb	r3, [r7, #19]
        break;
 80035fa:	e005      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003608:	7cfb      	ldrb	r3, [r7, #19]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d155      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800360e:	4b7a      	ldr	r3, [pc, #488]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01e      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	429a      	cmp	r2, r3
 8003628:	d019      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b70      	ldr	r3, [pc, #448]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363c:	4a6e      	ldr	r2, [pc, #440]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003646:	4b6c      	ldr	r3, [pc, #432]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364c:	4a6a      	ldr	r2, [pc, #424]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800364e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003656:	4a68      	ldr	r2, [pc, #416]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d016      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fd fde8 	bl	800123c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366e:	e00b      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd fde4 	bl	800123c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d902      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	74fb      	strb	r3, [r7, #19]
            break;
 8003686:	e006      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003688:	4b5b      	ldr	r3, [pc, #364]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ec      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003696:	7cfb      	ldrb	r3, [r7, #19]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800369c:	4b56      	ldr	r3, [pc, #344]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	4953      	ldr	r1, [pc, #332]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036b2:	e004      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
 80036b8:	e001      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	7cfb      	ldrb	r3, [r7, #19]
 80036bc:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036be:	7c7b      	ldrb	r3, [r7, #17]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d105      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c4:	4b4c      	ldr	r3, [pc, #304]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036dc:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 0203 	bic.w	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4943      	ldr	r1, [pc, #268]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036fe:	4b3e      	ldr	r3, [pc, #248]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f023 020c 	bic.w	r2, r3, #12
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	493a      	ldr	r1, [pc, #232]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	4932      	ldr	r1, [pc, #200]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00a      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003742:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003750:	4929      	ldr	r1, [pc, #164]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003764:	4b24      	ldr	r3, [pc, #144]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	4921      	ldr	r1, [pc, #132]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003786:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4918      	ldr	r1, [pc, #96]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	4910      	ldr	r1, [pc, #64]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d02c      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ca:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d8:	4907      	ldr	r1, [pc, #28]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037e8:	d10a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ea:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a02      	ldr	r2, [pc, #8]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	e015      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f881 	bl	8003918 <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d028      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	492d      	ldr	r1, [pc, #180]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800384e:	d106      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a27      	ldr	r2, [pc, #156]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385a:	60d3      	str	r3, [r2, #12]
 800385c:	e011      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003866:	d10c      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f000 f852 	bl	8003918 <RCCEx_PLLSAI1_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01c      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800389c:	4915      	ldr	r1, [pc, #84]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f82f 	bl	8003918 <RCCEx_PLLSAI1_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038be:	7cfb      	ldrb	r3, [r7, #19]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80038c4:	7cfb      	ldrb	r3, [r7, #19]
 80038c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d4:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	4904      	ldr	r1, [pc, #16]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000

080038f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a04      	ldr	r2, [pc, #16]	; (8003914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000

08003918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003926:	4b73      	ldr	r3, [pc, #460]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003932:	4b70      	ldr	r3, [pc, #448]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0203 	and.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d10d      	bne.n	800395e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
       ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800394a:	4b6a      	ldr	r3, [pc, #424]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
       ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d044      	beq.n	80039e8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	73fb      	strb	r3, [r7, #15]
 8003962:	e041      	b.n	80039e8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d00c      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x6e>
 800396c:	2b03      	cmp	r3, #3
 800396e:	d013      	beq.n	8003998 <RCCEx_PLLSAI1_Config+0x80>
 8003970:	2b01      	cmp	r3, #1
 8003972:	d120      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003974:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e01a      	b.n	80039bc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003986:	4b5b      	ldr	r3, [pc, #364]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003996:	e013      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003998:	4b56      	ldr	r3, [pc, #344]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10f      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039a4:	4b53      	ldr	r3, [pc, #332]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039b4:	e006      	b.n	80039c4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	73fb      	strb	r3, [r7, #15]
      break;
 80039ba:	e004      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039bc:	bf00      	nop
 80039be:	e002      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039c0:	bf00      	nop
 80039c2:	e000      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80039c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10d      	bne.n	80039e8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039cc:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6819      	ldr	r1, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	430b      	orrs	r3, r1
 80039e2:	4944      	ldr	r1, [pc, #272]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d17c      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80039f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fa:	f7fd fc1f 	bl	800123c <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a00:	e009      	b.n	8003a16 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a02:	f7fd fc1b 	bl	800123c <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d902      	bls.n	8003a16 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	73fb      	strb	r3, [r7, #15]
        break;
 8003a14:	e005      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a16:	4b37      	ldr	r3, [pc, #220]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1ef      	bne.n	8003a02 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d15f      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d110      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a2e:	4b31      	ldr	r3, [pc, #196]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
 8003a3e:	0211      	lsls	r1, r2, #8
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68d2      	ldr	r2, [r2, #12]
 8003a44:	06d2      	lsls	r2, r2, #27
 8003a46:	430a      	orrs	r2, r1
 8003a48:	492a      	ldr	r1, [pc, #168]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	610b      	str	r3, [r1, #16]
 8003a4e:	e027      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d112      	bne.n	8003a7c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	0211      	lsls	r1, r2, #8
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6912      	ldr	r2, [r2, #16]
 8003a6c:	0852      	lsrs	r2, r2, #1
 8003a6e:	3a01      	subs	r2, #1
 8003a70:	0552      	lsls	r2, r2, #21
 8003a72:	430a      	orrs	r2, r1
 8003a74:	491f      	ldr	r1, [pc, #124]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	610b      	str	r3, [r1, #16]
 8003a7a:	e011      	b.n	8003aa0 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a7c:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6892      	ldr	r2, [r2, #8]
 8003a8c:	0211      	lsls	r1, r2, #8
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6952      	ldr	r2, [r2, #20]
 8003a92:	0852      	lsrs	r2, r2, #1
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0652      	lsls	r2, r2, #25
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4916      	ldr	r1, [pc, #88]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a13      	ldr	r2, [pc, #76]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aac:	f7fd fbc6 	bl	800123c <HAL_GetTick>
 8003ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab2:	e009      	b.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ab4:	f7fd fbc2 	bl	800123c <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d902      	bls.n	8003ac8 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac6:	e005      	b.n	8003ad4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0ef      	beq.n	8003ab4 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	4904      	ldr	r1, [pc, #16]	; (8003af4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e040      	b.n	8003b8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f99e 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0201 	bic.w	r2, r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f98c 	bl	8003e54 <UART_SetConfig>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e022      	b.n	8003b8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fb90 	bl	8004274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fc17 	bl	80043b8 <UART_CheckIdleState>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	f040 8081 	bne.w	8003cb0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <HAL_UART_Transmit+0x26>
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e079      	b.n	8003cb2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Transmit+0x38>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e072      	b.n	8003cb2 <HAL_UART_Transmit+0x11e>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003be0:	f7fd fb2c 	bl	800123c <HAL_GetTick>
 8003be4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	88fa      	ldrh	r2, [r7, #6]
 8003bea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfe:	d108      	bne.n	8003c12 <HAL_UART_Transmit+0x7e>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	e003      	b.n	8003c1a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c22:	e02d      	b.n	8003c80 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fc07 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e039      	b.n	8003cb2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10b      	bne.n	8003c5c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	b292      	uxth	r2, r2
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	3302      	adds	r3, #2
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e008      	b.n	8003c6e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	b292      	uxth	r2, r2
 8003c66:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1cb      	bne.n	8003c24 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2200      	movs	r2, #0
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fbd3 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e005      	b.n	8003cb2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b08a      	sub	sp, #40	; 0x28
 8003cbe:	af02      	add	r7, sp, #8
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f040 80bb 	bne.w	8003e4a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <HAL_UART_Receive+0x26>
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0b3      	b.n	8003e4c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d101      	bne.n	8003cf2 <HAL_UART_Receive+0x38>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e0ac      	b.n	8003e4c <HAL_UART_Receive+0x192>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2222      	movs	r2, #34	; 0x22
 8003d04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003d06:	f7fd fa99 	bl	800123c <HAL_GetTick>
 8003d0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d10e      	bne.n	8003d44 <HAL_UART_Receive+0x8a>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <HAL_UART_Receive+0x80>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003d34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d38:	e02d      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	22ff      	movs	r2, #255	; 0xff
 8003d3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d42:	e028      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10d      	bne.n	8003d68 <HAL_UART_Receive+0xae>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_UART_Receive+0xa4>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	22ff      	movs	r2, #255	; 0xff
 8003d58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d5c:	e01b      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	227f      	movs	r2, #127	; 0x7f
 8003d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d66:	e016      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d70:	d10d      	bne.n	8003d8e <HAL_UART_Receive+0xd4>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d104      	bne.n	8003d84 <HAL_UART_Receive+0xca>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	227f      	movs	r2, #127	; 0x7f
 8003d7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d82:	e008      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	223f      	movs	r2, #63	; 0x3f
 8003d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003d8c:	e003      	b.n	8003d96 <HAL_UART_Receive+0xdc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d9c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da6:	d108      	bne.n	8003dba <HAL_UART_Receive+0x100>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d104      	bne.n	8003dba <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	e003      	b.n	8003dc2 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003dca:	e033      	b.n	8003e34 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fb33 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e032      	b.n	8003e4c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10c      	bne.n	8003e06 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	8a7b      	ldrh	r3, [r7, #18]
 8003df6:	4013      	ands	r3, r2
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3302      	adds	r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e00d      	b.n	8003e22 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	8a7b      	ldrh	r3, [r7, #18]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	4013      	ands	r3, r2
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1c5      	bne.n	8003dcc <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e000      	b.n	8003e4c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003e4a:	2302      	movs	r3, #2
  }
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e58:	b088      	sub	sp, #32
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4bb0      	ldr	r3, [pc, #704]	; (8004144 <UART_SetConfig+0x2f0>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4aa6      	ldr	r2, [pc, #664]	; (8004148 <UART_SetConfig+0x2f4>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a9d      	ldr	r2, [pc, #628]	; (800414c <UART_SetConfig+0x2f8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d121      	bne.n	8003f20 <UART_SetConfig+0xcc>
 8003edc:	4b9c      	ldr	r3, [pc, #624]	; (8004150 <UART_SetConfig+0x2fc>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d816      	bhi.n	8003f18 <UART_SetConfig+0xc4>
 8003eea:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x9c>)
 8003eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f0d 	.word	0x08003f0d
 8003ef8:	08003f07 	.word	0x08003f07
 8003efc:	08003f13 	.word	0x08003f13
 8003f00:	2301      	movs	r3, #1
 8003f02:	76fb      	strb	r3, [r7, #27]
 8003f04:	e072      	b.n	8003fec <UART_SetConfig+0x198>
 8003f06:	2302      	movs	r3, #2
 8003f08:	76fb      	strb	r3, [r7, #27]
 8003f0a:	e06f      	b.n	8003fec <UART_SetConfig+0x198>
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	76fb      	strb	r3, [r7, #27]
 8003f10:	e06c      	b.n	8003fec <UART_SetConfig+0x198>
 8003f12:	2308      	movs	r3, #8
 8003f14:	76fb      	strb	r3, [r7, #27]
 8003f16:	e069      	b.n	8003fec <UART_SetConfig+0x198>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	76fb      	strb	r3, [r7, #27]
 8003f1c:	bf00      	nop
 8003f1e:	e065      	b.n	8003fec <UART_SetConfig+0x198>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a8b      	ldr	r2, [pc, #556]	; (8004154 <UART_SetConfig+0x300>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d134      	bne.n	8003f94 <UART_SetConfig+0x140>
 8003f2a:	4b89      	ldr	r3, [pc, #548]	; (8004150 <UART_SetConfig+0x2fc>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b0c      	cmp	r3, #12
 8003f36:	d829      	bhi.n	8003f8c <UART_SetConfig+0x138>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0xec>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f8d 	.word	0x08003f8d
 8003f48:	08003f8d 	.word	0x08003f8d
 8003f4c:	08003f8d 	.word	0x08003f8d
 8003f50:	08003f81 	.word	0x08003f81
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003f8d 	.word	0x08003f8d
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003f7b 	.word	0x08003f7b
 8003f64:	08003f8d 	.word	0x08003f8d
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08003f87 	.word	0x08003f87
 8003f74:	2300      	movs	r3, #0
 8003f76:	76fb      	strb	r3, [r7, #27]
 8003f78:	e038      	b.n	8003fec <UART_SetConfig+0x198>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	76fb      	strb	r3, [r7, #27]
 8003f7e:	e035      	b.n	8003fec <UART_SetConfig+0x198>
 8003f80:	2304      	movs	r3, #4
 8003f82:	76fb      	strb	r3, [r7, #27]
 8003f84:	e032      	b.n	8003fec <UART_SetConfig+0x198>
 8003f86:	2308      	movs	r3, #8
 8003f88:	76fb      	strb	r3, [r7, #27]
 8003f8a:	e02f      	b.n	8003fec <UART_SetConfig+0x198>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	76fb      	strb	r3, [r7, #27]
 8003f90:	bf00      	nop
 8003f92:	e02b      	b.n	8003fec <UART_SetConfig+0x198>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a6b      	ldr	r2, [pc, #428]	; (8004148 <UART_SetConfig+0x2f4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d124      	bne.n	8003fe8 <UART_SetConfig+0x194>
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <UART_SetConfig+0x2fc>)
 8003fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d012      	beq.n	8003fd4 <UART_SetConfig+0x180>
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb2:	d802      	bhi.n	8003fba <UART_SetConfig+0x166>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d007      	beq.n	8003fc8 <UART_SetConfig+0x174>
 8003fb8:	e012      	b.n	8003fe0 <UART_SetConfig+0x18c>
 8003fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbe:	d006      	beq.n	8003fce <UART_SetConfig+0x17a>
 8003fc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fc4:	d009      	beq.n	8003fda <UART_SetConfig+0x186>
 8003fc6:	e00b      	b.n	8003fe0 <UART_SetConfig+0x18c>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	76fb      	strb	r3, [r7, #27]
 8003fcc:	e00e      	b.n	8003fec <UART_SetConfig+0x198>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	76fb      	strb	r3, [r7, #27]
 8003fd2:	e00b      	b.n	8003fec <UART_SetConfig+0x198>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	76fb      	strb	r3, [r7, #27]
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x198>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	76fb      	strb	r3, [r7, #27]
 8003fde:	e005      	b.n	8003fec <UART_SetConfig+0x198>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	76fb      	strb	r3, [r7, #27]
 8003fe4:	bf00      	nop
 8003fe6:	e001      	b.n	8003fec <UART_SetConfig+0x198>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a55      	ldr	r2, [pc, #340]	; (8004148 <UART_SetConfig+0x2f4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d174      	bne.n	80040e0 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ff6:	7efb      	ldrb	r3, [r7, #27]
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d824      	bhi.n	8004046 <UART_SetConfig+0x1f2>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x1b0>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004047 	.word	0x08004047
 800400c:	08004031 	.word	0x08004031
 8004010:	08004047 	.word	0x08004047
 8004014:	08004037 	.word	0x08004037
 8004018:	08004047 	.word	0x08004047
 800401c:	08004047 	.word	0x08004047
 8004020:	08004047 	.word	0x08004047
 8004024:	0800403f 	.word	0x0800403f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7ff f9e8 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 800402c:	6178      	str	r0, [r7, #20]
        break;
 800402e:	e00f      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004030:	4b49      	ldr	r3, [pc, #292]	; (8004158 <UART_SetConfig+0x304>)
 8004032:	617b      	str	r3, [r7, #20]
        break;
 8004034:	e00c      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004036:	f7ff f94b 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800403a:	6178      	str	r0, [r7, #20]
        break;
 800403c:	e008      	b.n	8004050 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800403e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004042:	617b      	str	r3, [r7, #20]
        break;
 8004044:	e004      	b.n	8004050 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	76bb      	strb	r3, [r7, #26]
        break;
 800404e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	f000 8100 	beq.w	8004258 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	4413      	add	r3, r2
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d305      	bcc.n	8004074 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	76bb      	strb	r3, [r7, #26]
 8004078:	e0ee      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	4619      	mov	r1, r3
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	f04f 0400 	mov.w	r4, #0
 800408a:	0214      	lsls	r4, r2, #8
 800408c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004090:	020b      	lsls	r3, r1, #8
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6852      	ldr	r2, [r2, #4]
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	4611      	mov	r1, r2
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	eb13 0b01 	adds.w	fp, r3, r1
 80040a2:	eb44 0c02 	adc.w	ip, r4, r2
 80040a6:	4658      	mov	r0, fp
 80040a8:	4661      	mov	r1, ip
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	f7fc f8db 	bl	8000270 <__aeabi_uldivmod>
 80040ba:	4603      	mov	r3, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c6:	d308      	bcc.n	80040da <UART_SetConfig+0x286>
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ce:	d204      	bcs.n	80040da <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	60da      	str	r2, [r3, #12]
 80040d8:	e0be      	b.n	8004258 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	76bb      	strb	r3, [r7, #26]
 80040de:	e0bb      	b.n	8004258 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e8:	d169      	bne.n	80041be <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80040ea:	7efb      	ldrb	r3, [r7, #27]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d835      	bhi.n	800415c <UART_SetConfig+0x308>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0x2a4>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800411d 	.word	0x0800411d
 80040fc:	08004125 	.word	0x08004125
 8004100:	0800412d 	.word	0x0800412d
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004133 	.word	0x08004133
 800410c:	0800415d 	.word	0x0800415d
 8004110:	0800415d 	.word	0x0800415d
 8004114:	0800415d 	.word	0x0800415d
 8004118:	0800413b 	.word	0x0800413b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800411c:	f7ff f96e 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 8004120:	6178      	str	r0, [r7, #20]
        break;
 8004122:	e020      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff f980 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8004128:	6178      	str	r0, [r7, #20]
        break;
 800412a:	e01c      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <UART_SetConfig+0x304>)
 800412e:	617b      	str	r3, [r7, #20]
        break;
 8004130:	e019      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004132:	f7ff f8cd 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8004136:	6178      	str	r0, [r7, #20]
        break;
 8004138:	e015      	b.n	8004166 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800413a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800413e:	617b      	str	r3, [r7, #20]
        break;
 8004140:	e011      	b.n	8004166 <UART_SetConfig+0x312>
 8004142:	bf00      	nop
 8004144:	efff69f3 	.word	0xefff69f3
 8004148:	40008000 	.word	0x40008000
 800414c:	40013800 	.word	0x40013800
 8004150:	40021000 	.word	0x40021000
 8004154:	40004400 	.word	0x40004400
 8004158:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	76bb      	strb	r3, [r7, #26]
        break;
 8004164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d075      	beq.n	8004258 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	005a      	lsls	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	085b      	lsrs	r3, r3, #1
 8004176:	441a      	add	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004180:	b29b      	uxth	r3, r3
 8004182:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b0f      	cmp	r3, #15
 8004188:	d916      	bls.n	80041b8 <UART_SetConfig+0x364>
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004190:	d212      	bcs.n	80041b8 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	b29b      	uxth	r3, r3
 8004196:	f023 030f 	bic.w	r3, r3, #15
 800419a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	89fb      	ldrh	r3, [r7, #14]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	89fa      	ldrh	r2, [r7, #14]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	e04f      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	76bb      	strb	r3, [r7, #26]
 80041bc:	e04c      	b.n	8004258 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041be:	7efb      	ldrb	r3, [r7, #27]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d828      	bhi.n	8004216 <UART_SetConfig+0x3c2>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x378>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	080041f9 	.word	0x080041f9
 80041d4:	08004201 	.word	0x08004201
 80041d8:	08004217 	.word	0x08004217
 80041dc:	08004207 	.word	0x08004207
 80041e0:	08004217 	.word	0x08004217
 80041e4:	08004217 	.word	0x08004217
 80041e8:	08004217 	.word	0x08004217
 80041ec:	0800420f 	.word	0x0800420f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7ff f904 	bl	80033fc <HAL_RCC_GetPCLK1Freq>
 80041f4:	6178      	str	r0, [r7, #20]
        break;
 80041f6:	e013      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f8:	f7ff f916 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 80041fc:	6178      	str	r0, [r7, #20]
        break;
 80041fe:	e00f      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004200:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <UART_SetConfig+0x41c>)
 8004202:	617b      	str	r3, [r7, #20]
        break;
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004206:	f7ff f863 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800420a:	6178      	str	r0, [r7, #20]
        break;
 800420c:	e008      	b.n	8004220 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004212:	617b      	str	r3, [r7, #20]
        break;
 8004214:	e004      	b.n	8004220 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	76bb      	strb	r3, [r7, #26]
        break;
 800421e:	bf00      	nop
    }

    if (pclk != 0U)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	085a      	lsrs	r2, r3, #1
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	fbb2 f3f3 	udiv	r3, r2, r3
 8004238:	b29b      	uxth	r3, r3
 800423a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	2b0f      	cmp	r3, #15
 8004240:	d908      	bls.n	8004254 <UART_SetConfig+0x400>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d204      	bcs.n	8004254 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	e001      	b.n	8004258 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004264:	7ebb      	ldrb	r3, [r7, #26]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3720      	adds	r7, #32
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004270:	00f42400 	.word	0x00f42400

08004274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f003 0308 	and.w	r3, r3, #8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01a      	beq.n	800438a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004372:	d10a      	bne.n	800438a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00a      	beq.n	80043ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	605a      	str	r2, [r3, #4]
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af02      	add	r7, sp, #8
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80043c6:	f7fc ff39 	bl	800123c <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d10e      	bne.n	80043f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f82a 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e020      	b.n	800443a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d10e      	bne.n	8004424 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004406:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800440a:	9300      	str	r3, [sp, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f814 	bl	8004442 <UART_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e00a      	b.n	800443a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	603b      	str	r3, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004452:	e05d      	b.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d059      	beq.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445c:	f7fc feee 	bl	800123c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <UART_WaitOnFlagUntilTimeout+0x30>
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11b      	bne.n	80044aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004480:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e042      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d02b      	beq.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044c6:	d123      	bne.n	8004510 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e00f      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	bf0c      	ite	eq
 8004520:	2301      	moveq	r3, #1
 8004522:	2300      	movne	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	429a      	cmp	r2, r3
 800452c:	d092      	beq.n	8004454 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <__errno>:
 8004538:	4b01      	ldr	r3, [pc, #4]	; (8004540 <__errno+0x8>)
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <__libc_init_array>:
 8004544:	b570      	push	{r4, r5, r6, lr}
 8004546:	4e0d      	ldr	r6, [pc, #52]	; (800457c <__libc_init_array+0x38>)
 8004548:	4c0d      	ldr	r4, [pc, #52]	; (8004580 <__libc_init_array+0x3c>)
 800454a:	1ba4      	subs	r4, r4, r6
 800454c:	10a4      	asrs	r4, r4, #2
 800454e:	2500      	movs	r5, #0
 8004550:	42a5      	cmp	r5, r4
 8004552:	d109      	bne.n	8004568 <__libc_init_array+0x24>
 8004554:	4e0b      	ldr	r6, [pc, #44]	; (8004584 <__libc_init_array+0x40>)
 8004556:	4c0c      	ldr	r4, [pc, #48]	; (8004588 <__libc_init_array+0x44>)
 8004558:	f001 f92c 	bl	80057b4 <_init>
 800455c:	1ba4      	subs	r4, r4, r6
 800455e:	10a4      	asrs	r4, r4, #2
 8004560:	2500      	movs	r5, #0
 8004562:	42a5      	cmp	r5, r4
 8004564:	d105      	bne.n	8004572 <__libc_init_array+0x2e>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800456c:	4798      	blx	r3
 800456e:	3501      	adds	r5, #1
 8004570:	e7ee      	b.n	8004550 <__libc_init_array+0xc>
 8004572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004576:	4798      	blx	r3
 8004578:	3501      	adds	r5, #1
 800457a:	e7f2      	b.n	8004562 <__libc_init_array+0x1e>
 800457c:	08005910 	.word	0x08005910
 8004580:	08005910 	.word	0x08005910
 8004584:	08005910 	.word	0x08005910
 8004588:	08005914 	.word	0x08005914

0800458c <memset>:
 800458c:	4402      	add	r2, r0
 800458e:	4603      	mov	r3, r0
 8004590:	4293      	cmp	r3, r2
 8004592:	d100      	bne.n	8004596 <memset+0xa>
 8004594:	4770      	bx	lr
 8004596:	f803 1b01 	strb.w	r1, [r3], #1
 800459a:	e7f9      	b.n	8004590 <memset+0x4>

0800459c <iprintf>:
 800459c:	b40f      	push	{r0, r1, r2, r3}
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <iprintf+0x2c>)
 80045a0:	b513      	push	{r0, r1, r4, lr}
 80045a2:	681c      	ldr	r4, [r3, #0]
 80045a4:	b124      	cbz	r4, 80045b0 <iprintf+0x14>
 80045a6:	69a3      	ldr	r3, [r4, #24]
 80045a8:	b913      	cbnz	r3, 80045b0 <iprintf+0x14>
 80045aa:	4620      	mov	r0, r4
 80045ac:	f000 fa42 	bl	8004a34 <__sinit>
 80045b0:	ab05      	add	r3, sp, #20
 80045b2:	9a04      	ldr	r2, [sp, #16]
 80045b4:	68a1      	ldr	r1, [r4, #8]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	4620      	mov	r0, r4
 80045ba:	f000 fd4d 	bl	8005058 <_vfiprintf_r>
 80045be:	b002      	add	sp, #8
 80045c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c4:	b004      	add	sp, #16
 80045c6:	4770      	bx	lr
 80045c8:	2000000c 	.word	0x2000000c

080045cc <_puts_r>:
 80045cc:	b570      	push	{r4, r5, r6, lr}
 80045ce:	460e      	mov	r6, r1
 80045d0:	4605      	mov	r5, r0
 80045d2:	b118      	cbz	r0, 80045dc <_puts_r+0x10>
 80045d4:	6983      	ldr	r3, [r0, #24]
 80045d6:	b90b      	cbnz	r3, 80045dc <_puts_r+0x10>
 80045d8:	f000 fa2c 	bl	8004a34 <__sinit>
 80045dc:	69ab      	ldr	r3, [r5, #24]
 80045de:	68ac      	ldr	r4, [r5, #8]
 80045e0:	b913      	cbnz	r3, 80045e8 <_puts_r+0x1c>
 80045e2:	4628      	mov	r0, r5
 80045e4:	f000 fa26 	bl	8004a34 <__sinit>
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <_puts_r+0xac>)
 80045ea:	429c      	cmp	r4, r3
 80045ec:	d117      	bne.n	800461e <_puts_r+0x52>
 80045ee:	686c      	ldr	r4, [r5, #4]
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	071b      	lsls	r3, r3, #28
 80045f4:	d51d      	bpl.n	8004632 <_puts_r+0x66>
 80045f6:	6923      	ldr	r3, [r4, #16]
 80045f8:	b1db      	cbz	r3, 8004632 <_puts_r+0x66>
 80045fa:	3e01      	subs	r6, #1
 80045fc:	68a3      	ldr	r3, [r4, #8]
 80045fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004602:	3b01      	subs	r3, #1
 8004604:	60a3      	str	r3, [r4, #8]
 8004606:	b9e9      	cbnz	r1, 8004644 <_puts_r+0x78>
 8004608:	2b00      	cmp	r3, #0
 800460a:	da2e      	bge.n	800466a <_puts_r+0x9e>
 800460c:	4622      	mov	r2, r4
 800460e:	210a      	movs	r1, #10
 8004610:	4628      	mov	r0, r5
 8004612:	f000 f85f 	bl	80046d4 <__swbuf_r>
 8004616:	3001      	adds	r0, #1
 8004618:	d011      	beq.n	800463e <_puts_r+0x72>
 800461a:	200a      	movs	r0, #10
 800461c:	e011      	b.n	8004642 <_puts_r+0x76>
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <_puts_r+0xb0>)
 8004620:	429c      	cmp	r4, r3
 8004622:	d101      	bne.n	8004628 <_puts_r+0x5c>
 8004624:	68ac      	ldr	r4, [r5, #8]
 8004626:	e7e3      	b.n	80045f0 <_puts_r+0x24>
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <_puts_r+0xb4>)
 800462a:	429c      	cmp	r4, r3
 800462c:	bf08      	it	eq
 800462e:	68ec      	ldreq	r4, [r5, #12]
 8004630:	e7de      	b.n	80045f0 <_puts_r+0x24>
 8004632:	4621      	mov	r1, r4
 8004634:	4628      	mov	r0, r5
 8004636:	f000 f89f 	bl	8004778 <__swsetup_r>
 800463a:	2800      	cmp	r0, #0
 800463c:	d0dd      	beq.n	80045fa <_puts_r+0x2e>
 800463e:	f04f 30ff 	mov.w	r0, #4294967295
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	2b00      	cmp	r3, #0
 8004646:	da04      	bge.n	8004652 <_puts_r+0x86>
 8004648:	69a2      	ldr	r2, [r4, #24]
 800464a:	429a      	cmp	r2, r3
 800464c:	dc06      	bgt.n	800465c <_puts_r+0x90>
 800464e:	290a      	cmp	r1, #10
 8004650:	d004      	beq.n	800465c <_puts_r+0x90>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	7019      	strb	r1, [r3, #0]
 800465a:	e7cf      	b.n	80045fc <_puts_r+0x30>
 800465c:	4622      	mov	r2, r4
 800465e:	4628      	mov	r0, r5
 8004660:	f000 f838 	bl	80046d4 <__swbuf_r>
 8004664:	3001      	adds	r0, #1
 8004666:	d1c9      	bne.n	80045fc <_puts_r+0x30>
 8004668:	e7e9      	b.n	800463e <_puts_r+0x72>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	200a      	movs	r0, #10
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	6022      	str	r2, [r4, #0]
 8004672:	7018      	strb	r0, [r3, #0]
 8004674:	e7e5      	b.n	8004642 <_puts_r+0x76>
 8004676:	bf00      	nop
 8004678:	08005894 	.word	0x08005894
 800467c:	080058b4 	.word	0x080058b4
 8004680:	08005874 	.word	0x08005874

08004684 <puts>:
 8004684:	4b02      	ldr	r3, [pc, #8]	; (8004690 <puts+0xc>)
 8004686:	4601      	mov	r1, r0
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f7ff bf9f 	b.w	80045cc <_puts_r>
 800468e:	bf00      	nop
 8004690:	2000000c 	.word	0x2000000c

08004694 <siprintf>:
 8004694:	b40e      	push	{r1, r2, r3}
 8004696:	b500      	push	{lr}
 8004698:	b09c      	sub	sp, #112	; 0x70
 800469a:	ab1d      	add	r3, sp, #116	; 0x74
 800469c:	9002      	str	r0, [sp, #8]
 800469e:	9006      	str	r0, [sp, #24]
 80046a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046a4:	4809      	ldr	r0, [pc, #36]	; (80046cc <siprintf+0x38>)
 80046a6:	9107      	str	r1, [sp, #28]
 80046a8:	9104      	str	r1, [sp, #16]
 80046aa:	4909      	ldr	r1, [pc, #36]	; (80046d0 <siprintf+0x3c>)
 80046ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80046b0:	9105      	str	r1, [sp, #20]
 80046b2:	6800      	ldr	r0, [r0, #0]
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	a902      	add	r1, sp, #8
 80046b8:	f000 fbac 	bl	8004e14 <_svfiprintf_r>
 80046bc:	9b02      	ldr	r3, [sp, #8]
 80046be:	2200      	movs	r2, #0
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	b01c      	add	sp, #112	; 0x70
 80046c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80046c8:	b003      	add	sp, #12
 80046ca:	4770      	bx	lr
 80046cc:	2000000c 	.word	0x2000000c
 80046d0:	ffff0208 	.word	0xffff0208

080046d4 <__swbuf_r>:
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d6:	460e      	mov	r6, r1
 80046d8:	4614      	mov	r4, r2
 80046da:	4605      	mov	r5, r0
 80046dc:	b118      	cbz	r0, 80046e6 <__swbuf_r+0x12>
 80046de:	6983      	ldr	r3, [r0, #24]
 80046e0:	b90b      	cbnz	r3, 80046e6 <__swbuf_r+0x12>
 80046e2:	f000 f9a7 	bl	8004a34 <__sinit>
 80046e6:	4b21      	ldr	r3, [pc, #132]	; (800476c <__swbuf_r+0x98>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d12a      	bne.n	8004742 <__swbuf_r+0x6e>
 80046ec:	686c      	ldr	r4, [r5, #4]
 80046ee:	69a3      	ldr	r3, [r4, #24]
 80046f0:	60a3      	str	r3, [r4, #8]
 80046f2:	89a3      	ldrh	r3, [r4, #12]
 80046f4:	071a      	lsls	r2, r3, #28
 80046f6:	d52e      	bpl.n	8004756 <__swbuf_r+0x82>
 80046f8:	6923      	ldr	r3, [r4, #16]
 80046fa:	b363      	cbz	r3, 8004756 <__swbuf_r+0x82>
 80046fc:	6923      	ldr	r3, [r4, #16]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1ac0      	subs	r0, r0, r3
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	b2f6      	uxtb	r6, r6
 8004706:	4283      	cmp	r3, r0
 8004708:	4637      	mov	r7, r6
 800470a:	dc04      	bgt.n	8004716 <__swbuf_r+0x42>
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	f000 f926 	bl	8004960 <_fflush_r>
 8004714:	bb28      	cbnz	r0, 8004762 <__swbuf_r+0x8e>
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	3b01      	subs	r3, #1
 800471a:	60a3      	str	r3, [r4, #8]
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	6022      	str	r2, [r4, #0]
 8004722:	701e      	strb	r6, [r3, #0]
 8004724:	6963      	ldr	r3, [r4, #20]
 8004726:	3001      	adds	r0, #1
 8004728:	4283      	cmp	r3, r0
 800472a:	d004      	beq.n	8004736 <__swbuf_r+0x62>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	07db      	lsls	r3, r3, #31
 8004730:	d519      	bpl.n	8004766 <__swbuf_r+0x92>
 8004732:	2e0a      	cmp	r6, #10
 8004734:	d117      	bne.n	8004766 <__swbuf_r+0x92>
 8004736:	4621      	mov	r1, r4
 8004738:	4628      	mov	r0, r5
 800473a:	f000 f911 	bl	8004960 <_fflush_r>
 800473e:	b190      	cbz	r0, 8004766 <__swbuf_r+0x92>
 8004740:	e00f      	b.n	8004762 <__swbuf_r+0x8e>
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <__swbuf_r+0x9c>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d101      	bne.n	800474c <__swbuf_r+0x78>
 8004748:	68ac      	ldr	r4, [r5, #8]
 800474a:	e7d0      	b.n	80046ee <__swbuf_r+0x1a>
 800474c:	4b09      	ldr	r3, [pc, #36]	; (8004774 <__swbuf_r+0xa0>)
 800474e:	429c      	cmp	r4, r3
 8004750:	bf08      	it	eq
 8004752:	68ec      	ldreq	r4, [r5, #12]
 8004754:	e7cb      	b.n	80046ee <__swbuf_r+0x1a>
 8004756:	4621      	mov	r1, r4
 8004758:	4628      	mov	r0, r5
 800475a:	f000 f80d 	bl	8004778 <__swsetup_r>
 800475e:	2800      	cmp	r0, #0
 8004760:	d0cc      	beq.n	80046fc <__swbuf_r+0x28>
 8004762:	f04f 37ff 	mov.w	r7, #4294967295
 8004766:	4638      	mov	r0, r7
 8004768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476a:	bf00      	nop
 800476c:	08005894 	.word	0x08005894
 8004770:	080058b4 	.word	0x080058b4
 8004774:	08005874 	.word	0x08005874

08004778 <__swsetup_r>:
 8004778:	4b32      	ldr	r3, [pc, #200]	; (8004844 <__swsetup_r+0xcc>)
 800477a:	b570      	push	{r4, r5, r6, lr}
 800477c:	681d      	ldr	r5, [r3, #0]
 800477e:	4606      	mov	r6, r0
 8004780:	460c      	mov	r4, r1
 8004782:	b125      	cbz	r5, 800478e <__swsetup_r+0x16>
 8004784:	69ab      	ldr	r3, [r5, #24]
 8004786:	b913      	cbnz	r3, 800478e <__swsetup_r+0x16>
 8004788:	4628      	mov	r0, r5
 800478a:	f000 f953 	bl	8004a34 <__sinit>
 800478e:	4b2e      	ldr	r3, [pc, #184]	; (8004848 <__swsetup_r+0xd0>)
 8004790:	429c      	cmp	r4, r3
 8004792:	d10f      	bne.n	80047b4 <__swsetup_r+0x3c>
 8004794:	686c      	ldr	r4, [r5, #4]
 8004796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800479a:	b29a      	uxth	r2, r3
 800479c:	0715      	lsls	r5, r2, #28
 800479e:	d42c      	bmi.n	80047fa <__swsetup_r+0x82>
 80047a0:	06d0      	lsls	r0, r2, #27
 80047a2:	d411      	bmi.n	80047c8 <__swsetup_r+0x50>
 80047a4:	2209      	movs	r2, #9
 80047a6:	6032      	str	r2, [r6, #0]
 80047a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ac:	81a3      	strh	r3, [r4, #12]
 80047ae:	f04f 30ff 	mov.w	r0, #4294967295
 80047b2:	e03e      	b.n	8004832 <__swsetup_r+0xba>
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <__swsetup_r+0xd4>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d101      	bne.n	80047be <__swsetup_r+0x46>
 80047ba:	68ac      	ldr	r4, [r5, #8]
 80047bc:	e7eb      	b.n	8004796 <__swsetup_r+0x1e>
 80047be:	4b24      	ldr	r3, [pc, #144]	; (8004850 <__swsetup_r+0xd8>)
 80047c0:	429c      	cmp	r4, r3
 80047c2:	bf08      	it	eq
 80047c4:	68ec      	ldreq	r4, [r5, #12]
 80047c6:	e7e6      	b.n	8004796 <__swsetup_r+0x1e>
 80047c8:	0751      	lsls	r1, r2, #29
 80047ca:	d512      	bpl.n	80047f2 <__swsetup_r+0x7a>
 80047cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047ce:	b141      	cbz	r1, 80047e2 <__swsetup_r+0x6a>
 80047d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <__swsetup_r+0x66>
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 fa19 	bl	8004c10 <_free_r>
 80047de:	2300      	movs	r3, #0
 80047e0:	6363      	str	r3, [r4, #52]	; 0x34
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047e8:	81a3      	strh	r3, [r4, #12]
 80047ea:	2300      	movs	r3, #0
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	6923      	ldr	r3, [r4, #16]
 80047f0:	6023      	str	r3, [r4, #0]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f043 0308 	orr.w	r3, r3, #8
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	6923      	ldr	r3, [r4, #16]
 80047fc:	b94b      	cbnz	r3, 8004812 <__swsetup_r+0x9a>
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d003      	beq.n	8004812 <__swsetup_r+0x9a>
 800480a:	4621      	mov	r1, r4
 800480c:	4630      	mov	r0, r6
 800480e:	f000 f9bf 	bl	8004b90 <__smakebuf_r>
 8004812:	89a2      	ldrh	r2, [r4, #12]
 8004814:	f012 0301 	ands.w	r3, r2, #1
 8004818:	d00c      	beq.n	8004834 <__swsetup_r+0xbc>
 800481a:	2300      	movs	r3, #0
 800481c:	60a3      	str	r3, [r4, #8]
 800481e:	6963      	ldr	r3, [r4, #20]
 8004820:	425b      	negs	r3, r3
 8004822:	61a3      	str	r3, [r4, #24]
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	b953      	cbnz	r3, 800483e <__swsetup_r+0xc6>
 8004828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004830:	d1ba      	bne.n	80047a8 <__swsetup_r+0x30>
 8004832:	bd70      	pop	{r4, r5, r6, pc}
 8004834:	0792      	lsls	r2, r2, #30
 8004836:	bf58      	it	pl
 8004838:	6963      	ldrpl	r3, [r4, #20]
 800483a:	60a3      	str	r3, [r4, #8]
 800483c:	e7f2      	b.n	8004824 <__swsetup_r+0xac>
 800483e:	2000      	movs	r0, #0
 8004840:	e7f7      	b.n	8004832 <__swsetup_r+0xba>
 8004842:	bf00      	nop
 8004844:	2000000c 	.word	0x2000000c
 8004848:	08005894 	.word	0x08005894
 800484c:	080058b4 	.word	0x080058b4
 8004850:	08005874 	.word	0x08005874

08004854 <__sflush_r>:
 8004854:	898a      	ldrh	r2, [r1, #12]
 8004856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800485a:	4605      	mov	r5, r0
 800485c:	0710      	lsls	r0, r2, #28
 800485e:	460c      	mov	r4, r1
 8004860:	d458      	bmi.n	8004914 <__sflush_r+0xc0>
 8004862:	684b      	ldr	r3, [r1, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	dc05      	bgt.n	8004874 <__sflush_r+0x20>
 8004868:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800486a:	2b00      	cmp	r3, #0
 800486c:	dc02      	bgt.n	8004874 <__sflush_r+0x20>
 800486e:	2000      	movs	r0, #0
 8004870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004874:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004876:	2e00      	cmp	r6, #0
 8004878:	d0f9      	beq.n	800486e <__sflush_r+0x1a>
 800487a:	2300      	movs	r3, #0
 800487c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004880:	682f      	ldr	r7, [r5, #0]
 8004882:	6a21      	ldr	r1, [r4, #32]
 8004884:	602b      	str	r3, [r5, #0]
 8004886:	d032      	beq.n	80048ee <__sflush_r+0x9a>
 8004888:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	075a      	lsls	r2, r3, #29
 800488e:	d505      	bpl.n	800489c <__sflush_r+0x48>
 8004890:	6863      	ldr	r3, [r4, #4]
 8004892:	1ac0      	subs	r0, r0, r3
 8004894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004896:	b10b      	cbz	r3, 800489c <__sflush_r+0x48>
 8004898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800489a:	1ac0      	subs	r0, r0, r3
 800489c:	2300      	movs	r3, #0
 800489e:	4602      	mov	r2, r0
 80048a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048a2:	6a21      	ldr	r1, [r4, #32]
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b0      	blx	r6
 80048a8:	1c43      	adds	r3, r0, #1
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	d106      	bne.n	80048bc <__sflush_r+0x68>
 80048ae:	6829      	ldr	r1, [r5, #0]
 80048b0:	291d      	cmp	r1, #29
 80048b2:	d848      	bhi.n	8004946 <__sflush_r+0xf2>
 80048b4:	4a29      	ldr	r2, [pc, #164]	; (800495c <__sflush_r+0x108>)
 80048b6:	40ca      	lsrs	r2, r1
 80048b8:	07d6      	lsls	r6, r2, #31
 80048ba:	d544      	bpl.n	8004946 <__sflush_r+0xf2>
 80048bc:	2200      	movs	r2, #0
 80048be:	6062      	str	r2, [r4, #4]
 80048c0:	04d9      	lsls	r1, r3, #19
 80048c2:	6922      	ldr	r2, [r4, #16]
 80048c4:	6022      	str	r2, [r4, #0]
 80048c6:	d504      	bpl.n	80048d2 <__sflush_r+0x7e>
 80048c8:	1c42      	adds	r2, r0, #1
 80048ca:	d101      	bne.n	80048d0 <__sflush_r+0x7c>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b903      	cbnz	r3, 80048d2 <__sflush_r+0x7e>
 80048d0:	6560      	str	r0, [r4, #84]	; 0x54
 80048d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048d4:	602f      	str	r7, [r5, #0]
 80048d6:	2900      	cmp	r1, #0
 80048d8:	d0c9      	beq.n	800486e <__sflush_r+0x1a>
 80048da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048de:	4299      	cmp	r1, r3
 80048e0:	d002      	beq.n	80048e8 <__sflush_r+0x94>
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f994 	bl	8004c10 <_free_r>
 80048e8:	2000      	movs	r0, #0
 80048ea:	6360      	str	r0, [r4, #52]	; 0x34
 80048ec:	e7c0      	b.n	8004870 <__sflush_r+0x1c>
 80048ee:	2301      	movs	r3, #1
 80048f0:	4628      	mov	r0, r5
 80048f2:	47b0      	blx	r6
 80048f4:	1c41      	adds	r1, r0, #1
 80048f6:	d1c8      	bne.n	800488a <__sflush_r+0x36>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0c5      	beq.n	800488a <__sflush_r+0x36>
 80048fe:	2b1d      	cmp	r3, #29
 8004900:	d001      	beq.n	8004906 <__sflush_r+0xb2>
 8004902:	2b16      	cmp	r3, #22
 8004904:	d101      	bne.n	800490a <__sflush_r+0xb6>
 8004906:	602f      	str	r7, [r5, #0]
 8004908:	e7b1      	b.n	800486e <__sflush_r+0x1a>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004910:	81a3      	strh	r3, [r4, #12]
 8004912:	e7ad      	b.n	8004870 <__sflush_r+0x1c>
 8004914:	690f      	ldr	r7, [r1, #16]
 8004916:	2f00      	cmp	r7, #0
 8004918:	d0a9      	beq.n	800486e <__sflush_r+0x1a>
 800491a:	0793      	lsls	r3, r2, #30
 800491c:	680e      	ldr	r6, [r1, #0]
 800491e:	bf08      	it	eq
 8004920:	694b      	ldreq	r3, [r1, #20]
 8004922:	600f      	str	r7, [r1, #0]
 8004924:	bf18      	it	ne
 8004926:	2300      	movne	r3, #0
 8004928:	eba6 0807 	sub.w	r8, r6, r7
 800492c:	608b      	str	r3, [r1, #8]
 800492e:	f1b8 0f00 	cmp.w	r8, #0
 8004932:	dd9c      	ble.n	800486e <__sflush_r+0x1a>
 8004934:	4643      	mov	r3, r8
 8004936:	463a      	mov	r2, r7
 8004938:	6a21      	ldr	r1, [r4, #32]
 800493a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800493c:	4628      	mov	r0, r5
 800493e:	47b0      	blx	r6
 8004940:	2800      	cmp	r0, #0
 8004942:	dc06      	bgt.n	8004952 <__sflush_r+0xfe>
 8004944:	89a3      	ldrh	r3, [r4, #12]
 8004946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	f04f 30ff 	mov.w	r0, #4294967295
 8004950:	e78e      	b.n	8004870 <__sflush_r+0x1c>
 8004952:	4407      	add	r7, r0
 8004954:	eba8 0800 	sub.w	r8, r8, r0
 8004958:	e7e9      	b.n	800492e <__sflush_r+0xda>
 800495a:	bf00      	nop
 800495c:	20400001 	.word	0x20400001

08004960 <_fflush_r>:
 8004960:	b538      	push	{r3, r4, r5, lr}
 8004962:	690b      	ldr	r3, [r1, #16]
 8004964:	4605      	mov	r5, r0
 8004966:	460c      	mov	r4, r1
 8004968:	b1db      	cbz	r3, 80049a2 <_fflush_r+0x42>
 800496a:	b118      	cbz	r0, 8004974 <_fflush_r+0x14>
 800496c:	6983      	ldr	r3, [r0, #24]
 800496e:	b90b      	cbnz	r3, 8004974 <_fflush_r+0x14>
 8004970:	f000 f860 	bl	8004a34 <__sinit>
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <_fflush_r+0x48>)
 8004976:	429c      	cmp	r4, r3
 8004978:	d109      	bne.n	800498e <_fflush_r+0x2e>
 800497a:	686c      	ldr	r4, [r5, #4]
 800497c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004980:	b17b      	cbz	r3, 80049a2 <_fflush_r+0x42>
 8004982:	4621      	mov	r1, r4
 8004984:	4628      	mov	r0, r5
 8004986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498a:	f7ff bf63 	b.w	8004854 <__sflush_r>
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <_fflush_r+0x4c>)
 8004990:	429c      	cmp	r4, r3
 8004992:	d101      	bne.n	8004998 <_fflush_r+0x38>
 8004994:	68ac      	ldr	r4, [r5, #8]
 8004996:	e7f1      	b.n	800497c <_fflush_r+0x1c>
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <_fflush_r+0x50>)
 800499a:	429c      	cmp	r4, r3
 800499c:	bf08      	it	eq
 800499e:	68ec      	ldreq	r4, [r5, #12]
 80049a0:	e7ec      	b.n	800497c <_fflush_r+0x1c>
 80049a2:	2000      	movs	r0, #0
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	08005894 	.word	0x08005894
 80049ac:	080058b4 	.word	0x080058b4
 80049b0:	08005874 	.word	0x08005874

080049b4 <std>:
 80049b4:	2300      	movs	r3, #0
 80049b6:	b510      	push	{r4, lr}
 80049b8:	4604      	mov	r4, r0
 80049ba:	e9c0 3300 	strd	r3, r3, [r0]
 80049be:	6083      	str	r3, [r0, #8]
 80049c0:	8181      	strh	r1, [r0, #12]
 80049c2:	6643      	str	r3, [r0, #100]	; 0x64
 80049c4:	81c2      	strh	r2, [r0, #14]
 80049c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049ca:	6183      	str	r3, [r0, #24]
 80049cc:	4619      	mov	r1, r3
 80049ce:	2208      	movs	r2, #8
 80049d0:	305c      	adds	r0, #92	; 0x5c
 80049d2:	f7ff fddb 	bl	800458c <memset>
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x38>)
 80049d8:	6263      	str	r3, [r4, #36]	; 0x24
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x3c>)
 80049dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <std+0x40>)
 80049e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <std+0x44>)
 80049e4:	6224      	str	r4, [r4, #32]
 80049e6:	6323      	str	r3, [r4, #48]	; 0x30
 80049e8:	bd10      	pop	{r4, pc}
 80049ea:	bf00      	nop
 80049ec:	080055b5 	.word	0x080055b5
 80049f0:	080055d7 	.word	0x080055d7
 80049f4:	0800560f 	.word	0x0800560f
 80049f8:	08005633 	.word	0x08005633

080049fc <_cleanup_r>:
 80049fc:	4901      	ldr	r1, [pc, #4]	; (8004a04 <_cleanup_r+0x8>)
 80049fe:	f000 b885 	b.w	8004b0c <_fwalk_reent>
 8004a02:	bf00      	nop
 8004a04:	08004961 	.word	0x08004961

08004a08 <__sfmoreglue>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	1e4a      	subs	r2, r1, #1
 8004a0c:	2568      	movs	r5, #104	; 0x68
 8004a0e:	4355      	muls	r5, r2
 8004a10:	460e      	mov	r6, r1
 8004a12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a16:	f000 f949 	bl	8004cac <_malloc_r>
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b140      	cbz	r0, 8004a30 <__sfmoreglue+0x28>
 8004a1e:	2100      	movs	r1, #0
 8004a20:	e9c0 1600 	strd	r1, r6, [r0]
 8004a24:	300c      	adds	r0, #12
 8004a26:	60a0      	str	r0, [r4, #8]
 8004a28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a2c:	f7ff fdae 	bl	800458c <memset>
 8004a30:	4620      	mov	r0, r4
 8004a32:	bd70      	pop	{r4, r5, r6, pc}

08004a34 <__sinit>:
 8004a34:	6983      	ldr	r3, [r0, #24]
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	bb33      	cbnz	r3, 8004a8a <__sinit+0x56>
 8004a3c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004a40:	6503      	str	r3, [r0, #80]	; 0x50
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <__sinit+0x58>)
 8004a44:	4a12      	ldr	r2, [pc, #72]	; (8004a90 <__sinit+0x5c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6282      	str	r2, [r0, #40]	; 0x28
 8004a4a:	4298      	cmp	r0, r3
 8004a4c:	bf04      	itt	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	6183      	streq	r3, [r0, #24]
 8004a52:	f000 f81f 	bl	8004a94 <__sfp>
 8004a56:	6060      	str	r0, [r4, #4]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f000 f81b 	bl	8004a94 <__sfp>
 8004a5e:	60a0      	str	r0, [r4, #8]
 8004a60:	4620      	mov	r0, r4
 8004a62:	f000 f817 	bl	8004a94 <__sfp>
 8004a66:	2200      	movs	r2, #0
 8004a68:	60e0      	str	r0, [r4, #12]
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	6860      	ldr	r0, [r4, #4]
 8004a6e:	f7ff ffa1 	bl	80049b4 <std>
 8004a72:	2201      	movs	r2, #1
 8004a74:	2109      	movs	r1, #9
 8004a76:	68a0      	ldr	r0, [r4, #8]
 8004a78:	f7ff ff9c 	bl	80049b4 <std>
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	2112      	movs	r1, #18
 8004a80:	68e0      	ldr	r0, [r4, #12]
 8004a82:	f7ff ff97 	bl	80049b4 <std>
 8004a86:	2301      	movs	r3, #1
 8004a88:	61a3      	str	r3, [r4, #24]
 8004a8a:	bd10      	pop	{r4, pc}
 8004a8c:	08005870 	.word	0x08005870
 8004a90:	080049fd 	.word	0x080049fd

08004a94 <__sfp>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <__sfp+0x70>)
 8004a98:	681e      	ldr	r6, [r3, #0]
 8004a9a:	69b3      	ldr	r3, [r6, #24]
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	b913      	cbnz	r3, 8004aa6 <__sfp+0x12>
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f7ff ffc7 	bl	8004a34 <__sinit>
 8004aa6:	3648      	adds	r6, #72	; 0x48
 8004aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aac:	3b01      	subs	r3, #1
 8004aae:	d503      	bpl.n	8004ab8 <__sfp+0x24>
 8004ab0:	6833      	ldr	r3, [r6, #0]
 8004ab2:	b133      	cbz	r3, 8004ac2 <__sfp+0x2e>
 8004ab4:	6836      	ldr	r6, [r6, #0]
 8004ab6:	e7f7      	b.n	8004aa8 <__sfp+0x14>
 8004ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004abc:	b16d      	cbz	r5, 8004ada <__sfp+0x46>
 8004abe:	3468      	adds	r4, #104	; 0x68
 8004ac0:	e7f4      	b.n	8004aac <__sfp+0x18>
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	f7ff ff9f 	bl	8004a08 <__sfmoreglue>
 8004aca:	6030      	str	r0, [r6, #0]
 8004acc:	2800      	cmp	r0, #0
 8004ace:	d1f1      	bne.n	8004ab4 <__sfp+0x20>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <__sfp+0x74>)
 8004adc:	6665      	str	r5, [r4, #100]	; 0x64
 8004ade:	e9c4 5500 	strd	r5, r5, [r4]
 8004ae2:	60a5      	str	r5, [r4, #8]
 8004ae4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ae8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004aec:	2208      	movs	r2, #8
 8004aee:	4629      	mov	r1, r5
 8004af0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004af4:	f7ff fd4a 	bl	800458c <memset>
 8004af8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004afc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b00:	e7e9      	b.n	8004ad6 <__sfp+0x42>
 8004b02:	bf00      	nop
 8004b04:	08005870 	.word	0x08005870
 8004b08:	ffff0001 	.word	0xffff0001

08004b0c <_fwalk_reent>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4680      	mov	r8, r0
 8004b12:	4689      	mov	r9, r1
 8004b14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b18:	2600      	movs	r6, #0
 8004b1a:	b914      	cbnz	r4, 8004b22 <_fwalk_reent+0x16>
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004b26:	3f01      	subs	r7, #1
 8004b28:	d501      	bpl.n	8004b2e <_fwalk_reent+0x22>
 8004b2a:	6824      	ldr	r4, [r4, #0]
 8004b2c:	e7f5      	b.n	8004b1a <_fwalk_reent+0xe>
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d907      	bls.n	8004b44 <_fwalk_reent+0x38>
 8004b34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	d003      	beq.n	8004b44 <_fwalk_reent+0x38>
 8004b3c:	4629      	mov	r1, r5
 8004b3e:	4640      	mov	r0, r8
 8004b40:	47c8      	blx	r9
 8004b42:	4306      	orrs	r6, r0
 8004b44:	3568      	adds	r5, #104	; 0x68
 8004b46:	e7ee      	b.n	8004b26 <_fwalk_reent+0x1a>

08004b48 <__swhatbuf_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	460e      	mov	r6, r1
 8004b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b50:	2900      	cmp	r1, #0
 8004b52:	b096      	sub	sp, #88	; 0x58
 8004b54:	4614      	mov	r4, r2
 8004b56:	461d      	mov	r5, r3
 8004b58:	da07      	bge.n	8004b6a <__swhatbuf_r+0x22>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	602b      	str	r3, [r5, #0]
 8004b5e:	89b3      	ldrh	r3, [r6, #12]
 8004b60:	061a      	lsls	r2, r3, #24
 8004b62:	d410      	bmi.n	8004b86 <__swhatbuf_r+0x3e>
 8004b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b68:	e00e      	b.n	8004b88 <__swhatbuf_r+0x40>
 8004b6a:	466a      	mov	r2, sp
 8004b6c:	f000 fd88 	bl	8005680 <_fstat_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	dbf2      	blt.n	8004b5a <__swhatbuf_r+0x12>
 8004b74:	9a01      	ldr	r2, [sp, #4]
 8004b76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b7e:	425a      	negs	r2, r3
 8004b80:	415a      	adcs	r2, r3
 8004b82:	602a      	str	r2, [r5, #0]
 8004b84:	e7ee      	b.n	8004b64 <__swhatbuf_r+0x1c>
 8004b86:	2340      	movs	r3, #64	; 0x40
 8004b88:	2000      	movs	r0, #0
 8004b8a:	6023      	str	r3, [r4, #0]
 8004b8c:	b016      	add	sp, #88	; 0x58
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}

08004b90 <__smakebuf_r>:
 8004b90:	898b      	ldrh	r3, [r1, #12]
 8004b92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b94:	079d      	lsls	r5, r3, #30
 8004b96:	4606      	mov	r6, r0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	d507      	bpl.n	8004bac <__smakebuf_r+0x1c>
 8004b9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ba0:	6023      	str	r3, [r4, #0]
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	6163      	str	r3, [r4, #20]
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	ab01      	add	r3, sp, #4
 8004bae:	466a      	mov	r2, sp
 8004bb0:	f7ff ffca 	bl	8004b48 <__swhatbuf_r>
 8004bb4:	9900      	ldr	r1, [sp, #0]
 8004bb6:	4605      	mov	r5, r0
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f877 	bl	8004cac <_malloc_r>
 8004bbe:	b948      	cbnz	r0, 8004bd4 <__smakebuf_r+0x44>
 8004bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bc4:	059a      	lsls	r2, r3, #22
 8004bc6:	d4ef      	bmi.n	8004ba8 <__smakebuf_r+0x18>
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	f043 0302 	orr.w	r3, r3, #2
 8004bd0:	81a3      	strh	r3, [r4, #12]
 8004bd2:	e7e3      	b.n	8004b9c <__smakebuf_r+0xc>
 8004bd4:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <__smakebuf_r+0x7c>)
 8004bd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	6020      	str	r0, [r4, #0]
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	81a3      	strh	r3, [r4, #12]
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	6163      	str	r3, [r4, #20]
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	6120      	str	r0, [r4, #16]
 8004bea:	b15b      	cbz	r3, 8004c04 <__smakebuf_r+0x74>
 8004bec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 fd57 	bl	80056a4 <_isatty_r>
 8004bf6:	b128      	cbz	r0, 8004c04 <__smakebuf_r+0x74>
 8004bf8:	89a3      	ldrh	r3, [r4, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	f043 0301 	orr.w	r3, r3, #1
 8004c02:	81a3      	strh	r3, [r4, #12]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	431d      	orrs	r5, r3
 8004c08:	81a5      	strh	r5, [r4, #12]
 8004c0a:	e7cd      	b.n	8004ba8 <__smakebuf_r+0x18>
 8004c0c:	080049fd 	.word	0x080049fd

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d045      	beq.n	8004ca4 <_free_r+0x94>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 fd84 	bl	8005730 <__malloc_lock>
 8004c28:	4a1f      	ldr	r2, [pc, #124]	; (8004ca8 <_free_r+0x98>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	b933      	cbnz	r3, 8004c3e <_free_r+0x2e>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 bd7a 	b.w	8005732 <__malloc_unlock>
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d90c      	bls.n	8004c5c <_free_r+0x4c>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	1862      	adds	r2, r4, r1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf04      	itt	eq
 8004c4a:	681a      	ldreq	r2, [r3, #0]
 8004c4c:	685b      	ldreq	r3, [r3, #4]
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	bf04      	itt	eq
 8004c52:	1852      	addeq	r2, r2, r1
 8004c54:	6022      	streq	r2, [r4, #0]
 8004c56:	6004      	str	r4, [r0, #0]
 8004c58:	e7ec      	b.n	8004c34 <_free_r+0x24>
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	b10a      	cbz	r2, 8004c64 <_free_r+0x54>
 8004c60:	42a2      	cmp	r2, r4
 8004c62:	d9fa      	bls.n	8004c5a <_free_r+0x4a>
 8004c64:	6819      	ldr	r1, [r3, #0]
 8004c66:	1858      	adds	r0, r3, r1
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d10b      	bne.n	8004c84 <_free_r+0x74>
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	4401      	add	r1, r0
 8004c70:	1858      	adds	r0, r3, r1
 8004c72:	4282      	cmp	r2, r0
 8004c74:	6019      	str	r1, [r3, #0]
 8004c76:	d1dd      	bne.n	8004c34 <_free_r+0x24>
 8004c78:	6810      	ldr	r0, [r2, #0]
 8004c7a:	6852      	ldr	r2, [r2, #4]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	4401      	add	r1, r0
 8004c80:	6019      	str	r1, [r3, #0]
 8004c82:	e7d7      	b.n	8004c34 <_free_r+0x24>
 8004c84:	d902      	bls.n	8004c8c <_free_r+0x7c>
 8004c86:	230c      	movs	r3, #12
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	e7d3      	b.n	8004c34 <_free_r+0x24>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	1821      	adds	r1, r4, r0
 8004c90:	428a      	cmp	r2, r1
 8004c92:	bf04      	itt	eq
 8004c94:	6811      	ldreq	r1, [r2, #0]
 8004c96:	6852      	ldreq	r2, [r2, #4]
 8004c98:	6062      	str	r2, [r4, #4]
 8004c9a:	bf04      	itt	eq
 8004c9c:	1809      	addeq	r1, r1, r0
 8004c9e:	6021      	streq	r1, [r4, #0]
 8004ca0:	605c      	str	r4, [r3, #4]
 8004ca2:	e7c7      	b.n	8004c34 <_free_r+0x24>
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000090 	.word	0x20000090

08004cac <_malloc_r>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	1ccd      	adds	r5, r1, #3
 8004cb0:	f025 0503 	bic.w	r5, r5, #3
 8004cb4:	3508      	adds	r5, #8
 8004cb6:	2d0c      	cmp	r5, #12
 8004cb8:	bf38      	it	cc
 8004cba:	250c      	movcc	r5, #12
 8004cbc:	2d00      	cmp	r5, #0
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	db01      	blt.n	8004cc6 <_malloc_r+0x1a>
 8004cc2:	42a9      	cmp	r1, r5
 8004cc4:	d903      	bls.n	8004cce <_malloc_r+0x22>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	6033      	str	r3, [r6, #0]
 8004cca:	2000      	movs	r0, #0
 8004ccc:	bd70      	pop	{r4, r5, r6, pc}
 8004cce:	f000 fd2f 	bl	8005730 <__malloc_lock>
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <_malloc_r+0xac>)
 8004cd4:	6814      	ldr	r4, [r2, #0]
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	b991      	cbnz	r1, 8004d00 <_malloc_r+0x54>
 8004cda:	4c20      	ldr	r4, [pc, #128]	; (8004d5c <_malloc_r+0xb0>)
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	b91b      	cbnz	r3, 8004ce8 <_malloc_r+0x3c>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 fc57 	bl	8005594 <_sbrk_r>
 8004ce6:	6020      	str	r0, [r4, #0]
 8004ce8:	4629      	mov	r1, r5
 8004cea:	4630      	mov	r0, r6
 8004cec:	f000 fc52 	bl	8005594 <_sbrk_r>
 8004cf0:	1c43      	adds	r3, r0, #1
 8004cf2:	d124      	bne.n	8004d3e <_malloc_r+0x92>
 8004cf4:	230c      	movs	r3, #12
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f000 fd1a 	bl	8005732 <__malloc_unlock>
 8004cfe:	e7e4      	b.n	8004cca <_malloc_r+0x1e>
 8004d00:	680b      	ldr	r3, [r1, #0]
 8004d02:	1b5b      	subs	r3, r3, r5
 8004d04:	d418      	bmi.n	8004d38 <_malloc_r+0x8c>
 8004d06:	2b0b      	cmp	r3, #11
 8004d08:	d90f      	bls.n	8004d2a <_malloc_r+0x7e>
 8004d0a:	600b      	str	r3, [r1, #0]
 8004d0c:	50cd      	str	r5, [r1, r3]
 8004d0e:	18cc      	adds	r4, r1, r3
 8004d10:	4630      	mov	r0, r6
 8004d12:	f000 fd0e 	bl	8005732 <__malloc_unlock>
 8004d16:	f104 000b 	add.w	r0, r4, #11
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	f020 0007 	bic.w	r0, r0, #7
 8004d20:	1ac3      	subs	r3, r0, r3
 8004d22:	d0d3      	beq.n	8004ccc <_malloc_r+0x20>
 8004d24:	425a      	negs	r2, r3
 8004d26:	50e2      	str	r2, [r4, r3]
 8004d28:	e7d0      	b.n	8004ccc <_malloc_r+0x20>
 8004d2a:	428c      	cmp	r4, r1
 8004d2c:	684b      	ldr	r3, [r1, #4]
 8004d2e:	bf16      	itet	ne
 8004d30:	6063      	strne	r3, [r4, #4]
 8004d32:	6013      	streq	r3, [r2, #0]
 8004d34:	460c      	movne	r4, r1
 8004d36:	e7eb      	b.n	8004d10 <_malloc_r+0x64>
 8004d38:	460c      	mov	r4, r1
 8004d3a:	6849      	ldr	r1, [r1, #4]
 8004d3c:	e7cc      	b.n	8004cd8 <_malloc_r+0x2c>
 8004d3e:	1cc4      	adds	r4, r0, #3
 8004d40:	f024 0403 	bic.w	r4, r4, #3
 8004d44:	42a0      	cmp	r0, r4
 8004d46:	d005      	beq.n	8004d54 <_malloc_r+0xa8>
 8004d48:	1a21      	subs	r1, r4, r0
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f000 fc22 	bl	8005594 <_sbrk_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d0cf      	beq.n	8004cf4 <_malloc_r+0x48>
 8004d54:	6025      	str	r5, [r4, #0]
 8004d56:	e7db      	b.n	8004d10 <_malloc_r+0x64>
 8004d58:	20000090 	.word	0x20000090
 8004d5c:	20000094 	.word	0x20000094

08004d60 <__ssputs_r>:
 8004d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	688e      	ldr	r6, [r1, #8]
 8004d66:	429e      	cmp	r6, r3
 8004d68:	4682      	mov	sl, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4690      	mov	r8, r2
 8004d6e:	4699      	mov	r9, r3
 8004d70:	d837      	bhi.n	8004de2 <__ssputs_r+0x82>
 8004d72:	898a      	ldrh	r2, [r1, #12]
 8004d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d78:	d031      	beq.n	8004dde <__ssputs_r+0x7e>
 8004d7a:	6825      	ldr	r5, [r4, #0]
 8004d7c:	6909      	ldr	r1, [r1, #16]
 8004d7e:	1a6f      	subs	r7, r5, r1
 8004d80:	6965      	ldr	r5, [r4, #20]
 8004d82:	2302      	movs	r3, #2
 8004d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d88:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d8c:	f109 0301 	add.w	r3, r9, #1
 8004d90:	443b      	add	r3, r7
 8004d92:	429d      	cmp	r5, r3
 8004d94:	bf38      	it	cc
 8004d96:	461d      	movcc	r5, r3
 8004d98:	0553      	lsls	r3, r2, #21
 8004d9a:	d530      	bpl.n	8004dfe <__ssputs_r+0x9e>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7ff ff85 	bl	8004cac <_malloc_r>
 8004da2:	4606      	mov	r6, r0
 8004da4:	b950      	cbnz	r0, 8004dbc <__ssputs_r+0x5c>
 8004da6:	230c      	movs	r3, #12
 8004da8:	f8ca 3000 	str.w	r3, [sl]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db2:	81a3      	strh	r3, [r4, #12]
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	6921      	ldr	r1, [r4, #16]
 8004dc0:	f000 fc92 	bl	80056e8 <memcpy>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	6126      	str	r6, [r4, #16]
 8004dd2:	6165      	str	r5, [r4, #20]
 8004dd4:	443e      	add	r6, r7
 8004dd6:	1bed      	subs	r5, r5, r7
 8004dd8:	6026      	str	r6, [r4, #0]
 8004dda:	60a5      	str	r5, [r4, #8]
 8004ddc:	464e      	mov	r6, r9
 8004dde:	454e      	cmp	r6, r9
 8004de0:	d900      	bls.n	8004de4 <__ssputs_r+0x84>
 8004de2:	464e      	mov	r6, r9
 8004de4:	4632      	mov	r2, r6
 8004de6:	4641      	mov	r1, r8
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	f000 fc88 	bl	80056fe <memmove>
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	1b9b      	subs	r3, r3, r6
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	441e      	add	r6, r3
 8004df8:	6026      	str	r6, [r4, #0]
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	e7dc      	b.n	8004db8 <__ssputs_r+0x58>
 8004dfe:	462a      	mov	r2, r5
 8004e00:	f000 fc98 	bl	8005734 <_realloc_r>
 8004e04:	4606      	mov	r6, r0
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d1e2      	bne.n	8004dd0 <__ssputs_r+0x70>
 8004e0a:	6921      	ldr	r1, [r4, #16]
 8004e0c:	4650      	mov	r0, sl
 8004e0e:	f7ff feff 	bl	8004c10 <_free_r>
 8004e12:	e7c8      	b.n	8004da6 <__ssputs_r+0x46>

08004e14 <_svfiprintf_r>:
 8004e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e18:	461d      	mov	r5, r3
 8004e1a:	898b      	ldrh	r3, [r1, #12]
 8004e1c:	061f      	lsls	r7, r3, #24
 8004e1e:	b09d      	sub	sp, #116	; 0x74
 8004e20:	4680      	mov	r8, r0
 8004e22:	460c      	mov	r4, r1
 8004e24:	4616      	mov	r6, r2
 8004e26:	d50f      	bpl.n	8004e48 <_svfiprintf_r+0x34>
 8004e28:	690b      	ldr	r3, [r1, #16]
 8004e2a:	b96b      	cbnz	r3, 8004e48 <_svfiprintf_r+0x34>
 8004e2c:	2140      	movs	r1, #64	; 0x40
 8004e2e:	f7ff ff3d 	bl	8004cac <_malloc_r>
 8004e32:	6020      	str	r0, [r4, #0]
 8004e34:	6120      	str	r0, [r4, #16]
 8004e36:	b928      	cbnz	r0, 8004e44 <_svfiprintf_r+0x30>
 8004e38:	230c      	movs	r3, #12
 8004e3a:	f8c8 3000 	str.w	r3, [r8]
 8004e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e42:	e0c8      	b.n	8004fd6 <_svfiprintf_r+0x1c2>
 8004e44:	2340      	movs	r3, #64	; 0x40
 8004e46:	6163      	str	r3, [r4, #20]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e52:	2330      	movs	r3, #48	; 0x30
 8004e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e58:	9503      	str	r5, [sp, #12]
 8004e5a:	f04f 0b01 	mov.w	fp, #1
 8004e5e:	4637      	mov	r7, r6
 8004e60:	463d      	mov	r5, r7
 8004e62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e66:	b10b      	cbz	r3, 8004e6c <_svfiprintf_r+0x58>
 8004e68:	2b25      	cmp	r3, #37	; 0x25
 8004e6a:	d13e      	bne.n	8004eea <_svfiprintf_r+0xd6>
 8004e6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e70:	d00b      	beq.n	8004e8a <_svfiprintf_r+0x76>
 8004e72:	4653      	mov	r3, sl
 8004e74:	4632      	mov	r2, r6
 8004e76:	4621      	mov	r1, r4
 8004e78:	4640      	mov	r0, r8
 8004e7a:	f7ff ff71 	bl	8004d60 <__ssputs_r>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f000 80a4 	beq.w	8004fcc <_svfiprintf_r+0x1b8>
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	4453      	add	r3, sl
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	783b      	ldrb	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 809d 	beq.w	8004fcc <_svfiprintf_r+0x1b8>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e9c:	9304      	str	r3, [sp, #16]
 8004e9e:	9307      	str	r3, [sp, #28]
 8004ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea6:	462f      	mov	r7, r5
 8004ea8:	2205      	movs	r2, #5
 8004eaa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004eae:	4850      	ldr	r0, [pc, #320]	; (8004ff0 <_svfiprintf_r+0x1dc>)
 8004eb0:	f7fb f98e 	bl	80001d0 <memchr>
 8004eb4:	9b04      	ldr	r3, [sp, #16]
 8004eb6:	b9d0      	cbnz	r0, 8004eee <_svfiprintf_r+0xda>
 8004eb8:	06d9      	lsls	r1, r3, #27
 8004eba:	bf44      	itt	mi
 8004ebc:	2220      	movmi	r2, #32
 8004ebe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ec2:	071a      	lsls	r2, r3, #28
 8004ec4:	bf44      	itt	mi
 8004ec6:	222b      	movmi	r2, #43	; 0x2b
 8004ec8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ecc:	782a      	ldrb	r2, [r5, #0]
 8004ece:	2a2a      	cmp	r2, #42	; 0x2a
 8004ed0:	d015      	beq.n	8004efe <_svfiprintf_r+0xea>
 8004ed2:	9a07      	ldr	r2, [sp, #28]
 8004ed4:	462f      	mov	r7, r5
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	250a      	movs	r5, #10
 8004eda:	4639      	mov	r1, r7
 8004edc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee0:	3b30      	subs	r3, #48	; 0x30
 8004ee2:	2b09      	cmp	r3, #9
 8004ee4:	d94d      	bls.n	8004f82 <_svfiprintf_r+0x16e>
 8004ee6:	b1b8      	cbz	r0, 8004f18 <_svfiprintf_r+0x104>
 8004ee8:	e00f      	b.n	8004f0a <_svfiprintf_r+0xf6>
 8004eea:	462f      	mov	r7, r5
 8004eec:	e7b8      	b.n	8004e60 <_svfiprintf_r+0x4c>
 8004eee:	4a40      	ldr	r2, [pc, #256]	; (8004ff0 <_svfiprintf_r+0x1dc>)
 8004ef0:	1a80      	subs	r0, r0, r2
 8004ef2:	fa0b f000 	lsl.w	r0, fp, r0
 8004ef6:	4318      	orrs	r0, r3
 8004ef8:	9004      	str	r0, [sp, #16]
 8004efa:	463d      	mov	r5, r7
 8004efc:	e7d3      	b.n	8004ea6 <_svfiprintf_r+0x92>
 8004efe:	9a03      	ldr	r2, [sp, #12]
 8004f00:	1d11      	adds	r1, r2, #4
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	9103      	str	r1, [sp, #12]
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	db01      	blt.n	8004f0e <_svfiprintf_r+0xfa>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e004      	b.n	8004f18 <_svfiprintf_r+0x104>
 8004f0e:	4252      	negs	r2, r2
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	9207      	str	r2, [sp, #28]
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	783b      	ldrb	r3, [r7, #0]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d10c      	bne.n	8004f38 <_svfiprintf_r+0x124>
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d133      	bne.n	8004f8c <_svfiprintf_r+0x178>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	3702      	adds	r7, #2
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	4d2e      	ldr	r5, [pc, #184]	; (8004ff4 <_svfiprintf_r+0x1e0>)
 8004f3a:	7839      	ldrb	r1, [r7, #0]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7fb f946 	bl	80001d0 <memchr>
 8004f44:	b138      	cbz	r0, 8004f56 <_svfiprintf_r+0x142>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	1b40      	subs	r0, r0, r5
 8004f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f4e:	9b04      	ldr	r3, [sp, #16]
 8004f50:	4303      	orrs	r3, r0
 8004f52:	3701      	adds	r7, #1
 8004f54:	9304      	str	r3, [sp, #16]
 8004f56:	7839      	ldrb	r1, [r7, #0]
 8004f58:	4827      	ldr	r0, [pc, #156]	; (8004ff8 <_svfiprintf_r+0x1e4>)
 8004f5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f5e:	2206      	movs	r2, #6
 8004f60:	1c7e      	adds	r6, r7, #1
 8004f62:	f7fb f935 	bl	80001d0 <memchr>
 8004f66:	2800      	cmp	r0, #0
 8004f68:	d038      	beq.n	8004fdc <_svfiprintf_r+0x1c8>
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <_svfiprintf_r+0x1e8>)
 8004f6c:	bb13      	cbnz	r3, 8004fb4 <_svfiprintf_r+0x1a0>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3307      	adds	r3, #7
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	3308      	adds	r3, #8
 8004f78:	9303      	str	r3, [sp, #12]
 8004f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7c:	444b      	add	r3, r9
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	e76d      	b.n	8004e5e <_svfiprintf_r+0x4a>
 8004f82:	fb05 3202 	mla	r2, r5, r2, r3
 8004f86:	2001      	movs	r0, #1
 8004f88:	460f      	mov	r7, r1
 8004f8a:	e7a6      	b.n	8004eda <_svfiprintf_r+0xc6>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	3701      	adds	r7, #1
 8004f90:	9305      	str	r3, [sp, #20]
 8004f92:	4619      	mov	r1, r3
 8004f94:	250a      	movs	r5, #10
 8004f96:	4638      	mov	r0, r7
 8004f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f9c:	3a30      	subs	r2, #48	; 0x30
 8004f9e:	2a09      	cmp	r2, #9
 8004fa0:	d903      	bls.n	8004faa <_svfiprintf_r+0x196>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0c8      	beq.n	8004f38 <_svfiprintf_r+0x124>
 8004fa6:	9105      	str	r1, [sp, #20]
 8004fa8:	e7c6      	b.n	8004f38 <_svfiprintf_r+0x124>
 8004faa:	fb05 2101 	mla	r1, r5, r1, r2
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4607      	mov	r7, r0
 8004fb2:	e7f0      	b.n	8004f96 <_svfiprintf_r+0x182>
 8004fb4:	ab03      	add	r3, sp, #12
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4b11      	ldr	r3, [pc, #68]	; (8005000 <_svfiprintf_r+0x1ec>)
 8004fbc:	a904      	add	r1, sp, #16
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	f3af 8000 	nop.w
 8004fc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fc8:	4681      	mov	r9, r0
 8004fca:	d1d6      	bne.n	8004f7a <_svfiprintf_r+0x166>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af35 	bmi.w	8004e3e <_svfiprintf_r+0x2a>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	b01d      	add	sp, #116	; 0x74
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	ab03      	add	r3, sp, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	4622      	mov	r2, r4
 8004fe2:	4b07      	ldr	r3, [pc, #28]	; (8005000 <_svfiprintf_r+0x1ec>)
 8004fe4:	a904      	add	r1, sp, #16
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	f000 f9c2 	bl	8005370 <_printf_i>
 8004fec:	e7ea      	b.n	8004fc4 <_svfiprintf_r+0x1b0>
 8004fee:	bf00      	nop
 8004ff0:	080058d4 	.word	0x080058d4
 8004ff4:	080058da 	.word	0x080058da
 8004ff8:	080058de 	.word	0x080058de
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d61 	.word	0x08004d61

08005004 <__sfputc_r>:
 8005004:	6893      	ldr	r3, [r2, #8]
 8005006:	3b01      	subs	r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	b410      	push	{r4}
 800500c:	6093      	str	r3, [r2, #8]
 800500e:	da08      	bge.n	8005022 <__sfputc_r+0x1e>
 8005010:	6994      	ldr	r4, [r2, #24]
 8005012:	42a3      	cmp	r3, r4
 8005014:	db01      	blt.n	800501a <__sfputc_r+0x16>
 8005016:	290a      	cmp	r1, #10
 8005018:	d103      	bne.n	8005022 <__sfputc_r+0x1e>
 800501a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800501e:	f7ff bb59 	b.w	80046d4 <__swbuf_r>
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	1c58      	adds	r0, r3, #1
 8005026:	6010      	str	r0, [r2, #0]
 8005028:	7019      	strb	r1, [r3, #0]
 800502a:	4608      	mov	r0, r1
 800502c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005030:	4770      	bx	lr

08005032 <__sfputs_r>:
 8005032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005034:	4606      	mov	r6, r0
 8005036:	460f      	mov	r7, r1
 8005038:	4614      	mov	r4, r2
 800503a:	18d5      	adds	r5, r2, r3
 800503c:	42ac      	cmp	r4, r5
 800503e:	d101      	bne.n	8005044 <__sfputs_r+0x12>
 8005040:	2000      	movs	r0, #0
 8005042:	e007      	b.n	8005054 <__sfputs_r+0x22>
 8005044:	463a      	mov	r2, r7
 8005046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800504a:	4630      	mov	r0, r6
 800504c:	f7ff ffda 	bl	8005004 <__sfputc_r>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d1f3      	bne.n	800503c <__sfputs_r+0xa>
 8005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005058 <_vfiprintf_r>:
 8005058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505c:	460c      	mov	r4, r1
 800505e:	b09d      	sub	sp, #116	; 0x74
 8005060:	4617      	mov	r7, r2
 8005062:	461d      	mov	r5, r3
 8005064:	4606      	mov	r6, r0
 8005066:	b118      	cbz	r0, 8005070 <_vfiprintf_r+0x18>
 8005068:	6983      	ldr	r3, [r0, #24]
 800506a:	b90b      	cbnz	r3, 8005070 <_vfiprintf_r+0x18>
 800506c:	f7ff fce2 	bl	8004a34 <__sinit>
 8005070:	4b7c      	ldr	r3, [pc, #496]	; (8005264 <_vfiprintf_r+0x20c>)
 8005072:	429c      	cmp	r4, r3
 8005074:	d158      	bne.n	8005128 <_vfiprintf_r+0xd0>
 8005076:	6874      	ldr	r4, [r6, #4]
 8005078:	89a3      	ldrh	r3, [r4, #12]
 800507a:	0718      	lsls	r0, r3, #28
 800507c:	d55e      	bpl.n	800513c <_vfiprintf_r+0xe4>
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d05b      	beq.n	800513c <_vfiprintf_r+0xe4>
 8005084:	2300      	movs	r3, #0
 8005086:	9309      	str	r3, [sp, #36]	; 0x24
 8005088:	2320      	movs	r3, #32
 800508a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800508e:	2330      	movs	r3, #48	; 0x30
 8005090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005094:	9503      	str	r5, [sp, #12]
 8005096:	f04f 0b01 	mov.w	fp, #1
 800509a:	46b8      	mov	r8, r7
 800509c:	4645      	mov	r5, r8
 800509e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80050a2:	b10b      	cbz	r3, 80050a8 <_vfiprintf_r+0x50>
 80050a4:	2b25      	cmp	r3, #37	; 0x25
 80050a6:	d154      	bne.n	8005152 <_vfiprintf_r+0xfa>
 80050a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80050ac:	d00b      	beq.n	80050c6 <_vfiprintf_r+0x6e>
 80050ae:	4653      	mov	r3, sl
 80050b0:	463a      	mov	r2, r7
 80050b2:	4621      	mov	r1, r4
 80050b4:	4630      	mov	r0, r6
 80050b6:	f7ff ffbc 	bl	8005032 <__sfputs_r>
 80050ba:	3001      	adds	r0, #1
 80050bc:	f000 80c2 	beq.w	8005244 <_vfiprintf_r+0x1ec>
 80050c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c2:	4453      	add	r3, sl
 80050c4:	9309      	str	r3, [sp, #36]	; 0x24
 80050c6:	f898 3000 	ldrb.w	r3, [r8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80ba 	beq.w	8005244 <_vfiprintf_r+0x1ec>
 80050d0:	2300      	movs	r3, #0
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050da:	9304      	str	r3, [sp, #16]
 80050dc:	9307      	str	r3, [sp, #28]
 80050de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050e2:	931a      	str	r3, [sp, #104]	; 0x68
 80050e4:	46a8      	mov	r8, r5
 80050e6:	2205      	movs	r2, #5
 80050e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050ec:	485e      	ldr	r0, [pc, #376]	; (8005268 <_vfiprintf_r+0x210>)
 80050ee:	f7fb f86f 	bl	80001d0 <memchr>
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	bb78      	cbnz	r0, 8005156 <_vfiprintf_r+0xfe>
 80050f6:	06d9      	lsls	r1, r3, #27
 80050f8:	bf44      	itt	mi
 80050fa:	2220      	movmi	r2, #32
 80050fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005100:	071a      	lsls	r2, r3, #28
 8005102:	bf44      	itt	mi
 8005104:	222b      	movmi	r2, #43	; 0x2b
 8005106:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800510a:	782a      	ldrb	r2, [r5, #0]
 800510c:	2a2a      	cmp	r2, #42	; 0x2a
 800510e:	d02a      	beq.n	8005166 <_vfiprintf_r+0x10e>
 8005110:	9a07      	ldr	r2, [sp, #28]
 8005112:	46a8      	mov	r8, r5
 8005114:	2000      	movs	r0, #0
 8005116:	250a      	movs	r5, #10
 8005118:	4641      	mov	r1, r8
 800511a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800511e:	3b30      	subs	r3, #48	; 0x30
 8005120:	2b09      	cmp	r3, #9
 8005122:	d969      	bls.n	80051f8 <_vfiprintf_r+0x1a0>
 8005124:	b360      	cbz	r0, 8005180 <_vfiprintf_r+0x128>
 8005126:	e024      	b.n	8005172 <_vfiprintf_r+0x11a>
 8005128:	4b50      	ldr	r3, [pc, #320]	; (800526c <_vfiprintf_r+0x214>)
 800512a:	429c      	cmp	r4, r3
 800512c:	d101      	bne.n	8005132 <_vfiprintf_r+0xda>
 800512e:	68b4      	ldr	r4, [r6, #8]
 8005130:	e7a2      	b.n	8005078 <_vfiprintf_r+0x20>
 8005132:	4b4f      	ldr	r3, [pc, #316]	; (8005270 <_vfiprintf_r+0x218>)
 8005134:	429c      	cmp	r4, r3
 8005136:	bf08      	it	eq
 8005138:	68f4      	ldreq	r4, [r6, #12]
 800513a:	e79d      	b.n	8005078 <_vfiprintf_r+0x20>
 800513c:	4621      	mov	r1, r4
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff fb1a 	bl	8004778 <__swsetup_r>
 8005144:	2800      	cmp	r0, #0
 8005146:	d09d      	beq.n	8005084 <_vfiprintf_r+0x2c>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b01d      	add	sp, #116	; 0x74
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	46a8      	mov	r8, r5
 8005154:	e7a2      	b.n	800509c <_vfiprintf_r+0x44>
 8005156:	4a44      	ldr	r2, [pc, #272]	; (8005268 <_vfiprintf_r+0x210>)
 8005158:	1a80      	subs	r0, r0, r2
 800515a:	fa0b f000 	lsl.w	r0, fp, r0
 800515e:	4318      	orrs	r0, r3
 8005160:	9004      	str	r0, [sp, #16]
 8005162:	4645      	mov	r5, r8
 8005164:	e7be      	b.n	80050e4 <_vfiprintf_r+0x8c>
 8005166:	9a03      	ldr	r2, [sp, #12]
 8005168:	1d11      	adds	r1, r2, #4
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	9103      	str	r1, [sp, #12]
 800516e:	2a00      	cmp	r2, #0
 8005170:	db01      	blt.n	8005176 <_vfiprintf_r+0x11e>
 8005172:	9207      	str	r2, [sp, #28]
 8005174:	e004      	b.n	8005180 <_vfiprintf_r+0x128>
 8005176:	4252      	negs	r2, r2
 8005178:	f043 0302 	orr.w	r3, r3, #2
 800517c:	9207      	str	r2, [sp, #28]
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	f898 3000 	ldrb.w	r3, [r8]
 8005184:	2b2e      	cmp	r3, #46	; 0x2e
 8005186:	d10e      	bne.n	80051a6 <_vfiprintf_r+0x14e>
 8005188:	f898 3001 	ldrb.w	r3, [r8, #1]
 800518c:	2b2a      	cmp	r3, #42	; 0x2a
 800518e:	d138      	bne.n	8005202 <_vfiprintf_r+0x1aa>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	1d1a      	adds	r2, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	9203      	str	r2, [sp, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfb8      	it	lt
 800519c:	f04f 33ff 	movlt.w	r3, #4294967295
 80051a0:	f108 0802 	add.w	r8, r8, #2
 80051a4:	9305      	str	r3, [sp, #20]
 80051a6:	4d33      	ldr	r5, [pc, #204]	; (8005274 <_vfiprintf_r+0x21c>)
 80051a8:	f898 1000 	ldrb.w	r1, [r8]
 80051ac:	2203      	movs	r2, #3
 80051ae:	4628      	mov	r0, r5
 80051b0:	f7fb f80e 	bl	80001d0 <memchr>
 80051b4:	b140      	cbz	r0, 80051c8 <_vfiprintf_r+0x170>
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	1b40      	subs	r0, r0, r5
 80051ba:	fa03 f000 	lsl.w	r0, r3, r0
 80051be:	9b04      	ldr	r3, [sp, #16]
 80051c0:	4303      	orrs	r3, r0
 80051c2:	f108 0801 	add.w	r8, r8, #1
 80051c6:	9304      	str	r3, [sp, #16]
 80051c8:	f898 1000 	ldrb.w	r1, [r8]
 80051cc:	482a      	ldr	r0, [pc, #168]	; (8005278 <_vfiprintf_r+0x220>)
 80051ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051d2:	2206      	movs	r2, #6
 80051d4:	f108 0701 	add.w	r7, r8, #1
 80051d8:	f7fa fffa 	bl	80001d0 <memchr>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d037      	beq.n	8005250 <_vfiprintf_r+0x1f8>
 80051e0:	4b26      	ldr	r3, [pc, #152]	; (800527c <_vfiprintf_r+0x224>)
 80051e2:	bb1b      	cbnz	r3, 800522c <_vfiprintf_r+0x1d4>
 80051e4:	9b03      	ldr	r3, [sp, #12]
 80051e6:	3307      	adds	r3, #7
 80051e8:	f023 0307 	bic.w	r3, r3, #7
 80051ec:	3308      	adds	r3, #8
 80051ee:	9303      	str	r3, [sp, #12]
 80051f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f2:	444b      	add	r3, r9
 80051f4:	9309      	str	r3, [sp, #36]	; 0x24
 80051f6:	e750      	b.n	800509a <_vfiprintf_r+0x42>
 80051f8:	fb05 3202 	mla	r2, r5, r2, r3
 80051fc:	2001      	movs	r0, #1
 80051fe:	4688      	mov	r8, r1
 8005200:	e78a      	b.n	8005118 <_vfiprintf_r+0xc0>
 8005202:	2300      	movs	r3, #0
 8005204:	f108 0801 	add.w	r8, r8, #1
 8005208:	9305      	str	r3, [sp, #20]
 800520a:	4619      	mov	r1, r3
 800520c:	250a      	movs	r5, #10
 800520e:	4640      	mov	r0, r8
 8005210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005214:	3a30      	subs	r2, #48	; 0x30
 8005216:	2a09      	cmp	r2, #9
 8005218:	d903      	bls.n	8005222 <_vfiprintf_r+0x1ca>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0c3      	beq.n	80051a6 <_vfiprintf_r+0x14e>
 800521e:	9105      	str	r1, [sp, #20]
 8005220:	e7c1      	b.n	80051a6 <_vfiprintf_r+0x14e>
 8005222:	fb05 2101 	mla	r1, r5, r1, r2
 8005226:	2301      	movs	r3, #1
 8005228:	4680      	mov	r8, r0
 800522a:	e7f0      	b.n	800520e <_vfiprintf_r+0x1b6>
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	4622      	mov	r2, r4
 8005232:	4b13      	ldr	r3, [pc, #76]	; (8005280 <_vfiprintf_r+0x228>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4630      	mov	r0, r6
 8005238:	f3af 8000 	nop.w
 800523c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005240:	4681      	mov	r9, r0
 8005242:	d1d5      	bne.n	80051f0 <_vfiprintf_r+0x198>
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	065b      	lsls	r3, r3, #25
 8005248:	f53f af7e 	bmi.w	8005148 <_vfiprintf_r+0xf0>
 800524c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800524e:	e77d      	b.n	800514c <_vfiprintf_r+0xf4>
 8005250:	ab03      	add	r3, sp, #12
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4622      	mov	r2, r4
 8005256:	4b0a      	ldr	r3, [pc, #40]	; (8005280 <_vfiprintf_r+0x228>)
 8005258:	a904      	add	r1, sp, #16
 800525a:	4630      	mov	r0, r6
 800525c:	f000 f888 	bl	8005370 <_printf_i>
 8005260:	e7ec      	b.n	800523c <_vfiprintf_r+0x1e4>
 8005262:	bf00      	nop
 8005264:	08005894 	.word	0x08005894
 8005268:	080058d4 	.word	0x080058d4
 800526c:	080058b4 	.word	0x080058b4
 8005270:	08005874 	.word	0x08005874
 8005274:	080058da 	.word	0x080058da
 8005278:	080058de 	.word	0x080058de
 800527c:	00000000 	.word	0x00000000
 8005280:	08005033 	.word	0x08005033

08005284 <_printf_common>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	4691      	mov	r9, r2
 800528a:	461f      	mov	r7, r3
 800528c:	688a      	ldr	r2, [r1, #8]
 800528e:	690b      	ldr	r3, [r1, #16]
 8005290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005294:	4293      	cmp	r3, r2
 8005296:	bfb8      	it	lt
 8005298:	4613      	movlt	r3, r2
 800529a:	f8c9 3000 	str.w	r3, [r9]
 800529e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052a2:	4606      	mov	r6, r0
 80052a4:	460c      	mov	r4, r1
 80052a6:	b112      	cbz	r2, 80052ae <_printf_common+0x2a>
 80052a8:	3301      	adds	r3, #1
 80052aa:	f8c9 3000 	str.w	r3, [r9]
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	0699      	lsls	r1, r3, #26
 80052b2:	bf42      	ittt	mi
 80052b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80052b8:	3302      	addmi	r3, #2
 80052ba:	f8c9 3000 	strmi.w	r3, [r9]
 80052be:	6825      	ldr	r5, [r4, #0]
 80052c0:	f015 0506 	ands.w	r5, r5, #6
 80052c4:	d107      	bne.n	80052d6 <_printf_common+0x52>
 80052c6:	f104 0a19 	add.w	sl, r4, #25
 80052ca:	68e3      	ldr	r3, [r4, #12]
 80052cc:	f8d9 2000 	ldr.w	r2, [r9]
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	42ab      	cmp	r3, r5
 80052d4:	dc28      	bgt.n	8005328 <_printf_common+0xa4>
 80052d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	3300      	adds	r3, #0
 80052de:	bf18      	it	ne
 80052e0:	2301      	movne	r3, #1
 80052e2:	0692      	lsls	r2, r2, #26
 80052e4:	d42d      	bmi.n	8005342 <_printf_common+0xbe>
 80052e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ea:	4639      	mov	r1, r7
 80052ec:	4630      	mov	r0, r6
 80052ee:	47c0      	blx	r8
 80052f0:	3001      	adds	r0, #1
 80052f2:	d020      	beq.n	8005336 <_printf_common+0xb2>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	68e5      	ldr	r5, [r4, #12]
 80052f8:	f8d9 2000 	ldr.w	r2, [r9]
 80052fc:	f003 0306 	and.w	r3, r3, #6
 8005300:	2b04      	cmp	r3, #4
 8005302:	bf08      	it	eq
 8005304:	1aad      	subeq	r5, r5, r2
 8005306:	68a3      	ldr	r3, [r4, #8]
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	bf0c      	ite	eq
 800530c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005310:	2500      	movne	r5, #0
 8005312:	4293      	cmp	r3, r2
 8005314:	bfc4      	itt	gt
 8005316:	1a9b      	subgt	r3, r3, r2
 8005318:	18ed      	addgt	r5, r5, r3
 800531a:	f04f 0900 	mov.w	r9, #0
 800531e:	341a      	adds	r4, #26
 8005320:	454d      	cmp	r5, r9
 8005322:	d11a      	bne.n	800535a <_printf_common+0xd6>
 8005324:	2000      	movs	r0, #0
 8005326:	e008      	b.n	800533a <_printf_common+0xb6>
 8005328:	2301      	movs	r3, #1
 800532a:	4652      	mov	r2, sl
 800532c:	4639      	mov	r1, r7
 800532e:	4630      	mov	r0, r6
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d103      	bne.n	800533e <_printf_common+0xba>
 8005336:	f04f 30ff 	mov.w	r0, #4294967295
 800533a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800533e:	3501      	adds	r5, #1
 8005340:	e7c3      	b.n	80052ca <_printf_common+0x46>
 8005342:	18e1      	adds	r1, r4, r3
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	2030      	movs	r0, #48	; 0x30
 8005348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800534c:	4422      	add	r2, r4
 800534e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005356:	3302      	adds	r3, #2
 8005358:	e7c5      	b.n	80052e6 <_printf_common+0x62>
 800535a:	2301      	movs	r3, #1
 800535c:	4622      	mov	r2, r4
 800535e:	4639      	mov	r1, r7
 8005360:	4630      	mov	r0, r6
 8005362:	47c0      	blx	r8
 8005364:	3001      	adds	r0, #1
 8005366:	d0e6      	beq.n	8005336 <_printf_common+0xb2>
 8005368:	f109 0901 	add.w	r9, r9, #1
 800536c:	e7d8      	b.n	8005320 <_printf_common+0x9c>
	...

08005370 <_printf_i>:
 8005370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005378:	460c      	mov	r4, r1
 800537a:	7e09      	ldrb	r1, [r1, #24]
 800537c:	b085      	sub	sp, #20
 800537e:	296e      	cmp	r1, #110	; 0x6e
 8005380:	4617      	mov	r7, r2
 8005382:	4606      	mov	r6, r0
 8005384:	4698      	mov	r8, r3
 8005386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005388:	f000 80b3 	beq.w	80054f2 <_printf_i+0x182>
 800538c:	d822      	bhi.n	80053d4 <_printf_i+0x64>
 800538e:	2963      	cmp	r1, #99	; 0x63
 8005390:	d036      	beq.n	8005400 <_printf_i+0x90>
 8005392:	d80a      	bhi.n	80053aa <_printf_i+0x3a>
 8005394:	2900      	cmp	r1, #0
 8005396:	f000 80b9 	beq.w	800550c <_printf_i+0x19c>
 800539a:	2958      	cmp	r1, #88	; 0x58
 800539c:	f000 8083 	beq.w	80054a6 <_printf_i+0x136>
 80053a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80053a8:	e032      	b.n	8005410 <_printf_i+0xa0>
 80053aa:	2964      	cmp	r1, #100	; 0x64
 80053ac:	d001      	beq.n	80053b2 <_printf_i+0x42>
 80053ae:	2969      	cmp	r1, #105	; 0x69
 80053b0:	d1f6      	bne.n	80053a0 <_printf_i+0x30>
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	0605      	lsls	r5, r0, #24
 80053b8:	f103 0104 	add.w	r1, r3, #4
 80053bc:	d52a      	bpl.n	8005414 <_printf_i+0xa4>
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6011      	str	r1, [r2, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da03      	bge.n	80053ce <_printf_i+0x5e>
 80053c6:	222d      	movs	r2, #45	; 0x2d
 80053c8:	425b      	negs	r3, r3
 80053ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80053ce:	486f      	ldr	r0, [pc, #444]	; (800558c <_printf_i+0x21c>)
 80053d0:	220a      	movs	r2, #10
 80053d2:	e039      	b.n	8005448 <_printf_i+0xd8>
 80053d4:	2973      	cmp	r1, #115	; 0x73
 80053d6:	f000 809d 	beq.w	8005514 <_printf_i+0x1a4>
 80053da:	d808      	bhi.n	80053ee <_printf_i+0x7e>
 80053dc:	296f      	cmp	r1, #111	; 0x6f
 80053de:	d020      	beq.n	8005422 <_printf_i+0xb2>
 80053e0:	2970      	cmp	r1, #112	; 0x70
 80053e2:	d1dd      	bne.n	80053a0 <_printf_i+0x30>
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f043 0320 	orr.w	r3, r3, #32
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	e003      	b.n	80053f6 <_printf_i+0x86>
 80053ee:	2975      	cmp	r1, #117	; 0x75
 80053f0:	d017      	beq.n	8005422 <_printf_i+0xb2>
 80053f2:	2978      	cmp	r1, #120	; 0x78
 80053f4:	d1d4      	bne.n	80053a0 <_printf_i+0x30>
 80053f6:	2378      	movs	r3, #120	; 0x78
 80053f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053fc:	4864      	ldr	r0, [pc, #400]	; (8005590 <_printf_i+0x220>)
 80053fe:	e055      	b.n	80054ac <_printf_i+0x13c>
 8005400:	6813      	ldr	r3, [r2, #0]
 8005402:	1d19      	adds	r1, r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6011      	str	r1, [r2, #0]
 8005408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800540c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005410:	2301      	movs	r3, #1
 8005412:	e08c      	b.n	800552e <_printf_i+0x1be>
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6011      	str	r1, [r2, #0]
 8005418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800541c:	bf18      	it	ne
 800541e:	b21b      	sxthne	r3, r3
 8005420:	e7cf      	b.n	80053c2 <_printf_i+0x52>
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	6825      	ldr	r5, [r4, #0]
 8005426:	1d18      	adds	r0, r3, #4
 8005428:	6010      	str	r0, [r2, #0]
 800542a:	0628      	lsls	r0, r5, #24
 800542c:	d501      	bpl.n	8005432 <_printf_i+0xc2>
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	e002      	b.n	8005438 <_printf_i+0xc8>
 8005432:	0668      	lsls	r0, r5, #25
 8005434:	d5fb      	bpl.n	800542e <_printf_i+0xbe>
 8005436:	881b      	ldrh	r3, [r3, #0]
 8005438:	4854      	ldr	r0, [pc, #336]	; (800558c <_printf_i+0x21c>)
 800543a:	296f      	cmp	r1, #111	; 0x6f
 800543c:	bf14      	ite	ne
 800543e:	220a      	movne	r2, #10
 8005440:	2208      	moveq	r2, #8
 8005442:	2100      	movs	r1, #0
 8005444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005448:	6865      	ldr	r5, [r4, #4]
 800544a:	60a5      	str	r5, [r4, #8]
 800544c:	2d00      	cmp	r5, #0
 800544e:	f2c0 8095 	blt.w	800557c <_printf_i+0x20c>
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	f021 0104 	bic.w	r1, r1, #4
 8005458:	6021      	str	r1, [r4, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d13d      	bne.n	80054da <_printf_i+0x16a>
 800545e:	2d00      	cmp	r5, #0
 8005460:	f040 808e 	bne.w	8005580 <_printf_i+0x210>
 8005464:	4665      	mov	r5, ip
 8005466:	2a08      	cmp	r2, #8
 8005468:	d10b      	bne.n	8005482 <_printf_i+0x112>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	07db      	lsls	r3, r3, #31
 800546e:	d508      	bpl.n	8005482 <_printf_i+0x112>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	429a      	cmp	r2, r3
 8005476:	bfde      	ittt	le
 8005478:	2330      	movle	r3, #48	; 0x30
 800547a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800547e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005482:	ebac 0305 	sub.w	r3, ip, r5
 8005486:	6123      	str	r3, [r4, #16]
 8005488:	f8cd 8000 	str.w	r8, [sp]
 800548c:	463b      	mov	r3, r7
 800548e:	aa03      	add	r2, sp, #12
 8005490:	4621      	mov	r1, r4
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff fef6 	bl	8005284 <_printf_common>
 8005498:	3001      	adds	r0, #1
 800549a:	d14d      	bne.n	8005538 <_printf_i+0x1c8>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	b005      	add	sp, #20
 80054a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a6:	4839      	ldr	r0, [pc, #228]	; (800558c <_printf_i+0x21c>)
 80054a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80054ac:	6813      	ldr	r3, [r2, #0]
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	1d1d      	adds	r5, r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6015      	str	r5, [r2, #0]
 80054b6:	060a      	lsls	r2, r1, #24
 80054b8:	d50b      	bpl.n	80054d2 <_printf_i+0x162>
 80054ba:	07ca      	lsls	r2, r1, #31
 80054bc:	bf44      	itt	mi
 80054be:	f041 0120 	orrmi.w	r1, r1, #32
 80054c2:	6021      	strmi	r1, [r4, #0]
 80054c4:	b91b      	cbnz	r3, 80054ce <_printf_i+0x15e>
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	f022 0220 	bic.w	r2, r2, #32
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	2210      	movs	r2, #16
 80054d0:	e7b7      	b.n	8005442 <_printf_i+0xd2>
 80054d2:	064d      	lsls	r5, r1, #25
 80054d4:	bf48      	it	mi
 80054d6:	b29b      	uxthmi	r3, r3
 80054d8:	e7ef      	b.n	80054ba <_printf_i+0x14a>
 80054da:	4665      	mov	r5, ip
 80054dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80054e0:	fb02 3311 	mls	r3, r2, r1, r3
 80054e4:	5cc3      	ldrb	r3, [r0, r3]
 80054e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054ea:	460b      	mov	r3, r1
 80054ec:	2900      	cmp	r1, #0
 80054ee:	d1f5      	bne.n	80054dc <_printf_i+0x16c>
 80054f0:	e7b9      	b.n	8005466 <_printf_i+0xf6>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	6961      	ldr	r1, [r4, #20]
 80054f8:	1d18      	adds	r0, r3, #4
 80054fa:	6010      	str	r0, [r2, #0]
 80054fc:	0628      	lsls	r0, r5, #24
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	d501      	bpl.n	8005506 <_printf_i+0x196>
 8005502:	6019      	str	r1, [r3, #0]
 8005504:	e002      	b.n	800550c <_printf_i+0x19c>
 8005506:	066a      	lsls	r2, r5, #25
 8005508:	d5fb      	bpl.n	8005502 <_printf_i+0x192>
 800550a:	8019      	strh	r1, [r3, #0]
 800550c:	2300      	movs	r3, #0
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	4665      	mov	r5, ip
 8005512:	e7b9      	b.n	8005488 <_printf_i+0x118>
 8005514:	6813      	ldr	r3, [r2, #0]
 8005516:	1d19      	adds	r1, r3, #4
 8005518:	6011      	str	r1, [r2, #0]
 800551a:	681d      	ldr	r5, [r3, #0]
 800551c:	6862      	ldr	r2, [r4, #4]
 800551e:	2100      	movs	r1, #0
 8005520:	4628      	mov	r0, r5
 8005522:	f7fa fe55 	bl	80001d0 <memchr>
 8005526:	b108      	cbz	r0, 800552c <_printf_i+0x1bc>
 8005528:	1b40      	subs	r0, r0, r5
 800552a:	6060      	str	r0, [r4, #4]
 800552c:	6863      	ldr	r3, [r4, #4]
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	2300      	movs	r3, #0
 8005532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005536:	e7a7      	b.n	8005488 <_printf_i+0x118>
 8005538:	6923      	ldr	r3, [r4, #16]
 800553a:	462a      	mov	r2, r5
 800553c:	4639      	mov	r1, r7
 800553e:	4630      	mov	r0, r6
 8005540:	47c0      	blx	r8
 8005542:	3001      	adds	r0, #1
 8005544:	d0aa      	beq.n	800549c <_printf_i+0x12c>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	079b      	lsls	r3, r3, #30
 800554a:	d413      	bmi.n	8005574 <_printf_i+0x204>
 800554c:	68e0      	ldr	r0, [r4, #12]
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	4298      	cmp	r0, r3
 8005552:	bfb8      	it	lt
 8005554:	4618      	movlt	r0, r3
 8005556:	e7a3      	b.n	80054a0 <_printf_i+0x130>
 8005558:	2301      	movs	r3, #1
 800555a:	464a      	mov	r2, r9
 800555c:	4639      	mov	r1, r7
 800555e:	4630      	mov	r0, r6
 8005560:	47c0      	blx	r8
 8005562:	3001      	adds	r0, #1
 8005564:	d09a      	beq.n	800549c <_printf_i+0x12c>
 8005566:	3501      	adds	r5, #1
 8005568:	68e3      	ldr	r3, [r4, #12]
 800556a:	9a03      	ldr	r2, [sp, #12]
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	42ab      	cmp	r3, r5
 8005570:	dcf2      	bgt.n	8005558 <_printf_i+0x1e8>
 8005572:	e7eb      	b.n	800554c <_printf_i+0x1dc>
 8005574:	2500      	movs	r5, #0
 8005576:	f104 0919 	add.w	r9, r4, #25
 800557a:	e7f5      	b.n	8005568 <_printf_i+0x1f8>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1ac      	bne.n	80054da <_printf_i+0x16a>
 8005580:	7803      	ldrb	r3, [r0, #0]
 8005582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800558a:	e76c      	b.n	8005466 <_printf_i+0xf6>
 800558c:	080058e5 	.word	0x080058e5
 8005590:	080058f6 	.word	0x080058f6

08005594 <_sbrk_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4c06      	ldr	r4, [pc, #24]	; (80055b0 <_sbrk_r+0x1c>)
 8005598:	2300      	movs	r3, #0
 800559a:	4605      	mov	r5, r0
 800559c:	4608      	mov	r0, r1
 800559e:	6023      	str	r3, [r4, #0]
 80055a0:	f7fb fd4e 	bl	8001040 <_sbrk>
 80055a4:	1c43      	adds	r3, r0, #1
 80055a6:	d102      	bne.n	80055ae <_sbrk_r+0x1a>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	b103      	cbz	r3, 80055ae <_sbrk_r+0x1a>
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	bd38      	pop	{r3, r4, r5, pc}
 80055b0:	20000180 	.word	0x20000180

080055b4 <__sread>:
 80055b4:	b510      	push	{r4, lr}
 80055b6:	460c      	mov	r4, r1
 80055b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055bc:	f000 f8e0 	bl	8005780 <_read_r>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	bfab      	itete	ge
 80055c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055c6:	89a3      	ldrhlt	r3, [r4, #12]
 80055c8:	181b      	addge	r3, r3, r0
 80055ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ce:	bfac      	ite	ge
 80055d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80055d2:	81a3      	strhlt	r3, [r4, #12]
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <__swrite>:
 80055d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055da:	461f      	mov	r7, r3
 80055dc:	898b      	ldrh	r3, [r1, #12]
 80055de:	05db      	lsls	r3, r3, #23
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4616      	mov	r6, r2
 80055e6:	d505      	bpl.n	80055f4 <__swrite+0x1e>
 80055e8:	2302      	movs	r3, #2
 80055ea:	2200      	movs	r2, #0
 80055ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f0:	f000 f868 	bl	80056c4 <_lseek_r>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	4632      	mov	r2, r6
 8005602:	463b      	mov	r3, r7
 8005604:	4628      	mov	r0, r5
 8005606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800560a:	f000 b817 	b.w	800563c <_write_r>

0800560e <__sseek>:
 800560e:	b510      	push	{r4, lr}
 8005610:	460c      	mov	r4, r1
 8005612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005616:	f000 f855 	bl	80056c4 <_lseek_r>
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	89a3      	ldrh	r3, [r4, #12]
 800561e:	bf15      	itete	ne
 8005620:	6560      	strne	r0, [r4, #84]	; 0x54
 8005622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800562a:	81a3      	strheq	r3, [r4, #12]
 800562c:	bf18      	it	ne
 800562e:	81a3      	strhne	r3, [r4, #12]
 8005630:	bd10      	pop	{r4, pc}

08005632 <__sclose>:
 8005632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005636:	f000 b813 	b.w	8005660 <_close_r>
	...

0800563c <_write_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4c07      	ldr	r4, [pc, #28]	; (800565c <_write_r+0x20>)
 8005640:	4605      	mov	r5, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	6022      	str	r2, [r4, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fb fca2 	bl	8000f94 <_write>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_write_r+0x1e>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	b103      	cbz	r3, 800565a <_write_r+0x1e>
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000180 	.word	0x20000180

08005660 <_close_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4c06      	ldr	r4, [pc, #24]	; (800567c <_close_r+0x1c>)
 8005664:	2300      	movs	r3, #0
 8005666:	4605      	mov	r5, r0
 8005668:	4608      	mov	r0, r1
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	f7fb fcb4 	bl	8000fd8 <_close>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_close_r+0x1a>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	b103      	cbz	r3, 800567a <_close_r+0x1a>
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	20000180 	.word	0x20000180

08005680 <_fstat_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4c07      	ldr	r4, [pc, #28]	; (80056a0 <_fstat_r+0x20>)
 8005684:	2300      	movs	r3, #0
 8005686:	4605      	mov	r5, r0
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	6023      	str	r3, [r4, #0]
 800568e:	f7fb fcaf 	bl	8000ff0 <_fstat>
 8005692:	1c43      	adds	r3, r0, #1
 8005694:	d102      	bne.n	800569c <_fstat_r+0x1c>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	b103      	cbz	r3, 800569c <_fstat_r+0x1c>
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	bd38      	pop	{r3, r4, r5, pc}
 800569e:	bf00      	nop
 80056a0:	20000180 	.word	0x20000180

080056a4 <_isatty_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4c06      	ldr	r4, [pc, #24]	; (80056c0 <_isatty_r+0x1c>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4605      	mov	r5, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	6023      	str	r3, [r4, #0]
 80056b0:	f7fb fcae 	bl	8001010 <_isatty>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_isatty_r+0x1a>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	b103      	cbz	r3, 80056be <_isatty_r+0x1a>
 80056bc:	602b      	str	r3, [r5, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	20000180 	.word	0x20000180

080056c4 <_lseek_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	4c07      	ldr	r4, [pc, #28]	; (80056e4 <_lseek_r+0x20>)
 80056c8:	4605      	mov	r5, r0
 80056ca:	4608      	mov	r0, r1
 80056cc:	4611      	mov	r1, r2
 80056ce:	2200      	movs	r2, #0
 80056d0:	6022      	str	r2, [r4, #0]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f7fb fca7 	bl	8001026 <_lseek>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_lseek_r+0x1e>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_lseek_r+0x1e>
 80056e0:	602b      	str	r3, [r5, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20000180 	.word	0x20000180

080056e8 <memcpy>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	1e43      	subs	r3, r0, #1
 80056ec:	440a      	add	r2, r1
 80056ee:	4291      	cmp	r1, r2
 80056f0:	d100      	bne.n	80056f4 <memcpy+0xc>
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056fc:	e7f7      	b.n	80056ee <memcpy+0x6>

080056fe <memmove>:
 80056fe:	4288      	cmp	r0, r1
 8005700:	b510      	push	{r4, lr}
 8005702:	eb01 0302 	add.w	r3, r1, r2
 8005706:	d807      	bhi.n	8005718 <memmove+0x1a>
 8005708:	1e42      	subs	r2, r0, #1
 800570a:	4299      	cmp	r1, r3
 800570c:	d00a      	beq.n	8005724 <memmove+0x26>
 800570e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005712:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005716:	e7f8      	b.n	800570a <memmove+0xc>
 8005718:	4283      	cmp	r3, r0
 800571a:	d9f5      	bls.n	8005708 <memmove+0xa>
 800571c:	1881      	adds	r1, r0, r2
 800571e:	1ad2      	subs	r2, r2, r3
 8005720:	42d3      	cmn	r3, r2
 8005722:	d100      	bne.n	8005726 <memmove+0x28>
 8005724:	bd10      	pop	{r4, pc}
 8005726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800572a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800572e:	e7f7      	b.n	8005720 <memmove+0x22>

08005730 <__malloc_lock>:
 8005730:	4770      	bx	lr

08005732 <__malloc_unlock>:
 8005732:	4770      	bx	lr

08005734 <_realloc_r>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	4607      	mov	r7, r0
 8005738:	4614      	mov	r4, r2
 800573a:	460e      	mov	r6, r1
 800573c:	b921      	cbnz	r1, 8005748 <_realloc_r+0x14>
 800573e:	4611      	mov	r1, r2
 8005740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005744:	f7ff bab2 	b.w	8004cac <_malloc_r>
 8005748:	b922      	cbnz	r2, 8005754 <_realloc_r+0x20>
 800574a:	f7ff fa61 	bl	8004c10 <_free_r>
 800574e:	4625      	mov	r5, r4
 8005750:	4628      	mov	r0, r5
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	f000 f826 	bl	80057a4 <_malloc_usable_size_r>
 8005758:	42a0      	cmp	r0, r4
 800575a:	d20f      	bcs.n	800577c <_realloc_r+0x48>
 800575c:	4621      	mov	r1, r4
 800575e:	4638      	mov	r0, r7
 8005760:	f7ff faa4 	bl	8004cac <_malloc_r>
 8005764:	4605      	mov	r5, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d0f2      	beq.n	8005750 <_realloc_r+0x1c>
 800576a:	4631      	mov	r1, r6
 800576c:	4622      	mov	r2, r4
 800576e:	f7ff ffbb 	bl	80056e8 <memcpy>
 8005772:	4631      	mov	r1, r6
 8005774:	4638      	mov	r0, r7
 8005776:	f7ff fa4b 	bl	8004c10 <_free_r>
 800577a:	e7e9      	b.n	8005750 <_realloc_r+0x1c>
 800577c:	4635      	mov	r5, r6
 800577e:	e7e7      	b.n	8005750 <_realloc_r+0x1c>

08005780 <_read_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4c07      	ldr	r4, [pc, #28]	; (80057a0 <_read_r+0x20>)
 8005784:	4605      	mov	r5, r0
 8005786:	4608      	mov	r0, r1
 8005788:	4611      	mov	r1, r2
 800578a:	2200      	movs	r2, #0
 800578c:	6022      	str	r2, [r4, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	f7fb fbe2 	bl	8000f58 <_read>
 8005794:	1c43      	adds	r3, r0, #1
 8005796:	d102      	bne.n	800579e <_read_r+0x1e>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	b103      	cbz	r3, 800579e <_read_r+0x1e>
 800579c:	602b      	str	r3, [r5, #0]
 800579e:	bd38      	pop	{r3, r4, r5, pc}
 80057a0:	20000180 	.word	0x20000180

080057a4 <_malloc_usable_size_r>:
 80057a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a8:	1f18      	subs	r0, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfbc      	itt	lt
 80057ae:	580b      	ldrlt	r3, [r1, r0]
 80057b0:	18c0      	addlt	r0, r0, r3
 80057b2:	4770      	bx	lr

080057b4 <_init>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	bf00      	nop
 80057b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ba:	bc08      	pop	{r3}
 80057bc:	469e      	mov	lr, r3
 80057be:	4770      	bx	lr

080057c0 <_fini>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	bf00      	nop
 80057c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057c6:	bc08      	pop	{r3}
 80057c8:	469e      	mov	lr, r3
 80057ca:	4770      	bx	lr
