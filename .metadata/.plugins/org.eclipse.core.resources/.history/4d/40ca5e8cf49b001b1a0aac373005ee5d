/* USER CODE BEGIN Header */
/**
******************************************************************************
  *  PROJECT       : Lab Assignment 5
  *  PROGRAMMER    : Karthik kaushik, Shivam Vyas
  * FIRST VERSION  : 2021-04-02
  *  DESCRIPTION   : Function of this program is to simulate an GPS system

  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include <stdlib.h>
#include <string.h>
#include "debounce.h"
#include "stdbool.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	int state = 1;
	char output [16]="";
	char * stringData = (char*)calloc(100, sizeof(char));
	char* delimiter = (char*)calloc(10, sizeof(char));
	char* UTCTime = (char*)calloc(10, sizeof(char));
	char* latitude = (char*)calloc(10, sizeof(char));
	char* longitude = (char*)calloc(10, sizeof(char));
	char* altitude =(char*)calloc(10, sizeof(char));

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  int8_t mode = 1;
  deBounceInit(GPIO_PIN_3, 'A', mode);
  deBounceInit(GPIO_PIN_4, 'A', mode);
  deBounceInit(GPIO_PIN_7, 'A', mode);
  deBounceInit(GPIO_PIN_8, 'A', mode);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HD44780_Init();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state){
	  	  case 1:
			printf("%s\r\n", "Retrieving data");
			printf("%s\r\n", "Input Data:");
	  		HD44780_ClrScr();
			HD44780_PutStr("Retrieving data");
			scanf("%s",stringData);
			state = 2;
			break;

	  	  case 2:
	  		HAL_Delay(250);
			printf("%s\r\n", "Processing data");
			HD44780_ClrScr();
			HD44780_PutStr("Processing data");

			delimiter = strtok(stringData, ",");
			UTCTime = strtok(NULL, ",");
			latitude = strtok(NULL, ",");
			delimiter = strtok(NULL, ",");
			longitude = strtok(NULL, ",");
			altitude = strtok(NULL, ",");
			for (int var = 0; var < 4; ++var)
				delimiter = strtok(NULL, ",");

			HAL_Delay(5000);
			state = 3;
			break;

	  	  case 3:
			HD44780_ClrScr();
			HD44780_PutStr("1)Time, 2)Latitu");
			HD44780_GotoXY(0, 1);
			HD44780_PutStr("3)Longi 4)Altitu");
			printf("%s\r\n", "1:Time 2:Latitude 3.:Longitude 4.:Altitude");
	  		while (deBounceReadPin(GPIO_PIN_3, 'A', mode)
					&&deBounceReadPin(GPIO_PIN_4, 'A', mode)
					&&deBounceReadPin(GPIO_PIN_7, 'A', mode)
					&&deBounceReadPin(GPIO_PIN_8, 'A', mode))
				HAL_Delay(20);
			if(deBounceReadPin(GPIO_PIN_3, 'A', mode) == 0)
				state = 4;
			else if (deBounceReadPin(GPIO_PIN_4, 'A', mode) == 0)
				state = 5;
			else if (deBounceReadPin(GPIO_PIN_7, 'A', mode) == 0)
				state = 6;
			else if (deBounceReadPin(GPIO_PIN_8, 'A', mode) == 0)
				state = 7;
			break;

	  	  case 4:
			  float timeVar = atof(UTCTime);
			  float seconds = fmod(timeVar,100);
			  int minutes = ((int)timeVar / 100) % 100;
			  int hours = ((int)timeVar / 100) / 100;

			  HD44780_ClrScr();
			  HD44780_PutStr("Time:");
			  HD44780_GotoXY(0, 1);
	  		  printf("%s\r\n", "Time:");
			  printf("%ih %im %.2fs\r\n", hours, minutes, seconds);
			  sprintf(output,"%ih %im %.2fs", hours, minutes, seconds);
			  HD44780_PutStr(output);

			  HAL_Delay(5000);
			  state = 3;
			  break;

	  	  case 5:
	  		  ;
			  float latitudeTemp = atof(latitude);
			  int degree = (int)latitudeTemp/100;
			  int min = (int)latitudeTemp%100;
			  int dd = ((int)(latitudeTemp*10000))%10000;

	  		  printf("%s\r\n", "Latitude:");
			  printf("%id %im %idd\r\n", degree, min, dd);
			  sprintf(output,"%id %im %idd", degree, min, dd);
			  HD44780_ClrScr();
			  HD44780_PutStr("Latitude:");
			  HD44780_GotoXY(0, 1);
			  HD44780_PutStr(output);

			  HAL_Delay(5000);
			  state = 3;
			  break;

	  	  case 6:
	  		  ;
			  float longitudeTemp = atof(longitude);
			  int degreeTemp = (int)longitudeTemp/100;
			  int minTemp = (int)longitudeTemp%100;
			  int ddTemp = ((int)(longitudeTemp*10000))%10000;

	  		  printf("%s\r\n", "longitude:");
			  printf("%id %im %idd\r\n", degreeTemp, minTemp, ddTemp);
			  sprintf(output,"%id %im %idd", degreeTemp, minTemp, ddTemp);
			  HD44780_ClrScr();
			  HD44780_PutStr("longitude:");
			  HD44780_GotoXY(0, 1);
			  HD44780_PutStr(output);

			  HAL_Delay(5000);
			  state = 3;
			  break;

	  	  case 7:
	  		  ;
			  float altitudeTemp = atof(altitude);

	  		  printf("%s\r\n", "altitude:");
			  printf("%.3f meter\r\n", altitudeTemp);
			  sprintf(output,"%.3f meter", altitudeTemp);
			  HD44780_ClrScr();
			  HD44780_PutStr("altitude:");
			  HD44780_GotoXY(0, 1);
			  HD44780_PutStr(output);

			  HAL_Delay(5000);
			  state = 3;
			  break;





	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
