/* USER CODE BEGIN Header */
/**

/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdbool.h"
#include "stdio.h"
#include <string.h>
#include <stdlib.h>
#include "debounce.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Initialize debounce pull up buttons
  deBounceInit(GPIO_PIN_3,'A',0);
  deBounceInit(GPIO_PIN_4,'A',0);
  deBounceInit(GPIO_PIN_7,'A',0);
  deBounceInit(GPIO_PIN_8,'A',0);
  HD44780_Init();

  int8_t machineState = 0;
  int8_t pushButton1 = 0;
  int8_t pushButton2 = 0;
  int8_t pushButton3 = 0;
  int8_t pushButton4 = 0;

  char * stringData = (char*)calloc(100, sizeof(char));

  //variables to store GPS info
  char* sentenceID = (char*)calloc(10, sizeof(char));
  char* UTCTime = (char*)calloc(10, sizeof(char));
  char* UTCTimeCopy = (char*)calloc(10, sizeof(char));
  char* latitude = (char*)calloc(10, sizeof(char));
  char* latitudeCopy = (char*)calloc(10, sizeof(char));
  char* latitudeDirection = (char*)calloc(10, sizeof(char));
  char* longitude = (char*)calloc(10, sizeof(char));
  char* longitudeCopy = (char*)calloc(10, sizeof(char));
  char* longitudeDirection = (char*)calloc(10, sizeof(char));
  char* positionFix = (char*)calloc(10, sizeof(char));
  char* satellitesUsed = (char*)calloc(10, sizeof(char));
  char* HDOP = (char*)calloc(10, sizeof(char));
  char* altitude =(char*)calloc(10, sizeof(char));
  char* altitudeCopy =(char*)calloc(10, sizeof(char));
  char* altitudeUnits =(char*)calloc(10, sizeof(char));
  char* geoIDSeperation =(char*)calloc(10, sizeof(char));
  char* geoIDUnits =(char*)calloc(10, sizeof(char));
  char* DGPSAge =(char*)calloc(10, sizeof(char));
  char* checksum =(char*)calloc(10, sizeof(char));

  char* LCDString = (char*)calloc(80, sizeof(char));
  //case 3 variables
  int hour = 0;
  int minute = 0;
  int second = 0;
  char* hourMinSec = 0;
  char* secDecimal = 0;
  int hourMinSecInInt = 0;
  int decimalOfSecond = 0;
  int temp = 0;

  //case 4 variables
  char* degreeMinLat = 0;
  char* degreeDecimalLat = 0;
  int degreeLat = 0;
  int minLat = 0;
  int decimalLat = 0;
  int degreeAndMinute = 0;

  //case 5 variables
  char* degreeMinLong = 0;
  char* degreeDecimalLong = 0;
  int degreeLong = 0;
  int minLong = 0;
  int decimalLong = 0;
  int degreeAndMinuteLong = 0;

  //case 6 variables
  float alitFloat = 0;

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (machineState)
	  	  {
	  	  	  case 0:
	  	  		  //welcome
	  	  		  HD44780_ClrScr();
	  	  		  printf("\rRetrieving Data\n");
				  HD44780_GotoXY(0, 0);
				  HD44780_PutStr("Retrieving Data...");
	  	  		  printf("\rPlease input data:\n");
	  	  		  scanf("%s", stringData);
	  	  		  machineState = 1;
	  	  		  break;

	  	  	  case 1:
	  	  		  printf("\rProcssing Data\n");
	  	  		  HD44780_ClrScr();
				  HD44780_GotoXY(0, 0);
				  HD44780_PutStr("Processing Data...");

	  	  		  //Processing and saving data
	  	  		  sentenceID = strtok(stringData, ",");
	  	  		  UTCTime = strtok(NULL, ",");
	  	  		  latitude = strtok(NULL, ",");
	  	  		  latitudeDirection = strtok(NULL, ",");
	  	  		  longitude = strtok(NULL, ",");
	  	  		  longitudeDirection = strtok(NULL, ",");
	  	  		  positionFix = strtok(NULL, ",");
	  	  		  satellitesUsed = strtok(NULL, ",");
	  	  		  HDOP = strtok(NULL, ",");
	  	  		  altitude = strtok(NULL, ",");
	  	  		  altitudeUnits = strtok(NULL, ",");
	  	  		  geoIDSeperation = strtok(NULL, ",");
	  	  		  geoIDUnits = strtok(NULL, ",");
	  	  		  DGPSAge = strtok(NULL, ",");
	  	  		  checksum = strtok(NULL, ",");

	  	  		  HAL_Delay(5000);
	  	  		  machineState = 2;
	  	  		  break;

	  	  	  case 2:
	  	  		  //LCD print
	  	  		  HD44780_ClrScr();
				  HD44780_GotoXY(0, 0);
				  HD44780_PutStr("1)Time, 2)Latitu");
				  HD44780_GotoXY(0, 1);
				  HD44780_PutStr("3)Longi 4)Altitu");

	  	  		  //push button reset
	  	  		  pushButton1 = 0;
	  	  		  pushButton2 = 0;
	  	  		  pushButton3 = 0;
	  	  		  pushButton4 = 0;

	  	  		  printf("\r1:Time 2:Latitude 3.:Longitude 4.:Altitude\n");

	  	  		  while(1){
	  	  			  //wait for user to select

	  	  			  pushButton1 = deBounceReadPin(GPIO_PIN_3,'A',0);
	  	  			  pushButton2 = deBounceReadPin(GPIO_PIN_4,'A',0);
	  	  			  pushButton3 = deBounceReadPin(GPIO_PIN_7,'A',0);
	  	  			  pushButton4 = deBounceReadPin(GPIO_PIN_8,'A',0);

	  	  			  if(!pushButton1){
	  	  				  machineState = 3;
	  	  				  break;
	  	  			  }
	  	  			  if(!pushButton2){
	  	  				  machineState = 4;
	  	  				  break;
	  	  			  }
	  	  			  if(!pushButton3){
	  	  				  machineState = 5;
	  	  				  break;
	  	  			  }
	  	  			  if(!pushButton4){
	  	  				  machineState = 6;
	  	  				  break;
	  	  			  }
	  	  		  }
	  	  		  break;

	  	  	  case 3:
	  	  		  //Processing time
	  	  		  printf("Processing Time\r\n");
	  	  		  strcpy(UTCTimeCopy, UTCTime);

	  	  		  //splitting string with .
	  	  		  hourMinSec = strtok(UTCTimeCopy, ".");
	  	  		  secDecimal = strtok(NULL, ".");

	  	  		  //string to int conversion
	  	  		  hourMinSecInInt = atoi(hourMinSec);
	  	  		  decimalOfSecond = atoi(secDecimal);

	  	  		  //calculation
	  	  		  second = hourMinSecInInt % 100;
	  	  		  temp = hourMinSecInInt / 100;
	  	  		  minute = temp % 100;
	  	  		  hour = temp / 100;


	  	  		  printf("Time: %02ih %02im %02i.%02is\r\n", hour, minute, second, decimalOfSecond);

	  	  		  //LCD print
	  	  		  snprintf(LCDString, 80, "%02ih %02im %02i.%02is", hour, minute, second, decimalOfSecond);
	  	  		  HD44780_ClrScr();
	  	  		  HD44780_GotoXY(0, 0);
	  	  		  HD44780_PutStr("Time:");
	  	  		  HD44780_GotoXY(0, 1);
	  	  		  HD44780_PutStr(LCDString);

	  	  		  HAL_Delay(5000);
	  	  		  machineState = 2;
	  	  		  break;

	  	  	  case 4:
	  	  		//Processing latitude
	  	  		  printf("Processing latitude\r\n");
	  	  		  strcpy(latitudeCopy, latitude);

	  	  		//splitting string with .
	  	  		  degreeMinLat = strtok(latitudeCopy, ".");
	  	  		  degreeDecimalLat = strtok(NULL, ".");

	  	  		//string to int conversion
	  	  		  degreeAndMinute = atoi(degreeMinLat);
	  	  		  decimalLat = atoi(degreeDecimalLat);

	  	  		//calculation
	  	  		  degreeLat = degreeAndMinute / 100;
	  	  		  minLat = degreeAndMinute % 100;

	  	  		  printf("Latitude: %03id %02im %04idd \r\n", degreeLat, minLat, decimalLat);

	  	  		  //LCD print
	  	  		  snprintf(LCDString, 80, "%03id %02im %04idd", degreeLat, minLat, decimalLat);
	  	  		  HD44780_ClrScr();
	  	  		  HD44780_GotoXY(0, 0);
	  	  		  HD44780_PutStr("Latitude:");
	  	  		  HD44780_GotoXY(0, 1);
	  	  		  HD44780_PutStr(LCDString);

	  	  		  HAL_Delay(5000);
	  	  		  machineState = 2;
	  	  		  break;

	  	  	  case 5:
	  	  		//Processing longitude
  	  		  	  printf("Processing longitude\r\n");
  	  		  	  strcpy(longitudeCopy, longitude);

  	  		  //splitting string with .
  	  		  	  degreeMinLong = strtok(longitudeCopy, ".");
  	  		  	  degreeDecimalLong = strtok(NULL, ".");

  	  		  //string to int conversion
  	  		  	  degreeAndMinuteLong = atoi(degreeMinLong);
  	  		  	  decimalLong = atoi(degreeDecimalLong);

  	  		  //calculation
  	  		  	  degreeLong = degreeAndMinuteLong / 100;
  	  		  	  minLong = degreeAndMinuteLong % 100;

  	  		  	  printf("Longitude: %03id %02im %04idd \r\n", degreeLong, minLong, decimalLong);

	  	  		  //LCD print
	  	  		  snprintf(LCDString, 80, "%03id %02im %04idd", degreeLong, minLong, decimalLong);
	  	  		  HD44780_ClrScr();
	  	  		  HD44780_GotoXY(0, 0);
	  	  		  HD44780_PutStr("Longitude:");
	  	  		  HD44780_GotoXY(0, 1);
	  	  		  HD44780_PutStr(LCDString);

  	  		  	  HAL_Delay(5000);
  	  		  	  machineState = 2;
  	  		  	  break;

	  	  	  case 6:
	  	  		//Processing altitude
	  	  		  printf("Processing altitude\r\n");
	  	  		  strcpy(altitudeCopy, altitude);

	  	  		//string to float conversion
	  	  		  alitFloat = atof(altitudeCopy);

	  	  		  printf("Altitude: %.3f meter\r\n", alitFloat);

	  	  		  //LCD print
	  	  		  //snprintf(LCDString, 80, "%.3f meter", degreeLong, minLong, decimalLong);
	  	  		  snprintf(LCDString, 80, "%.3f meter", alitFloat);
	  	  		  HD44780_ClrScr();
	  	  		  HD44780_GotoXY(0, 0);
	  	  		  HD44780_PutStr("Altitude:");
	  	  		  HD44780_GotoXY(0, 1);
	  	  		  HD44780_PutStr(LCDString);

  	  		  	  HAL_Delay(5000);
  	  		  	  machineState = 2;


	  	  	  default:
	  	  		  printf("\rIn default. Machine state is %d\n", machineState);
	  	  		  HAL_Delay(5000);
	  	  		  break;
	  	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
