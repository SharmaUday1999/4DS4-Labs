
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  08009148  08009148  00019148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009600  08009600  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009600  08009600  00019600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009608  08009608  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009608  08009608  00019608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800960c  0800960c  0001960c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001e0  080097f0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080097f0  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d20f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eca  00000000  00000000  0002d41f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002fd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a4f  00000000  00000000  00030688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094a0  00000000  00000000  000520d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3051  00000000  00000000  0005b577  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e5c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea0  00000000  00000000  0011e644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800912c 	.word	0x0800912c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800912c 	.word	0x0800912c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 fae2 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000fb4:	887b      	ldrh	r3, [r7, #2]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f001 fad2 	bl	8002564 <HAL_GPIO_WritePin>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fdc:	2110      	movs	r1, #16
 8000fde:	4821      	ldr	r0, [pc, #132]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fe0:	f7ff ffd2 	bl	8000f88 <GPIO_SetBits>
 8000fe4:	e003      	b.n	8000fee <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	481e      	ldr	r0, [pc, #120]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000fea:	f7ff ffdd 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	481a      	ldr	r0, [pc, #104]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8000ffc:	f7ff ffc4 	bl	8000f88 <GPIO_SetBits>
 8001000:	e003      	b.n	800100a <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001002:	2120      	movs	r1, #32
 8001004:	4817      	ldr	r0, [pc, #92]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001006:	f7ff ffcf 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001018:	f7ff ffb6 	bl	8000f88 <GPIO_SetBits>
 800101c:	e003      	b.n	8001026 <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001022:	f7ff ffc1 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001032:	f7ff ffa9 	bl	8000f88 <GPIO_SetBits>
 8001036:	e003      	b.n	8001040 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 800103c:	f7ff ffb4 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8001040:	2201      	movs	r2, #1
 8001042:	2102      	movs	r1, #2
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001046:	f001 fa8d 	bl	8002564 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 800104a:	2002      	movs	r0, #2
 800104c:	f001 f800 	bl	8002050 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <hd44780_wr_hi_nibble+0x9c>)
 8001056:	f001 fa85 	bl	8002564 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	48000400 	.word	0x48000400

08001068 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800107c:	2110      	movs	r1, #16
 800107e:	4821      	ldr	r0, [pc, #132]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 8001080:	f7ff ff82 	bl	8000f88 <GPIO_SetBits>
 8001084:	e003      	b.n	800108e <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8001086:	2110      	movs	r1, #16
 8001088:	481e      	ldr	r0, [pc, #120]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800108a:	f7ff ff8d 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d004      	beq.n	80010a2 <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8001098:	2120      	movs	r1, #32
 800109a:	481a      	ldr	r0, [pc, #104]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 800109c:	f7ff ff74 	bl	8000f88 <GPIO_SetBits>
 80010a0:	e003      	b.n	80010aa <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80010a2:	2120      	movs	r1, #32
 80010a4:	4817      	ldr	r0, [pc, #92]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010a6:	f7ff ff7f 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	4813      	ldr	r0, [pc, #76]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010b8:	f7ff ff66 	bl	8000f88 <GPIO_SetBits>
 80010bc:	e003      	b.n	80010c6 <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80010be:	2140      	movs	r1, #64	; 0x40
 80010c0:	4810      	ldr	r0, [pc, #64]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010c2:	f7ff ff71 	bl	8000fa8 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010d4:	f7ff ff58 	bl	8000f88 <GPIO_SetBits>
 80010d8:	e003      	b.n	80010e2 <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	4809      	ldr	r0, [pc, #36]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010de:	f7ff ff63 	bl	8000fa8 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010e8:	f001 fa3c 	bl	8002564 <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80010ec:	2002      	movs	r0, #2
 80010ee:	f000 ffaf 	bl	8002050 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <hd44780_wr_lo_nibble+0x9c>)
 80010f8:	f001 fa34 	bl	8002564 <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	48000400 	.word	0x48000400

08001108 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff57 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffa3 	bl	8001068 <hd44780_wr_lo_nibble>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 8001136:	2200      	movs	r2, #0
 8001138:	2101      	movs	r1, #1
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <hd44780_wr_cmd+0x24>)
 800113c:	f001 fa12 	bl	8002564 <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffe0 	bl	8001108 <hd44780_write>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	48000400 	.word	0x48000400

08001154 <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 800115e:	2201      	movs	r2, #1
 8001160:	2101      	movs	r1, #1
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <hd44780_wr_data+0x24>)
 8001164:	f001 f9fe 	bl	8002564 <HAL_GPIO_WritePin>
	hd44780_write(data);
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffcc 	bl	8001108 <hd44780_write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	48000400 	.word	0x48000400

0800117c <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HD44780_Init+0xbc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001186:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HD44780_Init+0xbc>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HD44780_Init+0xbc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 800119a:	23f0      	movs	r3, #240	; 0xf0
 800119c:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011a6:	2303      	movs	r3, #3
 80011a8:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4823      	ldr	r0, [pc, #140]	; (800123c <HD44780_Init+0xc0>)
 80011b0:	f001 f856 	bl	8002260 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 80011b4:	230b      	movs	r3, #11
 80011b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	4619      	mov	r1, r3
 80011c8:	481c      	ldr	r0, [pc, #112]	; (800123c <HD44780_Init+0xc0>)
 80011ca:	f001 f849 	bl	8002260 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80011ce:	2200      	movs	r2, #0
 80011d0:	2102      	movs	r1, #2
 80011d2:	481a      	ldr	r0, [pc, #104]	; (800123c <HD44780_Init+0xc0>)
 80011d4:	f001 f9c6 	bl	8002564 <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	4817      	ldr	r0, [pc, #92]	; (800123c <HD44780_Init+0xc0>)
 80011de:	f001 f9c1 	bl	8002564 <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80011e2:	2200      	movs	r2, #0
 80011e4:	2108      	movs	r1, #8
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <HD44780_Init+0xc0>)
 80011e8:	f001 f9bc 	bl	8002564 <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80011ec:	2010      	movs	r0, #16
 80011ee:	f000 ff2f 	bl	8002050 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011f2:	2030      	movs	r0, #48	; 0x30
 80011f4:	f7ff fee8 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80011f8:	2005      	movs	r0, #5
 80011fa:	f000 ff29 	bl	8002050 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80011fe:	2030      	movs	r0, #48	; 0x30
 8001200:	f7ff fee2 	bl	8000fc8 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 8001204:	2001      	movs	r0, #1
 8001206:	f000 ff23 	bl	8002050 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 800120a:	2030      	movs	r0, #48	; 0x30
 800120c:	f7ff fedc 	bl	8000fc8 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 8001210:	2020      	movs	r0, #32
 8001212:	f7ff fed9 	bl	8000fc8 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 8001216:	2028      	movs	r0, #40	; 0x28
 8001218:	f7ff ff88 	bl	800112c <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 800121c:	200c      	movs	r0, #12
 800121e:	f7ff ff85 	bl	800112c <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff ff82 	bl	800112c <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8001228:	2006      	movs	r0, #6
 800122a:	f7ff ff7f 	bl	800112c <hd44780_wr_cmd>

}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	48000400 	.word	0x48000400

08001240 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff81 	bl	8001154 <hd44780_wr_data>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	4613      	mov	r3, r2
 800126a:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d901      	bls.n	800127a <HD44780_GotoXY+0x1e>
		x = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d901      	bls.n	8001284 <HD44780_GotoXY+0x28>
		y = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	2b03      	cmp	r3, #3
 8001288:	d816      	bhi.n	80012b8 <HD44780_GotoXY+0x5c>
 800128a:	a201      	add	r2, pc, #4	; (adr r2, 8001290 <HD44780_GotoXY+0x34>)
 800128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001290:	080012a1 	.word	0x080012a1
 8001294:	080012a7 	.word	0x080012a7
 8001298:	080012ad 	.word	0x080012ad
 800129c:	080012b3 	.word	0x080012b3
	case 0:
		copy_y = 0x80;
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	73fb      	strb	r3, [r7, #15]
		break;
 80012a4:	e008      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	73fb      	strb	r3, [r7, #15]
		break;
 80012aa:	e005      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 80012ac:	2394      	movs	r3, #148	; 0x94
 80012ae:	73fb      	strb	r3, [r7, #15]
		break;
 80012b0:	e002      	b.n	80012b8 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 80012b2:	23d4      	movs	r3, #212	; 0xd4
 80012b4:	73fb      	strb	r3, [r7, #15]
		break;
 80012b6:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4413      	add	r3, r2
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff33 	bl	800112c <hd44780_wr_cmd>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop

080012d0 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ffab 	bl	8001240 <HD44780_PutChar>
		i++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ef      	bne.n	80012dc <HD44780_PutStr+0xc>
}
 80012fc:	bf00      	nop
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff ff0f 	bl	800112c <hd44780_wr_cmd>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <deBounceInit>:
//
//}


void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
 800131e:	460b      	mov	r3, r1
 8001320:	717b      	strb	r3, [r7, #5]
 8001322:	4613      	mov	r3, r2
 8001324:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struc
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
    switch(pin)
 8001336:	88fb      	ldrh	r3, [r7, #6]
 8001338:	3b03      	subs	r3, #3
 800133a:	2b05      	cmp	r3, #5
 800133c:	d81b      	bhi.n	8001376 <deBounceInit+0x62>
 800133e:	a201      	add	r2, pc, #4	; (adr r2, 8001344 <deBounceInit+0x30>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	0800135d 	.word	0x0800135d
 8001348:	08001363 	.word	0x08001363
 800134c:	08001377 	.word	0x08001377
 8001350:	08001377 	.word	0x08001377
 8001354:	08001369 	.word	0x08001369
 8001358:	0800136f 	.word	0x0800136f
	{
    	case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 800135c:	2308      	movs	r3, #8
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	e009      	b.n	8001376 <deBounceInit+0x62>
    	case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001362:	2310      	movs	r3, #16
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	e006      	b.n	8001376 <deBounceInit+0x62>
    	case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	e003      	b.n	8001376 <deBounceInit+0x62>
    	case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	bf00      	nop
	}

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001388:	f000 ff6a 	bl	8002260 <HAL_GPIO_Init>

}
 800138c:	bf00      	nop
 800138e:	3720      	adds	r7, #32
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <deBounceReadPin>:

int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
 800139e:	460b      	mov	r3, r1
 80013a0:	717b      	strb	r3, [r7, #5]
 80013a2:	4613      	mov	r3, r2
 80013a4:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;

	int32_t msTimeStamp = HAL_GetTick();
 80013aa:	f000 fe45 	bl	8002038 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	613b      	str	r3, [r7, #16]
	int32_t stableInterval = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]

	pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f001 f8b9 	bl	8002534 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_RESET) {
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <deBounceReadPin+0x3e>
		pinStateWeAreLookingFor = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	75fb      	strb	r3, [r7, #23]
 80013d0:	e01b      	b.n	800140a <deBounceReadPin+0x76>
	} else {
		pinStateWeAreLookingFor = 1;
 80013d2:	2301      	movs	r3, #1
 80013d4:	75fb      	strb	r3, [r7, #23]
	}
	while(HAL_GetTick() < (msTimeStamp + stableInterval)) {
 80013d6:	e018      	b.n	800140a <deBounceReadPin+0x76>
		pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f001 f8a8 	bl	8002534 <HAL_GPIO_ReadPin>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
		if(pinState != pinStateWeAreLookingFor) {
 80013e8:	7bfa      	ldrb	r2, [r7, #15]
 80013ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d00b      	beq.n	800140a <deBounceReadPin+0x76>
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 80013f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	75fb      	strb	r3, [r7, #23]
			msTimeStamp = HAL_GetTick();
 8001402:	f000 fe19 	bl	8002038 <HAL_GetTick>
 8001406:	4603      	mov	r3, r0
 8001408:	613b      	str	r3, [r7, #16]
	while(HAL_GetTick() < (msTimeStamp + stableInterval)) {
 800140a:	f000 fe15 	bl	8002038 <HAL_GetTick>
 800140e:	4601      	mov	r1, r0
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	4299      	cmp	r1, r3
 8001418:	d3de      	bcc.n	80013d8 <deBounceReadPin+0x44>
		}
	}
	return pinStateWeAreLookingFor;
 800141a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b09d      	sub	sp, #116	; 0x74
 800142c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int state = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	667b      	str	r3, [r7, #100]	; 0x64
	char outputStr [16]="";
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
	char * stringData = (char*)calloc(100, sizeof(char));
 8001440:	2101      	movs	r1, #1
 8001442:	2064      	movs	r0, #100	; 0x64
 8001444:	f002 ff54 	bl	80042f0 <calloc>
 8001448:	4603      	mov	r3, r0
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
	char* delimiter = (char*)calloc(10, sizeof(char));
 800144c:	2101      	movs	r1, #1
 800144e:	200a      	movs	r0, #10
 8001450:	f002 ff4e 	bl	80042f0 <calloc>
 8001454:	4603      	mov	r3, r0
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
	char* UTCTime = (char*)calloc(10, sizeof(char));
 8001458:	2101      	movs	r1, #1
 800145a:	200a      	movs	r0, #10
 800145c:	f002 ff48 	bl	80042f0 <calloc>
 8001460:	4603      	mov	r3, r0
 8001462:	663b      	str	r3, [r7, #96]	; 0x60
	char* latitude = (char*)calloc(10, sizeof(char));
 8001464:	2101      	movs	r1, #1
 8001466:	200a      	movs	r0, #10
 8001468:	f002 ff42 	bl	80042f0 <calloc>
 800146c:	4603      	mov	r3, r0
 800146e:	65fb      	str	r3, [r7, #92]	; 0x5c
	char* longitude = (char*)calloc(10, sizeof(char));
 8001470:	2101      	movs	r1, #1
 8001472:	200a      	movs	r0, #10
 8001474:	f002 ff3c 	bl	80042f0 <calloc>
 8001478:	4603      	mov	r3, r0
 800147a:	65bb      	str	r3, [r7, #88]	; 0x58
	char* altitude =(char*)calloc(10, sizeof(char));
 800147c:	2101      	movs	r1, #1
 800147e:	200a      	movs	r0, #10
 8001480:	f002 ff36 	bl	80042f0 <calloc>
 8001484:	4603      	mov	r3, r0
 8001486:	657b      	str	r3, [r7, #84]	; 0x54
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001488:	f000 fd6d 	bl	8001f66 <HAL_Init>

  /* USER CODE BEGIN Init */
  int8_t mode = 1;
 800148c:	2301      	movs	r3, #1
 800148e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  deBounceInit(GPIO_PIN_3, 'A', mode);
 8001492:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001496:	461a      	mov	r2, r3
 8001498:	2141      	movs	r1, #65	; 0x41
 800149a:	2008      	movs	r0, #8
 800149c:	f7ff ff3a 	bl	8001314 <deBounceInit>
  deBounceInit(GPIO_PIN_4, 'A', mode);
 80014a0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80014a4:	461a      	mov	r2, r3
 80014a6:	2141      	movs	r1, #65	; 0x41
 80014a8:	2010      	movs	r0, #16
 80014aa:	f7ff ff33 	bl	8001314 <deBounceInit>
  deBounceInit(GPIO_PIN_7, 'A', mode);
 80014ae:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80014b2:	461a      	mov	r2, r3
 80014b4:	2141      	movs	r1, #65	; 0x41
 80014b6:	2080      	movs	r0, #128	; 0x80
 80014b8:	f7ff ff2c 	bl	8001314 <deBounceInit>
  deBounceInit(GPIO_PIN_8, 'A', mode);
 80014bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80014c0:	461a      	mov	r2, r3
 80014c2:	2141      	movs	r1, #65	; 0x41
 80014c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014c8:	f7ff ff24 	bl	8001314 <deBounceInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 fa92 	bl	80019f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d0:	f000 fb42 	bl	8001b58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d4:	f000 fb10 	bl	8001af8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init();
 80014d8:	f7ff fe50 	bl	800117c <HD44780_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state){
 80014dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014de:	3b01      	subs	r3, #1
 80014e0:	2b06      	cmp	r3, #6
 80014e2:	d8fb      	bhi.n	80014dc <main+0xb4>
 80014e4:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <main+0xc4>)
 80014e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ea:	bf00      	nop
 80014ec:	08001509 	.word	0x08001509
 80014f0:	08001531 	.word	0x08001531
 80014f4:	080015af 	.word	0x080015af
 80014f8:	08001695 	.word	0x08001695
 80014fc:	080017c1 	.word	0x080017c1
 8001500:	0800188b 	.word	0x0800188b
 8001504:	08001955 	.word	0x08001955
	  	  case 1:
			printf("%s\r\n", "Retrieving data");
 8001508:	499f      	ldr	r1, [pc, #636]	; (8001788 <main+0x360>)
 800150a:	48a0      	ldr	r0, [pc, #640]	; (800178c <main+0x364>)
 800150c:	f003 fbee 	bl	8004cec <iprintf>
			printf("%s\r\n", "Input Data:");
 8001510:	499f      	ldr	r1, [pc, #636]	; (8001790 <main+0x368>)
 8001512:	489e      	ldr	r0, [pc, #632]	; (800178c <main+0x364>)
 8001514:	f003 fbea 	bl	8004cec <iprintf>
	  		HD44780_ClrScr();
 8001518:	f7ff fef4 	bl	8001304 <HD44780_ClrScr>
			HD44780_PutStr("Retrieving data");
 800151c:	489a      	ldr	r0, [pc, #616]	; (8001788 <main+0x360>)
 800151e:	f7ff fed7 	bl	80012d0 <HD44780_PutStr>
			scanf("%s",stringData);
 8001522:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001524:	489b      	ldr	r0, [pc, #620]	; (8001794 <main+0x36c>)
 8001526:	f003 fc09 	bl	8004d3c <iscanf>
			state = 2;
 800152a:	2302      	movs	r3, #2
 800152c:	667b      	str	r3, [r7, #100]	; 0x64
			break;
 800152e:	e24a      	b.n	80019c6 <main+0x59e>

	  	  case 2:
	  		HAL_Delay(250);
 8001530:	20fa      	movs	r0, #250	; 0xfa
 8001532:	f000 fd8d 	bl	8002050 <HAL_Delay>
			printf("%s\r\n", "Processing data");
 8001536:	4998      	ldr	r1, [pc, #608]	; (8001798 <main+0x370>)
 8001538:	4894      	ldr	r0, [pc, #592]	; (800178c <main+0x364>)
 800153a:	f003 fbd7 	bl	8004cec <iprintf>
			HD44780_ClrScr();
 800153e:	f7ff fee1 	bl	8001304 <HD44780_ClrScr>
			HD44780_PutStr("Processing data");
 8001542:	4895      	ldr	r0, [pc, #596]	; (8001798 <main+0x370>)
 8001544:	f7ff fec4 	bl	80012d0 <HD44780_PutStr>

			delimiter = strtok(stringData, ",");
 8001548:	4994      	ldr	r1, [pc, #592]	; (800179c <main+0x374>)
 800154a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800154c:	f004 fa54 	bl	80059f8 <strtok>
 8001550:	64b8      	str	r0, [r7, #72]	; 0x48
			UTCTime = strtok(NULL, ",");
 8001552:	4992      	ldr	r1, [pc, #584]	; (800179c <main+0x374>)
 8001554:	2000      	movs	r0, #0
 8001556:	f004 fa4f 	bl	80059f8 <strtok>
 800155a:	6638      	str	r0, [r7, #96]	; 0x60
			latitude = strtok(NULL, ",");
 800155c:	498f      	ldr	r1, [pc, #572]	; (800179c <main+0x374>)
 800155e:	2000      	movs	r0, #0
 8001560:	f004 fa4a 	bl	80059f8 <strtok>
 8001564:	65f8      	str	r0, [r7, #92]	; 0x5c
			delimiter = strtok(NULL, ",");
 8001566:	498d      	ldr	r1, [pc, #564]	; (800179c <main+0x374>)
 8001568:	2000      	movs	r0, #0
 800156a:	f004 fa45 	bl	80059f8 <strtok>
 800156e:	64b8      	str	r0, [r7, #72]	; 0x48
			longitude = strtok(NULL, ",");
 8001570:	498a      	ldr	r1, [pc, #552]	; (800179c <main+0x374>)
 8001572:	2000      	movs	r0, #0
 8001574:	f004 fa40 	bl	80059f8 <strtok>
 8001578:	65b8      	str	r0, [r7, #88]	; 0x58
			for (int var = 0; var < 4; ++var)
 800157a:	2300      	movs	r3, #0
 800157c:	653b      	str	r3, [r7, #80]	; 0x50
 800157e:	e007      	b.n	8001590 <main+0x168>
				delimiter = strtok(NULL, ",");
 8001580:	4986      	ldr	r1, [pc, #536]	; (800179c <main+0x374>)
 8001582:	2000      	movs	r0, #0
 8001584:	f004 fa38 	bl	80059f8 <strtok>
 8001588:	64b8      	str	r0, [r7, #72]	; 0x48
			for (int var = 0; var < 4; ++var)
 800158a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800158c:	3301      	adds	r3, #1
 800158e:	653b      	str	r3, [r7, #80]	; 0x50
 8001590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001592:	2b03      	cmp	r3, #3
 8001594:	ddf4      	ble.n	8001580 <main+0x158>
			altitude = strtok(NULL, ",");
 8001596:	4981      	ldr	r1, [pc, #516]	; (800179c <main+0x374>)
 8001598:	2000      	movs	r0, #0
 800159a:	f004 fa2d 	bl	80059f8 <strtok>
 800159e:	6578      	str	r0, [r7, #84]	; 0x54

			HAL_Delay(5000);
 80015a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80015a4:	f000 fd54 	bl	8002050 <HAL_Delay>
			state = 3;
 80015a8:	2303      	movs	r3, #3
 80015aa:	667b      	str	r3, [r7, #100]	; 0x64
			break;
 80015ac:	e20b      	b.n	80019c6 <main+0x59e>

	  	  case 3:
			HD44780_ClrScr();
 80015ae:	f7ff fea9 	bl	8001304 <HD44780_ClrScr>
			HD44780_PutStr("1)Time, 2)Latitu");
 80015b2:	487b      	ldr	r0, [pc, #492]	; (80017a0 <main+0x378>)
 80015b4:	f7ff fe8c 	bl	80012d0 <HD44780_PutStr>
			HD44780_GotoXY(0, 1);
 80015b8:	2101      	movs	r1, #1
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fe4e 	bl	800125c <HD44780_GotoXY>
			HD44780_PutStr("3)Longi 4)Altitu");
 80015c0:	4878      	ldr	r0, [pc, #480]	; (80017a4 <main+0x37c>)
 80015c2:	f7ff fe85 	bl	80012d0 <HD44780_PutStr>
			printf("%s\r\n", "1:Time 2:Latitude 3.:Longitude 4.:Altitude");
 80015c6:	4978      	ldr	r1, [pc, #480]	; (80017a8 <main+0x380>)
 80015c8:	4870      	ldr	r0, [pc, #448]	; (800178c <main+0x364>)
 80015ca:	f003 fb8f 	bl	8004cec <iprintf>
	  		while (deBounceReadPin(GPIO_PIN_3, 'A', mode)
 80015ce:	e002      	b.n	80015d6 <main+0x1ae>
					&&deBounceReadPin(GPIO_PIN_4, 'A', mode)
					&&deBounceReadPin(GPIO_PIN_7, 'A', mode)
					&&deBounceReadPin(GPIO_PIN_8, 'A', mode))
				HAL_Delay(20);
 80015d0:	2014      	movs	r0, #20
 80015d2:	f000 fd3d 	bl	8002050 <HAL_Delay>
	  		while (deBounceReadPin(GPIO_PIN_3, 'A', mode)
 80015d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80015da:	461a      	mov	r2, r3
 80015dc:	2141      	movs	r1, #65	; 0x41
 80015de:	2008      	movs	r0, #8
 80015e0:	f7ff fed8 	bl	8001394 <deBounceReadPin>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01e      	beq.n	8001628 <main+0x200>
					&&deBounceReadPin(GPIO_PIN_4, 'A', mode)
 80015ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80015ee:	461a      	mov	r2, r3
 80015f0:	2141      	movs	r1, #65	; 0x41
 80015f2:	2010      	movs	r0, #16
 80015f4:	f7ff fece 	bl	8001394 <deBounceReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d014      	beq.n	8001628 <main+0x200>
					&&deBounceReadPin(GPIO_PIN_7, 'A', mode)
 80015fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001602:	461a      	mov	r2, r3
 8001604:	2141      	movs	r1, #65	; 0x41
 8001606:	2080      	movs	r0, #128	; 0x80
 8001608:	f7ff fec4 	bl	8001394 <deBounceReadPin>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00a      	beq.n	8001628 <main+0x200>
					&&deBounceReadPin(GPIO_PIN_8, 'A', mode))
 8001612:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001616:	461a      	mov	r2, r3
 8001618:	2141      	movs	r1, #65	; 0x41
 800161a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800161e:	f7ff feb9 	bl	8001394 <deBounceReadPin>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1d3      	bne.n	80015d0 <main+0x1a8>
			if(deBounceReadPin(GPIO_PIN_3, 'A', mode) == 0)
 8001628:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800162c:	461a      	mov	r2, r3
 800162e:	2141      	movs	r1, #65	; 0x41
 8001630:	2008      	movs	r0, #8
 8001632:	f7ff feaf 	bl	8001394 <deBounceReadPin>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <main+0x21a>
				state = 4;
 800163c:	2304      	movs	r3, #4
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
				state = 5;
			else if (deBounceReadPin(GPIO_PIN_7, 'A', mode) == 0)
				state = 6;
			else if (deBounceReadPin(GPIO_PIN_8, 'A', mode) == 0)
				state = 7;
			break;
 8001640:	e1c0      	b.n	80019c4 <main+0x59c>
			else if (deBounceReadPin(GPIO_PIN_4, 'A', mode) == 0)
 8001642:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001646:	461a      	mov	r2, r3
 8001648:	2141      	movs	r1, #65	; 0x41
 800164a:	2010      	movs	r0, #16
 800164c:	f7ff fea2 	bl	8001394 <deBounceReadPin>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <main+0x234>
				state = 5;
 8001656:	2305      	movs	r3, #5
 8001658:	667b      	str	r3, [r7, #100]	; 0x64
			break;
 800165a:	e1b3      	b.n	80019c4 <main+0x59c>
			else if (deBounceReadPin(GPIO_PIN_7, 'A', mode) == 0)
 800165c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001660:	461a      	mov	r2, r3
 8001662:	2141      	movs	r1, #65	; 0x41
 8001664:	2080      	movs	r0, #128	; 0x80
 8001666:	f7ff fe95 	bl	8001394 <deBounceReadPin>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <main+0x24e>
				state = 6;
 8001670:	2306      	movs	r3, #6
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
			break;
 8001674:	e1a6      	b.n	80019c4 <main+0x59c>
			else if (deBounceReadPin(GPIO_PIN_8, 'A', mode) == 0)
 8001676:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800167a:	461a      	mov	r2, r3
 800167c:	2141      	movs	r1, #65	; 0x41
 800167e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001682:	f7ff fe87 	bl	8001394 <deBounceReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 819b 	bne.w	80019c4 <main+0x59c>
				state = 7;
 800168e:	2307      	movs	r3, #7
 8001690:	667b      	str	r3, [r7, #100]	; 0x64
			break;
 8001692:	e197      	b.n	80019c4 <main+0x59c>

	  	  case 4:
	  		  ;
			  float timeVar = atof(UTCTime);
 8001694:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001696:	f002 fe27 	bl	80042e8 <atof>
 800169a:	ec54 3b10 	vmov	r3, r4, d0
 800169e:	4618      	mov	r0, r3
 80016a0:	4621      	mov	r1, r4
 80016a2:	f7ff faa1 	bl	8000be8 <__aeabi_d2f>
 80016a6:	4603      	mov	r3, r0
 80016a8:	61fb      	str	r3, [r7, #28]
			  float seconds = fmod(timeVar,100);
 80016aa:	69f8      	ldr	r0, [r7, #28]
 80016ac:	f7fe ff4c 	bl	8000548 <__aeabi_f2d>
 80016b0:	4603      	mov	r3, r0
 80016b2:	460c      	mov	r4, r1
 80016b4:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8001780 <main+0x358>
 80016b8:	ec44 3b10 	vmov	d0, r3, r4
 80016bc:	f007 fbbe 	bl	8008e3c <fmod>
 80016c0:	ec54 3b10 	vmov	r3, r4, d0
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	f7ff fa8e 	bl	8000be8 <__aeabi_d2f>
 80016cc:	4603      	mov	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
			  int minutes = ((int)timeVar / 100) % 100;
 80016d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d8:	ee17 1a90 	vmov	r1, s15
 80016dc:	4b33      	ldr	r3, [pc, #204]	; (80017ac <main+0x384>)
 80016de:	fb83 2301 	smull	r2, r3, r3, r1
 80016e2:	115a      	asrs	r2, r3, #5
 80016e4:	17cb      	asrs	r3, r1, #31
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a30      	ldr	r2, [pc, #192]	; (80017ac <main+0x384>)
 80016ea:	fb82 1203 	smull	r1, r2, r2, r3
 80016ee:	1151      	asrs	r1, r2, #5
 80016f0:	17da      	asrs	r2, r3, #31
 80016f2:	1a8a      	subs	r2, r1, r2
 80016f4:	2164      	movs	r1, #100	; 0x64
 80016f6:	fb01 f202 	mul.w	r2, r1, r2
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
			  int hours = ((int)timeVar / 100) / 100;
 80016fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001706:	ee17 1a90 	vmov	r1, s15
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <main+0x388>)
 800170c:	fb83 2301 	smull	r2, r3, r3, r1
 8001710:	131a      	asrs	r2, r3, #12
 8001712:	17cb      	asrs	r3, r1, #31
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	613b      	str	r3, [r7, #16]

			  HD44780_ClrScr();
 8001718:	f7ff fdf4 	bl	8001304 <HD44780_ClrScr>
			  HD44780_PutStr("Time:");
 800171c:	4825      	ldr	r0, [pc, #148]	; (80017b4 <main+0x38c>)
 800171e:	f7ff fdd7 	bl	80012d0 <HD44780_PutStr>
			  HD44780_GotoXY(0, 1);
 8001722:	2101      	movs	r1, #1
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fd99 	bl	800125c <HD44780_GotoXY>
	  		  printf("%s\r\n", "Time:");
 800172a:	4922      	ldr	r1, [pc, #136]	; (80017b4 <main+0x38c>)
 800172c:	4817      	ldr	r0, [pc, #92]	; (800178c <main+0x364>)
 800172e:	f003 fadd 	bl	8004cec <iprintf>
			  printf("%ih %im %.2fs\r\n", hours, minutes, seconds);
 8001732:	69b8      	ldr	r0, [r7, #24]
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	e9cd 3400 	strd	r3, r4, [sp]
 8001740:	697a      	ldr	r2, [r7, #20]
 8001742:	6939      	ldr	r1, [r7, #16]
 8001744:	481c      	ldr	r0, [pc, #112]	; (80017b8 <main+0x390>)
 8001746:	f003 fad1 	bl	8004cec <iprintf>
			  sprintf(outputStr,"%ih %im %.2fs", hours, minutes, seconds);
 800174a:	69b8      	ldr	r0, [r7, #24]
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4638      	mov	r0, r7
 8001756:	e9cd 3400 	strd	r3, r4, [sp]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	4917      	ldr	r1, [pc, #92]	; (80017bc <main+0x394>)
 8001760:	f003 fb04 	bl	8004d6c <siprintf>
			  HD44780_PutStr(outputStr);
 8001764:	463b      	mov	r3, r7
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fdb2 	bl	80012d0 <HD44780_PutStr>

			  HAL_Delay(5000);
 800176c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001770:	f000 fc6e 	bl	8002050 <HAL_Delay>
			  state = 3;
 8001774:	2303      	movs	r3, #3
 8001776:	667b      	str	r3, [r7, #100]	; 0x64
			  break;
 8001778:	e125      	b.n	80019c6 <main+0x59e>
 800177a:	bf00      	nop
 800177c:	f3af 8000 	nop.w
 8001780:	00000000 	.word	0x00000000
 8001784:	40590000 	.word	0x40590000
 8001788:	08009148 	.word	0x08009148
 800178c:	08009158 	.word	0x08009158
 8001790:	08009160 	.word	0x08009160
 8001794:	0800916c 	.word	0x0800916c
 8001798:	08009170 	.word	0x08009170
 800179c:	08009180 	.word	0x08009180
 80017a0:	08009184 	.word	0x08009184
 80017a4:	08009198 	.word	0x08009198
 80017a8:	080091ac 	.word	0x080091ac
 80017ac:	51eb851f 	.word	0x51eb851f
 80017b0:	68db8bad 	.word	0x68db8bad
 80017b4:	080091d8 	.word	0x080091d8
 80017b8:	080091e0 	.word	0x080091e0
 80017bc:	080091f0 	.word	0x080091f0

	  	  case 5:
	  		  ;
			  float latitudeTemp = atof(latitude);
 80017c0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80017c2:	f002 fd91 	bl	80042e8 <atof>
 80017c6:	ec54 3b10 	vmov	r3, r4, d0
 80017ca:	4618      	mov	r0, r3
 80017cc:	4621      	mov	r1, r4
 80017ce:	f7ff fa0b 	bl	8000be8 <__aeabi_d2f>
 80017d2:	4603      	mov	r3, r0
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
			  int degree = (int)latitudeTemp/100;
 80017d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017de:	ee17 1a90 	vmov	r1, s15
 80017e2:	4b79      	ldr	r3, [pc, #484]	; (80019c8 <main+0x5a0>)
 80017e4:	fb83 2301 	smull	r2, r3, r3, r1
 80017e8:	115a      	asrs	r2, r3, #5
 80017ea:	17cb      	asrs	r3, r1, #31
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
			  int min = (int)latitudeTemp%100;
 80017f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f8:	ee17 3a90 	vmov	r3, s15
 80017fc:	4a72      	ldr	r2, [pc, #456]	; (80019c8 <main+0x5a0>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	1151      	asrs	r1, r2, #5
 8001804:	17da      	asrs	r2, r3, #31
 8001806:	1a8a      	subs	r2, r1, r2
 8001808:	2164      	movs	r1, #100	; 0x64
 800180a:	fb01 f202 	mul.w	r2, r1, r2
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
			  int dd = ((int)(latitudeTemp*10000))%10000;
 8001812:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001816:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80019cc <main+0x5a4>
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001822:	ee17 3a90 	vmov	r3, s15
 8001826:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <main+0x5a8>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	1311      	asrs	r1, r2, #12
 800182e:	17da      	asrs	r2, r3, #31
 8001830:	1a8a      	subs	r2, r1, r2
 8001832:	f242 7110 	movw	r1, #10000	; 0x2710
 8001836:	fb01 f202 	mul.w	r2, r1, r2
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	623b      	str	r3, [r7, #32]

	  		  printf("%s\r\n", "Latitude:");
 800183e:	4965      	ldr	r1, [pc, #404]	; (80019d4 <main+0x5ac>)
 8001840:	4865      	ldr	r0, [pc, #404]	; (80019d8 <main+0x5b0>)
 8001842:	f003 fa53 	bl	8004cec <iprintf>
			  printf("%id %im %idd\r\n", degree, min, dd);
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800184c:	4863      	ldr	r0, [pc, #396]	; (80019dc <main+0x5b4>)
 800184e:	f003 fa4d 	bl	8004cec <iprintf>
			  sprintf(outputStr,"%id %im %idd", degree, min, dd);
 8001852:	4638      	mov	r0, r7
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800185c:	4960      	ldr	r1, [pc, #384]	; (80019e0 <main+0x5b8>)
 800185e:	f003 fa85 	bl	8004d6c <siprintf>
			  HD44780_ClrScr();
 8001862:	f7ff fd4f 	bl	8001304 <HD44780_ClrScr>
			  HD44780_PutStr("Latitude:");
 8001866:	485b      	ldr	r0, [pc, #364]	; (80019d4 <main+0x5ac>)
 8001868:	f7ff fd32 	bl	80012d0 <HD44780_PutStr>
			  HD44780_GotoXY(0, 1);
 800186c:	2101      	movs	r1, #1
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff fcf4 	bl	800125c <HD44780_GotoXY>
			  HD44780_PutStr(outputStr);
 8001874:	463b      	mov	r3, r7
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fd2a 	bl	80012d0 <HD44780_PutStr>

			  HAL_Delay(5000);
 800187c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001880:	f000 fbe6 	bl	8002050 <HAL_Delay>
			  state = 3;
 8001884:	2303      	movs	r3, #3
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
			  break;
 8001888:	e09d      	b.n	80019c6 <main+0x59e>

	  	  case 6:
	  		  ;
			  float longitudeTemp = atof(longitude);
 800188a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800188c:	f002 fd2c 	bl	80042e8 <atof>
 8001890:	ec54 3b10 	vmov	r3, r4, d0
 8001894:	4618      	mov	r0, r3
 8001896:	4621      	mov	r1, r4
 8001898:	f7ff f9a6 	bl	8000be8 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	63fb      	str	r3, [r7, #60]	; 0x3c
			  int degreeTemp = (int)longitudeTemp/100;
 80018a0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a8:	ee17 1a90 	vmov	r1, s15
 80018ac:	4b46      	ldr	r3, [pc, #280]	; (80019c8 <main+0x5a0>)
 80018ae:	fb83 2301 	smull	r2, r3, r3, r1
 80018b2:	115a      	asrs	r2, r3, #5
 80018b4:	17cb      	asrs	r3, r1, #31
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
			  int minTemp = (int)longitudeTemp%100;
 80018ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c2:	ee17 3a90 	vmov	r3, s15
 80018c6:	4a40      	ldr	r2, [pc, #256]	; (80019c8 <main+0x5a0>)
 80018c8:	fb82 1203 	smull	r1, r2, r2, r3
 80018cc:	1151      	asrs	r1, r2, #5
 80018ce:	17da      	asrs	r2, r3, #31
 80018d0:	1a8a      	subs	r2, r1, r2
 80018d2:	2164      	movs	r1, #100	; 0x64
 80018d4:	fb01 f202 	mul.w	r2, r1, r2
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
			  int ddTemp = ((int)(longitudeTemp*10000))%10000;
 80018dc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80018e0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80019cc <main+0x5a4>
 80018e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ec:	ee17 3a90 	vmov	r3, s15
 80018f0:	4a37      	ldr	r2, [pc, #220]	; (80019d0 <main+0x5a8>)
 80018f2:	fb82 1203 	smull	r1, r2, r2, r3
 80018f6:	1311      	asrs	r1, r2, #12
 80018f8:	17da      	asrs	r2, r3, #31
 80018fa:	1a8a      	subs	r2, r1, r2
 80018fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8001900:	fb01 f202 	mul.w	r2, r1, r2
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	633b      	str	r3, [r7, #48]	; 0x30

	  		  printf("%s\r\n", "longitude:");
 8001908:	4936      	ldr	r1, [pc, #216]	; (80019e4 <main+0x5bc>)
 800190a:	4833      	ldr	r0, [pc, #204]	; (80019d8 <main+0x5b0>)
 800190c:	f003 f9ee 	bl	8004cec <iprintf>
			  printf("%id %im %idd\r\n", degreeTemp, minTemp, ddTemp);
 8001910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001916:	4831      	ldr	r0, [pc, #196]	; (80019dc <main+0x5b4>)
 8001918:	f003 f9e8 	bl	8004cec <iprintf>
			  sprintf(outputStr,"%id %im %idd", degreeTemp, minTemp, ddTemp);
 800191c:	4638      	mov	r0, r7
 800191e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001926:	492e      	ldr	r1, [pc, #184]	; (80019e0 <main+0x5b8>)
 8001928:	f003 fa20 	bl	8004d6c <siprintf>
			  HD44780_ClrScr();
 800192c:	f7ff fcea 	bl	8001304 <HD44780_ClrScr>
			  HD44780_PutStr("longitude:");
 8001930:	482c      	ldr	r0, [pc, #176]	; (80019e4 <main+0x5bc>)
 8001932:	f7ff fccd 	bl	80012d0 <HD44780_PutStr>
			  HD44780_GotoXY(0, 1);
 8001936:	2101      	movs	r1, #1
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fc8f 	bl	800125c <HD44780_GotoXY>
			  HD44780_PutStr(outputStr);
 800193e:	463b      	mov	r3, r7
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fcc5 	bl	80012d0 <HD44780_PutStr>

			  HAL_Delay(5000);
 8001946:	f241 3088 	movw	r0, #5000	; 0x1388
 800194a:	f000 fb81 	bl	8002050 <HAL_Delay>
			  state = 3;
 800194e:	2303      	movs	r3, #3
 8001950:	667b      	str	r3, [r7, #100]	; 0x64
			  break;
 8001952:	e038      	b.n	80019c6 <main+0x59e>

	  	  case 7:
	  		  ;
	  		  float alti = atof(altitude);
 8001954:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001956:	f002 fcc7 	bl	80042e8 <atof>
 800195a:	ec54 3b10 	vmov	r3, r4, d0
 800195e:	4618      	mov	r0, r3
 8001960:	4621      	mov	r1, r4
 8001962:	f7ff f941 	bl	8000be8 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	643b      	str	r3, [r7, #64]	; 0x40

	  		  printf("%s\r\n", "altitude:");
 800196a:	491f      	ldr	r1, [pc, #124]	; (80019e8 <main+0x5c0>)
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <main+0x5b0>)
 800196e:	f003 f9bd 	bl	8004cec <iprintf>
	  		  printf("%.3f meter\r\n", alti);
 8001972:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001974:	f7fe fde8 	bl	8000548 <__aeabi_f2d>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	461a      	mov	r2, r3
 800197e:	4623      	mov	r3, r4
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <main+0x5c4>)
 8001982:	f003 f9b3 	bl	8004cec <iprintf>
	  		  sprintf(outputStr,"%.3f meter", alti);
 8001986:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001988:	f7fe fdde 	bl	8000548 <__aeabi_f2d>
 800198c:	4603      	mov	r3, r0
 800198e:	460c      	mov	r4, r1
 8001990:	4638      	mov	r0, r7
 8001992:	461a      	mov	r2, r3
 8001994:	4623      	mov	r3, r4
 8001996:	4916      	ldr	r1, [pc, #88]	; (80019f0 <main+0x5c8>)
 8001998:	f003 f9e8 	bl	8004d6c <siprintf>
	  		  HD44780_ClrScr();
 800199c:	f7ff fcb2 	bl	8001304 <HD44780_ClrScr>
	  		  HD44780_PutStr("altitude:");
 80019a0:	4811      	ldr	r0, [pc, #68]	; (80019e8 <main+0x5c0>)
 80019a2:	f7ff fc95 	bl	80012d0 <HD44780_PutStr>
	  		  HD44780_GotoXY(0, 1);
 80019a6:	2101      	movs	r1, #1
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fc57 	bl	800125c <HD44780_GotoXY>
	  		  HD44780_PutStr(outputStr);
 80019ae:	463b      	mov	r3, r7
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc8d 	bl	80012d0 <HD44780_PutStr>

	  		  HAL_Delay(5000);
 80019b6:	f241 3088 	movw	r0, #5000	; 0x1388
 80019ba:	f000 fb49 	bl	8002050 <HAL_Delay>
	  		  state = 3;
 80019be:	2303      	movs	r3, #3
 80019c0:	667b      	str	r3, [r7, #100]	; 0x64
			  break;
 80019c2:	e000      	b.n	80019c6 <main+0x59e>
			break;
 80019c4:	bf00      	nop
	  switch(state){
 80019c6:	e589      	b.n	80014dc <main+0xb4>
 80019c8:	51eb851f 	.word	0x51eb851f
 80019cc:	461c4000 	.word	0x461c4000
 80019d0:	68db8bad 	.word	0x68db8bad
 80019d4:	08009200 	.word	0x08009200
 80019d8:	08009158 	.word	0x08009158
 80019dc:	0800920c 	.word	0x0800920c
 80019e0:	0800921c 	.word	0x0800921c
 80019e4:	0800922c 	.word	0x0800922c
 80019e8:	08009238 	.word	0x08009238
 80019ec:	08009244 	.word	0x08009244
 80019f0:	08009254 	.word	0x08009254

080019f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b0ac      	sub	sp, #176	; 0xb0
 80019f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019fe:	2244      	movs	r2, #68	; 0x44
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f002 fca6 	bl	8004354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2254      	movs	r2, #84	; 0x54
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fc98 	bl	8004354 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a24:	f000 fdb6 	bl	8002594 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a28:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <SystemClock_Config+0x100>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a31      	ldr	r2, [pc, #196]	; (8001af4 <SystemClock_Config+0x100>)
 8001a30:	f023 0318 	bic.w	r3, r3, #24
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001a38:	2314      	movs	r3, #20
 8001a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001a4c:	2360      	movs	r3, #96	; 0x60
 8001a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a52:	2302      	movs	r3, #2
 8001a54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001a64:	2310      	movs	r3, #16
 8001a66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fdfb 	bl	800267c <HAL_RCC_OscConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a8c:	f000 f8bc 	bl	8001c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2303      	movs	r3, #3
 8001a96:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f001 fa06 	bl	8002ebc <HAL_RCC_ClockConfig>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ab6:	f000 f8a7 	bl	8001c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001aba:	2302      	movs	r3, #2
 8001abc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 fbfd 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001ad0:	f000 f89a 	bl	8001c08 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ad4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ad8:	f000 fd7a 	bl	80025d0 <HAL_PWREx_ControlVoltageScaling>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001ae2:	f000 f891 	bl	8001c08 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ae6:	f001 fddf 	bl	80036a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001aea:	bf00      	nop
 8001aec:	37b0      	adds	r7, #176	; 0xb0
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <MX_USART2_UART_Init+0x5c>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	; (8001b50 <MX_USART2_UART_Init+0x58>)
 8001b3c:	f001 feb4 	bl	80038a8 <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b46:	f000 f85f 	bl	8001c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000208 	.word	0x20000208
 8001b54:	40004400 	.word	0x40004400

08001b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_GPIO_Init+0xa8>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	603b      	str	r3, [r7, #0]
 8001bb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2108      	movs	r1, #8
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <MX_GPIO_Init+0xac>)
 8001bbc:	f000 fcd2 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8001bc0:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8001bc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd8:	f000 fb42 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <MX_GPIO_Init+0xac>)
 8001bf4:	f000 fb34 	bl	8002260 <HAL_GPIO_Init>

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40021000 	.word	0x40021000
 8001c04:	48000400 	.word	0x48000400

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0e:	e7fe      	b.n	8001c0e <Error_Handler+0x6>

08001c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_MspInit+0x44>)
 8001c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_MspInit+0x44>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6613      	str	r3, [r2, #96]	; 0x60
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_MspInit+0x44>)
 8001c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_MspInit+0x44>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <HAL_MspInit+0x44>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_MspInit+0x44>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	603b      	str	r3, [r7, #0]
 8001c44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08a      	sub	sp, #40	; 0x28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <HAL_UART_MspInit+0xa0>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d13a      	bne.n	8001cf0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c7a:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
 8001c86:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	613b      	str	r3, [r7, #16]
 8001c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c96:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9e:	4b17      	ldr	r3, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0xa4>)
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001caa:	2304      	movs	r3, #4
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cba:	2307      	movs	r3, #7
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc8:	f000 faca 	bl	8002260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cec:	f000 fab8 	bl	8002260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3728      	adds	r7, #40	; 0x28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	40021000 	.word	0x40021000

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <NMI_Handler+0x4>

08001d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0a:	e7fe      	b.n	8001d0a <HardFault_Handler+0x4>

08001d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <MemManage_Handler+0x4>

08001d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d16:	e7fe      	b.n	8001d16 <BusFault_Handler+0x4>

08001d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d1c:	e7fe      	b.n	8001d1c <UsageFault_Handler+0x4>

08001d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4c:	f000 f960 	bl	8002010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001d60:	2301      	movs	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <_read+0x38>)
 8001d70:	f001 fe7b 	bl	8003a6a <HAL_UART_Receive>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	607b      	str	r3, [r7, #4]

	return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000208 	.word	0x20000208

08001d90 <_write>:

int _write(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	4809      	ldr	r0, [pc, #36]	; (8001dd0 <_write+0x40>)
 8001dac:	f001 fdca 	bl	8003944 <HAL_UART_Transmit>
 8001db0:	4603      	mov	r3, r0
 8001db2:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d002      	beq.n	8001dc0 <_write+0x30>
 8001dba:	7dfb      	ldrb	r3, [r7, #23]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d101      	bne.n	8001dc4 <_write+0x34>
	{
		Error_Handler();
 8001dc0:	f7ff ff22 	bl	8001c08 <Error_Handler>
	}

	return len;
 8001dc4:	687b      	ldr	r3, [r7, #4]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000208 	.word	0x20000208

08001dd4 <_close>:



int _close(int file)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfc:	605a      	str	r2, [r3, #4]
	return 0;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_isatty>:

int _isatty(int file)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
	return 1;
 8001e14:	2301      	movs	r3, #1
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b085      	sub	sp, #20
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	return 0;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <_sbrk+0x5c>)
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <_sbrk+0x60>)
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <_sbrk+0x64>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e58:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <_sbrk+0x64>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <_sbrk+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d207      	bcs.n	8001e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e6c:	f002 fa48 	bl	8004300 <__errno>
 8001e70:	4602      	mov	r2, r0
 8001e72:	230c      	movs	r3, #12
 8001e74:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	e009      	b.n	8001e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <_sbrk+0x64>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <_sbrk+0x64>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <_sbrk+0x64>)
 8001e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20010000 	.word	0x20010000
 8001e9c:	00000400 	.word	0x00000400
 8001ea0:	200001fc 	.word	0x200001fc
 8001ea4:	20000290 	.word	0x20000290

08001ea8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <SystemInit+0x64>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a16      	ldr	r2, [pc, #88]	; (8001f0c <SystemInit+0x64>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <SystemInit+0x68>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <SystemInit+0x68>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <SystemInit+0x68>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <SystemInit+0x68>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <SystemInit+0x68>)
 8001ed4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ed8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001edc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <SystemInit+0x68>)
 8001ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <SystemInit+0x68>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <SystemInit+0x68>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <SystemInit+0x68>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ef8:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <SystemInit+0x64>)
 8001efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efe:	609a      	str	r2, [r3, #8]
#endif
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	40021000 	.word	0x40021000

08001f14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f18:	f7ff ffc6 	bl	8001ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f1e:	e003      	b.n	8001f28 <LoopCopyDataInit>

08001f20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f26:	3104      	adds	r1, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f28:	480a      	ldr	r0, [pc, #40]	; (8001f54 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f30:	d3f6      	bcc.n	8001f20 <CopyDataInit>
	ldr	r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	; (8001f5c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f34:	e002      	b.n	8001f3c <LoopFillZerobss>

08001f36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f38:	f842 3b04 	str.w	r3, [r2], #4

08001f3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <LoopForever+0x16>)
	cmp	r2, r3
 8001f3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f40:	d3f9      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f002 f9e3 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f46:	f7ff fa6f 	bl	8001428 <main>

08001f4a <LoopForever>:

LoopForever:
    b LoopForever
 8001f4a:	e7fe      	b.n	8001f4a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f4c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001f50:	08009610 	.word	0x08009610
	ldr	r0, =_sdata
 8001f54:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f58:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001f5c:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001f60:	20000290 	.word	0x20000290

08001f64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_IRQHandler>

08001f66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f70:	2003      	movs	r0, #3
 8001f72:	f000 f941 	bl	80021f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 f80e 	bl	8001f98 <HAL_InitTick>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	71fb      	strb	r3, [r7, #7]
 8001f86:	e001      	b.n	8001f8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f88:	f7ff fe42 	bl	8001c10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_InitTick+0x6c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d023      	beq.n	8001ff4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_InitTick+0x70>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <HAL_InitTick+0x6c>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f93f 	bl	8002246 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b0f      	cmp	r3, #15
 8001fd2:	d809      	bhi.n	8001fe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fdc:	f000 f917 	bl	800220e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_InitTick+0x74>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e007      	b.n	8001ff8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e004      	b.n	8001ff8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e001      	b.n	8001ff8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000008 	.word	0x20000008
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_IncTick+0x20>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	461a      	mov	r2, r3
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x24>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4413      	add	r3, r2
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_IncTick+0x24>)
 8002022:	6013      	str	r3, [r2, #0]
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000008 	.word	0x20000008
 8002034:	20000288 	.word	0x20000288

08002038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTick+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000288 	.word	0x20000288

08002050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff ffee 	bl	8002038 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002068:	d005      	beq.n	8002076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800206a:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_Delay+0x40>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002076:	bf00      	nop
 8002078:	f7ff ffde 	bl	8002038 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d8f7      	bhi.n	8002078 <HAL_Delay+0x28>
  {
  }
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20000008 	.word	0x20000008

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b480      	push	{r7}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f1c3 0307 	rsb	r3, r3, #7
 8002166:	2b04      	cmp	r3, #4
 8002168:	bf28      	it	cs
 800216a:	2304      	movcs	r3, #4
 800216c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3304      	adds	r3, #4
 8002172:	2b06      	cmp	r3, #6
 8002174:	d902      	bls.n	800217c <NVIC_EncodePriority+0x30>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3b03      	subs	r3, #3
 800217a:	e000      	b.n	800217e <NVIC_EncodePriority+0x32>
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	401a      	ands	r2, r3
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002194:	f04f 31ff 	mov.w	r1, #4294967295
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43d9      	mvns	r1, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	4313      	orrs	r3, r2
         );
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3b01      	subs	r3, #1
 80021c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021c4:	d301      	bcc.n	80021ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00f      	b.n	80021ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ca:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <SysTick_Config+0x40>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d2:	210f      	movs	r1, #15
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f7ff ff8e 	bl	80020f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <SysTick_Config+0x40>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <SysTick_Config+0x40>)
 80021e4:	2207      	movs	r2, #7
 80021e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	e000e010 	.word	0xe000e010

080021f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff47 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
 800221a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002220:	f7ff ff5c 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002224:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	6978      	ldr	r0, [r7, #20]
 800222c:	f7ff ff8e 	bl	800214c <NVIC_EncodePriority>
 8002230:	4602      	mov	r2, r0
 8002232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff5d 	bl	80020f8 <__NVIC_SetPriority>
}
 800223e:	bf00      	nop
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ffb0 	bl	80021b4 <SysTick_Config>
 8002254:	4603      	mov	r3, r0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	e148      	b.n	8002502 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2101      	movs	r1, #1
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	4013      	ands	r3, r2
 800227e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 813a 	beq.w	80024fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d00b      	beq.n	80022a8 <HAL_GPIO_Init+0x48>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d007      	beq.n	80022a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800229c:	2b11      	cmp	r3, #17
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b12      	cmp	r3, #18
 80022a6:	d130      	bne.n	800230a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022de:	2201      	movs	r2, #1
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	091b      	lsrs	r3, r3, #4
 80022f4:	f003 0201 	and.w	r2, r3, #1
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	2203      	movs	r2, #3
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0xea>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b12      	cmp	r3, #18
 8002348:	d123      	bne.n	8002392 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	08da      	lsrs	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3208      	adds	r2, #8
 8002352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002356:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	6939      	ldr	r1, [r7, #16]
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	2203      	movs	r2, #3
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0203 	and.w	r2, r3, #3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 8094 	beq.w	80024fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d4:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HAL_GPIO_Init+0x2c0>)
 80023d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x2c0>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	6613      	str	r3, [r2, #96]	; 0x60
 80023e0:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <HAL_GPIO_Init+0x2c0>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80023ec:	4a4d      	ldr	r2, [pc, #308]	; (8002524 <HAL_GPIO_Init+0x2c4>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	3302      	adds	r3, #2
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	220f      	movs	r2, #15
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002416:	d00d      	beq.n	8002434 <HAL_GPIO_Init+0x1d4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a43      	ldr	r2, [pc, #268]	; (8002528 <HAL_GPIO_Init+0x2c8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d007      	beq.n	8002430 <HAL_GPIO_Init+0x1d0>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a42      	ldr	r2, [pc, #264]	; (800252c <HAL_GPIO_Init+0x2cc>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d101      	bne.n	800242c <HAL_GPIO_Init+0x1cc>
 8002428:	2302      	movs	r3, #2
 800242a:	e004      	b.n	8002436 <HAL_GPIO_Init+0x1d6>
 800242c:	2307      	movs	r3, #7
 800242e:	e002      	b.n	8002436 <HAL_GPIO_Init+0x1d6>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_GPIO_Init+0x1d6>
 8002434:	2300      	movs	r3, #0
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	4093      	lsls	r3, r2
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002446:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_GPIO_Init+0x2c4>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002478:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024cc:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	43db      	mvns	r3, r3
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024f6:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_GPIO_Init+0x2d0>)
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f aeaf 	bne.w	8002270 <HAL_GPIO_Init+0x10>
  }
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40010000 	.word	0x40010000
 8002528:	48000400 	.word	0x48000400
 800252c:	48000800 	.word	0x48000800
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002580:	e002      	b.n	8002588 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002582:	887a      	ldrh	r2, [r7, #2]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800259e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a2:	6013      	str	r3, [r2, #0]
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40007000 	.word	0x40007000

080025b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	d130      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d038      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2232      	movs	r2, #50	; 0x32
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3301      	adds	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002614:	e002      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d102      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263c:	d110      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e00f      	b.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	d007      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000
 8002674:	20000000 	.word	0x20000000
 8002678:	431bde83 	.word	0x431bde83

0800267c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f000 bc11 	b.w	8002eb2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002690:	4ba0      	ldr	r3, [pc, #640]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269a:	4b9e      	ldr	r3, [pc, #632]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 0303 	and.w	r3, r3, #3
 80026a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80e4 	beq.w	800287a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d007      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4c>
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	f040 808b 	bne.w	80027d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	f040 8087 	bne.w	80027d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c8:	4b92      	ldr	r3, [pc, #584]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_OscConfig+0x64>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e3e8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	4b8b      	ldr	r3, [pc, #556]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d004      	beq.n	80026fa <HAL_RCC_OscConfig+0x7e>
 80026f0:	4b88      	ldr	r3, [pc, #544]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f8:	e005      	b.n	8002706 <HAL_RCC_OscConfig+0x8a>
 80026fa:	4b86      	ldr	r3, [pc, #536]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80026fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002706:	4293      	cmp	r3, r2
 8002708:	d223      	bcs.n	8002752 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 fd78 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e3c9      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271e:	4b7d      	ldr	r3, [pc, #500]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7c      	ldr	r2, [pc, #496]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002724:	f043 0308 	orr.w	r3, r3, #8
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b7a      	ldr	r3, [pc, #488]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	4977      	ldr	r1, [pc, #476]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002738:	4313      	orrs	r3, r2
 800273a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800273c:	4b75      	ldr	r3, [pc, #468]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	4972      	ldr	r1, [pc, #456]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
 8002750:	e025      	b.n	800279e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002752:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6f      	ldr	r2, [pc, #444]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6d      	ldr	r3, [pc, #436]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	496a      	ldr	r1, [pc, #424]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002770:	4b68      	ldr	r3, [pc, #416]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	021b      	lsls	r3, r3, #8
 800277e:	4965      	ldr	r1, [pc, #404]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fd38 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e389      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279e:	f000 fc6f 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 80027a2:	4601      	mov	r1, r0
 80027a4:	4b5b      	ldr	r3, [pc, #364]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	091b      	lsrs	r3, r3, #4
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	4a5a      	ldr	r2, [pc, #360]	; (8002918 <HAL_RCC_OscConfig+0x29c>)
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	fa21 f303 	lsr.w	r3, r1, r3
 80027ba:	4a58      	ldr	r2, [pc, #352]	; (800291c <HAL_RCC_OscConfig+0x2a0>)
 80027bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027be:	4b58      	ldr	r3, [pc, #352]	; (8002920 <HAL_RCC_OscConfig+0x2a4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fbe8 	bl	8001f98 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d052      	beq.n	8002878 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	e36d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d032      	beq.n	8002844 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027de:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027ea:	f7ff fc25 	bl	8002038 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027f2:	f7ff fc21 	bl	8002038 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e356      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002804:	4b43      	ldr	r3, [pc, #268]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3f      	ldr	r2, [pc, #252]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002816:	f043 0308 	orr.w	r3, r3, #8
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	493a      	ldr	r1, [pc, #232]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	4935      	ldr	r1, [pc, #212]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
 8002842:	e01a      	b.n	800287a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002844:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a32      	ldr	r2, [pc, #200]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002850:	f7ff fbf2 	bl	8002038 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002858:	f7ff fbee 	bl	8002038 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e323      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800286a:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x1dc>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d073      	beq.n	800296e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b08      	cmp	r3, #8
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x21c>
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d10e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d063      	beq.n	800296c <HAL_RCC_OscConfig+0x2f0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d15f      	bne.n	800296c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e300      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x24c>
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e01d      	b.n	8002904 <HAL_RCC_OscConfig+0x288>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x270>
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a0f      	ldr	r2, [pc, #60]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	e00b      	b.n	8002904 <HAL_RCC_OscConfig+0x288>
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a05      	ldr	r2, [pc, #20]	; (8002914 <HAL_RCC_OscConfig+0x298>)
 80028fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01b      	beq.n	8002944 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff fb94 	bl	8002038 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002912:	e010      	b.n	8002936 <HAL_RCC_OscConfig+0x2ba>
 8002914:	40021000 	.word	0x40021000
 8002918:	0800926c 	.word	0x0800926c
 800291c:	20000000 	.word	0x20000000
 8002920:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002924:	f7ff fb88 	bl	8002038 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e2bd      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002936:	4baf      	ldr	r3, [pc, #700]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x2a8>
 8002942:	e014      	b.n	800296e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7ff fb78 	bl	8002038 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800294c:	f7ff fb74 	bl	8002038 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e2a9      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295e:	4ba5      	ldr	r3, [pc, #660]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x2d0>
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d060      	beq.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d005      	beq.n	800298c <HAL_RCC_OscConfig+0x310>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d119      	bne.n	80029ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d116      	bne.n	80029ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800298c:	4b99      	ldr	r3, [pc, #612]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_OscConfig+0x328>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e286      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b93      	ldr	r3, [pc, #588]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4990      	ldr	r1, [pc, #576]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b8:	e040      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d023      	beq.n	8002a0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c2:	4b8c      	ldr	r3, [pc, #560]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a8b      	ldr	r2, [pc, #556]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7ff fb33 	bl	8002038 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d6:	f7ff fb2f 	bl	8002038 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e264      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	4b82      	ldr	r3, [pc, #520]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f4:	4b7f      	ldr	r3, [pc, #508]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	061b      	lsls	r3, r3, #24
 8002a02:	497c      	ldr	r1, [pc, #496]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
 8002a08:	e018      	b.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a0a:	4b7a      	ldr	r3, [pc, #488]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a79      	ldr	r2, [pc, #484]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff fb0f 	bl	8002038 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7ff fb0b 	bl	8002038 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e240      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a30:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f0      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d03c      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a50:	4b68      	ldr	r3, [pc, #416]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a56:	4a67      	ldr	r2, [pc, #412]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a60:	f7ff faea 	bl	8002038 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a68:	f7ff fae6 	bl	8002038 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e21b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7a:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ef      	beq.n	8002a68 <HAL_RCC_OscConfig+0x3ec>
 8002a88:	e01b      	b.n	8002ac2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a90:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7ff facd 	bl	8002038 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fac9 	bl	8002038 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1fe      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab4:	4b4f      	ldr	r3, [pc, #316]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ef      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a6 	beq.w	8002c1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ad4:	4b47      	ldr	r3, [pc, #284]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10d      	bne.n	8002afc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	4b44      	ldr	r3, [pc, #272]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4a43      	ldr	r2, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6593      	str	r3, [r2, #88]	; 0x58
 8002aec:	4b41      	ldr	r3, [pc, #260]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af8:	2301      	movs	r3, #1
 8002afa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002afc:	4b3e      	ldr	r3, [pc, #248]	; (8002bf8 <HAL_RCC_OscConfig+0x57c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d118      	bne.n	8002b3a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4b3b      	ldr	r3, [pc, #236]	; (8002bf8 <HAL_RCC_OscConfig+0x57c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a3a      	ldr	r2, [pc, #232]	; (8002bf8 <HAL_RCC_OscConfig+0x57c>)
 8002b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b14:	f7ff fa90 	bl	8002038 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7ff fa8c 	bl	8002038 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1c1      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <HAL_RCC_OscConfig+0x57c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d108      	bne.n	8002b54 <HAL_RCC_OscConfig+0x4d8>
 8002b42:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	4a2a      	ldr	r2, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b52:	e024      	b.n	8002b9e <HAL_RCC_OscConfig+0x522>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d110      	bne.n	8002b7e <HAL_RCC_OscConfig+0x502>
 8002b5c:	4b25      	ldr	r3, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b64:	f043 0304 	orr.w	r3, r3, #4
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b6c:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b7c:	e00f      	b.n	8002b9e <HAL_RCC_OscConfig+0x522>
 8002b7e:	4b1d      	ldr	r3, [pc, #116]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b86:	f023 0301 	bic.w	r3, r3, #1
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	4a17      	ldr	r2, [pc, #92]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002b96:	f023 0304 	bic.w	r3, r3, #4
 8002b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d016      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7ff fa47 	bl	8002038 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f7ff fa43 	bl	8002038 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e176      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <HAL_RCC_OscConfig+0x578>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ed      	beq.n	8002bae <HAL_RCC_OscConfig+0x532>
 8002bd2:	e01a      	b.n	8002c0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7ff fa30 	bl	8002038 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bda:	e00f      	b.n	8002bfc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7ff fa2c 	bl	8002038 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d906      	bls.n	8002bfc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e15f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bfc:	4baa      	ldr	r3, [pc, #680]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1e8      	bne.n	8002bdc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4ba5      	ldr	r3, [pc, #660]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4aa4      	ldr	r2, [pc, #656]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d03c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01c      	beq.n	8002c6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c30:	4b9d      	ldr	r3, [pc, #628]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c36:	4a9c      	ldr	r2, [pc, #624]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c40:	f7ff f9fa 	bl	8002038 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c48:	f7ff f9f6 	bl	8002038 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e12b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c5a:	4b93      	ldr	r3, [pc, #588]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0ef      	beq.n	8002c48 <HAL_RCC_OscConfig+0x5cc>
 8002c68:	e01b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c6a:	4b8f      	ldr	r3, [pc, #572]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c70:	4a8d      	ldr	r2, [pc, #564]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f9dd 	bl	8002038 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c82:	f7ff f9d9 	bl	8002038 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e10e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c94:	4b84      	ldr	r3, [pc, #528]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1ef      	bne.n	8002c82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8102 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	f040 80c5 	bne.w	8002e40 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cb6:	4b7c      	ldr	r3, [pc, #496]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f003 0203 	and.w	r2, r3, #3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d12c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d123      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d11b      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d113      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d109      	bne.n	8002d24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d067      	beq.n	8002df4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	2b0c      	cmp	r3, #12
 8002d28:	d062      	beq.n	8002df0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e0bb      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d46:	f7ff f977 	bl	8002038 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4e:	f7ff f973 	bl	8002038 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0a8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d60:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f0      	bne.n	8002d4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <HAL_RCC_OscConfig+0x830>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	4311      	orrs	r1, r2
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d86:	0212      	lsls	r2, r2, #8
 8002d88:	4311      	orrs	r1, r2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d8e:	0852      	lsrs	r2, r2, #1
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0552      	lsls	r2, r2, #21
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d9a:	0852      	lsrs	r2, r2, #1
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	0652      	lsls	r2, r2, #25
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da6:	06d2      	lsls	r2, r2, #27
 8002da8:	430a      	orrs	r2, r1
 8002daa:	493f      	ldr	r1, [pc, #252]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002db0:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a3c      	ldr	r2, [pc, #240]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc8:	f7ff f936 	bl	8002038 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff f932 	bl	8002038 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e067      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dee:	e05f      	b.n	8002eb0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e05e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df4:	4b2c      	ldr	r3, [pc, #176]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d157      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a28      	ldr	r2, [pc, #160]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e0c:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e18:	f7ff f90e 	bl	8002038 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7ff f90a 	bl	8002038 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e03f      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x7a4>
 8002e3e:	e037      	b.n	8002eb0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d02d      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e50:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e64:	f023 0303 	bic.w	r3, r3, #3
 8002e68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	4a0e      	ldr	r2, [pc, #56]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e70:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7ff f8dd 	bl	8002038 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e82:	f7ff f8d9 	bl	8002038 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e00e      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <HAL_RCC_OscConfig+0x82c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x806>
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e005      	b.n	8002eb2 <HAL_RCC_OscConfig+0x836>
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop

08002ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0c8      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4961      	ldr	r1, [pc, #388]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b0      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d04c      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d121      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e09e      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e092      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f44:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e086      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e07e      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b42      	ldr	r3, [pc, #264]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 0203 	bic.w	r2, r3, #3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	493f      	ldr	r1, [pc, #252]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f76:	f7ff f85f 	bl	8002038 <HAL_GetTick>
 8002f7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7e:	f7ff f85b 	bl	8002038 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e066      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 020c 	and.w	r2, r3, #12
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d1eb      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb2:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	492c      	ldr	r1, [pc, #176]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d210      	bcs.n	8002ff4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd2:	4b26      	ldr	r3, [pc, #152]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f023 0207 	bic.w	r2, r3, #7
 8002fda:	4924      	ldr	r1, [pc, #144]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_RCC_ClockConfig+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e036      	b.n	8003062 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	4918      	ldr	r1, [pc, #96]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4910      	ldr	r1, [pc, #64]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 800302e:	4313      	orrs	r3, r2
 8003030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003032:	f000 f825 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003036:	4601      	mov	r1, r0
 8003038:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCC_ClockConfig+0x1b4>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	fa21 f303 	lsr.w	r3, r1, r3
 800304e:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe ff9e 	bl	8001f98 <HAL_InitTick>
 800305c:	4603      	mov	r3, r0
 800305e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003060:	7afb      	ldrb	r3, [r7, #11]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40022000 	.word	0x40022000
 8003070:	40021000 	.word	0x40021000
 8003074:	0800926c 	.word	0x0800926c
 8003078:	20000000 	.word	0x20000000
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	2300      	movs	r3, #0
 800308c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308e:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003098:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x34>
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	d121      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d11e      	bne.n	80030f2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030b4:	4b33      	ldr	r3, [pc, #204]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c0:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 030f 	and.w	r3, r3, #15
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e005      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030dc:	4a2a      	ldr	r2, [pc, #168]	; (8003188 <HAL_RCC_GetSysClockFreq+0x108>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10d      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f0:	e00a      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d102      	bne.n	80030fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f8:	4b24      	ldr	r3, [pc, #144]	; (800318c <HAL_RCC_GetSysClockFreq+0x10c>)
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e004      	b.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d101      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_GetSysClockFreq+0x110>)
 8003106:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d133      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800310e:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0xa4>
 800311e:	2b03      	cmp	r3, #3
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0xaa>
 8003122:	e005      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003124:	4b19      	ldr	r3, [pc, #100]	; (800318c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003126:	617b      	str	r3, [r7, #20]
      break;
 8003128:	e005      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800312a:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_GetSysClockFreq+0x110>)
 800312c:	617b      	str	r3, [r7, #20]
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	617b      	str	r3, [r7, #20]
      break;
 8003134:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003136:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	3301      	adds	r3, #1
 8003142:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	0a1b      	lsrs	r3, r3, #8
 800314a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	fb02 f203 	mul.w	r2, r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800315c:	4b09      	ldr	r3, [pc, #36]	; (8003184 <HAL_RCC_GetSysClockFreq+0x104>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0e5b      	lsrs	r3, r3, #25
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	3301      	adds	r3, #1
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003176:	69bb      	ldr	r3, [r7, #24]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3724      	adds	r7, #36	; 0x24
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40021000 	.word	0x40021000
 8003188:	08009284 	.word	0x08009284
 800318c:	00f42400 	.word	0x00f42400
 8003190:	007a1200 	.word	0x007a1200

08003194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4601      	mov	r1, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4a04      	ldr	r2, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c2:	5cd3      	ldrb	r3, [r2, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	0800927c 	.word	0x0800927c

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031dc:	f7ff ffda 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031e0:	4601      	mov	r1, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	0800927c 	.word	0x0800927c

08003204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800321c:	f7ff f9ca 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 8003220:	6178      	str	r0, [r7, #20]
 8003222:	e014      	b.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800323c:	f7ff f9ba 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 8003240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d10b      	bne.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d919      	bls.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2ba0      	cmp	r3, #160	; 0xa0
 8003260:	d902      	bls.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003262:	2302      	movs	r3, #2
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	e013      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003268:	2301      	movs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e010      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d902      	bls.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003274:	2303      	movs	r3, #3
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e00a      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d102      	bne.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003280:	2302      	movs	r3, #2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e004      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b70      	cmp	r3, #112	; 0x70
 800328a:	d101      	bne.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800328c:	2301      	movs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0207 	bic.w	r2, r3, #7
 8003298:	4909      	ldr	r1, [pc, #36]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40022000 	.word	0x40022000

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032cc:	2300      	movs	r3, #0
 80032ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d0:	2300      	movs	r3, #0
 80032d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d02f      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d005      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ee:	d015      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x58>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80032f4:	e00f      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032f6:	4bac      	ldr	r3, [pc, #688]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	4aab      	ldr	r2, [pc, #684]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003302:	e00c      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3304      	adds	r3, #4
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f000 f9dc 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003314:	e003      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	74fb      	strb	r3, [r7, #19]
      break;
 800331a:	e000      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 800331c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331e:	7cfb      	ldrb	r3, [r7, #19]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003324:	4ba0      	ldr	r3, [pc, #640]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	499d      	ldr	r1, [pc, #628]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800333a:	e001      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
 800333e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8099 	beq.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003352:	4b95      	ldr	r3, [pc, #596]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003362:	2300      	movs	r3, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003368:	4b8f      	ldr	r3, [pc, #572]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800336a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336c:	4a8e      	ldr	r2, [pc, #568]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800336e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003372:	6593      	str	r3, [r2, #88]	; 0x58
 8003374:	4b8c      	ldr	r3, [pc, #560]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337c:	60bb      	str	r3, [r7, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003380:	2301      	movs	r3, #1
 8003382:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003384:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a88      	ldr	r2, [pc, #544]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003390:	f7fe fe52 	bl	8002038 <HAL_GetTick>
 8003394:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003396:	e009      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fe4e 	bl	8002038 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	74fb      	strb	r3, [r7, #19]
        break;
 80033aa:	e005      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033ac:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d155      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01e      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d019      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033da:	4b73      	ldr	r3, [pc, #460]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033e6:	4b70      	ldr	r3, [pc, #448]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033f6:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003406:	4a68      	ldr	r2, [pc, #416]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d016      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe fe0e 	bl	8002038 <HAL_GetTick>
 800341c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341e:	e00b      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003420:	f7fe fe0a 	bl	8002038 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f241 3288 	movw	r2, #5000	; 0x1388
 800342e:	4293      	cmp	r3, r2
 8003430:	d902      	bls.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	74fb      	strb	r3, [r7, #19]
            break;
 8003436:	e006      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003438:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0ec      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003446:	7cfb      	ldrb	r3, [r7, #19]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10b      	bne.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344c:	4b56      	ldr	r3, [pc, #344]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	4953      	ldr	r1, [pc, #332]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800345c:	4313      	orrs	r3, r2
 800345e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003462:	e004      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003464:	7cfb      	ldrb	r3, [r7, #19]
 8003466:	74bb      	strb	r3, [r7, #18]
 8003468:	e001      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	7cfb      	ldrb	r3, [r7, #19]
 800346c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346e:	7c7b      	ldrb	r3, [r7, #17]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b4c      	ldr	r3, [pc, #304]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800348c:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4943      	ldr	r1, [pc, #268]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b4:	f023 020c 	bic.w	r2, r3, #12
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	493a      	ldr	r1, [pc, #232]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4932      	ldr	r1, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	4929      	ldr	r1, [pc, #164]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003514:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003522:	4921      	ldr	r1, [pc, #132]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4918      	ldr	r1, [pc, #96]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003546:	4313      	orrs	r3, r2
 8003548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	4910      	ldr	r1, [pc, #64]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02c      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359a:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a4:	60d3      	str	r3, [r2, #12]
 80035a6:	e015      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f881 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d028      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e0:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	492d      	ldr	r1, [pc, #180]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035fe:	d106      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003600:	4b28      	ldr	r3, [pc, #160]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	4a27      	ldr	r2, [pc, #156]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360a:	60d3      	str	r3, [r2, #12]
 800360c:	e011      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003616:	d10c      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	2101      	movs	r1, #1
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f852 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01c      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800363e:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364c:	4915      	ldr	r1, [pc, #84]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3304      	adds	r3, #4
 8003662:	2102      	movs	r1, #2
 8003664:	4618      	mov	r0, r3
 8003666:	f000 f82f 	bl	80036c8 <RCCEx_PLLSAI1_Config>
 800366a:	4603      	mov	r3, r0
 800366c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800366e:	7cfb      	ldrb	r3, [r7, #19]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8003674:	7cfb      	ldrb	r3, [r7, #19]
 8003676:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	4904      	ldr	r1, [pc, #16]	; (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800369a:	7cbb      	ldrb	r3, [r7, #18]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	6013      	str	r3, [r2, #0]
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40021000 	.word	0x40021000

080036c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036d6:	4b73      	ldr	r3, [pc, #460]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036e2:	4b70      	ldr	r3, [pc, #448]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f003 0203 	and.w	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d10d      	bne.n	800370e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
       ||
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
       ||
 800370a:	429a      	cmp	r2, r3
 800370c:	d044      	beq.n	8003798 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e041      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d00c      	beq.n	8003736 <RCCEx_PLLSAI1_Config+0x6e>
 800371c:	2b03      	cmp	r3, #3
 800371e:	d013      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x80>
 8003720:	2b01      	cmp	r3, #1
 8003722:	d120      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003724:	4b5f      	ldr	r3, [pc, #380]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d11d      	bne.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003734:	e01a      	b.n	800376c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003736:	4b5b      	ldr	r3, [pc, #364]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	2b00      	cmp	r3, #0
 8003740:	d116      	bne.n	8003770 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003746:	e013      	b.n	8003770 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003748:	4b56      	ldr	r3, [pc, #344]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10f      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003754:	4b53      	ldr	r3, [pc, #332]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003764:	e006      	b.n	8003774 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
      break;
 800376a:	e004      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800376c:	bf00      	nop
 800376e:	e002      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8003774:	bf00      	nop
    }

    if(status == HAL_OK)
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800377c:	4b49      	ldr	r3, [pc, #292]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	3b01      	subs	r3, #1
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	430b      	orrs	r3, r1
 8003792:	4944      	ldr	r1, [pc, #272]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003794:	4313      	orrs	r3, r2
 8003796:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d17c      	bne.n	8003898 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800379e:	4b41      	ldr	r3, [pc, #260]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a40      	ldr	r2, [pc, #256]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037aa:	f7fe fc45 	bl	8002038 <HAL_GetTick>
 80037ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b0:	e009      	b.n	80037c6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037b2:	f7fe fc41 	bl	8002038 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d902      	bls.n	80037c6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	73fb      	strb	r3, [r7, #15]
        break;
 80037c4:	e005      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037c6:	4b37      	ldr	r3, [pc, #220]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ef      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d15f      	bne.n	8003898 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d110      	bne.n	8003800 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037de:	4b31      	ldr	r3, [pc, #196]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80037e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68d2      	ldr	r2, [r2, #12]
 80037f4:	06d2      	lsls	r2, r2, #27
 80037f6:	430a      	orrs	r2, r1
 80037f8:	492a      	ldr	r1, [pc, #168]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	610b      	str	r3, [r1, #16]
 80037fe:	e027      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d112      	bne.n	800382c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003806:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800380e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	0211      	lsls	r1, r2, #8
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6912      	ldr	r2, [r2, #16]
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0552      	lsls	r2, r2, #21
 8003822:	430a      	orrs	r2, r1
 8003824:	491f      	ldr	r1, [pc, #124]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	610b      	str	r3, [r1, #16]
 800382a:	e011      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003834:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	0211      	lsls	r1, r2, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6952      	ldr	r2, [r2, #20]
 8003842:	0852      	lsrs	r2, r2, #1
 8003844:	3a01      	subs	r2, #1
 8003846:	0652      	lsls	r2, r2, #25
 8003848:	430a      	orrs	r2, r1
 800384a:	4916      	ldr	r1, [pc, #88]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800384c:	4313      	orrs	r3, r2
 800384e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003850:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a13      	ldr	r2, [pc, #76]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fe fbec 	bl	8002038 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003864:	f7fe fbe8 	bl	8002038 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
          break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d106      	bne.n	8003898 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800388c:	691a      	ldr	r2, [r3, #16]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	4904      	ldr	r1, [pc, #16]	; (80038a4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000

080038a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e040      	b.n	800393c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fe f9c4 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	; 0x24
 80038d4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0201 	bic.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f98c 	bl	8003c04 <UART_SetConfig>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e022      	b.n	800393c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fb90 	bl	8004024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003912:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003922:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fc17 	bl	8004168 <UART_CheckIdleState>
 800393a:	4603      	mov	r3, r0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	2b20      	cmp	r3, #32
 800395a:	f040 8081 	bne.w	8003a60 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_UART_Transmit+0x26>
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e079      	b.n	8003a62 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_UART_Transmit+0x38>
 8003978:	2302      	movs	r3, #2
 800397a:	e072      	b.n	8003a62 <HAL_UART_Transmit+0x11e>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	; 0x21
 800398e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003990:	f7fe fb52 	bl	8002038 <HAL_GetTick>
 8003994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	88fa      	ldrh	r2, [r7, #6]
 800399a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ae:	d108      	bne.n	80039c2 <HAL_UART_Transmit+0x7e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e003      	b.n	80039ca <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80039d2:	e02d      	b.n	8003a30 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fc07 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e039      	b.n	8003a62 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10b      	bne.n	8003a0c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	b292      	uxth	r2, r2
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	3302      	adds	r3, #2
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e008      	b.n	8003a1e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b292      	uxth	r2, r2
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1cb      	bne.n	80039d4 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2140      	movs	r1, #64	; 0x40
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fbd3 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e005      	b.n	8003a62 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b08a      	sub	sp, #40	; 0x28
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f040 80bb 	bne.w	8003bfa <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_UART_Receive+0x26>
 8003a8a:	88fb      	ldrh	r3, [r7, #6]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b3      	b.n	8003bfc <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Receive+0x38>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0ac      	b.n	8003bfc <HAL_UART_Receive+0x192>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2222      	movs	r2, #34	; 0x22
 8003ab4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fabf 	bl	8002038 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad4:	d10e      	bne.n	8003af4 <HAL_UART_Receive+0x8a>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d105      	bne.n	8003aea <HAL_UART_Receive+0x80>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ae8:	e02d      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	22ff      	movs	r2, #255	; 0xff
 8003aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003af2:	e028      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10d      	bne.n	8003b18 <HAL_UART_Receive+0xae>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d104      	bne.n	8003b0e <HAL_UART_Receive+0xa4>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	22ff      	movs	r2, #255	; 0xff
 8003b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0c:	e01b      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	227f      	movs	r2, #127	; 0x7f
 8003b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b16:	e016      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b20:	d10d      	bne.n	8003b3e <HAL_UART_Receive+0xd4>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_UART_Receive+0xca>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	227f      	movs	r2, #127	; 0x7f
 8003b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b32:	e008      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	223f      	movs	r2, #63	; 0x3f
 8003b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3c:	e003      	b.n	8003b46 <HAL_UART_Receive+0xdc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b4c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d108      	bne.n	8003b6a <HAL_UART_Receive+0x100>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e003      	b.n	8003b72 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003b7a:	e033      	b.n	8003be4 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2120      	movs	r1, #32
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb33 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e032      	b.n	8003bfc <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	8a7b      	ldrh	r3, [r7, #18]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	e00d      	b.n	8003bd2 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	8a7b      	ldrh	r3, [r7, #18]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1c5      	bne.n	8003b7c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003c08:	b088      	sub	sp, #32
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4bb0      	ldr	r3, [pc, #704]	; (8003ef4 <UART_SetConfig+0x2f0>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	69f9      	ldr	r1, [r7, #28]
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4aa6      	ldr	r2, [pc, #664]	; (8003ef8 <UART_SetConfig+0x2f4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d004      	beq.n	8003c6e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a9d      	ldr	r2, [pc, #628]	; (8003efc <UART_SetConfig+0x2f8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d121      	bne.n	8003cd0 <UART_SetConfig+0xcc>
 8003c8c:	4b9c      	ldr	r3, [pc, #624]	; (8003f00 <UART_SetConfig+0x2fc>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d816      	bhi.n	8003cc8 <UART_SetConfig+0xc4>
 8003c9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0x9c>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cbd 	.word	0x08003cbd
 8003ca8:	08003cb7 	.word	0x08003cb7
 8003cac:	08003cc3 	.word	0x08003cc3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e072      	b.n	8003d9c <UART_SetConfig+0x198>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	76fb      	strb	r3, [r7, #27]
 8003cba:	e06f      	b.n	8003d9c <UART_SetConfig+0x198>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	76fb      	strb	r3, [r7, #27]
 8003cc0:	e06c      	b.n	8003d9c <UART_SetConfig+0x198>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	76fb      	strb	r3, [r7, #27]
 8003cc6:	e069      	b.n	8003d9c <UART_SetConfig+0x198>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	76fb      	strb	r3, [r7, #27]
 8003ccc:	bf00      	nop
 8003cce:	e065      	b.n	8003d9c <UART_SetConfig+0x198>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <UART_SetConfig+0x300>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d134      	bne.n	8003d44 <UART_SetConfig+0x140>
 8003cda:	4b89      	ldr	r3, [pc, #548]	; (8003f00 <UART_SetConfig+0x2fc>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f003 030c 	and.w	r3, r3, #12
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d829      	bhi.n	8003d3c <UART_SetConfig+0x138>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0xec>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d3d 	.word	0x08003d3d
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d31 	.word	0x08003d31
 8003d04:	08003d3d 	.word	0x08003d3d
 8003d08:	08003d3d 	.word	0x08003d3d
 8003d0c:	08003d3d 	.word	0x08003d3d
 8003d10:	08003d2b 	.word	0x08003d2b
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d3d 	.word	0x08003d3d
 8003d1c:	08003d3d 	.word	0x08003d3d
 8003d20:	08003d37 	.word	0x08003d37
 8003d24:	2300      	movs	r3, #0
 8003d26:	76fb      	strb	r3, [r7, #27]
 8003d28:	e038      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	76fb      	strb	r3, [r7, #27]
 8003d2e:	e035      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d30:	2304      	movs	r3, #4
 8003d32:	76fb      	strb	r3, [r7, #27]
 8003d34:	e032      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d36:	2308      	movs	r3, #8
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e02f      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d3c:	2310      	movs	r3, #16
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	bf00      	nop
 8003d42:	e02b      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a6b      	ldr	r2, [pc, #428]	; (8003ef8 <UART_SetConfig+0x2f4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d124      	bne.n	8003d98 <UART_SetConfig+0x194>
 8003d4e:	4b6c      	ldr	r3, [pc, #432]	; (8003f00 <UART_SetConfig+0x2fc>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5c:	d012      	beq.n	8003d84 <UART_SetConfig+0x180>
 8003d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d62:	d802      	bhi.n	8003d6a <UART_SetConfig+0x166>
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <UART_SetConfig+0x174>
 8003d68:	e012      	b.n	8003d90 <UART_SetConfig+0x18c>
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d006      	beq.n	8003d7e <UART_SetConfig+0x17a>
 8003d70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d74:	d009      	beq.n	8003d8a <UART_SetConfig+0x186>
 8003d76:	e00b      	b.n	8003d90 <UART_SetConfig+0x18c>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	76fb      	strb	r3, [r7, #27]
 8003d7c:	e00e      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	76fb      	strb	r3, [r7, #27]
 8003d82:	e00b      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d84:	2304      	movs	r3, #4
 8003d86:	76fb      	strb	r3, [r7, #27]
 8003d88:	e008      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	76fb      	strb	r3, [r7, #27]
 8003d8e:	e005      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d90:	2310      	movs	r3, #16
 8003d92:	76fb      	strb	r3, [r7, #27]
 8003d94:	bf00      	nop
 8003d96:	e001      	b.n	8003d9c <UART_SetConfig+0x198>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a55      	ldr	r2, [pc, #340]	; (8003ef8 <UART_SetConfig+0x2f4>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d174      	bne.n	8003e90 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da6:	7efb      	ldrb	r3, [r7, #27]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d824      	bhi.n	8003df6 <UART_SetConfig+0x1f2>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <UART_SetConfig+0x1b0>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003de7 	.word	0x08003de7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003df7 	.word	0x08003df7
 8003dd4:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7ff f9e8 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003ddc:	6178      	str	r0, [r7, #20]
        break;
 8003dde:	e00f      	b.n	8003e00 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b49      	ldr	r3, [pc, #292]	; (8003f08 <UART_SetConfig+0x304>)
 8003de2:	617b      	str	r3, [r7, #20]
        break;
 8003de4:	e00c      	b.n	8003e00 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7ff f94b 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003dea:	6178      	str	r0, [r7, #20]
        break;
 8003dec:	e008      	b.n	8003e00 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	617b      	str	r3, [r7, #20]
        break;
 8003df4:	e004      	b.n	8003e00 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	76bb      	strb	r3, [r7, #26]
        break;
 8003dfe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8100 	beq.w	8004008 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d305      	bcc.n	8003e24 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d902      	bls.n	8003e2a <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	76bb      	strb	r3, [r7, #26]
 8003e28:	e0ee      	b.n	8004008 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	f04f 0400 	mov.w	r4, #0
 8003e3a:	0214      	lsls	r4, r2, #8
 8003e3c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003e40:	020b      	lsls	r3, r1, #8
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6852      	ldr	r2, [r2, #4]
 8003e46:	0852      	lsrs	r2, r2, #1
 8003e48:	4611      	mov	r1, r2
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	eb13 0b01 	adds.w	fp, r3, r1
 8003e52:	eb44 0c02 	adc.w	ip, r4, r2
 8003e56:	4658      	mov	r0, fp
 8003e58:	4661      	mov	r1, ip
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f04f 0400 	mov.w	r4, #0
 8003e62:	461a      	mov	r2, r3
 8003e64:	4623      	mov	r3, r4
 8003e66:	f7fc ff0f 	bl	8000c88 <__aeabi_uldivmod>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	460c      	mov	r4, r1
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d308      	bcc.n	8003e8a <UART_SetConfig+0x286>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d204      	bcs.n	8003e8a <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e0be      	b.n	8004008 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	76bb      	strb	r3, [r7, #26]
 8003e8e:	e0bb      	b.n	8004008 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e98:	d169      	bne.n	8003f6e <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003e9a:	7efb      	ldrb	r3, [r7, #27]
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d835      	bhi.n	8003f0c <UART_SetConfig+0x308>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x2a4>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ecd 	.word	0x08003ecd
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edd 	.word	0x08003edd
 8003eb4:	08003f0d 	.word	0x08003f0d
 8003eb8:	08003ee3 	.word	0x08003ee3
 8003ebc:	08003f0d 	.word	0x08003f0d
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003eeb 	.word	0x08003eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7ff f96e 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003ed0:	6178      	str	r0, [r7, #20]
        break;
 8003ed2:	e020      	b.n	8003f16 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7ff f980 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8003ed8:	6178      	str	r0, [r7, #20]
        break;
 8003eda:	e01c      	b.n	8003f16 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <UART_SetConfig+0x304>)
 8003ede:	617b      	str	r3, [r7, #20]
        break;
 8003ee0:	e019      	b.n	8003f16 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ee2:	f7ff f8cd 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003ee6:	6178      	str	r0, [r7, #20]
        break;
 8003ee8:	e015      	b.n	8003f16 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eee:	617b      	str	r3, [r7, #20]
        break;
 8003ef0:	e011      	b.n	8003f16 <UART_SetConfig+0x312>
 8003ef2:	bf00      	nop
 8003ef4:	efff69f3 	.word	0xefff69f3
 8003ef8:	40008000 	.word	0x40008000
 8003efc:	40013800 	.word	0x40013800
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40004400 	.word	0x40004400
 8003f08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	76bb      	strb	r3, [r7, #26]
        break;
 8003f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d075      	beq.n	8004008 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	005a      	lsls	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	441a      	add	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d916      	bls.n	8003f68 <UART_SetConfig+0x364>
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d212      	bcs.n	8003f68 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f023 030f 	bic.w	r3, r3, #15
 8003f4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	085b      	lsrs	r3, r3, #1
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	89fb      	ldrh	r3, [r7, #14]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	89fa      	ldrh	r2, [r7, #14]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	e04f      	b.n	8004008 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	76bb      	strb	r3, [r7, #26]
 8003f6c:	e04c      	b.n	8004008 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f6e:	7efb      	ldrb	r3, [r7, #27]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d828      	bhi.n	8003fc6 <UART_SetConfig+0x3c2>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x378>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7ff f904 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8003fa4:	6178      	str	r0, [r7, #20]
        break;
 8003fa6:	e013      	b.n	8003fd0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7ff f916 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8003fac:	6178      	str	r0, [r7, #20]
        break;
 8003fae:	e00f      	b.n	8003fd0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b1b      	ldr	r3, [pc, #108]	; (8004020 <UART_SetConfig+0x41c>)
 8003fb2:	617b      	str	r3, [r7, #20]
        break;
 8003fb4:	e00c      	b.n	8003fd0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7ff f863 	bl	8003080 <HAL_RCC_GetSysClockFreq>
 8003fba:	6178      	str	r0, [r7, #20]
        break;
 8003fbc:	e008      	b.n	8003fd0 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	617b      	str	r3, [r7, #20]
        break;
 8003fc4:	e004      	b.n	8003fd0 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	76bb      	strb	r3, [r7, #26]
        break;
 8003fce:	bf00      	nop
    }

    if (pclk != 0U)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d018      	beq.n	8004008 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	085a      	lsrs	r2, r3, #1
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	441a      	add	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d908      	bls.n	8004004 <UART_SetConfig+0x400>
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d204      	bcs.n	8004004 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	e001      	b.n	8004008 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004014:	7ebb      	ldrb	r3, [r7, #26]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004020:	00f42400 	.word	0x00f42400

08004024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01a      	beq.n	800413a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004122:	d10a      	bne.n	800413a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af02      	add	r7, sp, #8
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004176:	f7fd ff5f 	bl	8002038 <HAL_GetTick>
 800417a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d10e      	bne.n	80041a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f82a 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e020      	b.n	80041ea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d10e      	bne.n	80041d4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f814 	bl	80041f2 <UART_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e00a      	b.n	80041ea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	60f8      	str	r0, [r7, #12]
 80041fa:	60b9      	str	r1, [r7, #8]
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	4613      	mov	r3, r2
 8004200:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004202:	e05d      	b.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d059      	beq.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800420c:	f7fd ff14 	bl	8002038 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <UART_WaitOnFlagUntilTimeout+0x30>
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d11b      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004230:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e042      	b.n	80042e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d02b      	beq.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004272:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004276:	d123      	bne.n	80042c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004280:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004290:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0201 	bic.w	r2, r2, #1
 80042a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e00f      	b.n	80042e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	69da      	ldr	r2, [r3, #28]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d092      	beq.n	8004204 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <atof>:
 80042e8:	2100      	movs	r1, #0
 80042ea:	f001 bb71 	b.w	80059d0 <strtod>
	...

080042f0 <calloc>:
 80042f0:	4b02      	ldr	r3, [pc, #8]	; (80042fc <calloc+0xc>)
 80042f2:	460a      	mov	r2, r1
 80042f4:	4601      	mov	r1, r0
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	f000 b834 	b.w	8004364 <_calloc_r>
 80042fc:	2000000c 	.word	0x2000000c

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	; (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2000000c 	.word	0x2000000c

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4e0d      	ldr	r6, [pc, #52]	; (8004344 <__libc_init_array+0x38>)
 8004310:	4c0d      	ldr	r4, [pc, #52]	; (8004348 <__libc_init_array+0x3c>)
 8004312:	1ba4      	subs	r4, r4, r6
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	2500      	movs	r5, #0
 8004318:	42a5      	cmp	r5, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	4e0b      	ldr	r6, [pc, #44]	; (800434c <__libc_init_array+0x40>)
 800431e:	4c0c      	ldr	r4, [pc, #48]	; (8004350 <__libc_init_array+0x44>)
 8004320:	f004 ff04 	bl	800912c <_init>
 8004324:	1ba4      	subs	r4, r4, r6
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	2500      	movs	r5, #0
 800432a:	42a5      	cmp	r5, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004334:	4798      	blx	r3
 8004336:	3501      	adds	r5, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433e:	4798      	blx	r3
 8004340:	3501      	adds	r5, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08009608 	.word	0x08009608
 8004348:	08009608 	.word	0x08009608
 800434c:	08009608 	.word	0x08009608
 8004350:	0800960c 	.word	0x0800960c

08004354 <memset>:
 8004354:	4402      	add	r2, r0
 8004356:	4603      	mov	r3, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <_calloc_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	fb02 f401 	mul.w	r4, r2, r1
 800436a:	4621      	mov	r1, r4
 800436c:	f000 f808 	bl	8004380 <_malloc_r>
 8004370:	4605      	mov	r5, r0
 8004372:	b118      	cbz	r0, 800437c <_calloc_r+0x18>
 8004374:	4622      	mov	r2, r4
 8004376:	2100      	movs	r1, #0
 8004378:	f7ff ffec 	bl	8004354 <memset>
 800437c:	4628      	mov	r0, r5
 800437e:	bd38      	pop	{r3, r4, r5, pc}

08004380 <_malloc_r>:
 8004380:	b570      	push	{r4, r5, r6, lr}
 8004382:	1ccd      	adds	r5, r1, #3
 8004384:	f025 0503 	bic.w	r5, r5, #3
 8004388:	3508      	adds	r5, #8
 800438a:	2d0c      	cmp	r5, #12
 800438c:	bf38      	it	cc
 800438e:	250c      	movcc	r5, #12
 8004390:	2d00      	cmp	r5, #0
 8004392:	4606      	mov	r6, r0
 8004394:	db01      	blt.n	800439a <_malloc_r+0x1a>
 8004396:	42a9      	cmp	r1, r5
 8004398:	d903      	bls.n	80043a2 <_malloc_r+0x22>
 800439a:	230c      	movs	r3, #12
 800439c:	6033      	str	r3, [r6, #0]
 800439e:	2000      	movs	r0, #0
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
 80043a2:	f002 fe14 	bl	8006fce <__malloc_lock>
 80043a6:	4a21      	ldr	r2, [pc, #132]	; (800442c <_malloc_r+0xac>)
 80043a8:	6814      	ldr	r4, [r2, #0]
 80043aa:	4621      	mov	r1, r4
 80043ac:	b991      	cbnz	r1, 80043d4 <_malloc_r+0x54>
 80043ae:	4c20      	ldr	r4, [pc, #128]	; (8004430 <_malloc_r+0xb0>)
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	b91b      	cbnz	r3, 80043bc <_malloc_r+0x3c>
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 fcb1 	bl	8004d1c <_sbrk_r>
 80043ba:	6020      	str	r0, [r4, #0]
 80043bc:	4629      	mov	r1, r5
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 fcac 	bl	8004d1c <_sbrk_r>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d124      	bne.n	8004412 <_malloc_r+0x92>
 80043c8:	230c      	movs	r3, #12
 80043ca:	6033      	str	r3, [r6, #0]
 80043cc:	4630      	mov	r0, r6
 80043ce:	f002 fdff 	bl	8006fd0 <__malloc_unlock>
 80043d2:	e7e4      	b.n	800439e <_malloc_r+0x1e>
 80043d4:	680b      	ldr	r3, [r1, #0]
 80043d6:	1b5b      	subs	r3, r3, r5
 80043d8:	d418      	bmi.n	800440c <_malloc_r+0x8c>
 80043da:	2b0b      	cmp	r3, #11
 80043dc:	d90f      	bls.n	80043fe <_malloc_r+0x7e>
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	50cd      	str	r5, [r1, r3]
 80043e2:	18cc      	adds	r4, r1, r3
 80043e4:	4630      	mov	r0, r6
 80043e6:	f002 fdf3 	bl	8006fd0 <__malloc_unlock>
 80043ea:	f104 000b 	add.w	r0, r4, #11
 80043ee:	1d23      	adds	r3, r4, #4
 80043f0:	f020 0007 	bic.w	r0, r0, #7
 80043f4:	1ac3      	subs	r3, r0, r3
 80043f6:	d0d3      	beq.n	80043a0 <_malloc_r+0x20>
 80043f8:	425a      	negs	r2, r3
 80043fa:	50e2      	str	r2, [r4, r3]
 80043fc:	e7d0      	b.n	80043a0 <_malloc_r+0x20>
 80043fe:	428c      	cmp	r4, r1
 8004400:	684b      	ldr	r3, [r1, #4]
 8004402:	bf16      	itet	ne
 8004404:	6063      	strne	r3, [r4, #4]
 8004406:	6013      	streq	r3, [r2, #0]
 8004408:	460c      	movne	r4, r1
 800440a:	e7eb      	b.n	80043e4 <_malloc_r+0x64>
 800440c:	460c      	mov	r4, r1
 800440e:	6849      	ldr	r1, [r1, #4]
 8004410:	e7cc      	b.n	80043ac <_malloc_r+0x2c>
 8004412:	1cc4      	adds	r4, r0, #3
 8004414:	f024 0403 	bic.w	r4, r4, #3
 8004418:	42a0      	cmp	r0, r4
 800441a:	d005      	beq.n	8004428 <_malloc_r+0xa8>
 800441c:	1a21      	subs	r1, r4, r0
 800441e:	4630      	mov	r0, r6
 8004420:	f000 fc7c 	bl	8004d1c <_sbrk_r>
 8004424:	3001      	adds	r0, #1
 8004426:	d0cf      	beq.n	80043c8 <_malloc_r+0x48>
 8004428:	6025      	str	r5, [r4, #0]
 800442a:	e7db      	b.n	80043e4 <_malloc_r+0x64>
 800442c:	20000200 	.word	0x20000200
 8004430:	20000204 	.word	0x20000204

08004434 <__cvt>:
 8004434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004438:	ec55 4b10 	vmov	r4, r5, d0
 800443c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800443e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004442:	2d00      	cmp	r5, #0
 8004444:	460e      	mov	r6, r1
 8004446:	4691      	mov	r9, r2
 8004448:	4619      	mov	r1, r3
 800444a:	bfb8      	it	lt
 800444c:	4622      	movlt	r2, r4
 800444e:	462b      	mov	r3, r5
 8004450:	f027 0720 	bic.w	r7, r7, #32
 8004454:	bfbb      	ittet	lt
 8004456:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800445a:	461d      	movlt	r5, r3
 800445c:	2300      	movge	r3, #0
 800445e:	232d      	movlt	r3, #45	; 0x2d
 8004460:	bfb8      	it	lt
 8004462:	4614      	movlt	r4, r2
 8004464:	2f46      	cmp	r7, #70	; 0x46
 8004466:	700b      	strb	r3, [r1, #0]
 8004468:	d004      	beq.n	8004474 <__cvt+0x40>
 800446a:	2f45      	cmp	r7, #69	; 0x45
 800446c:	d100      	bne.n	8004470 <__cvt+0x3c>
 800446e:	3601      	adds	r6, #1
 8004470:	2102      	movs	r1, #2
 8004472:	e000      	b.n	8004476 <__cvt+0x42>
 8004474:	2103      	movs	r1, #3
 8004476:	ab03      	add	r3, sp, #12
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	ab02      	add	r3, sp, #8
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	4632      	mov	r2, r6
 8004480:	4653      	mov	r3, sl
 8004482:	ec45 4b10 	vmov	d0, r4, r5
 8004486:	f001 fb97 	bl	8005bb8 <_dtoa_r>
 800448a:	2f47      	cmp	r7, #71	; 0x47
 800448c:	4680      	mov	r8, r0
 800448e:	d102      	bne.n	8004496 <__cvt+0x62>
 8004490:	f019 0f01 	tst.w	r9, #1
 8004494:	d026      	beq.n	80044e4 <__cvt+0xb0>
 8004496:	2f46      	cmp	r7, #70	; 0x46
 8004498:	eb08 0906 	add.w	r9, r8, r6
 800449c:	d111      	bne.n	80044c2 <__cvt+0x8e>
 800449e:	f898 3000 	ldrb.w	r3, [r8]
 80044a2:	2b30      	cmp	r3, #48	; 0x30
 80044a4:	d10a      	bne.n	80044bc <__cvt+0x88>
 80044a6:	2200      	movs	r2, #0
 80044a8:	2300      	movs	r3, #0
 80044aa:	4620      	mov	r0, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7fc fb0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80044b2:	b918      	cbnz	r0, 80044bc <__cvt+0x88>
 80044b4:	f1c6 0601 	rsb	r6, r6, #1
 80044b8:	f8ca 6000 	str.w	r6, [sl]
 80044bc:	f8da 3000 	ldr.w	r3, [sl]
 80044c0:	4499      	add	r9, r3
 80044c2:	2200      	movs	r2, #0
 80044c4:	2300      	movs	r3, #0
 80044c6:	4620      	mov	r0, r4
 80044c8:	4629      	mov	r1, r5
 80044ca:	f7fc fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80044ce:	b938      	cbnz	r0, 80044e0 <__cvt+0xac>
 80044d0:	2230      	movs	r2, #48	; 0x30
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	454b      	cmp	r3, r9
 80044d6:	d205      	bcs.n	80044e4 <__cvt+0xb0>
 80044d8:	1c59      	adds	r1, r3, #1
 80044da:	9103      	str	r1, [sp, #12]
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e7f8      	b.n	80044d2 <__cvt+0x9e>
 80044e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80044e4:	9b03      	ldr	r3, [sp, #12]
 80044e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e8:	eba3 0308 	sub.w	r3, r3, r8
 80044ec:	4640      	mov	r0, r8
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	b004      	add	sp, #16
 80044f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080044f6 <__exponent>:
 80044f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044f8:	2900      	cmp	r1, #0
 80044fa:	4604      	mov	r4, r0
 80044fc:	bfba      	itte	lt
 80044fe:	4249      	neglt	r1, r1
 8004500:	232d      	movlt	r3, #45	; 0x2d
 8004502:	232b      	movge	r3, #43	; 0x2b
 8004504:	2909      	cmp	r1, #9
 8004506:	f804 2b02 	strb.w	r2, [r4], #2
 800450a:	7043      	strb	r3, [r0, #1]
 800450c:	dd20      	ble.n	8004550 <__exponent+0x5a>
 800450e:	f10d 0307 	add.w	r3, sp, #7
 8004512:	461f      	mov	r7, r3
 8004514:	260a      	movs	r6, #10
 8004516:	fb91 f5f6 	sdiv	r5, r1, r6
 800451a:	fb06 1115 	mls	r1, r6, r5, r1
 800451e:	3130      	adds	r1, #48	; 0x30
 8004520:	2d09      	cmp	r5, #9
 8004522:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004526:	f103 32ff 	add.w	r2, r3, #4294967295
 800452a:	4629      	mov	r1, r5
 800452c:	dc09      	bgt.n	8004542 <__exponent+0x4c>
 800452e:	3130      	adds	r1, #48	; 0x30
 8004530:	3b02      	subs	r3, #2
 8004532:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004536:	42bb      	cmp	r3, r7
 8004538:	4622      	mov	r2, r4
 800453a:	d304      	bcc.n	8004546 <__exponent+0x50>
 800453c:	1a10      	subs	r0, r2, r0
 800453e:	b003      	add	sp, #12
 8004540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004542:	4613      	mov	r3, r2
 8004544:	e7e7      	b.n	8004516 <__exponent+0x20>
 8004546:	f813 2b01 	ldrb.w	r2, [r3], #1
 800454a:	f804 2b01 	strb.w	r2, [r4], #1
 800454e:	e7f2      	b.n	8004536 <__exponent+0x40>
 8004550:	2330      	movs	r3, #48	; 0x30
 8004552:	4419      	add	r1, r3
 8004554:	7083      	strb	r3, [r0, #2]
 8004556:	1d02      	adds	r2, r0, #4
 8004558:	70c1      	strb	r1, [r0, #3]
 800455a:	e7ef      	b.n	800453c <__exponent+0x46>

0800455c <_printf_float>:
 800455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004560:	b08d      	sub	sp, #52	; 0x34
 8004562:	460c      	mov	r4, r1
 8004564:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004568:	4616      	mov	r6, r2
 800456a:	461f      	mov	r7, r3
 800456c:	4605      	mov	r5, r0
 800456e:	f002 fcfb 	bl	8006f68 <_localeconv_r>
 8004572:	6803      	ldr	r3, [r0, #0]
 8004574:	9304      	str	r3, [sp, #16]
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb fe2a 	bl	80001d0 <strlen>
 800457c:	2300      	movs	r3, #0
 800457e:	930a      	str	r3, [sp, #40]	; 0x28
 8004580:	f8d8 3000 	ldr.w	r3, [r8]
 8004584:	9005      	str	r0, [sp, #20]
 8004586:	3307      	adds	r3, #7
 8004588:	f023 0307 	bic.w	r3, r3, #7
 800458c:	f103 0208 	add.w	r2, r3, #8
 8004590:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004594:	f8d4 b000 	ldr.w	fp, [r4]
 8004598:	f8c8 2000 	str.w	r2, [r8]
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80045a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80045a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80045ac:	9307      	str	r3, [sp, #28]
 80045ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	4ba7      	ldr	r3, [pc, #668]	; (8004854 <_printf_float+0x2f8>)
 80045b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045bc:	f7fc fab6 	bl	8000b2c <__aeabi_dcmpun>
 80045c0:	bb70      	cbnz	r0, 8004620 <_printf_float+0xc4>
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	4ba3      	ldr	r3, [pc, #652]	; (8004854 <_printf_float+0x2f8>)
 80045c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045cc:	f7fc fa90 	bl	8000af0 <__aeabi_dcmple>
 80045d0:	bb30      	cbnz	r0, 8004620 <_printf_float+0xc4>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	4640      	mov	r0, r8
 80045d8:	4649      	mov	r1, r9
 80045da:	f7fc fa7f 	bl	8000adc <__aeabi_dcmplt>
 80045de:	b110      	cbz	r0, 80045e6 <_printf_float+0x8a>
 80045e0:	232d      	movs	r3, #45	; 0x2d
 80045e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045e6:	4a9c      	ldr	r2, [pc, #624]	; (8004858 <_printf_float+0x2fc>)
 80045e8:	4b9c      	ldr	r3, [pc, #624]	; (800485c <_printf_float+0x300>)
 80045ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80045ee:	bf8c      	ite	hi
 80045f0:	4690      	movhi	r8, r2
 80045f2:	4698      	movls	r8, r3
 80045f4:	2303      	movs	r3, #3
 80045f6:	f02b 0204 	bic.w	r2, fp, #4
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	6022      	str	r2, [r4, #0]
 80045fe:	f04f 0900 	mov.w	r9, #0
 8004602:	9700      	str	r7, [sp, #0]
 8004604:	4633      	mov	r3, r6
 8004606:	aa0b      	add	r2, sp, #44	; 0x2c
 8004608:	4621      	mov	r1, r4
 800460a:	4628      	mov	r0, r5
 800460c:	f000 f9e6 	bl	80049dc <_printf_common>
 8004610:	3001      	adds	r0, #1
 8004612:	f040 808d 	bne.w	8004730 <_printf_float+0x1d4>
 8004616:	f04f 30ff 	mov.w	r0, #4294967295
 800461a:	b00d      	add	sp, #52	; 0x34
 800461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	4640      	mov	r0, r8
 8004626:	4649      	mov	r1, r9
 8004628:	f7fc fa80 	bl	8000b2c <__aeabi_dcmpun>
 800462c:	b110      	cbz	r0, 8004634 <_printf_float+0xd8>
 800462e:	4a8c      	ldr	r2, [pc, #560]	; (8004860 <_printf_float+0x304>)
 8004630:	4b8c      	ldr	r3, [pc, #560]	; (8004864 <_printf_float+0x308>)
 8004632:	e7da      	b.n	80045ea <_printf_float+0x8e>
 8004634:	6861      	ldr	r1, [r4, #4]
 8004636:	1c4b      	adds	r3, r1, #1
 8004638:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800463c:	a80a      	add	r0, sp, #40	; 0x28
 800463e:	d13e      	bne.n	80046be <_printf_float+0x162>
 8004640:	2306      	movs	r3, #6
 8004642:	6063      	str	r3, [r4, #4]
 8004644:	2300      	movs	r3, #0
 8004646:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800464a:	ab09      	add	r3, sp, #36	; 0x24
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	ec49 8b10 	vmov	d0, r8, r9
 8004652:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	f8cd a004 	str.w	sl, [sp, #4]
 800465c:	6861      	ldr	r1, [r4, #4]
 800465e:	4628      	mov	r0, r5
 8004660:	f7ff fee8 	bl	8004434 <__cvt>
 8004664:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004668:	2b47      	cmp	r3, #71	; 0x47
 800466a:	4680      	mov	r8, r0
 800466c:	d109      	bne.n	8004682 <_printf_float+0x126>
 800466e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004670:	1cd8      	adds	r0, r3, #3
 8004672:	db02      	blt.n	800467a <_printf_float+0x11e>
 8004674:	6862      	ldr	r2, [r4, #4]
 8004676:	4293      	cmp	r3, r2
 8004678:	dd47      	ble.n	800470a <_printf_float+0x1ae>
 800467a:	f1aa 0a02 	sub.w	sl, sl, #2
 800467e:	fa5f fa8a 	uxtb.w	sl, sl
 8004682:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004688:	d824      	bhi.n	80046d4 <_printf_float+0x178>
 800468a:	3901      	subs	r1, #1
 800468c:	4652      	mov	r2, sl
 800468e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004692:	9109      	str	r1, [sp, #36]	; 0x24
 8004694:	f7ff ff2f 	bl	80044f6 <__exponent>
 8004698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800469a:	1813      	adds	r3, r2, r0
 800469c:	2a01      	cmp	r2, #1
 800469e:	4681      	mov	r9, r0
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	dc02      	bgt.n	80046aa <_printf_float+0x14e>
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	07d1      	lsls	r1, r2, #31
 80046a8:	d501      	bpl.n	80046ae <_printf_float+0x152>
 80046aa:	3301      	adds	r3, #1
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0a5      	beq.n	8004602 <_printf_float+0xa6>
 80046b6:	232d      	movs	r3, #45	; 0x2d
 80046b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046bc:	e7a1      	b.n	8004602 <_printf_float+0xa6>
 80046be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80046c2:	f000 8177 	beq.w	80049b4 <_printf_float+0x458>
 80046c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80046ca:	d1bb      	bne.n	8004644 <_printf_float+0xe8>
 80046cc:	2900      	cmp	r1, #0
 80046ce:	d1b9      	bne.n	8004644 <_printf_float+0xe8>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e7b6      	b.n	8004642 <_printf_float+0xe6>
 80046d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80046d8:	d119      	bne.n	800470e <_printf_float+0x1b2>
 80046da:	2900      	cmp	r1, #0
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	dd0c      	ble.n	80046fa <_printf_float+0x19e>
 80046e0:	6121      	str	r1, [r4, #16]
 80046e2:	b913      	cbnz	r3, 80046ea <_printf_float+0x18e>
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	07d2      	lsls	r2, r2, #31
 80046e8:	d502      	bpl.n	80046f0 <_printf_float+0x194>
 80046ea:	3301      	adds	r3, #1
 80046ec:	440b      	add	r3, r1
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80046f4:	f04f 0900 	mov.w	r9, #0
 80046f8:	e7d9      	b.n	80046ae <_printf_float+0x152>
 80046fa:	b913      	cbnz	r3, 8004702 <_printf_float+0x1a6>
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	07d0      	lsls	r0, r2, #31
 8004700:	d501      	bpl.n	8004706 <_printf_float+0x1aa>
 8004702:	3302      	adds	r3, #2
 8004704:	e7f3      	b.n	80046ee <_printf_float+0x192>
 8004706:	2301      	movs	r3, #1
 8004708:	e7f1      	b.n	80046ee <_printf_float+0x192>
 800470a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800470e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004712:	4293      	cmp	r3, r2
 8004714:	db05      	blt.n	8004722 <_printf_float+0x1c6>
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	6123      	str	r3, [r4, #16]
 800471a:	07d1      	lsls	r1, r2, #31
 800471c:	d5e8      	bpl.n	80046f0 <_printf_float+0x194>
 800471e:	3301      	adds	r3, #1
 8004720:	e7e5      	b.n	80046ee <_printf_float+0x192>
 8004722:	2b00      	cmp	r3, #0
 8004724:	bfd4      	ite	le
 8004726:	f1c3 0302 	rsble	r3, r3, #2
 800472a:	2301      	movgt	r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	e7de      	b.n	80046ee <_printf_float+0x192>
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	055a      	lsls	r2, r3, #21
 8004734:	d407      	bmi.n	8004746 <_printf_float+0x1ea>
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	4642      	mov	r2, r8
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d12b      	bne.n	800479c <_printf_float+0x240>
 8004744:	e767      	b.n	8004616 <_printf_float+0xba>
 8004746:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800474a:	f240 80dc 	bls.w	8004906 <_printf_float+0x3aa>
 800474e:	2200      	movs	r2, #0
 8004750:	2300      	movs	r3, #0
 8004752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004756:	f7fc f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800475a:	2800      	cmp	r0, #0
 800475c:	d033      	beq.n	80047c6 <_printf_float+0x26a>
 800475e:	2301      	movs	r3, #1
 8004760:	4a41      	ldr	r2, [pc, #260]	; (8004868 <_printf_float+0x30c>)
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f af54 	beq.w	8004616 <_printf_float+0xba>
 800476e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004772:	429a      	cmp	r2, r3
 8004774:	db02      	blt.n	800477c <_printf_float+0x220>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	07d8      	lsls	r0, r3, #31
 800477a:	d50f      	bpl.n	800479c <_printf_float+0x240>
 800477c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004780:	4631      	mov	r1, r6
 8004782:	4628      	mov	r0, r5
 8004784:	47b8      	blx	r7
 8004786:	3001      	adds	r0, #1
 8004788:	f43f af45 	beq.w	8004616 <_printf_float+0xba>
 800478c:	f04f 0800 	mov.w	r8, #0
 8004790:	f104 091a 	add.w	r9, r4, #26
 8004794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	4543      	cmp	r3, r8
 800479a:	dc09      	bgt.n	80047b0 <_printf_float+0x254>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	079b      	lsls	r3, r3, #30
 80047a0:	f100 8103 	bmi.w	80049aa <_printf_float+0x44e>
 80047a4:	68e0      	ldr	r0, [r4, #12]
 80047a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047a8:	4298      	cmp	r0, r3
 80047aa:	bfb8      	it	lt
 80047ac:	4618      	movlt	r0, r3
 80047ae:	e734      	b.n	800461a <_printf_float+0xbe>
 80047b0:	2301      	movs	r3, #1
 80047b2:	464a      	mov	r2, r9
 80047b4:	4631      	mov	r1, r6
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f af2b 	beq.w	8004616 <_printf_float+0xba>
 80047c0:	f108 0801 	add.w	r8, r8, #1
 80047c4:	e7e6      	b.n	8004794 <_printf_float+0x238>
 80047c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dc2b      	bgt.n	8004824 <_printf_float+0x2c8>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4a26      	ldr	r2, [pc, #152]	; (8004868 <_printf_float+0x30c>)
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f af1d 	beq.w	8004616 <_printf_float+0xba>
 80047dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047de:	b923      	cbnz	r3, 80047ea <_printf_float+0x28e>
 80047e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047e2:	b913      	cbnz	r3, 80047ea <_printf_float+0x28e>
 80047e4:	6823      	ldr	r3, [r4, #0]
 80047e6:	07d9      	lsls	r1, r3, #31
 80047e8:	d5d8      	bpl.n	800479c <_printf_float+0x240>
 80047ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ee:	4631      	mov	r1, r6
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b8      	blx	r7
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f af0e 	beq.w	8004616 <_printf_float+0xba>
 80047fa:	f04f 0900 	mov.w	r9, #0
 80047fe:	f104 0a1a 	add.w	sl, r4, #26
 8004802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004804:	425b      	negs	r3, r3
 8004806:	454b      	cmp	r3, r9
 8004808:	dc01      	bgt.n	800480e <_printf_float+0x2b2>
 800480a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480c:	e794      	b.n	8004738 <_printf_float+0x1dc>
 800480e:	2301      	movs	r3, #1
 8004810:	4652      	mov	r2, sl
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	47b8      	blx	r7
 8004818:	3001      	adds	r0, #1
 800481a:	f43f aefc 	beq.w	8004616 <_printf_float+0xba>
 800481e:	f109 0901 	add.w	r9, r9, #1
 8004822:	e7ee      	b.n	8004802 <_printf_float+0x2a6>
 8004824:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004826:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004828:	429a      	cmp	r2, r3
 800482a:	bfa8      	it	ge
 800482c:	461a      	movge	r2, r3
 800482e:	2a00      	cmp	r2, #0
 8004830:	4691      	mov	r9, r2
 8004832:	dd07      	ble.n	8004844 <_printf_float+0x2e8>
 8004834:	4613      	mov	r3, r2
 8004836:	4631      	mov	r1, r6
 8004838:	4642      	mov	r2, r8
 800483a:	4628      	mov	r0, r5
 800483c:	47b8      	blx	r7
 800483e:	3001      	adds	r0, #1
 8004840:	f43f aee9 	beq.w	8004616 <_printf_float+0xba>
 8004844:	f104 031a 	add.w	r3, r4, #26
 8004848:	f04f 0b00 	mov.w	fp, #0
 800484c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004850:	9306      	str	r3, [sp, #24]
 8004852:	e015      	b.n	8004880 <_printf_float+0x324>
 8004854:	7fefffff 	.word	0x7fefffff
 8004858:	080092bc 	.word	0x080092bc
 800485c:	080092b8 	.word	0x080092b8
 8004860:	080092c4 	.word	0x080092c4
 8004864:	080092c0 	.word	0x080092c0
 8004868:	080094e3 	.word	0x080094e3
 800486c:	2301      	movs	r3, #1
 800486e:	9a06      	ldr	r2, [sp, #24]
 8004870:	4631      	mov	r1, r6
 8004872:	4628      	mov	r0, r5
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f aecd 	beq.w	8004616 <_printf_float+0xba>
 800487c:	f10b 0b01 	add.w	fp, fp, #1
 8004880:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004884:	ebaa 0309 	sub.w	r3, sl, r9
 8004888:	455b      	cmp	r3, fp
 800488a:	dcef      	bgt.n	800486c <_printf_float+0x310>
 800488c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004890:	429a      	cmp	r2, r3
 8004892:	44d0      	add	r8, sl
 8004894:	db15      	blt.n	80048c2 <_printf_float+0x366>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	07da      	lsls	r2, r3, #31
 800489a:	d412      	bmi.n	80048c2 <_printf_float+0x366>
 800489c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800489e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048a0:	eba3 020a 	sub.w	r2, r3, sl
 80048a4:	eba3 0a01 	sub.w	sl, r3, r1
 80048a8:	4592      	cmp	sl, r2
 80048aa:	bfa8      	it	ge
 80048ac:	4692      	movge	sl, r2
 80048ae:	f1ba 0f00 	cmp.w	sl, #0
 80048b2:	dc0e      	bgt.n	80048d2 <_printf_float+0x376>
 80048b4:	f04f 0800 	mov.w	r8, #0
 80048b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80048bc:	f104 091a 	add.w	r9, r4, #26
 80048c0:	e019      	b.n	80048f6 <_printf_float+0x39a>
 80048c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b8      	blx	r7
 80048cc:	3001      	adds	r0, #1
 80048ce:	d1e5      	bne.n	800489c <_printf_float+0x340>
 80048d0:	e6a1      	b.n	8004616 <_printf_float+0xba>
 80048d2:	4653      	mov	r3, sl
 80048d4:	4642      	mov	r2, r8
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	47b8      	blx	r7
 80048dc:	3001      	adds	r0, #1
 80048de:	d1e9      	bne.n	80048b4 <_printf_float+0x358>
 80048e0:	e699      	b.n	8004616 <_printf_float+0xba>
 80048e2:	2301      	movs	r3, #1
 80048e4:	464a      	mov	r2, r9
 80048e6:	4631      	mov	r1, r6
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b8      	blx	r7
 80048ec:	3001      	adds	r0, #1
 80048ee:	f43f ae92 	beq.w	8004616 <_printf_float+0xba>
 80048f2:	f108 0801 	add.w	r8, r8, #1
 80048f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	eba3 030a 	sub.w	r3, r3, sl
 8004900:	4543      	cmp	r3, r8
 8004902:	dcee      	bgt.n	80048e2 <_printf_float+0x386>
 8004904:	e74a      	b.n	800479c <_printf_float+0x240>
 8004906:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004908:	2a01      	cmp	r2, #1
 800490a:	dc01      	bgt.n	8004910 <_printf_float+0x3b4>
 800490c:	07db      	lsls	r3, r3, #31
 800490e:	d53a      	bpl.n	8004986 <_printf_float+0x42a>
 8004910:	2301      	movs	r3, #1
 8004912:	4642      	mov	r2, r8
 8004914:	4631      	mov	r1, r6
 8004916:	4628      	mov	r0, r5
 8004918:	47b8      	blx	r7
 800491a:	3001      	adds	r0, #1
 800491c:	f43f ae7b 	beq.w	8004616 <_printf_float+0xba>
 8004920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004924:	4631      	mov	r1, r6
 8004926:	4628      	mov	r0, r5
 8004928:	47b8      	blx	r7
 800492a:	3001      	adds	r0, #1
 800492c:	f108 0801 	add.w	r8, r8, #1
 8004930:	f43f ae71 	beq.w	8004616 <_printf_float+0xba>
 8004934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004936:	2200      	movs	r2, #0
 8004938:	f103 3aff 	add.w	sl, r3, #4294967295
 800493c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004940:	2300      	movs	r3, #0
 8004942:	f7fc f8c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004946:	b9c8      	cbnz	r0, 800497c <_printf_float+0x420>
 8004948:	4653      	mov	r3, sl
 800494a:	4642      	mov	r2, r8
 800494c:	4631      	mov	r1, r6
 800494e:	4628      	mov	r0, r5
 8004950:	47b8      	blx	r7
 8004952:	3001      	adds	r0, #1
 8004954:	d10e      	bne.n	8004974 <_printf_float+0x418>
 8004956:	e65e      	b.n	8004616 <_printf_float+0xba>
 8004958:	2301      	movs	r3, #1
 800495a:	4652      	mov	r2, sl
 800495c:	4631      	mov	r1, r6
 800495e:	4628      	mov	r0, r5
 8004960:	47b8      	blx	r7
 8004962:	3001      	adds	r0, #1
 8004964:	f43f ae57 	beq.w	8004616 <_printf_float+0xba>
 8004968:	f108 0801 	add.w	r8, r8, #1
 800496c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800496e:	3b01      	subs	r3, #1
 8004970:	4543      	cmp	r3, r8
 8004972:	dcf1      	bgt.n	8004958 <_printf_float+0x3fc>
 8004974:	464b      	mov	r3, r9
 8004976:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800497a:	e6de      	b.n	800473a <_printf_float+0x1de>
 800497c:	f04f 0800 	mov.w	r8, #0
 8004980:	f104 0a1a 	add.w	sl, r4, #26
 8004984:	e7f2      	b.n	800496c <_printf_float+0x410>
 8004986:	2301      	movs	r3, #1
 8004988:	e7df      	b.n	800494a <_printf_float+0x3ee>
 800498a:	2301      	movs	r3, #1
 800498c:	464a      	mov	r2, r9
 800498e:	4631      	mov	r1, r6
 8004990:	4628      	mov	r0, r5
 8004992:	47b8      	blx	r7
 8004994:	3001      	adds	r0, #1
 8004996:	f43f ae3e 	beq.w	8004616 <_printf_float+0xba>
 800499a:	f108 0801 	add.w	r8, r8, #1
 800499e:	68e3      	ldr	r3, [r4, #12]
 80049a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	4543      	cmp	r3, r8
 80049a6:	dcf0      	bgt.n	800498a <_printf_float+0x42e>
 80049a8:	e6fc      	b.n	80047a4 <_printf_float+0x248>
 80049aa:	f04f 0800 	mov.w	r8, #0
 80049ae:	f104 0919 	add.w	r9, r4, #25
 80049b2:	e7f4      	b.n	800499e <_printf_float+0x442>
 80049b4:	2900      	cmp	r1, #0
 80049b6:	f43f ae8b 	beq.w	80046d0 <_printf_float+0x174>
 80049ba:	2300      	movs	r3, #0
 80049bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80049c0:	ab09      	add	r3, sp, #36	; 0x24
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	ec49 8b10 	vmov	d0, r8, r9
 80049c8:	6022      	str	r2, [r4, #0]
 80049ca:	f8cd a004 	str.w	sl, [sp, #4]
 80049ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049d2:	4628      	mov	r0, r5
 80049d4:	f7ff fd2e 	bl	8004434 <__cvt>
 80049d8:	4680      	mov	r8, r0
 80049da:	e648      	b.n	800466e <_printf_float+0x112>

080049dc <_printf_common>:
 80049dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e0:	4691      	mov	r9, r2
 80049e2:	461f      	mov	r7, r3
 80049e4:	688a      	ldr	r2, [r1, #8]
 80049e6:	690b      	ldr	r3, [r1, #16]
 80049e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049ec:	4293      	cmp	r3, r2
 80049ee:	bfb8      	it	lt
 80049f0:	4613      	movlt	r3, r2
 80049f2:	f8c9 3000 	str.w	r3, [r9]
 80049f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049fa:	4606      	mov	r6, r0
 80049fc:	460c      	mov	r4, r1
 80049fe:	b112      	cbz	r2, 8004a06 <_printf_common+0x2a>
 8004a00:	3301      	adds	r3, #1
 8004a02:	f8c9 3000 	str.w	r3, [r9]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	0699      	lsls	r1, r3, #26
 8004a0a:	bf42      	ittt	mi
 8004a0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a10:	3302      	addmi	r3, #2
 8004a12:	f8c9 3000 	strmi.w	r3, [r9]
 8004a16:	6825      	ldr	r5, [r4, #0]
 8004a18:	f015 0506 	ands.w	r5, r5, #6
 8004a1c:	d107      	bne.n	8004a2e <_printf_common+0x52>
 8004a1e:	f104 0a19 	add.w	sl, r4, #25
 8004a22:	68e3      	ldr	r3, [r4, #12]
 8004a24:	f8d9 2000 	ldr.w	r2, [r9]
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	42ab      	cmp	r3, r5
 8004a2c:	dc28      	bgt.n	8004a80 <_printf_common+0xa4>
 8004a2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	3300      	adds	r3, #0
 8004a36:	bf18      	it	ne
 8004a38:	2301      	movne	r3, #1
 8004a3a:	0692      	lsls	r2, r2, #26
 8004a3c:	d42d      	bmi.n	8004a9a <_printf_common+0xbe>
 8004a3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a42:	4639      	mov	r1, r7
 8004a44:	4630      	mov	r0, r6
 8004a46:	47c0      	blx	r8
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d020      	beq.n	8004a8e <_printf_common+0xb2>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	68e5      	ldr	r5, [r4, #12]
 8004a50:	f8d9 2000 	ldr.w	r2, [r9]
 8004a54:	f003 0306 	and.w	r3, r3, #6
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	bf08      	it	eq
 8004a5c:	1aad      	subeq	r5, r5, r2
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	6922      	ldr	r2, [r4, #16]
 8004a62:	bf0c      	ite	eq
 8004a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a68:	2500      	movne	r5, #0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfc4      	itt	gt
 8004a6e:	1a9b      	subgt	r3, r3, r2
 8004a70:	18ed      	addgt	r5, r5, r3
 8004a72:	f04f 0900 	mov.w	r9, #0
 8004a76:	341a      	adds	r4, #26
 8004a78:	454d      	cmp	r5, r9
 8004a7a:	d11a      	bne.n	8004ab2 <_printf_common+0xd6>
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	e008      	b.n	8004a92 <_printf_common+0xb6>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4652      	mov	r2, sl
 8004a84:	4639      	mov	r1, r7
 8004a86:	4630      	mov	r0, r6
 8004a88:	47c0      	blx	r8
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d103      	bne.n	8004a96 <_printf_common+0xba>
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a96:	3501      	adds	r5, #1
 8004a98:	e7c3      	b.n	8004a22 <_printf_common+0x46>
 8004a9a:	18e1      	adds	r1, r4, r3
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	2030      	movs	r0, #48	; 0x30
 8004aa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004aa4:	4422      	add	r2, r4
 8004aa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004aaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004aae:	3302      	adds	r3, #2
 8004ab0:	e7c5      	b.n	8004a3e <_printf_common+0x62>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	4639      	mov	r1, r7
 8004ab8:	4630      	mov	r0, r6
 8004aba:	47c0      	blx	r8
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0e6      	beq.n	8004a8e <_printf_common+0xb2>
 8004ac0:	f109 0901 	add.w	r9, r9, #1
 8004ac4:	e7d8      	b.n	8004a78 <_printf_common+0x9c>
	...

08004ac8 <_printf_i>:
 8004ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004acc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	7e09      	ldrb	r1, [r1, #24]
 8004ad4:	b085      	sub	sp, #20
 8004ad6:	296e      	cmp	r1, #110	; 0x6e
 8004ad8:	4617      	mov	r7, r2
 8004ada:	4606      	mov	r6, r0
 8004adc:	4698      	mov	r8, r3
 8004ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ae0:	f000 80b3 	beq.w	8004c4a <_printf_i+0x182>
 8004ae4:	d822      	bhi.n	8004b2c <_printf_i+0x64>
 8004ae6:	2963      	cmp	r1, #99	; 0x63
 8004ae8:	d036      	beq.n	8004b58 <_printf_i+0x90>
 8004aea:	d80a      	bhi.n	8004b02 <_printf_i+0x3a>
 8004aec:	2900      	cmp	r1, #0
 8004aee:	f000 80b9 	beq.w	8004c64 <_printf_i+0x19c>
 8004af2:	2958      	cmp	r1, #88	; 0x58
 8004af4:	f000 8083 	beq.w	8004bfe <_printf_i+0x136>
 8004af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004afc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b00:	e032      	b.n	8004b68 <_printf_i+0xa0>
 8004b02:	2964      	cmp	r1, #100	; 0x64
 8004b04:	d001      	beq.n	8004b0a <_printf_i+0x42>
 8004b06:	2969      	cmp	r1, #105	; 0x69
 8004b08:	d1f6      	bne.n	8004af8 <_printf_i+0x30>
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	6813      	ldr	r3, [r2, #0]
 8004b0e:	0605      	lsls	r5, r0, #24
 8004b10:	f103 0104 	add.w	r1, r3, #4
 8004b14:	d52a      	bpl.n	8004b6c <_printf_i+0xa4>
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da03      	bge.n	8004b26 <_printf_i+0x5e>
 8004b1e:	222d      	movs	r2, #45	; 0x2d
 8004b20:	425b      	negs	r3, r3
 8004b22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b26:	486f      	ldr	r0, [pc, #444]	; (8004ce4 <_printf_i+0x21c>)
 8004b28:	220a      	movs	r2, #10
 8004b2a:	e039      	b.n	8004ba0 <_printf_i+0xd8>
 8004b2c:	2973      	cmp	r1, #115	; 0x73
 8004b2e:	f000 809d 	beq.w	8004c6c <_printf_i+0x1a4>
 8004b32:	d808      	bhi.n	8004b46 <_printf_i+0x7e>
 8004b34:	296f      	cmp	r1, #111	; 0x6f
 8004b36:	d020      	beq.n	8004b7a <_printf_i+0xb2>
 8004b38:	2970      	cmp	r1, #112	; 0x70
 8004b3a:	d1dd      	bne.n	8004af8 <_printf_i+0x30>
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	f043 0320 	orr.w	r3, r3, #32
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	e003      	b.n	8004b4e <_printf_i+0x86>
 8004b46:	2975      	cmp	r1, #117	; 0x75
 8004b48:	d017      	beq.n	8004b7a <_printf_i+0xb2>
 8004b4a:	2978      	cmp	r1, #120	; 0x78
 8004b4c:	d1d4      	bne.n	8004af8 <_printf_i+0x30>
 8004b4e:	2378      	movs	r3, #120	; 0x78
 8004b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b54:	4864      	ldr	r0, [pc, #400]	; (8004ce8 <_printf_i+0x220>)
 8004b56:	e055      	b.n	8004c04 <_printf_i+0x13c>
 8004b58:	6813      	ldr	r3, [r2, #0]
 8004b5a:	1d19      	adds	r1, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6011      	str	r1, [r2, #0]
 8004b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e08c      	b.n	8004c86 <_printf_i+0x1be>
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6011      	str	r1, [r2, #0]
 8004b70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b74:	bf18      	it	ne
 8004b76:	b21b      	sxthne	r3, r3
 8004b78:	e7cf      	b.n	8004b1a <_printf_i+0x52>
 8004b7a:	6813      	ldr	r3, [r2, #0]
 8004b7c:	6825      	ldr	r5, [r4, #0]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	6010      	str	r0, [r2, #0]
 8004b82:	0628      	lsls	r0, r5, #24
 8004b84:	d501      	bpl.n	8004b8a <_printf_i+0xc2>
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	e002      	b.n	8004b90 <_printf_i+0xc8>
 8004b8a:	0668      	lsls	r0, r5, #25
 8004b8c:	d5fb      	bpl.n	8004b86 <_printf_i+0xbe>
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	4854      	ldr	r0, [pc, #336]	; (8004ce4 <_printf_i+0x21c>)
 8004b92:	296f      	cmp	r1, #111	; 0x6f
 8004b94:	bf14      	ite	ne
 8004b96:	220a      	movne	r2, #10
 8004b98:	2208      	moveq	r2, #8
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ba0:	6865      	ldr	r5, [r4, #4]
 8004ba2:	60a5      	str	r5, [r4, #8]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	f2c0 8095 	blt.w	8004cd4 <_printf_i+0x20c>
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	f021 0104 	bic.w	r1, r1, #4
 8004bb0:	6021      	str	r1, [r4, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d13d      	bne.n	8004c32 <_printf_i+0x16a>
 8004bb6:	2d00      	cmp	r5, #0
 8004bb8:	f040 808e 	bne.w	8004cd8 <_printf_i+0x210>
 8004bbc:	4665      	mov	r5, ip
 8004bbe:	2a08      	cmp	r2, #8
 8004bc0:	d10b      	bne.n	8004bda <_printf_i+0x112>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d508      	bpl.n	8004bda <_printf_i+0x112>
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bfde      	ittt	le
 8004bd0:	2330      	movle	r3, #48	; 0x30
 8004bd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bda:	ebac 0305 	sub.w	r3, ip, r5
 8004bde:	6123      	str	r3, [r4, #16]
 8004be0:	f8cd 8000 	str.w	r8, [sp]
 8004be4:	463b      	mov	r3, r7
 8004be6:	aa03      	add	r2, sp, #12
 8004be8:	4621      	mov	r1, r4
 8004bea:	4630      	mov	r0, r6
 8004bec:	f7ff fef6 	bl	80049dc <_printf_common>
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d14d      	bne.n	8004c90 <_printf_i+0x1c8>
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	b005      	add	sp, #20
 8004bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bfe:	4839      	ldr	r0, [pc, #228]	; (8004ce4 <_printf_i+0x21c>)
 8004c00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c04:	6813      	ldr	r3, [r2, #0]
 8004c06:	6821      	ldr	r1, [r4, #0]
 8004c08:	1d1d      	adds	r5, r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6015      	str	r5, [r2, #0]
 8004c0e:	060a      	lsls	r2, r1, #24
 8004c10:	d50b      	bpl.n	8004c2a <_printf_i+0x162>
 8004c12:	07ca      	lsls	r2, r1, #31
 8004c14:	bf44      	itt	mi
 8004c16:	f041 0120 	orrmi.w	r1, r1, #32
 8004c1a:	6021      	strmi	r1, [r4, #0]
 8004c1c:	b91b      	cbnz	r3, 8004c26 <_printf_i+0x15e>
 8004c1e:	6822      	ldr	r2, [r4, #0]
 8004c20:	f022 0220 	bic.w	r2, r2, #32
 8004c24:	6022      	str	r2, [r4, #0]
 8004c26:	2210      	movs	r2, #16
 8004c28:	e7b7      	b.n	8004b9a <_printf_i+0xd2>
 8004c2a:	064d      	lsls	r5, r1, #25
 8004c2c:	bf48      	it	mi
 8004c2e:	b29b      	uxthmi	r3, r3
 8004c30:	e7ef      	b.n	8004c12 <_printf_i+0x14a>
 8004c32:	4665      	mov	r5, ip
 8004c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c38:	fb02 3311 	mls	r3, r2, r1, r3
 8004c3c:	5cc3      	ldrb	r3, [r0, r3]
 8004c3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c42:	460b      	mov	r3, r1
 8004c44:	2900      	cmp	r1, #0
 8004c46:	d1f5      	bne.n	8004c34 <_printf_i+0x16c>
 8004c48:	e7b9      	b.n	8004bbe <_printf_i+0xf6>
 8004c4a:	6813      	ldr	r3, [r2, #0]
 8004c4c:	6825      	ldr	r5, [r4, #0]
 8004c4e:	6961      	ldr	r1, [r4, #20]
 8004c50:	1d18      	adds	r0, r3, #4
 8004c52:	6010      	str	r0, [r2, #0]
 8004c54:	0628      	lsls	r0, r5, #24
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	d501      	bpl.n	8004c5e <_printf_i+0x196>
 8004c5a:	6019      	str	r1, [r3, #0]
 8004c5c:	e002      	b.n	8004c64 <_printf_i+0x19c>
 8004c5e:	066a      	lsls	r2, r5, #25
 8004c60:	d5fb      	bpl.n	8004c5a <_printf_i+0x192>
 8004c62:	8019      	strh	r1, [r3, #0]
 8004c64:	2300      	movs	r3, #0
 8004c66:	6123      	str	r3, [r4, #16]
 8004c68:	4665      	mov	r5, ip
 8004c6a:	e7b9      	b.n	8004be0 <_printf_i+0x118>
 8004c6c:	6813      	ldr	r3, [r2, #0]
 8004c6e:	1d19      	adds	r1, r3, #4
 8004c70:	6011      	str	r1, [r2, #0]
 8004c72:	681d      	ldr	r5, [r3, #0]
 8004c74:	6862      	ldr	r2, [r4, #4]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f7fb fab1 	bl	80001e0 <memchr>
 8004c7e:	b108      	cbz	r0, 8004c84 <_printf_i+0x1bc>
 8004c80:	1b40      	subs	r0, r0, r5
 8004c82:	6060      	str	r0, [r4, #4]
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	6123      	str	r3, [r4, #16]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c8e:	e7a7      	b.n	8004be0 <_printf_i+0x118>
 8004c90:	6923      	ldr	r3, [r4, #16]
 8004c92:	462a      	mov	r2, r5
 8004c94:	4639      	mov	r1, r7
 8004c96:	4630      	mov	r0, r6
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d0aa      	beq.n	8004bf4 <_printf_i+0x12c>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	079b      	lsls	r3, r3, #30
 8004ca2:	d413      	bmi.n	8004ccc <_printf_i+0x204>
 8004ca4:	68e0      	ldr	r0, [r4, #12]
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	4298      	cmp	r0, r3
 8004caa:	bfb8      	it	lt
 8004cac:	4618      	movlt	r0, r3
 8004cae:	e7a3      	b.n	8004bf8 <_printf_i+0x130>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	464a      	mov	r2, r9
 8004cb4:	4639      	mov	r1, r7
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	47c0      	blx	r8
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d09a      	beq.n	8004bf4 <_printf_i+0x12c>
 8004cbe:	3501      	adds	r5, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	9a03      	ldr	r2, [sp, #12]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	dcf2      	bgt.n	8004cb0 <_printf_i+0x1e8>
 8004cca:	e7eb      	b.n	8004ca4 <_printf_i+0x1dc>
 8004ccc:	2500      	movs	r5, #0
 8004cce:	f104 0919 	add.w	r9, r4, #25
 8004cd2:	e7f5      	b.n	8004cc0 <_printf_i+0x1f8>
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ac      	bne.n	8004c32 <_printf_i+0x16a>
 8004cd8:	7803      	ldrb	r3, [r0, #0]
 8004cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ce2:	e76c      	b.n	8004bbe <_printf_i+0xf6>
 8004ce4:	080092c8 	.word	0x080092c8
 8004ce8:	080092d9 	.word	0x080092d9

08004cec <iprintf>:
 8004cec:	b40f      	push	{r0, r1, r2, r3}
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <iprintf+0x2c>)
 8004cf0:	b513      	push	{r0, r1, r4, lr}
 8004cf2:	681c      	ldr	r4, [r3, #0]
 8004cf4:	b124      	cbz	r4, 8004d00 <iprintf+0x14>
 8004cf6:	69a3      	ldr	r3, [r4, #24]
 8004cf8:	b913      	cbnz	r3, 8004d00 <iprintf+0x14>
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f001 fd54 	bl	80067a8 <__sinit>
 8004d00:	ab05      	add	r3, sp, #20
 8004d02:	9a04      	ldr	r2, [sp, #16]
 8004d04:	68a1      	ldr	r1, [r4, #8]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f002 ff2b 	bl	8007b64 <_vfiprintf_r>
 8004d0e:	b002      	add	sp, #8
 8004d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d14:	b004      	add	sp, #16
 8004d16:	4770      	bx	lr
 8004d18:	2000000c 	.word	0x2000000c

08004d1c <_sbrk_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4c06      	ldr	r4, [pc, #24]	; (8004d38 <_sbrk_r+0x1c>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4605      	mov	r5, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	6023      	str	r3, [r4, #0]
 8004d28:	f7fd f888 	bl	8001e3c <_sbrk>
 8004d2c:	1c43      	adds	r3, r0, #1
 8004d2e:	d102      	bne.n	8004d36 <_sbrk_r+0x1a>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	b103      	cbz	r3, 8004d36 <_sbrk_r+0x1a>
 8004d34:	602b      	str	r3, [r5, #0]
 8004d36:	bd38      	pop	{r3, r4, r5, pc}
 8004d38:	2000028c 	.word	0x2000028c

08004d3c <iscanf>:
 8004d3c:	b40f      	push	{r0, r1, r2, r3}
 8004d3e:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <iscanf+0x2c>)
 8004d40:	b513      	push	{r0, r1, r4, lr}
 8004d42:	681c      	ldr	r4, [r3, #0]
 8004d44:	b124      	cbz	r4, 8004d50 <iscanf+0x14>
 8004d46:	69a3      	ldr	r3, [r4, #24]
 8004d48:	b913      	cbnz	r3, 8004d50 <iscanf+0x14>
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f001 fd2c 	bl	80067a8 <__sinit>
 8004d50:	ab05      	add	r3, sp, #20
 8004d52:	9a04      	ldr	r2, [sp, #16]
 8004d54:	6861      	ldr	r1, [r4, #4]
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f003 f969 	bl	8008030 <_vfiscanf_r>
 8004d5e:	b002      	add	sp, #8
 8004d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d64:	b004      	add	sp, #16
 8004d66:	4770      	bx	lr
 8004d68:	2000000c 	.word	0x2000000c

08004d6c <siprintf>:
 8004d6c:	b40e      	push	{r1, r2, r3}
 8004d6e:	b500      	push	{lr}
 8004d70:	b09c      	sub	sp, #112	; 0x70
 8004d72:	ab1d      	add	r3, sp, #116	; 0x74
 8004d74:	9002      	str	r0, [sp, #8]
 8004d76:	9006      	str	r0, [sp, #24]
 8004d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d7c:	4809      	ldr	r0, [pc, #36]	; (8004da4 <siprintf+0x38>)
 8004d7e:	9107      	str	r1, [sp, #28]
 8004d80:	9104      	str	r1, [sp, #16]
 8004d82:	4909      	ldr	r1, [pc, #36]	; (8004da8 <siprintf+0x3c>)
 8004d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d88:	9105      	str	r1, [sp, #20]
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	9301      	str	r3, [sp, #4]
 8004d8e:	a902      	add	r1, sp, #8
 8004d90:	f002 fdc6 	bl	8007920 <_svfiprintf_r>
 8004d94:	9b02      	ldr	r3, [sp, #8]
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	b01c      	add	sp, #112	; 0x70
 8004d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da0:	b003      	add	sp, #12
 8004da2:	4770      	bx	lr
 8004da4:	2000000c 	.word	0x2000000c
 8004da8:	ffff0208 	.word	0xffff0208

08004dac <sulp>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	460d      	mov	r5, r1
 8004db2:	ec45 4b10 	vmov	d0, r4, r5
 8004db6:	4616      	mov	r6, r2
 8004db8:	f002 fbd6 	bl	8007568 <__ulp>
 8004dbc:	ec51 0b10 	vmov	r0, r1, d0
 8004dc0:	b17e      	cbz	r6, 8004de2 <sulp+0x36>
 8004dc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004dc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dd09      	ble.n	8004de2 <sulp+0x36>
 8004dce:	051b      	lsls	r3, r3, #20
 8004dd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004dd4:	2400      	movs	r4, #0
 8004dd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dda:	4622      	mov	r2, r4
 8004ddc:	462b      	mov	r3, r5
 8004dde:	f7fb fc0b 	bl	80005f8 <__aeabi_dmul>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	0000      	movs	r0, r0
	...

08004de8 <_strtod_l>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	461f      	mov	r7, r3
 8004dee:	b0a1      	sub	sp, #132	; 0x84
 8004df0:	2300      	movs	r3, #0
 8004df2:	4681      	mov	r9, r0
 8004df4:	4638      	mov	r0, r7
 8004df6:	460e      	mov	r6, r1
 8004df8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dfa:	931c      	str	r3, [sp, #112]	; 0x70
 8004dfc:	f002 f8b2 	bl	8006f64 <__localeconv_l>
 8004e00:	4680      	mov	r8, r0
 8004e02:	6800      	ldr	r0, [r0, #0]
 8004e04:	f7fb f9e4 	bl	80001d0 <strlen>
 8004e08:	f04f 0a00 	mov.w	sl, #0
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	f04f 0b00 	mov.w	fp, #0
 8004e12:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004e16:	781a      	ldrb	r2, [r3, #0]
 8004e18:	2a0d      	cmp	r2, #13
 8004e1a:	d832      	bhi.n	8004e82 <_strtod_l+0x9a>
 8004e1c:	2a09      	cmp	r2, #9
 8004e1e:	d236      	bcs.n	8004e8e <_strtod_l+0xa6>
 8004e20:	2a00      	cmp	r2, #0
 8004e22:	d03e      	beq.n	8004ea2 <_strtod_l+0xba>
 8004e24:	2300      	movs	r3, #0
 8004e26:	930d      	str	r3, [sp, #52]	; 0x34
 8004e28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e2a:	782b      	ldrb	r3, [r5, #0]
 8004e2c:	2b30      	cmp	r3, #48	; 0x30
 8004e2e:	f040 80ac 	bne.w	8004f8a <_strtod_l+0x1a2>
 8004e32:	786b      	ldrb	r3, [r5, #1]
 8004e34:	2b58      	cmp	r3, #88	; 0x58
 8004e36:	d001      	beq.n	8004e3c <_strtod_l+0x54>
 8004e38:	2b78      	cmp	r3, #120	; 0x78
 8004e3a:	d167      	bne.n	8004f0c <_strtod_l+0x124>
 8004e3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	ab1c      	add	r3, sp, #112	; 0x70
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	9702      	str	r7, [sp, #8]
 8004e46:	ab1d      	add	r3, sp, #116	; 0x74
 8004e48:	4a88      	ldr	r2, [pc, #544]	; (800506c <_strtod_l+0x284>)
 8004e4a:	a91b      	add	r1, sp, #108	; 0x6c
 8004e4c:	4648      	mov	r0, r9
 8004e4e:	f001 fda0 	bl	8006992 <__gethex>
 8004e52:	f010 0407 	ands.w	r4, r0, #7
 8004e56:	4606      	mov	r6, r0
 8004e58:	d005      	beq.n	8004e66 <_strtod_l+0x7e>
 8004e5a:	2c06      	cmp	r4, #6
 8004e5c:	d12b      	bne.n	8004eb6 <_strtod_l+0xce>
 8004e5e:	3501      	adds	r5, #1
 8004e60:	2300      	movs	r3, #0
 8004e62:	951b      	str	r5, [sp, #108]	; 0x6c
 8004e64:	930d      	str	r3, [sp, #52]	; 0x34
 8004e66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f040 859a 	bne.w	80059a2 <_strtod_l+0xbba>
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e70:	b1e3      	cbz	r3, 8004eac <_strtod_l+0xc4>
 8004e72:	4652      	mov	r2, sl
 8004e74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e78:	ec43 2b10 	vmov	d0, r2, r3
 8004e7c:	b021      	add	sp, #132	; 0x84
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	2a2b      	cmp	r2, #43	; 0x2b
 8004e84:	d015      	beq.n	8004eb2 <_strtod_l+0xca>
 8004e86:	2a2d      	cmp	r2, #45	; 0x2d
 8004e88:	d004      	beq.n	8004e94 <_strtod_l+0xac>
 8004e8a:	2a20      	cmp	r2, #32
 8004e8c:	d1ca      	bne.n	8004e24 <_strtod_l+0x3c>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e92:	e7bf      	b.n	8004e14 <_strtod_l+0x2c>
 8004e94:	2201      	movs	r2, #1
 8004e96:	920d      	str	r2, [sp, #52]	; 0x34
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e9c:	785b      	ldrb	r3, [r3, #1]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1c2      	bne.n	8004e28 <_strtod_l+0x40>
 8004ea2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004ea4:	961b      	str	r6, [sp, #108]	; 0x6c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f040 8579 	bne.w	800599e <_strtod_l+0xbb6>
 8004eac:	4652      	mov	r2, sl
 8004eae:	465b      	mov	r3, fp
 8004eb0:	e7e2      	b.n	8004e78 <_strtod_l+0x90>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	e7ef      	b.n	8004e96 <_strtod_l+0xae>
 8004eb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004eb8:	b13a      	cbz	r2, 8004eca <_strtod_l+0xe2>
 8004eba:	2135      	movs	r1, #53	; 0x35
 8004ebc:	a81e      	add	r0, sp, #120	; 0x78
 8004ebe:	f002 fc4b 	bl	8007758 <__copybits>
 8004ec2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004ec4:	4648      	mov	r0, r9
 8004ec6:	f002 f8b8 	bl	800703a <_Bfree>
 8004eca:	3c01      	subs	r4, #1
 8004ecc:	2c04      	cmp	r4, #4
 8004ece:	d806      	bhi.n	8004ede <_strtod_l+0xf6>
 8004ed0:	e8df f004 	tbb	[pc, r4]
 8004ed4:	1714030a 	.word	0x1714030a
 8004ed8:	0a          	.byte	0x0a
 8004ed9:	00          	.byte	0x00
 8004eda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004ede:	0730      	lsls	r0, r6, #28
 8004ee0:	d5c1      	bpl.n	8004e66 <_strtod_l+0x7e>
 8004ee2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004ee6:	e7be      	b.n	8004e66 <_strtod_l+0x7e>
 8004ee8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004eec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004eee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ef2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ef6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004efa:	e7f0      	b.n	8004ede <_strtod_l+0xf6>
 8004efc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005070 <_strtod_l+0x288>
 8004f00:	e7ed      	b.n	8004ede <_strtod_l+0xf6>
 8004f02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004f06:	f04f 3aff 	mov.w	sl, #4294967295
 8004f0a:	e7e8      	b.n	8004ede <_strtod_l+0xf6>
 8004f0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f12:	785b      	ldrb	r3, [r3, #1]
 8004f14:	2b30      	cmp	r3, #48	; 0x30
 8004f16:	d0f9      	beq.n	8004f0c <_strtod_l+0x124>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0a4      	beq.n	8004e66 <_strtod_l+0x7e>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	2500      	movs	r5, #0
 8004f20:	9306      	str	r3, [sp, #24]
 8004f22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f24:	9308      	str	r3, [sp, #32]
 8004f26:	9507      	str	r5, [sp, #28]
 8004f28:	9505      	str	r5, [sp, #20]
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004f2e:	7807      	ldrb	r7, [r0, #0]
 8004f30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004f34:	b2d9      	uxtb	r1, r3
 8004f36:	2909      	cmp	r1, #9
 8004f38:	d929      	bls.n	8004f8e <_strtod_l+0x1a6>
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	f8d8 1000 	ldr.w	r1, [r8]
 8004f40:	f003 fb01 	bl	8008546 <strncmp>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d031      	beq.n	8004fac <_strtod_l+0x1c4>
 8004f48:	2000      	movs	r0, #0
 8004f4a:	9c05      	ldr	r4, [sp, #20]
 8004f4c:	9004      	str	r0, [sp, #16]
 8004f4e:	463b      	mov	r3, r7
 8004f50:	4602      	mov	r2, r0
 8004f52:	2b65      	cmp	r3, #101	; 0x65
 8004f54:	d001      	beq.n	8004f5a <_strtod_l+0x172>
 8004f56:	2b45      	cmp	r3, #69	; 0x45
 8004f58:	d114      	bne.n	8004f84 <_strtod_l+0x19c>
 8004f5a:	b924      	cbnz	r4, 8004f66 <_strtod_l+0x17e>
 8004f5c:	b910      	cbnz	r0, 8004f64 <_strtod_l+0x17c>
 8004f5e:	9b06      	ldr	r3, [sp, #24]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d09e      	beq.n	8004ea2 <_strtod_l+0xba>
 8004f64:	2400      	movs	r4, #0
 8004f66:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004f68:	1c73      	adds	r3, r6, #1
 8004f6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f6c:	7873      	ldrb	r3, [r6, #1]
 8004f6e:	2b2b      	cmp	r3, #43	; 0x2b
 8004f70:	d078      	beq.n	8005064 <_strtod_l+0x27c>
 8004f72:	2b2d      	cmp	r3, #45	; 0x2d
 8004f74:	d070      	beq.n	8005058 <_strtod_l+0x270>
 8004f76:	f04f 0c00 	mov.w	ip, #0
 8004f7a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004f7e:	2f09      	cmp	r7, #9
 8004f80:	d97c      	bls.n	800507c <_strtod_l+0x294>
 8004f82:	961b      	str	r6, [sp, #108]	; 0x6c
 8004f84:	f04f 0e00 	mov.w	lr, #0
 8004f88:	e09a      	b.n	80050c0 <_strtod_l+0x2d8>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	e7c7      	b.n	8004f1e <_strtod_l+0x136>
 8004f8e:	9905      	ldr	r1, [sp, #20]
 8004f90:	2908      	cmp	r1, #8
 8004f92:	bfdd      	ittte	le
 8004f94:	9907      	ldrle	r1, [sp, #28]
 8004f96:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f9a:	9307      	strle	r3, [sp, #28]
 8004f9c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004fa0:	9b05      	ldr	r3, [sp, #20]
 8004fa2:	3001      	adds	r0, #1
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	901b      	str	r0, [sp, #108]	; 0x6c
 8004faa:	e7bf      	b.n	8004f2c <_strtod_l+0x144>
 8004fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fae:	191a      	adds	r2, r3, r4
 8004fb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004fb2:	9a05      	ldr	r2, [sp, #20]
 8004fb4:	5d1b      	ldrb	r3, [r3, r4]
 8004fb6:	2a00      	cmp	r2, #0
 8004fb8:	d037      	beq.n	800502a <_strtod_l+0x242>
 8004fba:	9c05      	ldr	r4, [sp, #20]
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004fc2:	2909      	cmp	r1, #9
 8004fc4:	d913      	bls.n	8004fee <_strtod_l+0x206>
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	9104      	str	r1, [sp, #16]
 8004fca:	e7c2      	b.n	8004f52 <_strtod_l+0x16a>
 8004fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8004fd2:	785b      	ldrb	r3, [r3, #1]
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	2b30      	cmp	r3, #48	; 0x30
 8004fd8:	d0f8      	beq.n	8004fcc <_strtod_l+0x1e4>
 8004fda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004fde:	2a08      	cmp	r2, #8
 8004fe0:	f200 84e4 	bhi.w	80059ac <_strtod_l+0xbc4>
 8004fe4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fe6:	9208      	str	r2, [sp, #32]
 8004fe8:	4602      	mov	r2, r0
 8004fea:	2000      	movs	r0, #0
 8004fec:	4604      	mov	r4, r0
 8004fee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004ff2:	f100 0101 	add.w	r1, r0, #1
 8004ff6:	d012      	beq.n	800501e <_strtod_l+0x236>
 8004ff8:	440a      	add	r2, r1
 8004ffa:	eb00 0c04 	add.w	ip, r0, r4
 8004ffe:	4621      	mov	r1, r4
 8005000:	270a      	movs	r7, #10
 8005002:	458c      	cmp	ip, r1
 8005004:	d113      	bne.n	800502e <_strtod_l+0x246>
 8005006:	1821      	adds	r1, r4, r0
 8005008:	2908      	cmp	r1, #8
 800500a:	f104 0401 	add.w	r4, r4, #1
 800500e:	4404      	add	r4, r0
 8005010:	dc19      	bgt.n	8005046 <_strtod_l+0x25e>
 8005012:	9b07      	ldr	r3, [sp, #28]
 8005014:	210a      	movs	r1, #10
 8005016:	fb01 e303 	mla	r3, r1, r3, lr
 800501a:	9307      	str	r3, [sp, #28]
 800501c:	2100      	movs	r1, #0
 800501e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005020:	1c58      	adds	r0, r3, #1
 8005022:	901b      	str	r0, [sp, #108]	; 0x6c
 8005024:	785b      	ldrb	r3, [r3, #1]
 8005026:	4608      	mov	r0, r1
 8005028:	e7c9      	b.n	8004fbe <_strtod_l+0x1d6>
 800502a:	9805      	ldr	r0, [sp, #20]
 800502c:	e7d3      	b.n	8004fd6 <_strtod_l+0x1ee>
 800502e:	2908      	cmp	r1, #8
 8005030:	f101 0101 	add.w	r1, r1, #1
 8005034:	dc03      	bgt.n	800503e <_strtod_l+0x256>
 8005036:	9b07      	ldr	r3, [sp, #28]
 8005038:	437b      	muls	r3, r7
 800503a:	9307      	str	r3, [sp, #28]
 800503c:	e7e1      	b.n	8005002 <_strtod_l+0x21a>
 800503e:	2910      	cmp	r1, #16
 8005040:	bfd8      	it	le
 8005042:	437d      	mulle	r5, r7
 8005044:	e7dd      	b.n	8005002 <_strtod_l+0x21a>
 8005046:	2c10      	cmp	r4, #16
 8005048:	bfdc      	itt	le
 800504a:	210a      	movle	r1, #10
 800504c:	fb01 e505 	mlale	r5, r1, r5, lr
 8005050:	e7e4      	b.n	800501c <_strtod_l+0x234>
 8005052:	2301      	movs	r3, #1
 8005054:	9304      	str	r3, [sp, #16]
 8005056:	e781      	b.n	8004f5c <_strtod_l+0x174>
 8005058:	f04f 0c01 	mov.w	ip, #1
 800505c:	1cb3      	adds	r3, r6, #2
 800505e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005060:	78b3      	ldrb	r3, [r6, #2]
 8005062:	e78a      	b.n	8004f7a <_strtod_l+0x192>
 8005064:	f04f 0c00 	mov.w	ip, #0
 8005068:	e7f8      	b.n	800505c <_strtod_l+0x274>
 800506a:	bf00      	nop
 800506c:	080092ec 	.word	0x080092ec
 8005070:	7ff00000 	.word	0x7ff00000
 8005074:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005076:	1c5f      	adds	r7, r3, #1
 8005078:	971b      	str	r7, [sp, #108]	; 0x6c
 800507a:	785b      	ldrb	r3, [r3, #1]
 800507c:	2b30      	cmp	r3, #48	; 0x30
 800507e:	d0f9      	beq.n	8005074 <_strtod_l+0x28c>
 8005080:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8005084:	2f08      	cmp	r7, #8
 8005086:	f63f af7d 	bhi.w	8004f84 <_strtod_l+0x19c>
 800508a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800508e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005090:	930a      	str	r3, [sp, #40]	; 0x28
 8005092:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005094:	1c5f      	adds	r7, r3, #1
 8005096:	971b      	str	r7, [sp, #108]	; 0x6c
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800509e:	f1b8 0f09 	cmp.w	r8, #9
 80050a2:	d937      	bls.n	8005114 <_strtod_l+0x32c>
 80050a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80050a6:	1a7f      	subs	r7, r7, r1
 80050a8:	2f08      	cmp	r7, #8
 80050aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80050ae:	dc37      	bgt.n	8005120 <_strtod_l+0x338>
 80050b0:	45be      	cmp	lr, r7
 80050b2:	bfa8      	it	ge
 80050b4:	46be      	movge	lr, r7
 80050b6:	f1bc 0f00 	cmp.w	ip, #0
 80050ba:	d001      	beq.n	80050c0 <_strtod_l+0x2d8>
 80050bc:	f1ce 0e00 	rsb	lr, lr, #0
 80050c0:	2c00      	cmp	r4, #0
 80050c2:	d151      	bne.n	8005168 <_strtod_l+0x380>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f47f aece 	bne.w	8004e66 <_strtod_l+0x7e>
 80050ca:	9a06      	ldr	r2, [sp, #24]
 80050cc:	2a00      	cmp	r2, #0
 80050ce:	f47f aeca 	bne.w	8004e66 <_strtod_l+0x7e>
 80050d2:	9a04      	ldr	r2, [sp, #16]
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	f47f aee4 	bne.w	8004ea2 <_strtod_l+0xba>
 80050da:	2b4e      	cmp	r3, #78	; 0x4e
 80050dc:	d027      	beq.n	800512e <_strtod_l+0x346>
 80050de:	dc21      	bgt.n	8005124 <_strtod_l+0x33c>
 80050e0:	2b49      	cmp	r3, #73	; 0x49
 80050e2:	f47f aede 	bne.w	8004ea2 <_strtod_l+0xba>
 80050e6:	49a0      	ldr	r1, [pc, #640]	; (8005368 <_strtod_l+0x580>)
 80050e8:	a81b      	add	r0, sp, #108	; 0x6c
 80050ea:	f001 fe85 	bl	8006df8 <__match>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f43f aed7 	beq.w	8004ea2 <_strtod_l+0xba>
 80050f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050f6:	499d      	ldr	r1, [pc, #628]	; (800536c <_strtod_l+0x584>)
 80050f8:	3b01      	subs	r3, #1
 80050fa:	a81b      	add	r0, sp, #108	; 0x6c
 80050fc:	931b      	str	r3, [sp, #108]	; 0x6c
 80050fe:	f001 fe7b 	bl	8006df8 <__match>
 8005102:	b910      	cbnz	r0, 800510a <_strtod_l+0x322>
 8005104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005106:	3301      	adds	r3, #1
 8005108:	931b      	str	r3, [sp, #108]	; 0x6c
 800510a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005380 <_strtod_l+0x598>
 800510e:	f04f 0a00 	mov.w	sl, #0
 8005112:	e6a8      	b.n	8004e66 <_strtod_l+0x7e>
 8005114:	210a      	movs	r1, #10
 8005116:	fb01 3e0e 	mla	lr, r1, lr, r3
 800511a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800511e:	e7b8      	b.n	8005092 <_strtod_l+0x2aa>
 8005120:	46be      	mov	lr, r7
 8005122:	e7c8      	b.n	80050b6 <_strtod_l+0x2ce>
 8005124:	2b69      	cmp	r3, #105	; 0x69
 8005126:	d0de      	beq.n	80050e6 <_strtod_l+0x2fe>
 8005128:	2b6e      	cmp	r3, #110	; 0x6e
 800512a:	f47f aeba 	bne.w	8004ea2 <_strtod_l+0xba>
 800512e:	4990      	ldr	r1, [pc, #576]	; (8005370 <_strtod_l+0x588>)
 8005130:	a81b      	add	r0, sp, #108	; 0x6c
 8005132:	f001 fe61 	bl	8006df8 <__match>
 8005136:	2800      	cmp	r0, #0
 8005138:	f43f aeb3 	beq.w	8004ea2 <_strtod_l+0xba>
 800513c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b28      	cmp	r3, #40	; 0x28
 8005142:	d10e      	bne.n	8005162 <_strtod_l+0x37a>
 8005144:	aa1e      	add	r2, sp, #120	; 0x78
 8005146:	498b      	ldr	r1, [pc, #556]	; (8005374 <_strtod_l+0x58c>)
 8005148:	a81b      	add	r0, sp, #108	; 0x6c
 800514a:	f001 fe69 	bl	8006e20 <__hexnan>
 800514e:	2805      	cmp	r0, #5
 8005150:	d107      	bne.n	8005162 <_strtod_l+0x37a>
 8005152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005154:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005158:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800515c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005160:	e681      	b.n	8004e66 <_strtod_l+0x7e>
 8005162:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005388 <_strtod_l+0x5a0>
 8005166:	e7d2      	b.n	800510e <_strtod_l+0x326>
 8005168:	ebae 0302 	sub.w	r3, lr, r2
 800516c:	9306      	str	r3, [sp, #24]
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	9807      	ldr	r0, [sp, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	bf08      	it	eq
 8005176:	4623      	moveq	r3, r4
 8005178:	2c10      	cmp	r4, #16
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	46a0      	mov	r8, r4
 800517e:	bfa8      	it	ge
 8005180:	f04f 0810 	movge.w	r8, #16
 8005184:	f7fb f9be 	bl	8000504 <__aeabi_ui2d>
 8005188:	2c09      	cmp	r4, #9
 800518a:	4682      	mov	sl, r0
 800518c:	468b      	mov	fp, r1
 800518e:	dc13      	bgt.n	80051b8 <_strtod_l+0x3d0>
 8005190:	9b06      	ldr	r3, [sp, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	f43f ae67 	beq.w	8004e66 <_strtod_l+0x7e>
 8005198:	9b06      	ldr	r3, [sp, #24]
 800519a:	dd7a      	ble.n	8005292 <_strtod_l+0x4aa>
 800519c:	2b16      	cmp	r3, #22
 800519e:	dc61      	bgt.n	8005264 <_strtod_l+0x47c>
 80051a0:	4a75      	ldr	r2, [pc, #468]	; (8005378 <_strtod_l+0x590>)
 80051a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80051a6:	e9de 0100 	ldrd	r0, r1, [lr]
 80051aa:	4652      	mov	r2, sl
 80051ac:	465b      	mov	r3, fp
 80051ae:	f7fb fa23 	bl	80005f8 <__aeabi_dmul>
 80051b2:	4682      	mov	sl, r0
 80051b4:	468b      	mov	fp, r1
 80051b6:	e656      	b.n	8004e66 <_strtod_l+0x7e>
 80051b8:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <_strtod_l+0x590>)
 80051ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051c2:	f7fb fa19 	bl	80005f8 <__aeabi_dmul>
 80051c6:	4606      	mov	r6, r0
 80051c8:	4628      	mov	r0, r5
 80051ca:	460f      	mov	r7, r1
 80051cc:	f7fb f99a 	bl	8000504 <__aeabi_ui2d>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb f858 	bl	800028c <__adddf3>
 80051dc:	2c0f      	cmp	r4, #15
 80051de:	4682      	mov	sl, r0
 80051e0:	468b      	mov	fp, r1
 80051e2:	ddd5      	ble.n	8005190 <_strtod_l+0x3a8>
 80051e4:	9b06      	ldr	r3, [sp, #24]
 80051e6:	eba4 0808 	sub.w	r8, r4, r8
 80051ea:	4498      	add	r8, r3
 80051ec:	f1b8 0f00 	cmp.w	r8, #0
 80051f0:	f340 8096 	ble.w	8005320 <_strtod_l+0x538>
 80051f4:	f018 030f 	ands.w	r3, r8, #15
 80051f8:	d00a      	beq.n	8005210 <_strtod_l+0x428>
 80051fa:	495f      	ldr	r1, [pc, #380]	; (8005378 <_strtod_l+0x590>)
 80051fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005200:	4652      	mov	r2, sl
 8005202:	465b      	mov	r3, fp
 8005204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005208:	f7fb f9f6 	bl	80005f8 <__aeabi_dmul>
 800520c:	4682      	mov	sl, r0
 800520e:	468b      	mov	fp, r1
 8005210:	f038 080f 	bics.w	r8, r8, #15
 8005214:	d073      	beq.n	80052fe <_strtod_l+0x516>
 8005216:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800521a:	dd47      	ble.n	80052ac <_strtod_l+0x4c4>
 800521c:	2400      	movs	r4, #0
 800521e:	46a0      	mov	r8, r4
 8005220:	9407      	str	r4, [sp, #28]
 8005222:	9405      	str	r4, [sp, #20]
 8005224:	2322      	movs	r3, #34	; 0x22
 8005226:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005380 <_strtod_l+0x598>
 800522a:	f8c9 3000 	str.w	r3, [r9]
 800522e:	f04f 0a00 	mov.w	sl, #0
 8005232:	9b07      	ldr	r3, [sp, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f43f ae16 	beq.w	8004e66 <_strtod_l+0x7e>
 800523a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800523c:	4648      	mov	r0, r9
 800523e:	f001 fefc 	bl	800703a <_Bfree>
 8005242:	9905      	ldr	r1, [sp, #20]
 8005244:	4648      	mov	r0, r9
 8005246:	f001 fef8 	bl	800703a <_Bfree>
 800524a:	4641      	mov	r1, r8
 800524c:	4648      	mov	r0, r9
 800524e:	f001 fef4 	bl	800703a <_Bfree>
 8005252:	9907      	ldr	r1, [sp, #28]
 8005254:	4648      	mov	r0, r9
 8005256:	f001 fef0 	bl	800703a <_Bfree>
 800525a:	4621      	mov	r1, r4
 800525c:	4648      	mov	r0, r9
 800525e:	f001 feec 	bl	800703a <_Bfree>
 8005262:	e600      	b.n	8004e66 <_strtod_l+0x7e>
 8005264:	9a06      	ldr	r2, [sp, #24]
 8005266:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800526a:	4293      	cmp	r3, r2
 800526c:	dbba      	blt.n	80051e4 <_strtod_l+0x3fc>
 800526e:	4d42      	ldr	r5, [pc, #264]	; (8005378 <_strtod_l+0x590>)
 8005270:	f1c4 040f 	rsb	r4, r4, #15
 8005274:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005278:	4652      	mov	r2, sl
 800527a:	465b      	mov	r3, fp
 800527c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005280:	f7fb f9ba 	bl	80005f8 <__aeabi_dmul>
 8005284:	9b06      	ldr	r3, [sp, #24]
 8005286:	1b1c      	subs	r4, r3, r4
 8005288:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800528c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005290:	e78d      	b.n	80051ae <_strtod_l+0x3c6>
 8005292:	f113 0f16 	cmn.w	r3, #22
 8005296:	dba5      	blt.n	80051e4 <_strtod_l+0x3fc>
 8005298:	4a37      	ldr	r2, [pc, #220]	; (8005378 <_strtod_l+0x590>)
 800529a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800529e:	e9d2 2300 	ldrd	r2, r3, [r2]
 80052a2:	4650      	mov	r0, sl
 80052a4:	4659      	mov	r1, fp
 80052a6:	f7fb fad1 	bl	800084c <__aeabi_ddiv>
 80052aa:	e782      	b.n	80051b2 <_strtod_l+0x3ca>
 80052ac:	2300      	movs	r3, #0
 80052ae:	4e33      	ldr	r6, [pc, #204]	; (800537c <_strtod_l+0x594>)
 80052b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80052b4:	4650      	mov	r0, sl
 80052b6:	4659      	mov	r1, fp
 80052b8:	461d      	mov	r5, r3
 80052ba:	f1b8 0f01 	cmp.w	r8, #1
 80052be:	dc21      	bgt.n	8005304 <_strtod_l+0x51c>
 80052c0:	b10b      	cbz	r3, 80052c6 <_strtod_l+0x4de>
 80052c2:	4682      	mov	sl, r0
 80052c4:	468b      	mov	fp, r1
 80052c6:	4b2d      	ldr	r3, [pc, #180]	; (800537c <_strtod_l+0x594>)
 80052c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80052cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052d0:	4652      	mov	r2, sl
 80052d2:	465b      	mov	r3, fp
 80052d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80052d8:	f7fb f98e 	bl	80005f8 <__aeabi_dmul>
 80052dc:	4b28      	ldr	r3, [pc, #160]	; (8005380 <_strtod_l+0x598>)
 80052de:	460a      	mov	r2, r1
 80052e0:	400b      	ands	r3, r1
 80052e2:	4928      	ldr	r1, [pc, #160]	; (8005384 <_strtod_l+0x59c>)
 80052e4:	428b      	cmp	r3, r1
 80052e6:	4682      	mov	sl, r0
 80052e8:	d898      	bhi.n	800521c <_strtod_l+0x434>
 80052ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80052ee:	428b      	cmp	r3, r1
 80052f0:	bf86      	itte	hi
 80052f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800538c <_strtod_l+0x5a4>
 80052f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80052fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80052fe:	2300      	movs	r3, #0
 8005300:	9304      	str	r3, [sp, #16]
 8005302:	e077      	b.n	80053f4 <_strtod_l+0x60c>
 8005304:	f018 0f01 	tst.w	r8, #1
 8005308:	d006      	beq.n	8005318 <_strtod_l+0x530>
 800530a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800530e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005312:	f7fb f971 	bl	80005f8 <__aeabi_dmul>
 8005316:	2301      	movs	r3, #1
 8005318:	3501      	adds	r5, #1
 800531a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800531e:	e7cc      	b.n	80052ba <_strtod_l+0x4d2>
 8005320:	d0ed      	beq.n	80052fe <_strtod_l+0x516>
 8005322:	f1c8 0800 	rsb	r8, r8, #0
 8005326:	f018 020f 	ands.w	r2, r8, #15
 800532a:	d00a      	beq.n	8005342 <_strtod_l+0x55a>
 800532c:	4b12      	ldr	r3, [pc, #72]	; (8005378 <_strtod_l+0x590>)
 800532e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005332:	4650      	mov	r0, sl
 8005334:	4659      	mov	r1, fp
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb fa87 	bl	800084c <__aeabi_ddiv>
 800533e:	4682      	mov	sl, r0
 8005340:	468b      	mov	fp, r1
 8005342:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005346:	d0da      	beq.n	80052fe <_strtod_l+0x516>
 8005348:	f1b8 0f1f 	cmp.w	r8, #31
 800534c:	dd20      	ble.n	8005390 <_strtod_l+0x5a8>
 800534e:	2400      	movs	r4, #0
 8005350:	46a0      	mov	r8, r4
 8005352:	9407      	str	r4, [sp, #28]
 8005354:	9405      	str	r4, [sp, #20]
 8005356:	2322      	movs	r3, #34	; 0x22
 8005358:	f04f 0a00 	mov.w	sl, #0
 800535c:	f04f 0b00 	mov.w	fp, #0
 8005360:	f8c9 3000 	str.w	r3, [r9]
 8005364:	e765      	b.n	8005232 <_strtod_l+0x44a>
 8005366:	bf00      	nop
 8005368:	080092bd 	.word	0x080092bd
 800536c:	08009343 	.word	0x08009343
 8005370:	080092c5 	.word	0x080092c5
 8005374:	08009300 	.word	0x08009300
 8005378:	080093e8 	.word	0x080093e8
 800537c:	080093c0 	.word	0x080093c0
 8005380:	7ff00000 	.word	0x7ff00000
 8005384:	7ca00000 	.word	0x7ca00000
 8005388:	fff80000 	.word	0xfff80000
 800538c:	7fefffff 	.word	0x7fefffff
 8005390:	f018 0310 	ands.w	r3, r8, #16
 8005394:	bf18      	it	ne
 8005396:	236a      	movne	r3, #106	; 0x6a
 8005398:	4da0      	ldr	r5, [pc, #640]	; (800561c <_strtod_l+0x834>)
 800539a:	9304      	str	r3, [sp, #16]
 800539c:	4650      	mov	r0, sl
 800539e:	4659      	mov	r1, fp
 80053a0:	2300      	movs	r3, #0
 80053a2:	f1b8 0f00 	cmp.w	r8, #0
 80053a6:	f300 810a 	bgt.w	80055be <_strtod_l+0x7d6>
 80053aa:	b10b      	cbz	r3, 80053b0 <_strtod_l+0x5c8>
 80053ac:	4682      	mov	sl, r0
 80053ae:	468b      	mov	fp, r1
 80053b0:	9b04      	ldr	r3, [sp, #16]
 80053b2:	b1bb      	cbz	r3, 80053e4 <_strtod_l+0x5fc>
 80053b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80053b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053bc:	2b00      	cmp	r3, #0
 80053be:	4659      	mov	r1, fp
 80053c0:	dd10      	ble.n	80053e4 <_strtod_l+0x5fc>
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	f340 8107 	ble.w	80055d6 <_strtod_l+0x7ee>
 80053c8:	2b34      	cmp	r3, #52	; 0x34
 80053ca:	bfde      	ittt	le
 80053cc:	3b20      	suble	r3, #32
 80053ce:	f04f 32ff 	movle.w	r2, #4294967295
 80053d2:	fa02 f303 	lslle.w	r3, r2, r3
 80053d6:	f04f 0a00 	mov.w	sl, #0
 80053da:	bfcc      	ite	gt
 80053dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80053e0:	ea03 0b01 	andle.w	fp, r3, r1
 80053e4:	2200      	movs	r2, #0
 80053e6:	2300      	movs	r3, #0
 80053e8:	4650      	mov	r0, sl
 80053ea:	4659      	mov	r1, fp
 80053ec:	f7fb fb6c 	bl	8000ac8 <__aeabi_dcmpeq>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1ac      	bne.n	800534e <_strtod_l+0x566>
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	9a05      	ldr	r2, [sp, #20]
 80053fa:	9908      	ldr	r1, [sp, #32]
 80053fc:	4623      	mov	r3, r4
 80053fe:	4648      	mov	r0, r9
 8005400:	f001 fe6d 	bl	80070de <__s2b>
 8005404:	9007      	str	r0, [sp, #28]
 8005406:	2800      	cmp	r0, #0
 8005408:	f43f af08 	beq.w	800521c <_strtod_l+0x434>
 800540c:	9a06      	ldr	r2, [sp, #24]
 800540e:	9b06      	ldr	r3, [sp, #24]
 8005410:	2a00      	cmp	r2, #0
 8005412:	f1c3 0300 	rsb	r3, r3, #0
 8005416:	bfa8      	it	ge
 8005418:	2300      	movge	r3, #0
 800541a:	930e      	str	r3, [sp, #56]	; 0x38
 800541c:	2400      	movs	r4, #0
 800541e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005422:	9316      	str	r3, [sp, #88]	; 0x58
 8005424:	46a0      	mov	r8, r4
 8005426:	9b07      	ldr	r3, [sp, #28]
 8005428:	4648      	mov	r0, r9
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	f001 fdd1 	bl	8006fd2 <_Balloc>
 8005430:	9005      	str	r0, [sp, #20]
 8005432:	2800      	cmp	r0, #0
 8005434:	f43f aef6 	beq.w	8005224 <_strtod_l+0x43c>
 8005438:	9b07      	ldr	r3, [sp, #28]
 800543a:	691a      	ldr	r2, [r3, #16]
 800543c:	3202      	adds	r2, #2
 800543e:	f103 010c 	add.w	r1, r3, #12
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	300c      	adds	r0, #12
 8005446:	f001 fdb7 	bl	8006fb8 <memcpy>
 800544a:	aa1e      	add	r2, sp, #120	; 0x78
 800544c:	a91d      	add	r1, sp, #116	; 0x74
 800544e:	ec4b ab10 	vmov	d0, sl, fp
 8005452:	4648      	mov	r0, r9
 8005454:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005458:	f002 f8fc 	bl	8007654 <__d2b>
 800545c:	901c      	str	r0, [sp, #112]	; 0x70
 800545e:	2800      	cmp	r0, #0
 8005460:	f43f aee0 	beq.w	8005224 <_strtod_l+0x43c>
 8005464:	2101      	movs	r1, #1
 8005466:	4648      	mov	r0, r9
 8005468:	f001 fec5 	bl	80071f6 <__i2b>
 800546c:	4680      	mov	r8, r0
 800546e:	2800      	cmp	r0, #0
 8005470:	f43f aed8 	beq.w	8005224 <_strtod_l+0x43c>
 8005474:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8005476:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005478:	2e00      	cmp	r6, #0
 800547a:	bfab      	itete	ge
 800547c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800547e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005480:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8005482:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8005484:	bfac      	ite	ge
 8005486:	18f7      	addge	r7, r6, r3
 8005488:	1b9d      	sublt	r5, r3, r6
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	1af6      	subs	r6, r6, r3
 800548e:	4416      	add	r6, r2
 8005490:	4b63      	ldr	r3, [pc, #396]	; (8005620 <_strtod_l+0x838>)
 8005492:	3e01      	subs	r6, #1
 8005494:	429e      	cmp	r6, r3
 8005496:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800549a:	f280 80af 	bge.w	80055fc <_strtod_l+0x814>
 800549e:	1b9b      	subs	r3, r3, r6
 80054a0:	2b1f      	cmp	r3, #31
 80054a2:	eba2 0203 	sub.w	r2, r2, r3
 80054a6:	f04f 0101 	mov.w	r1, #1
 80054aa:	f300 809b 	bgt.w	80055e4 <_strtod_l+0x7fc>
 80054ae:	fa01 f303 	lsl.w	r3, r1, r3
 80054b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80054b4:	2300      	movs	r3, #0
 80054b6:	930a      	str	r3, [sp, #40]	; 0x28
 80054b8:	18be      	adds	r6, r7, r2
 80054ba:	9b04      	ldr	r3, [sp, #16]
 80054bc:	42b7      	cmp	r7, r6
 80054be:	4415      	add	r5, r2
 80054c0:	441d      	add	r5, r3
 80054c2:	463b      	mov	r3, r7
 80054c4:	bfa8      	it	ge
 80054c6:	4633      	movge	r3, r6
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	bfa8      	it	ge
 80054cc:	462b      	movge	r3, r5
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	bfc2      	ittt	gt
 80054d2:	1af6      	subgt	r6, r6, r3
 80054d4:	1aed      	subgt	r5, r5, r3
 80054d6:	1aff      	subgt	r7, r7, r3
 80054d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054da:	b1bb      	cbz	r3, 800550c <_strtod_l+0x724>
 80054dc:	4641      	mov	r1, r8
 80054de:	461a      	mov	r2, r3
 80054e0:	4648      	mov	r0, r9
 80054e2:	f001 ff27 	bl	8007334 <__pow5mult>
 80054e6:	4680      	mov	r8, r0
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f43f ae9b 	beq.w	8005224 <_strtod_l+0x43c>
 80054ee:	4601      	mov	r1, r0
 80054f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80054f2:	4648      	mov	r0, r9
 80054f4:	f001 fe88 	bl	8007208 <__multiply>
 80054f8:	900c      	str	r0, [sp, #48]	; 0x30
 80054fa:	2800      	cmp	r0, #0
 80054fc:	f43f ae92 	beq.w	8005224 <_strtod_l+0x43c>
 8005500:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005502:	4648      	mov	r0, r9
 8005504:	f001 fd99 	bl	800703a <_Bfree>
 8005508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800550a:	931c      	str	r3, [sp, #112]	; 0x70
 800550c:	2e00      	cmp	r6, #0
 800550e:	dc7a      	bgt.n	8005606 <_strtod_l+0x81e>
 8005510:	9b06      	ldr	r3, [sp, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	dd08      	ble.n	8005528 <_strtod_l+0x740>
 8005516:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005518:	9905      	ldr	r1, [sp, #20]
 800551a:	4648      	mov	r0, r9
 800551c:	f001 ff0a 	bl	8007334 <__pow5mult>
 8005520:	9005      	str	r0, [sp, #20]
 8005522:	2800      	cmp	r0, #0
 8005524:	f43f ae7e 	beq.w	8005224 <_strtod_l+0x43c>
 8005528:	2d00      	cmp	r5, #0
 800552a:	dd08      	ble.n	800553e <_strtod_l+0x756>
 800552c:	462a      	mov	r2, r5
 800552e:	9905      	ldr	r1, [sp, #20]
 8005530:	4648      	mov	r0, r9
 8005532:	f001 ff4d 	bl	80073d0 <__lshift>
 8005536:	9005      	str	r0, [sp, #20]
 8005538:	2800      	cmp	r0, #0
 800553a:	f43f ae73 	beq.w	8005224 <_strtod_l+0x43c>
 800553e:	2f00      	cmp	r7, #0
 8005540:	dd08      	ble.n	8005554 <_strtod_l+0x76c>
 8005542:	4641      	mov	r1, r8
 8005544:	463a      	mov	r2, r7
 8005546:	4648      	mov	r0, r9
 8005548:	f001 ff42 	bl	80073d0 <__lshift>
 800554c:	4680      	mov	r8, r0
 800554e:	2800      	cmp	r0, #0
 8005550:	f43f ae68 	beq.w	8005224 <_strtod_l+0x43c>
 8005554:	9a05      	ldr	r2, [sp, #20]
 8005556:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005558:	4648      	mov	r0, r9
 800555a:	f001 ffa7 	bl	80074ac <__mdiff>
 800555e:	4604      	mov	r4, r0
 8005560:	2800      	cmp	r0, #0
 8005562:	f43f ae5f 	beq.w	8005224 <_strtod_l+0x43c>
 8005566:	68c3      	ldr	r3, [r0, #12]
 8005568:	930c      	str	r3, [sp, #48]	; 0x30
 800556a:	2300      	movs	r3, #0
 800556c:	60c3      	str	r3, [r0, #12]
 800556e:	4641      	mov	r1, r8
 8005570:	f001 ff82 	bl	8007478 <__mcmp>
 8005574:	2800      	cmp	r0, #0
 8005576:	da55      	bge.n	8005624 <_strtod_l+0x83c>
 8005578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800557a:	b9e3      	cbnz	r3, 80055b6 <_strtod_l+0x7ce>
 800557c:	f1ba 0f00 	cmp.w	sl, #0
 8005580:	d119      	bne.n	80055b6 <_strtod_l+0x7ce>
 8005582:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005586:	b9b3      	cbnz	r3, 80055b6 <_strtod_l+0x7ce>
 8005588:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800558c:	0d1b      	lsrs	r3, r3, #20
 800558e:	051b      	lsls	r3, r3, #20
 8005590:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005594:	d90f      	bls.n	80055b6 <_strtod_l+0x7ce>
 8005596:	6963      	ldr	r3, [r4, #20]
 8005598:	b913      	cbnz	r3, 80055a0 <_strtod_l+0x7b8>
 800559a:	6923      	ldr	r3, [r4, #16]
 800559c:	2b01      	cmp	r3, #1
 800559e:	dd0a      	ble.n	80055b6 <_strtod_l+0x7ce>
 80055a0:	4621      	mov	r1, r4
 80055a2:	2201      	movs	r2, #1
 80055a4:	4648      	mov	r0, r9
 80055a6:	f001 ff13 	bl	80073d0 <__lshift>
 80055aa:	4641      	mov	r1, r8
 80055ac:	4604      	mov	r4, r0
 80055ae:	f001 ff63 	bl	8007478 <__mcmp>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	dc67      	bgt.n	8005686 <_strtod_l+0x89e>
 80055b6:	9b04      	ldr	r3, [sp, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d171      	bne.n	80056a0 <_strtod_l+0x8b8>
 80055bc:	e63d      	b.n	800523a <_strtod_l+0x452>
 80055be:	f018 0f01 	tst.w	r8, #1
 80055c2:	d004      	beq.n	80055ce <_strtod_l+0x7e6>
 80055c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055c8:	f7fb f816 	bl	80005f8 <__aeabi_dmul>
 80055cc:	2301      	movs	r3, #1
 80055ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80055d2:	3508      	adds	r5, #8
 80055d4:	e6e5      	b.n	80053a2 <_strtod_l+0x5ba>
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	ea03 0a0a 	and.w	sl, r3, sl
 80055e2:	e6ff      	b.n	80053e4 <_strtod_l+0x5fc>
 80055e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80055e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80055ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80055f0:	36e2      	adds	r6, #226	; 0xe2
 80055f2:	fa01 f306 	lsl.w	r3, r1, r6
 80055f6:	930a      	str	r3, [sp, #40]	; 0x28
 80055f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80055fa:	e75d      	b.n	80054b8 <_strtod_l+0x6d0>
 80055fc:	2300      	movs	r3, #0
 80055fe:	930a      	str	r3, [sp, #40]	; 0x28
 8005600:	2301      	movs	r3, #1
 8005602:	930f      	str	r3, [sp, #60]	; 0x3c
 8005604:	e758      	b.n	80054b8 <_strtod_l+0x6d0>
 8005606:	4632      	mov	r2, r6
 8005608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800560a:	4648      	mov	r0, r9
 800560c:	f001 fee0 	bl	80073d0 <__lshift>
 8005610:	901c      	str	r0, [sp, #112]	; 0x70
 8005612:	2800      	cmp	r0, #0
 8005614:	f47f af7c 	bne.w	8005510 <_strtod_l+0x728>
 8005618:	e604      	b.n	8005224 <_strtod_l+0x43c>
 800561a:	bf00      	nop
 800561c:	08009318 	.word	0x08009318
 8005620:	fffffc02 	.word	0xfffffc02
 8005624:	465d      	mov	r5, fp
 8005626:	f040 8086 	bne.w	8005736 <_strtod_l+0x94e>
 800562a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800562c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005630:	b32a      	cbz	r2, 800567e <_strtod_l+0x896>
 8005632:	4aaf      	ldr	r2, [pc, #700]	; (80058f0 <_strtod_l+0xb08>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d153      	bne.n	80056e0 <_strtod_l+0x8f8>
 8005638:	9b04      	ldr	r3, [sp, #16]
 800563a:	4650      	mov	r0, sl
 800563c:	b1d3      	cbz	r3, 8005674 <_strtod_l+0x88c>
 800563e:	4aad      	ldr	r2, [pc, #692]	; (80058f4 <_strtod_l+0xb0c>)
 8005640:	402a      	ands	r2, r5
 8005642:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005646:	f04f 31ff 	mov.w	r1, #4294967295
 800564a:	d816      	bhi.n	800567a <_strtod_l+0x892>
 800564c:	0d12      	lsrs	r2, r2, #20
 800564e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005652:	fa01 f303 	lsl.w	r3, r1, r3
 8005656:	4298      	cmp	r0, r3
 8005658:	d142      	bne.n	80056e0 <_strtod_l+0x8f8>
 800565a:	4ba7      	ldr	r3, [pc, #668]	; (80058f8 <_strtod_l+0xb10>)
 800565c:	429d      	cmp	r5, r3
 800565e:	d102      	bne.n	8005666 <_strtod_l+0x87e>
 8005660:	3001      	adds	r0, #1
 8005662:	f43f addf 	beq.w	8005224 <_strtod_l+0x43c>
 8005666:	4ba3      	ldr	r3, [pc, #652]	; (80058f4 <_strtod_l+0xb0c>)
 8005668:	402b      	ands	r3, r5
 800566a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800566e:	f04f 0a00 	mov.w	sl, #0
 8005672:	e7a0      	b.n	80055b6 <_strtod_l+0x7ce>
 8005674:	f04f 33ff 	mov.w	r3, #4294967295
 8005678:	e7ed      	b.n	8005656 <_strtod_l+0x86e>
 800567a:	460b      	mov	r3, r1
 800567c:	e7eb      	b.n	8005656 <_strtod_l+0x86e>
 800567e:	bb7b      	cbnz	r3, 80056e0 <_strtod_l+0x8f8>
 8005680:	f1ba 0f00 	cmp.w	sl, #0
 8005684:	d12c      	bne.n	80056e0 <_strtod_l+0x8f8>
 8005686:	9904      	ldr	r1, [sp, #16]
 8005688:	4a9a      	ldr	r2, [pc, #616]	; (80058f4 <_strtod_l+0xb0c>)
 800568a:	465b      	mov	r3, fp
 800568c:	b1f1      	cbz	r1, 80056cc <_strtod_l+0x8e4>
 800568e:	ea02 010b 	and.w	r1, r2, fp
 8005692:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005696:	dc19      	bgt.n	80056cc <_strtod_l+0x8e4>
 8005698:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800569c:	f77f ae5b 	ble.w	8005356 <_strtod_l+0x56e>
 80056a0:	4a96      	ldr	r2, [pc, #600]	; (80058fc <_strtod_l+0xb14>)
 80056a2:	2300      	movs	r3, #0
 80056a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80056a8:	4650      	mov	r0, sl
 80056aa:	4659      	mov	r1, fp
 80056ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4682      	mov	sl, r0
 80056b6:	468b      	mov	fp, r1
 80056b8:	2900      	cmp	r1, #0
 80056ba:	f47f adbe 	bne.w	800523a <_strtod_l+0x452>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f47f adbb 	bne.w	800523a <_strtod_l+0x452>
 80056c4:	2322      	movs	r3, #34	; 0x22
 80056c6:	f8c9 3000 	str.w	r3, [r9]
 80056ca:	e5b6      	b.n	800523a <_strtod_l+0x452>
 80056cc:	4013      	ands	r3, r2
 80056ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80056d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80056da:	f04f 3aff 	mov.w	sl, #4294967295
 80056de:	e76a      	b.n	80055b6 <_strtod_l+0x7ce>
 80056e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e2:	b193      	cbz	r3, 800570a <_strtod_l+0x922>
 80056e4:	422b      	tst	r3, r5
 80056e6:	f43f af66 	beq.w	80055b6 <_strtod_l+0x7ce>
 80056ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056ec:	9a04      	ldr	r2, [sp, #16]
 80056ee:	4650      	mov	r0, sl
 80056f0:	4659      	mov	r1, fp
 80056f2:	b173      	cbz	r3, 8005712 <_strtod_l+0x92a>
 80056f4:	f7ff fb5a 	bl	8004dac <sulp>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005700:	f7fa fdc4 	bl	800028c <__adddf3>
 8005704:	4682      	mov	sl, r0
 8005706:	468b      	mov	fp, r1
 8005708:	e755      	b.n	80055b6 <_strtod_l+0x7ce>
 800570a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800570c:	ea13 0f0a 	tst.w	r3, sl
 8005710:	e7e9      	b.n	80056e6 <_strtod_l+0x8fe>
 8005712:	f7ff fb4b 	bl	8004dac <sulp>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800571e:	f7fa fdb3 	bl	8000288 <__aeabi_dsub>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4682      	mov	sl, r0
 8005728:	468b      	mov	fp, r1
 800572a:	f7fb f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800572e:	2800      	cmp	r0, #0
 8005730:	f47f ae11 	bne.w	8005356 <_strtod_l+0x56e>
 8005734:	e73f      	b.n	80055b6 <_strtod_l+0x7ce>
 8005736:	4641      	mov	r1, r8
 8005738:	4620      	mov	r0, r4
 800573a:	f001 ffda 	bl	80076f2 <__ratio>
 800573e:	ec57 6b10 	vmov	r6, r7, d0
 8005742:	2200      	movs	r2, #0
 8005744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005748:	ee10 0a10 	vmov	r0, s0
 800574c:	4639      	mov	r1, r7
 800574e:	f7fb f9cf 	bl	8000af0 <__aeabi_dcmple>
 8005752:	2800      	cmp	r0, #0
 8005754:	d077      	beq.n	8005846 <_strtod_l+0xa5e>
 8005756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005758:	2b00      	cmp	r3, #0
 800575a:	d04a      	beq.n	80057f2 <_strtod_l+0xa0a>
 800575c:	4b68      	ldr	r3, [pc, #416]	; (8005900 <_strtod_l+0xb18>)
 800575e:	2200      	movs	r2, #0
 8005760:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005764:	4f66      	ldr	r7, [pc, #408]	; (8005900 <_strtod_l+0xb18>)
 8005766:	2600      	movs	r6, #0
 8005768:	4b62      	ldr	r3, [pc, #392]	; (80058f4 <_strtod_l+0xb0c>)
 800576a:	402b      	ands	r3, r5
 800576c:	930f      	str	r3, [sp, #60]	; 0x3c
 800576e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005770:	4b64      	ldr	r3, [pc, #400]	; (8005904 <_strtod_l+0xb1c>)
 8005772:	429a      	cmp	r2, r3
 8005774:	f040 80ce 	bne.w	8005914 <_strtod_l+0xb2c>
 8005778:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800577c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005780:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8005784:	ec4b ab10 	vmov	d0, sl, fp
 8005788:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800578c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005790:	f001 feea 	bl	8007568 <__ulp>
 8005794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005798:	ec53 2b10 	vmov	r2, r3, d0
 800579c:	f7fa ff2c 	bl	80005f8 <__aeabi_dmul>
 80057a0:	4652      	mov	r2, sl
 80057a2:	465b      	mov	r3, fp
 80057a4:	f7fa fd72 	bl	800028c <__adddf3>
 80057a8:	460b      	mov	r3, r1
 80057aa:	4952      	ldr	r1, [pc, #328]	; (80058f4 <_strtod_l+0xb0c>)
 80057ac:	4a56      	ldr	r2, [pc, #344]	; (8005908 <_strtod_l+0xb20>)
 80057ae:	4019      	ands	r1, r3
 80057b0:	4291      	cmp	r1, r2
 80057b2:	4682      	mov	sl, r0
 80057b4:	d95b      	bls.n	800586e <_strtod_l+0xa86>
 80057b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80057bc:	4293      	cmp	r3, r2
 80057be:	d103      	bne.n	80057c8 <_strtod_l+0x9e0>
 80057c0:	9b08      	ldr	r3, [sp, #32]
 80057c2:	3301      	adds	r3, #1
 80057c4:	f43f ad2e 	beq.w	8005224 <_strtod_l+0x43c>
 80057c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80058f8 <_strtod_l+0xb10>
 80057cc:	f04f 3aff 	mov.w	sl, #4294967295
 80057d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057d2:	4648      	mov	r0, r9
 80057d4:	f001 fc31 	bl	800703a <_Bfree>
 80057d8:	9905      	ldr	r1, [sp, #20]
 80057da:	4648      	mov	r0, r9
 80057dc:	f001 fc2d 	bl	800703a <_Bfree>
 80057e0:	4641      	mov	r1, r8
 80057e2:	4648      	mov	r0, r9
 80057e4:	f001 fc29 	bl	800703a <_Bfree>
 80057e8:	4621      	mov	r1, r4
 80057ea:	4648      	mov	r0, r9
 80057ec:	f001 fc25 	bl	800703a <_Bfree>
 80057f0:	e619      	b.n	8005426 <_strtod_l+0x63e>
 80057f2:	f1ba 0f00 	cmp.w	sl, #0
 80057f6:	d11a      	bne.n	800582e <_strtod_l+0xa46>
 80057f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057fc:	b9eb      	cbnz	r3, 800583a <_strtod_l+0xa52>
 80057fe:	2200      	movs	r2, #0
 8005800:	4b3f      	ldr	r3, [pc, #252]	; (8005900 <_strtod_l+0xb18>)
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f969 	bl	8000adc <__aeabi_dcmplt>
 800580a:	b9c8      	cbnz	r0, 8005840 <_strtod_l+0xa58>
 800580c:	4630      	mov	r0, r6
 800580e:	4639      	mov	r1, r7
 8005810:	2200      	movs	r2, #0
 8005812:	4b3e      	ldr	r3, [pc, #248]	; (800590c <_strtod_l+0xb24>)
 8005814:	f7fa fef0 	bl	80005f8 <__aeabi_dmul>
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005820:	9618      	str	r6, [sp, #96]	; 0x60
 8005822:	9319      	str	r3, [sp, #100]	; 0x64
 8005824:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005828:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800582c:	e79c      	b.n	8005768 <_strtod_l+0x980>
 800582e:	f1ba 0f01 	cmp.w	sl, #1
 8005832:	d102      	bne.n	800583a <_strtod_l+0xa52>
 8005834:	2d00      	cmp	r5, #0
 8005836:	f43f ad8e 	beq.w	8005356 <_strtod_l+0x56e>
 800583a:	2200      	movs	r2, #0
 800583c:	4b34      	ldr	r3, [pc, #208]	; (8005910 <_strtod_l+0xb28>)
 800583e:	e78f      	b.n	8005760 <_strtod_l+0x978>
 8005840:	2600      	movs	r6, #0
 8005842:	4f32      	ldr	r7, [pc, #200]	; (800590c <_strtod_l+0xb24>)
 8005844:	e7ea      	b.n	800581c <_strtod_l+0xa34>
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <_strtod_l+0xb24>)
 8005848:	4630      	mov	r0, r6
 800584a:	4639      	mov	r1, r7
 800584c:	2200      	movs	r2, #0
 800584e:	f7fa fed3 	bl	80005f8 <__aeabi_dmul>
 8005852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005854:	4606      	mov	r6, r0
 8005856:	460f      	mov	r7, r1
 8005858:	b933      	cbnz	r3, 8005868 <_strtod_l+0xa80>
 800585a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800585e:	9010      	str	r0, [sp, #64]	; 0x40
 8005860:	9311      	str	r3, [sp, #68]	; 0x44
 8005862:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005866:	e7df      	b.n	8005828 <_strtod_l+0xa40>
 8005868:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800586c:	e7f9      	b.n	8005862 <_strtod_l+0xa7a>
 800586e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005872:	9b04      	ldr	r3, [sp, #16]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1ab      	bne.n	80057d0 <_strtod_l+0x9e8>
 8005878:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800587c:	0d1b      	lsrs	r3, r3, #20
 800587e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005880:	051b      	lsls	r3, r3, #20
 8005882:	429a      	cmp	r2, r3
 8005884:	465d      	mov	r5, fp
 8005886:	d1a3      	bne.n	80057d0 <_strtod_l+0x9e8>
 8005888:	4639      	mov	r1, r7
 800588a:	4630      	mov	r0, r6
 800588c:	f7fb f964 	bl	8000b58 <__aeabi_d2iz>
 8005890:	f7fa fe48 	bl	8000524 <__aeabi_i2d>
 8005894:	460b      	mov	r3, r1
 8005896:	4602      	mov	r2, r0
 8005898:	4639      	mov	r1, r7
 800589a:	4630      	mov	r0, r6
 800589c:	f7fa fcf4 	bl	8000288 <__aeabi_dsub>
 80058a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058a2:	4606      	mov	r6, r0
 80058a4:	460f      	mov	r7, r1
 80058a6:	b933      	cbnz	r3, 80058b6 <_strtod_l+0xace>
 80058a8:	f1ba 0f00 	cmp.w	sl, #0
 80058ac:	d103      	bne.n	80058b6 <_strtod_l+0xace>
 80058ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	d06d      	beq.n	8005992 <_strtod_l+0xbaa>
 80058b6:	a30a      	add	r3, pc, #40	; (adr r3, 80058e0 <_strtod_l+0xaf8>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fb f90c 	bl	8000adc <__aeabi_dcmplt>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	f47f acb8 	bne.w	800523a <_strtod_l+0x452>
 80058ca:	a307      	add	r3, pc, #28	; (adr r3, 80058e8 <_strtod_l+0xb00>)
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f920 	bl	8000b18 <__aeabi_dcmpgt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	f43f af79 	beq.w	80057d0 <_strtod_l+0x9e8>
 80058de:	e4ac      	b.n	800523a <_strtod_l+0x452>
 80058e0:	94a03595 	.word	0x94a03595
 80058e4:	3fdfffff 	.word	0x3fdfffff
 80058e8:	35afe535 	.word	0x35afe535
 80058ec:	3fe00000 	.word	0x3fe00000
 80058f0:	000fffff 	.word	0x000fffff
 80058f4:	7ff00000 	.word	0x7ff00000
 80058f8:	7fefffff 	.word	0x7fefffff
 80058fc:	39500000 	.word	0x39500000
 8005900:	3ff00000 	.word	0x3ff00000
 8005904:	7fe00000 	.word	0x7fe00000
 8005908:	7c9fffff 	.word	0x7c9fffff
 800590c:	3fe00000 	.word	0x3fe00000
 8005910:	bff00000 	.word	0xbff00000
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	b333      	cbz	r3, 8005966 <_strtod_l+0xb7e>
 8005918:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800591a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800591e:	d822      	bhi.n	8005966 <_strtod_l+0xb7e>
 8005920:	a327      	add	r3, pc, #156	; (adr r3, 80059c0 <_strtod_l+0xbd8>)
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	4630      	mov	r0, r6
 8005928:	4639      	mov	r1, r7
 800592a:	f7fb f8e1 	bl	8000af0 <__aeabi_dcmple>
 800592e:	b1a0      	cbz	r0, 800595a <_strtod_l+0xb72>
 8005930:	4639      	mov	r1, r7
 8005932:	4630      	mov	r0, r6
 8005934:	f7fb f938 	bl	8000ba8 <__aeabi_d2uiz>
 8005938:	2800      	cmp	r0, #0
 800593a:	bf08      	it	eq
 800593c:	2001      	moveq	r0, #1
 800593e:	f7fa fde1 	bl	8000504 <__aeabi_ui2d>
 8005942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005944:	4606      	mov	r6, r0
 8005946:	460f      	mov	r7, r1
 8005948:	bb03      	cbnz	r3, 800598c <_strtod_l+0xba4>
 800594a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800594e:	9012      	str	r0, [sp, #72]	; 0x48
 8005950:	9313      	str	r3, [sp, #76]	; 0x4c
 8005952:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005956:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800595a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800595c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800595e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	930b      	str	r3, [sp, #44]	; 0x2c
 8005966:	ed9d 0b08 	vldr	d0, [sp, #32]
 800596a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800596e:	f001 fdfb 	bl	8007568 <__ulp>
 8005972:	4650      	mov	r0, sl
 8005974:	ec53 2b10 	vmov	r2, r3, d0
 8005978:	4659      	mov	r1, fp
 800597a:	f7fa fe3d 	bl	80005f8 <__aeabi_dmul>
 800597e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005982:	f7fa fc83 	bl	800028c <__adddf3>
 8005986:	4682      	mov	sl, r0
 8005988:	468b      	mov	fp, r1
 800598a:	e772      	b.n	8005872 <_strtod_l+0xa8a>
 800598c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005990:	e7df      	b.n	8005952 <_strtod_l+0xb6a>
 8005992:	a30d      	add	r3, pc, #52	; (adr r3, 80059c8 <_strtod_l+0xbe0>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fb f8a0 	bl	8000adc <__aeabi_dcmplt>
 800599c:	e79c      	b.n	80058d8 <_strtod_l+0xaf0>
 800599e:	2300      	movs	r3, #0
 80059a0:	930d      	str	r3, [sp, #52]	; 0x34
 80059a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80059a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	f7ff ba61 	b.w	8004e6e <_strtod_l+0x86>
 80059ac:	2b65      	cmp	r3, #101	; 0x65
 80059ae:	f04f 0200 	mov.w	r2, #0
 80059b2:	f43f ab4e 	beq.w	8005052 <_strtod_l+0x26a>
 80059b6:	2101      	movs	r1, #1
 80059b8:	4614      	mov	r4, r2
 80059ba:	9104      	str	r1, [sp, #16]
 80059bc:	f7ff bacb 	b.w	8004f56 <_strtod_l+0x16e>
 80059c0:	ffc00000 	.word	0xffc00000
 80059c4:	41dfffff 	.word	0x41dfffff
 80059c8:	94a03595 	.word	0x94a03595
 80059cc:	3fcfffff 	.word	0x3fcfffff

080059d0 <strtod>:
 80059d0:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <strtod+0x20>)
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <strtod+0x24>)
 80059d4:	b410      	push	{r4}
 80059d6:	681c      	ldr	r4, [r3, #0]
 80059d8:	6a23      	ldr	r3, [r4, #32]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf08      	it	eq
 80059de:	4613      	moveq	r3, r2
 80059e0:	460a      	mov	r2, r1
 80059e2:	4601      	mov	r1, r0
 80059e4:	4620      	mov	r0, r4
 80059e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059ea:	f7ff b9fd 	b.w	8004de8 <_strtod_l>
 80059ee:	bf00      	nop
 80059f0:	2000000c 	.word	0x2000000c
 80059f4:	20000070 	.word	0x20000070

080059f8 <strtok>:
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <strtok+0x50>)
 80059fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059fe:	681d      	ldr	r5, [r3, #0]
 8005a00:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8005a02:	4606      	mov	r6, r0
 8005a04:	460f      	mov	r7, r1
 8005a06:	b9b4      	cbnz	r4, 8005a36 <strtok+0x3e>
 8005a08:	2050      	movs	r0, #80	; 0x50
 8005a0a:	f001 fabb 	bl	8006f84 <malloc>
 8005a0e:	65a8      	str	r0, [r5, #88]	; 0x58
 8005a10:	e9c0 4400 	strd	r4, r4, [r0]
 8005a14:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a18:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a1c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a20:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a24:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a28:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a2c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a30:	6184      	str	r4, [r0, #24]
 8005a32:	7704      	strb	r4, [r0, #28]
 8005a34:	6244      	str	r4, [r0, #36]	; 0x24
 8005a36:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8005a38:	4639      	mov	r1, r7
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a42:	f000 b803 	b.w	8005a4c <__strtok_r>
 8005a46:	bf00      	nop
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <__strtok_r>:
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b918      	cbnz	r0, 8005a58 <__strtok_r+0xc>
 8005a50:	6810      	ldr	r0, [r2, #0]
 8005a52:	b908      	cbnz	r0, 8005a58 <__strtok_r+0xc>
 8005a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a56:	4620      	mov	r0, r4
 8005a58:	4604      	mov	r4, r0
 8005a5a:	460f      	mov	r7, r1
 8005a5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a60:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a64:	b91e      	cbnz	r6, 8005a6e <__strtok_r+0x22>
 8005a66:	b96d      	cbnz	r5, 8005a84 <__strtok_r+0x38>
 8005a68:	6015      	str	r5, [r2, #0]
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e7f2      	b.n	8005a54 <__strtok_r+0x8>
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	d1f6      	bne.n	8005a60 <__strtok_r+0x14>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1ef      	bne.n	8005a56 <__strtok_r+0xa>
 8005a76:	6014      	str	r4, [r2, #0]
 8005a78:	7003      	strb	r3, [r0, #0]
 8005a7a:	e7eb      	b.n	8005a54 <__strtok_r+0x8>
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	e00d      	b.n	8005a9c <__strtok_r+0x50>
 8005a80:	b926      	cbnz	r6, 8005a8c <__strtok_r+0x40>
 8005a82:	461c      	mov	r4, r3
 8005a84:	4623      	mov	r3, r4
 8005a86:	460f      	mov	r7, r1
 8005a88:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005a8c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a90:	42b5      	cmp	r5, r6
 8005a92:	d1f5      	bne.n	8005a80 <__strtok_r+0x34>
 8005a94:	2d00      	cmp	r5, #0
 8005a96:	d0f1      	beq.n	8005a7c <__strtok_r+0x30>
 8005a98:	2100      	movs	r1, #0
 8005a9a:	7021      	strb	r1, [r4, #0]
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e7d9      	b.n	8005a54 <__strtok_r+0x8>

08005aa0 <quorem>:
 8005aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	6903      	ldr	r3, [r0, #16]
 8005aa6:	690c      	ldr	r4, [r1, #16]
 8005aa8:	42a3      	cmp	r3, r4
 8005aaa:	4680      	mov	r8, r0
 8005aac:	f2c0 8082 	blt.w	8005bb4 <quorem+0x114>
 8005ab0:	3c01      	subs	r4, #1
 8005ab2:	f101 0714 	add.w	r7, r1, #20
 8005ab6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005aba:	f100 0614 	add.w	r6, r0, #20
 8005abe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005ac2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005ac6:	eb06 030c 	add.w	r3, r6, ip
 8005aca:	3501      	adds	r5, #1
 8005acc:	eb07 090c 	add.w	r9, r7, ip
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	fbb0 f5f5 	udiv	r5, r0, r5
 8005ad6:	b395      	cbz	r5, 8005b3e <quorem+0x9e>
 8005ad8:	f04f 0a00 	mov.w	sl, #0
 8005adc:	4638      	mov	r0, r7
 8005ade:	46b6      	mov	lr, r6
 8005ae0:	46d3      	mov	fp, sl
 8005ae2:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ae6:	b293      	uxth	r3, r2
 8005ae8:	fb05 a303 	mla	r3, r5, r3, sl
 8005aec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	ebab 0303 	sub.w	r3, fp, r3
 8005af6:	0c12      	lsrs	r2, r2, #16
 8005af8:	f8de b000 	ldr.w	fp, [lr]
 8005afc:	fb05 a202 	mla	r2, r5, r2, sl
 8005b00:	fa13 f38b 	uxtah	r3, r3, fp
 8005b04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005b08:	fa1f fb82 	uxth.w	fp, r2
 8005b0c:	f8de 2000 	ldr.w	r2, [lr]
 8005b10:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b1e:	4581      	cmp	r9, r0
 8005b20:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005b24:	f84e 3b04 	str.w	r3, [lr], #4
 8005b28:	d2db      	bcs.n	8005ae2 <quorem+0x42>
 8005b2a:	f856 300c 	ldr.w	r3, [r6, ip]
 8005b2e:	b933      	cbnz	r3, 8005b3e <quorem+0x9e>
 8005b30:	9b01      	ldr	r3, [sp, #4]
 8005b32:	3b04      	subs	r3, #4
 8005b34:	429e      	cmp	r6, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	d330      	bcc.n	8005b9c <quorem+0xfc>
 8005b3a:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f001 fc9a 	bl	8007478 <__mcmp>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	db25      	blt.n	8005b94 <quorem+0xf4>
 8005b48:	3501      	adds	r5, #1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f04f 0c00 	mov.w	ip, #0
 8005b50:	f857 2b04 	ldr.w	r2, [r7], #4
 8005b54:	f8d0 e000 	ldr.w	lr, [r0]
 8005b58:	b293      	uxth	r3, r2
 8005b5a:	ebac 0303 	sub.w	r3, ip, r3
 8005b5e:	0c12      	lsrs	r2, r2, #16
 8005b60:	fa13 f38e 	uxtah	r3, r3, lr
 8005b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b72:	45b9      	cmp	r9, r7
 8005b74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b78:	f840 3b04 	str.w	r3, [r0], #4
 8005b7c:	d2e8      	bcs.n	8005b50 <quorem+0xb0>
 8005b7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005b82:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005b86:	b92a      	cbnz	r2, 8005b94 <quorem+0xf4>
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	429e      	cmp	r6, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	d30b      	bcc.n	8005ba8 <quorem+0x108>
 8005b90:	f8c8 4010 	str.w	r4, [r8, #16]
 8005b94:	4628      	mov	r0, r5
 8005b96:	b003      	add	sp, #12
 8005b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	3b04      	subs	r3, #4
 8005ba0:	2a00      	cmp	r2, #0
 8005ba2:	d1ca      	bne.n	8005b3a <quorem+0x9a>
 8005ba4:	3c01      	subs	r4, #1
 8005ba6:	e7c5      	b.n	8005b34 <quorem+0x94>
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	2a00      	cmp	r2, #0
 8005bae:	d1ef      	bne.n	8005b90 <quorem+0xf0>
 8005bb0:	3c01      	subs	r4, #1
 8005bb2:	e7ea      	b.n	8005b8a <quorem+0xea>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e7ee      	b.n	8005b96 <quorem+0xf6>

08005bb8 <_dtoa_r>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	ec57 6b10 	vmov	r6, r7, d0
 8005bc0:	b097      	sub	sp, #92	; 0x5c
 8005bc2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bc4:	9106      	str	r1, [sp, #24]
 8005bc6:	4604      	mov	r4, r0
 8005bc8:	920b      	str	r2, [sp, #44]	; 0x2c
 8005bca:	9312      	str	r3, [sp, #72]	; 0x48
 8005bcc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005bd0:	e9cd 6700 	strd	r6, r7, [sp]
 8005bd4:	b93d      	cbnz	r5, 8005be6 <_dtoa_r+0x2e>
 8005bd6:	2010      	movs	r0, #16
 8005bd8:	f001 f9d4 	bl	8006f84 <malloc>
 8005bdc:	6260      	str	r0, [r4, #36]	; 0x24
 8005bde:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005be2:	6005      	str	r5, [r0, #0]
 8005be4:	60c5      	str	r5, [r0, #12]
 8005be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be8:	6819      	ldr	r1, [r3, #0]
 8005bea:	b151      	cbz	r1, 8005c02 <_dtoa_r+0x4a>
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	604a      	str	r2, [r1, #4]
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4093      	lsls	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f001 fa1f 	bl	800703a <_Bfree>
 8005bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	1e3b      	subs	r3, r7, #0
 8005c04:	bfbb      	ittet	lt
 8005c06:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	9301      	strlt	r3, [sp, #4]
 8005c0c:	2300      	movge	r3, #0
 8005c0e:	2201      	movlt	r2, #1
 8005c10:	bfac      	ite	ge
 8005c12:	f8c8 3000 	strge.w	r3, [r8]
 8005c16:	f8c8 2000 	strlt.w	r2, [r8]
 8005c1a:	4baf      	ldr	r3, [pc, #700]	; (8005ed8 <_dtoa_r+0x320>)
 8005c1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005c20:	ea33 0308 	bics.w	r3, r3, r8
 8005c24:	d114      	bne.n	8005c50 <_dtoa_r+0x98>
 8005c26:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	9b00      	ldr	r3, [sp, #0]
 8005c30:	b923      	cbnz	r3, 8005c3c <_dtoa_r+0x84>
 8005c32:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005c36:	2800      	cmp	r0, #0
 8005c38:	f000 8542 	beq.w	80066c0 <_dtoa_r+0xb08>
 8005c3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c3e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005eec <_dtoa_r+0x334>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8544 	beq.w	80066d0 <_dtoa_r+0xb18>
 8005c48:	f10b 0303 	add.w	r3, fp, #3
 8005c4c:	f000 bd3e 	b.w	80066cc <_dtoa_r+0xb14>
 8005c50:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c54:	2200      	movs	r2, #0
 8005c56:	2300      	movs	r3, #0
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa ff34 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c60:	4681      	mov	r9, r0
 8005c62:	b168      	cbz	r0, 8005c80 <_dtoa_r+0xc8>
 8005c64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c66:	2301      	movs	r3, #1
 8005c68:	6013      	str	r3, [r2, #0]
 8005c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8524 	beq.w	80066ba <_dtoa_r+0xb02>
 8005c72:	4b9a      	ldr	r3, [pc, #616]	; (8005edc <_dtoa_r+0x324>)
 8005c74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c76:	f103 3bff 	add.w	fp, r3, #4294967295
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	f000 bd28 	b.w	80066d0 <_dtoa_r+0xb18>
 8005c80:	aa14      	add	r2, sp, #80	; 0x50
 8005c82:	a915      	add	r1, sp, #84	; 0x54
 8005c84:	ec47 6b10 	vmov	d0, r6, r7
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f001 fce3 	bl	8007654 <__d2b>
 8005c8e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c92:	9004      	str	r0, [sp, #16]
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	d07c      	beq.n	8005d92 <_dtoa_r+0x1da>
 8005c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c9c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005ca0:	46b2      	mov	sl, r6
 8005ca2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005ca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005caa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4b8b      	ldr	r3, [pc, #556]	; (8005ee0 <_dtoa_r+0x328>)
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	f7fa fae7 	bl	8000288 <__aeabi_dsub>
 8005cba:	a381      	add	r3, pc, #516	; (adr r3, 8005ec0 <_dtoa_r+0x308>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	f7fa fc9a 	bl	80005f8 <__aeabi_dmul>
 8005cc4:	a380      	add	r3, pc, #512	; (adr r3, 8005ec8 <_dtoa_r+0x310>)
 8005cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cca:	f7fa fadf 	bl	800028c <__adddf3>
 8005cce:	4606      	mov	r6, r0
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	460f      	mov	r7, r1
 8005cd4:	f7fa fc26 	bl	8000524 <__aeabi_i2d>
 8005cd8:	a37d      	add	r3, pc, #500	; (adr r3, 8005ed0 <_dtoa_r+0x318>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fc8b 	bl	80005f8 <__aeabi_dmul>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	4639      	mov	r1, r7
 8005cea:	f7fa facf 	bl	800028c <__adddf3>
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460f      	mov	r7, r1
 8005cf2:	f7fa ff31 	bl	8000b58 <__aeabi_d2iz>
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	4682      	mov	sl, r0
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	4639      	mov	r1, r7
 8005d00:	f7fa feec 	bl	8000adc <__aeabi_dcmplt>
 8005d04:	b148      	cbz	r0, 8005d1a <_dtoa_r+0x162>
 8005d06:	4650      	mov	r0, sl
 8005d08:	f7fa fc0c 	bl	8000524 <__aeabi_i2d>
 8005d0c:	4632      	mov	r2, r6
 8005d0e:	463b      	mov	r3, r7
 8005d10:	f7fa feda 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d14:	b908      	cbnz	r0, 8005d1a <_dtoa_r+0x162>
 8005d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d1a:	f1ba 0f16 	cmp.w	sl, #22
 8005d1e:	d859      	bhi.n	8005dd4 <_dtoa_r+0x21c>
 8005d20:	4970      	ldr	r1, [pc, #448]	; (8005ee4 <_dtoa_r+0x32c>)
 8005d22:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d2e:	f7fa fef3 	bl	8000b18 <__aeabi_dcmpgt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d050      	beq.n	8005dd8 <_dtoa_r+0x220>
 8005d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d40:	1b5d      	subs	r5, r3, r5
 8005d42:	f1b5 0801 	subs.w	r8, r5, #1
 8005d46:	bf49      	itett	mi
 8005d48:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d4c:	2300      	movpl	r3, #0
 8005d4e:	9305      	strmi	r3, [sp, #20]
 8005d50:	f04f 0800 	movmi.w	r8, #0
 8005d54:	bf58      	it	pl
 8005d56:	9305      	strpl	r3, [sp, #20]
 8005d58:	f1ba 0f00 	cmp.w	sl, #0
 8005d5c:	db3e      	blt.n	8005ddc <_dtoa_r+0x224>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	44d0      	add	r8, sl
 8005d62:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005d66:	9307      	str	r3, [sp, #28]
 8005d68:	9b06      	ldr	r3, [sp, #24]
 8005d6a:	2b09      	cmp	r3, #9
 8005d6c:	f200 8090 	bhi.w	8005e90 <_dtoa_r+0x2d8>
 8005d70:	2b05      	cmp	r3, #5
 8005d72:	bfc4      	itt	gt
 8005d74:	3b04      	subgt	r3, #4
 8005d76:	9306      	strgt	r3, [sp, #24]
 8005d78:	9b06      	ldr	r3, [sp, #24]
 8005d7a:	f1a3 0302 	sub.w	r3, r3, #2
 8005d7e:	bfcc      	ite	gt
 8005d80:	2500      	movgt	r5, #0
 8005d82:	2501      	movle	r5, #1
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	f200 808f 	bhi.w	8005ea8 <_dtoa_r+0x2f0>
 8005d8a:	e8df f003 	tbb	[pc, r3]
 8005d8e:	7f7d      	.short	0x7f7d
 8005d90:	7131      	.short	0x7131
 8005d92:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005d96:	441d      	add	r5, r3
 8005d98:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005d9c:	2820      	cmp	r0, #32
 8005d9e:	dd13      	ble.n	8005dc8 <_dtoa_r+0x210>
 8005da0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005da4:	9b00      	ldr	r3, [sp, #0]
 8005da6:	fa08 f800 	lsl.w	r8, r8, r0
 8005daa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005dae:	fa23 f000 	lsr.w	r0, r3, r0
 8005db2:	ea48 0000 	orr.w	r0, r8, r0
 8005db6:	f7fa fba5 	bl	8000504 <__aeabi_ui2d>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005dc2:	3d01      	subs	r5, #1
 8005dc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8005dc6:	e772      	b.n	8005cae <_dtoa_r+0xf6>
 8005dc8:	9b00      	ldr	r3, [sp, #0]
 8005dca:	f1c0 0020 	rsb	r0, r0, #32
 8005dce:	fa03 f000 	lsl.w	r0, r3, r0
 8005dd2:	e7f0      	b.n	8005db6 <_dtoa_r+0x1fe>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7b1      	b.n	8005d3c <_dtoa_r+0x184>
 8005dd8:	900f      	str	r0, [sp, #60]	; 0x3c
 8005dda:	e7b0      	b.n	8005d3e <_dtoa_r+0x186>
 8005ddc:	9b05      	ldr	r3, [sp, #20]
 8005dde:	eba3 030a 	sub.w	r3, r3, sl
 8005de2:	9305      	str	r3, [sp, #20]
 8005de4:	f1ca 0300 	rsb	r3, sl, #0
 8005de8:	9307      	str	r3, [sp, #28]
 8005dea:	2300      	movs	r3, #0
 8005dec:	930e      	str	r3, [sp, #56]	; 0x38
 8005dee:	e7bb      	b.n	8005d68 <_dtoa_r+0x1b0>
 8005df0:	2301      	movs	r3, #1
 8005df2:	930a      	str	r3, [sp, #40]	; 0x28
 8005df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dd59      	ble.n	8005eae <_dtoa_r+0x2f6>
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	4699      	mov	r9, r3
 8005dfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e00:	2200      	movs	r2, #0
 8005e02:	6072      	str	r2, [r6, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	f102 0014 	add.w	r0, r2, #20
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	6871      	ldr	r1, [r6, #4]
 8005e0e:	d953      	bls.n	8005eb8 <_dtoa_r+0x300>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 f8de 	bl	8006fd2 <_Balloc>
 8005e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e18:	6030      	str	r0, [r6, #0]
 8005e1a:	f1b9 0f0e 	cmp.w	r9, #14
 8005e1e:	f8d3 b000 	ldr.w	fp, [r3]
 8005e22:	f200 80e6 	bhi.w	8005ff2 <_dtoa_r+0x43a>
 8005e26:	2d00      	cmp	r5, #0
 8005e28:	f000 80e3 	beq.w	8005ff2 <_dtoa_r+0x43a>
 8005e2c:	ed9d 7b00 	vldr	d7, [sp]
 8005e30:	f1ba 0f00 	cmp.w	sl, #0
 8005e34:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005e38:	dd74      	ble.n	8005f24 <_dtoa_r+0x36c>
 8005e3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <_dtoa_r+0x32c>)
 8005e3c:	f00a 030f 	and.w	r3, sl, #15
 8005e40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e44:	ed93 7b00 	vldr	d7, [r3]
 8005e48:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005e4c:	06f0      	lsls	r0, r6, #27
 8005e4e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005e52:	d565      	bpl.n	8005f20 <_dtoa_r+0x368>
 8005e54:	4b24      	ldr	r3, [pc, #144]	; (8005ee8 <_dtoa_r+0x330>)
 8005e56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005e5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e5e:	f7fa fcf5 	bl	800084c <__aeabi_ddiv>
 8005e62:	e9cd 0100 	strd	r0, r1, [sp]
 8005e66:	f006 060f 	and.w	r6, r6, #15
 8005e6a:	2503      	movs	r5, #3
 8005e6c:	4f1e      	ldr	r7, [pc, #120]	; (8005ee8 <_dtoa_r+0x330>)
 8005e6e:	e04c      	b.n	8005f0a <_dtoa_r+0x352>
 8005e70:	2301      	movs	r3, #1
 8005e72:	930a      	str	r3, [sp, #40]	; 0x28
 8005e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e76:	4453      	add	r3, sl
 8005e78:	f103 0901 	add.w	r9, r3, #1
 8005e7c:	9302      	str	r3, [sp, #8]
 8005e7e:	464b      	mov	r3, r9
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	bfb8      	it	lt
 8005e84:	2301      	movlt	r3, #1
 8005e86:	e7ba      	b.n	8005dfe <_dtoa_r+0x246>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e7b2      	b.n	8005df2 <_dtoa_r+0x23a>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e7f0      	b.n	8005e72 <_dtoa_r+0x2ba>
 8005e90:	2501      	movs	r5, #1
 8005e92:	2300      	movs	r3, #0
 8005e94:	9306      	str	r3, [sp, #24]
 8005e96:	950a      	str	r5, [sp, #40]	; 0x28
 8005e98:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9c:	9302      	str	r3, [sp, #8]
 8005e9e:	4699      	mov	r9, r3
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2312      	movs	r3, #18
 8005ea4:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ea6:	e7aa      	b.n	8005dfe <_dtoa_r+0x246>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8005eac:	e7f4      	b.n	8005e98 <_dtoa_r+0x2e0>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	9302      	str	r3, [sp, #8]
 8005eb2:	4699      	mov	r9, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	e7f5      	b.n	8005ea4 <_dtoa_r+0x2ec>
 8005eb8:	3101      	adds	r1, #1
 8005eba:	6071      	str	r1, [r6, #4]
 8005ebc:	0052      	lsls	r2, r2, #1
 8005ebe:	e7a2      	b.n	8005e06 <_dtoa_r+0x24e>
 8005ec0:	636f4361 	.word	0x636f4361
 8005ec4:	3fd287a7 	.word	0x3fd287a7
 8005ec8:	8b60c8b3 	.word	0x8b60c8b3
 8005ecc:	3fc68a28 	.word	0x3fc68a28
 8005ed0:	509f79fb 	.word	0x509f79fb
 8005ed4:	3fd34413 	.word	0x3fd34413
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	080094e4 	.word	0x080094e4
 8005ee0:	3ff80000 	.word	0x3ff80000
 8005ee4:	080093e8 	.word	0x080093e8
 8005ee8:	080093c0 	.word	0x080093c0
 8005eec:	08009349 	.word	0x08009349
 8005ef0:	07f1      	lsls	r1, r6, #31
 8005ef2:	d508      	bpl.n	8005f06 <_dtoa_r+0x34e>
 8005ef4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005efc:	f7fa fb7c 	bl	80005f8 <__aeabi_dmul>
 8005f00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005f04:	3501      	adds	r5, #1
 8005f06:	1076      	asrs	r6, r6, #1
 8005f08:	3708      	adds	r7, #8
 8005f0a:	2e00      	cmp	r6, #0
 8005f0c:	d1f0      	bne.n	8005ef0 <_dtoa_r+0x338>
 8005f0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f16:	f7fa fc99 	bl	800084c <__aeabi_ddiv>
 8005f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f1e:	e01a      	b.n	8005f56 <_dtoa_r+0x39e>
 8005f20:	2502      	movs	r5, #2
 8005f22:	e7a3      	b.n	8005e6c <_dtoa_r+0x2b4>
 8005f24:	f000 80a0 	beq.w	8006068 <_dtoa_r+0x4b0>
 8005f28:	f1ca 0600 	rsb	r6, sl, #0
 8005f2c:	4b9f      	ldr	r3, [pc, #636]	; (80061ac <_dtoa_r+0x5f4>)
 8005f2e:	4fa0      	ldr	r7, [pc, #640]	; (80061b0 <_dtoa_r+0x5f8>)
 8005f30:	f006 020f 	and.w	r2, r6, #15
 8005f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005f40:	f7fa fb5a 	bl	80005f8 <__aeabi_dmul>
 8005f44:	e9cd 0100 	strd	r0, r1, [sp]
 8005f48:	1136      	asrs	r6, r6, #4
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2502      	movs	r5, #2
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	d17f      	bne.n	8006052 <_dtoa_r+0x49a>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e1      	bne.n	8005f1a <_dtoa_r+0x362>
 8005f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 8087 	beq.w	800606c <_dtoa_r+0x4b4>
 8005f5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f62:	2200      	movs	r2, #0
 8005f64:	4b93      	ldr	r3, [pc, #588]	; (80061b4 <_dtoa_r+0x5fc>)
 8005f66:	4630      	mov	r0, r6
 8005f68:	4639      	mov	r1, r7
 8005f6a:	f7fa fdb7 	bl	8000adc <__aeabi_dcmplt>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	d07c      	beq.n	800606c <_dtoa_r+0x4b4>
 8005f72:	f1b9 0f00 	cmp.w	r9, #0
 8005f76:	d079      	beq.n	800606c <_dtoa_r+0x4b4>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dd35      	ble.n	8005fea <_dtoa_r+0x432>
 8005f7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005f82:	9308      	str	r3, [sp, #32]
 8005f84:	4639      	mov	r1, r7
 8005f86:	2200      	movs	r2, #0
 8005f88:	4b8b      	ldr	r3, [pc, #556]	; (80061b8 <_dtoa_r+0x600>)
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	e9cd 0100 	strd	r0, r1, [sp]
 8005f94:	9f02      	ldr	r7, [sp, #8]
 8005f96:	3501      	adds	r5, #1
 8005f98:	4628      	mov	r0, r5
 8005f9a:	f7fa fac3 	bl	8000524 <__aeabi_i2d>
 8005f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fa2:	f7fa fb29 	bl	80005f8 <__aeabi_dmul>
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	4b84      	ldr	r3, [pc, #528]	; (80061bc <_dtoa_r+0x604>)
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4605      	mov	r5, r0
 8005fb0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005fb4:	2f00      	cmp	r7, #0
 8005fb6:	d15d      	bne.n	8006074 <_dtoa_r+0x4bc>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <_dtoa_r+0x608>)
 8005fbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc0:	f7fa f962 	bl	8000288 <__aeabi_dsub>
 8005fc4:	462a      	mov	r2, r5
 8005fc6:	4633      	mov	r3, r6
 8005fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8005fcc:	f7fa fda4 	bl	8000b18 <__aeabi_dcmpgt>
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	f040 8288 	bne.w	80064e6 <_dtoa_r+0x92e>
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005fdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fe0:	f7fa fd7c 	bl	8000adc <__aeabi_dcmplt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 827c 	bne.w	80064e2 <_dtoa_r+0x92a>
 8005fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005fee:	e9cd 2300 	strd	r2, r3, [sp]
 8005ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f2c0 8150 	blt.w	800629a <_dtoa_r+0x6e2>
 8005ffa:	f1ba 0f0e 	cmp.w	sl, #14
 8005ffe:	f300 814c 	bgt.w	800629a <_dtoa_r+0x6e2>
 8006002:	4b6a      	ldr	r3, [pc, #424]	; (80061ac <_dtoa_r+0x5f4>)
 8006004:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006008:	ed93 7b00 	vldr	d7, [r3]
 800600c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600e:	2b00      	cmp	r3, #0
 8006010:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006014:	f280 80d8 	bge.w	80061c8 <_dtoa_r+0x610>
 8006018:	f1b9 0f00 	cmp.w	r9, #0
 800601c:	f300 80d4 	bgt.w	80061c8 <_dtoa_r+0x610>
 8006020:	f040 825e 	bne.w	80064e0 <_dtoa_r+0x928>
 8006024:	2200      	movs	r2, #0
 8006026:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <_dtoa_r+0x608>)
 8006028:	ec51 0b17 	vmov	r0, r1, d7
 800602c:	f7fa fae4 	bl	80005f8 <__aeabi_dmul>
 8006030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006034:	f7fa fd66 	bl	8000b04 <__aeabi_dcmpge>
 8006038:	464f      	mov	r7, r9
 800603a:	464e      	mov	r6, r9
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 8234 	bne.w	80064aa <_dtoa_r+0x8f2>
 8006042:	2331      	movs	r3, #49	; 0x31
 8006044:	f10b 0501 	add.w	r5, fp, #1
 8006048:	f88b 3000 	strb.w	r3, [fp]
 800604c:	f10a 0a01 	add.w	sl, sl, #1
 8006050:	e22f      	b.n	80064b2 <_dtoa_r+0x8fa>
 8006052:	07f2      	lsls	r2, r6, #31
 8006054:	d505      	bpl.n	8006062 <_dtoa_r+0x4aa>
 8006056:	e9d7 2300 	ldrd	r2, r3, [r7]
 800605a:	f7fa facd 	bl	80005f8 <__aeabi_dmul>
 800605e:	3501      	adds	r5, #1
 8006060:	2301      	movs	r3, #1
 8006062:	1076      	asrs	r6, r6, #1
 8006064:	3708      	adds	r7, #8
 8006066:	e772      	b.n	8005f4e <_dtoa_r+0x396>
 8006068:	2502      	movs	r5, #2
 800606a:	e774      	b.n	8005f56 <_dtoa_r+0x39e>
 800606c:	f8cd a020 	str.w	sl, [sp, #32]
 8006070:	464f      	mov	r7, r9
 8006072:	e791      	b.n	8005f98 <_dtoa_r+0x3e0>
 8006074:	4b4d      	ldr	r3, [pc, #308]	; (80061ac <_dtoa_r+0x5f4>)
 8006076:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800607a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800607e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d047      	beq.n	8006114 <_dtoa_r+0x55c>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	2000      	movs	r0, #0
 800608a:	494e      	ldr	r1, [pc, #312]	; (80061c4 <_dtoa_r+0x60c>)
 800608c:	f7fa fbde 	bl	800084c <__aeabi_ddiv>
 8006090:	462a      	mov	r2, r5
 8006092:	4633      	mov	r3, r6
 8006094:	f7fa f8f8 	bl	8000288 <__aeabi_dsub>
 8006098:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800609c:	465d      	mov	r5, fp
 800609e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060a2:	f7fa fd59 	bl	8000b58 <__aeabi_d2iz>
 80060a6:	4606      	mov	r6, r0
 80060a8:	f7fa fa3c 	bl	8000524 <__aeabi_i2d>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060b4:	f7fa f8e8 	bl	8000288 <__aeabi_dsub>
 80060b8:	3630      	adds	r6, #48	; 0x30
 80060ba:	f805 6b01 	strb.w	r6, [r5], #1
 80060be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060c2:	e9cd 0100 	strd	r0, r1, [sp]
 80060c6:	f7fa fd09 	bl	8000adc <__aeabi_dcmplt>
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d163      	bne.n	8006196 <_dtoa_r+0x5de>
 80060ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d2:	2000      	movs	r0, #0
 80060d4:	4937      	ldr	r1, [pc, #220]	; (80061b4 <_dtoa_r+0x5fc>)
 80060d6:	f7fa f8d7 	bl	8000288 <__aeabi_dsub>
 80060da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80060de:	f7fa fcfd 	bl	8000adc <__aeabi_dcmplt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	f040 80b7 	bne.w	8006256 <_dtoa_r+0x69e>
 80060e8:	eba5 030b 	sub.w	r3, r5, fp
 80060ec:	429f      	cmp	r7, r3
 80060ee:	f77f af7c 	ble.w	8005fea <_dtoa_r+0x432>
 80060f2:	2200      	movs	r2, #0
 80060f4:	4b30      	ldr	r3, [pc, #192]	; (80061b8 <_dtoa_r+0x600>)
 80060f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060fa:	f7fa fa7d 	bl	80005f8 <__aeabi_dmul>
 80060fe:	2200      	movs	r2, #0
 8006100:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006104:	4b2c      	ldr	r3, [pc, #176]	; (80061b8 <_dtoa_r+0x600>)
 8006106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800610a:	f7fa fa75 	bl	80005f8 <__aeabi_dmul>
 800610e:	e9cd 0100 	strd	r0, r1, [sp]
 8006112:	e7c4      	b.n	800609e <_dtoa_r+0x4e6>
 8006114:	462a      	mov	r2, r5
 8006116:	4633      	mov	r3, r6
 8006118:	f7fa fa6e 	bl	80005f8 <__aeabi_dmul>
 800611c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006120:	eb0b 0507 	add.w	r5, fp, r7
 8006124:	465e      	mov	r6, fp
 8006126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800612a:	f7fa fd15 	bl	8000b58 <__aeabi_d2iz>
 800612e:	4607      	mov	r7, r0
 8006130:	f7fa f9f8 	bl	8000524 <__aeabi_i2d>
 8006134:	3730      	adds	r7, #48	; 0x30
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800613e:	f7fa f8a3 	bl	8000288 <__aeabi_dsub>
 8006142:	f806 7b01 	strb.w	r7, [r6], #1
 8006146:	42ae      	cmp	r6, r5
 8006148:	e9cd 0100 	strd	r0, r1, [sp]
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	d126      	bne.n	80061a0 <_dtoa_r+0x5e8>
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <_dtoa_r+0x60c>)
 8006154:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006158:	f7fa f898 	bl	800028c <__adddf3>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006164:	f7fa fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 8006168:	2800      	cmp	r0, #0
 800616a:	d174      	bne.n	8006256 <_dtoa_r+0x69e>
 800616c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006170:	2000      	movs	r0, #0
 8006172:	4914      	ldr	r1, [pc, #80]	; (80061c4 <_dtoa_r+0x60c>)
 8006174:	f7fa f888 	bl	8000288 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006180:	f7fa fcac 	bl	8000adc <__aeabi_dcmplt>
 8006184:	2800      	cmp	r0, #0
 8006186:	f43f af30 	beq.w	8005fea <_dtoa_r+0x432>
 800618a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800618e:	2b30      	cmp	r3, #48	; 0x30
 8006190:	f105 32ff 	add.w	r2, r5, #4294967295
 8006194:	d002      	beq.n	800619c <_dtoa_r+0x5e4>
 8006196:	f8dd a020 	ldr.w	sl, [sp, #32]
 800619a:	e04a      	b.n	8006232 <_dtoa_r+0x67a>
 800619c:	4615      	mov	r5, r2
 800619e:	e7f4      	b.n	800618a <_dtoa_r+0x5d2>
 80061a0:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <_dtoa_r+0x600>)
 80061a2:	f7fa fa29 	bl	80005f8 <__aeabi_dmul>
 80061a6:	e9cd 0100 	strd	r0, r1, [sp]
 80061aa:	e7bc      	b.n	8006126 <_dtoa_r+0x56e>
 80061ac:	080093e8 	.word	0x080093e8
 80061b0:	080093c0 	.word	0x080093c0
 80061b4:	3ff00000 	.word	0x3ff00000
 80061b8:	40240000 	.word	0x40240000
 80061bc:	401c0000 	.word	0x401c0000
 80061c0:	40140000 	.word	0x40140000
 80061c4:	3fe00000 	.word	0x3fe00000
 80061c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061cc:	465d      	mov	r5, fp
 80061ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d2:	4630      	mov	r0, r6
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fb39 	bl	800084c <__aeabi_ddiv>
 80061da:	f7fa fcbd 	bl	8000b58 <__aeabi_d2iz>
 80061de:	4680      	mov	r8, r0
 80061e0:	f7fa f9a0 	bl	8000524 <__aeabi_i2d>
 80061e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061e8:	f7fa fa06 	bl	80005f8 <__aeabi_dmul>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4630      	mov	r0, r6
 80061f2:	4639      	mov	r1, r7
 80061f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80061f8:	f7fa f846 	bl	8000288 <__aeabi_dsub>
 80061fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006200:	eba5 060b 	sub.w	r6, r5, fp
 8006204:	45b1      	cmp	r9, r6
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	d139      	bne.n	8006280 <_dtoa_r+0x6c8>
 800620c:	f7fa f83e 	bl	800028c <__adddf3>
 8006210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006214:	4606      	mov	r6, r0
 8006216:	460f      	mov	r7, r1
 8006218:	f7fa fc7e 	bl	8000b18 <__aeabi_dcmpgt>
 800621c:	b9c8      	cbnz	r0, 8006252 <_dtoa_r+0x69a>
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa fc4f 	bl	8000ac8 <__aeabi_dcmpeq>
 800622a:	b110      	cbz	r0, 8006232 <_dtoa_r+0x67a>
 800622c:	f018 0f01 	tst.w	r8, #1
 8006230:	d10f      	bne.n	8006252 <_dtoa_r+0x69a>
 8006232:	9904      	ldr	r1, [sp, #16]
 8006234:	4620      	mov	r0, r4
 8006236:	f000 ff00 	bl	800703a <_Bfree>
 800623a:	2300      	movs	r3, #0
 800623c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800623e:	702b      	strb	r3, [r5, #0]
 8006240:	f10a 0301 	add.w	r3, sl, #1
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 8241 	beq.w	80066d0 <_dtoa_r+0xb18>
 800624e:	601d      	str	r5, [r3, #0]
 8006250:	e23e      	b.n	80066d0 <_dtoa_r+0xb18>
 8006252:	f8cd a020 	str.w	sl, [sp, #32]
 8006256:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800625a:	2a39      	cmp	r2, #57	; 0x39
 800625c:	f105 33ff 	add.w	r3, r5, #4294967295
 8006260:	d108      	bne.n	8006274 <_dtoa_r+0x6bc>
 8006262:	459b      	cmp	fp, r3
 8006264:	d10a      	bne.n	800627c <_dtoa_r+0x6c4>
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	3301      	adds	r3, #1
 800626a:	9308      	str	r3, [sp, #32]
 800626c:	2330      	movs	r3, #48	; 0x30
 800626e:	f88b 3000 	strb.w	r3, [fp]
 8006272:	465b      	mov	r3, fp
 8006274:	781a      	ldrb	r2, [r3, #0]
 8006276:	3201      	adds	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e78c      	b.n	8006196 <_dtoa_r+0x5de>
 800627c:	461d      	mov	r5, r3
 800627e:	e7ea      	b.n	8006256 <_dtoa_r+0x69e>
 8006280:	2200      	movs	r2, #0
 8006282:	4b9b      	ldr	r3, [pc, #620]	; (80064f0 <_dtoa_r+0x938>)
 8006284:	f7fa f9b8 	bl	80005f8 <__aeabi_dmul>
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	4606      	mov	r6, r0
 800628e:	460f      	mov	r7, r1
 8006290:	f7fa fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006294:	2800      	cmp	r0, #0
 8006296:	d09a      	beq.n	80061ce <_dtoa_r+0x616>
 8006298:	e7cb      	b.n	8006232 <_dtoa_r+0x67a>
 800629a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800629c:	2a00      	cmp	r2, #0
 800629e:	f000 808b 	beq.w	80063b8 <_dtoa_r+0x800>
 80062a2:	9a06      	ldr	r2, [sp, #24]
 80062a4:	2a01      	cmp	r2, #1
 80062a6:	dc6e      	bgt.n	8006386 <_dtoa_r+0x7ce>
 80062a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80062aa:	2a00      	cmp	r2, #0
 80062ac:	d067      	beq.n	800637e <_dtoa_r+0x7c6>
 80062ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062b2:	9f07      	ldr	r7, [sp, #28]
 80062b4:	9d05      	ldr	r5, [sp, #20]
 80062b6:	9a05      	ldr	r2, [sp, #20]
 80062b8:	2101      	movs	r1, #1
 80062ba:	441a      	add	r2, r3
 80062bc:	4620      	mov	r0, r4
 80062be:	9205      	str	r2, [sp, #20]
 80062c0:	4498      	add	r8, r3
 80062c2:	f000 ff98 	bl	80071f6 <__i2b>
 80062c6:	4606      	mov	r6, r0
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	dd0c      	ble.n	80062e6 <_dtoa_r+0x72e>
 80062cc:	f1b8 0f00 	cmp.w	r8, #0
 80062d0:	dd09      	ble.n	80062e6 <_dtoa_r+0x72e>
 80062d2:	4545      	cmp	r5, r8
 80062d4:	9a05      	ldr	r2, [sp, #20]
 80062d6:	462b      	mov	r3, r5
 80062d8:	bfa8      	it	ge
 80062da:	4643      	movge	r3, r8
 80062dc:	1ad2      	subs	r2, r2, r3
 80062de:	9205      	str	r2, [sp, #20]
 80062e0:	1aed      	subs	r5, r5, r3
 80062e2:	eba8 0803 	sub.w	r8, r8, r3
 80062e6:	9b07      	ldr	r3, [sp, #28]
 80062e8:	b1eb      	cbz	r3, 8006326 <_dtoa_r+0x76e>
 80062ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d067      	beq.n	80063c0 <_dtoa_r+0x808>
 80062f0:	b18f      	cbz	r7, 8006316 <_dtoa_r+0x75e>
 80062f2:	4631      	mov	r1, r6
 80062f4:	463a      	mov	r2, r7
 80062f6:	4620      	mov	r0, r4
 80062f8:	f001 f81c 	bl	8007334 <__pow5mult>
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	4601      	mov	r1, r0
 8006300:	4606      	mov	r6, r0
 8006302:	4620      	mov	r0, r4
 8006304:	f000 ff80 	bl	8007208 <__multiply>
 8006308:	9904      	ldr	r1, [sp, #16]
 800630a:	9008      	str	r0, [sp, #32]
 800630c:	4620      	mov	r0, r4
 800630e:	f000 fe94 	bl	800703a <_Bfree>
 8006312:	9b08      	ldr	r3, [sp, #32]
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9b07      	ldr	r3, [sp, #28]
 8006318:	1bda      	subs	r2, r3, r7
 800631a:	d004      	beq.n	8006326 <_dtoa_r+0x76e>
 800631c:	9904      	ldr	r1, [sp, #16]
 800631e:	4620      	mov	r0, r4
 8006320:	f001 f808 	bl	8007334 <__pow5mult>
 8006324:	9004      	str	r0, [sp, #16]
 8006326:	2101      	movs	r1, #1
 8006328:	4620      	mov	r0, r4
 800632a:	f000 ff64 	bl	80071f6 <__i2b>
 800632e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006330:	4607      	mov	r7, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 81d0 	beq.w	80066d8 <_dtoa_r+0xb20>
 8006338:	461a      	mov	r2, r3
 800633a:	4601      	mov	r1, r0
 800633c:	4620      	mov	r0, r4
 800633e:	f000 fff9 	bl	8007334 <__pow5mult>
 8006342:	9b06      	ldr	r3, [sp, #24]
 8006344:	2b01      	cmp	r3, #1
 8006346:	4607      	mov	r7, r0
 8006348:	dc40      	bgt.n	80063cc <_dtoa_r+0x814>
 800634a:	9b00      	ldr	r3, [sp, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d139      	bne.n	80063c4 <_dtoa_r+0x80c>
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006356:	2b00      	cmp	r3, #0
 8006358:	d136      	bne.n	80063c8 <_dtoa_r+0x810>
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006360:	0d1b      	lsrs	r3, r3, #20
 8006362:	051b      	lsls	r3, r3, #20
 8006364:	b12b      	cbz	r3, 8006372 <_dtoa_r+0x7ba>
 8006366:	9b05      	ldr	r3, [sp, #20]
 8006368:	3301      	adds	r3, #1
 800636a:	9305      	str	r3, [sp, #20]
 800636c:	f108 0801 	add.w	r8, r8, #1
 8006370:	2301      	movs	r3, #1
 8006372:	9307      	str	r3, [sp, #28]
 8006374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006376:	2b00      	cmp	r3, #0
 8006378:	d12a      	bne.n	80063d0 <_dtoa_r+0x818>
 800637a:	2001      	movs	r0, #1
 800637c:	e030      	b.n	80063e0 <_dtoa_r+0x828>
 800637e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006380:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006384:	e795      	b.n	80062b2 <_dtoa_r+0x6fa>
 8006386:	9b07      	ldr	r3, [sp, #28]
 8006388:	f109 37ff 	add.w	r7, r9, #4294967295
 800638c:	42bb      	cmp	r3, r7
 800638e:	bfbf      	itttt	lt
 8006390:	9b07      	ldrlt	r3, [sp, #28]
 8006392:	9707      	strlt	r7, [sp, #28]
 8006394:	1afa      	sublt	r2, r7, r3
 8006396:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006398:	bfbb      	ittet	lt
 800639a:	189b      	addlt	r3, r3, r2
 800639c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800639e:	1bdf      	subge	r7, r3, r7
 80063a0:	2700      	movlt	r7, #0
 80063a2:	f1b9 0f00 	cmp.w	r9, #0
 80063a6:	bfb5      	itete	lt
 80063a8:	9b05      	ldrlt	r3, [sp, #20]
 80063aa:	9d05      	ldrge	r5, [sp, #20]
 80063ac:	eba3 0509 	sublt.w	r5, r3, r9
 80063b0:	464b      	movge	r3, r9
 80063b2:	bfb8      	it	lt
 80063b4:	2300      	movlt	r3, #0
 80063b6:	e77e      	b.n	80062b6 <_dtoa_r+0x6fe>
 80063b8:	9f07      	ldr	r7, [sp, #28]
 80063ba:	9d05      	ldr	r5, [sp, #20]
 80063bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80063be:	e783      	b.n	80062c8 <_dtoa_r+0x710>
 80063c0:	9a07      	ldr	r2, [sp, #28]
 80063c2:	e7ab      	b.n	800631c <_dtoa_r+0x764>
 80063c4:	2300      	movs	r3, #0
 80063c6:	e7d4      	b.n	8006372 <_dtoa_r+0x7ba>
 80063c8:	9b00      	ldr	r3, [sp, #0]
 80063ca:	e7d2      	b.n	8006372 <_dtoa_r+0x7ba>
 80063cc:	2300      	movs	r3, #0
 80063ce:	9307      	str	r3, [sp, #28]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80063d6:	6918      	ldr	r0, [r3, #16]
 80063d8:	f000 febf 	bl	800715a <__hi0bits>
 80063dc:	f1c0 0020 	rsb	r0, r0, #32
 80063e0:	4440      	add	r0, r8
 80063e2:	f010 001f 	ands.w	r0, r0, #31
 80063e6:	d047      	beq.n	8006478 <_dtoa_r+0x8c0>
 80063e8:	f1c0 0320 	rsb	r3, r0, #32
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	dd3b      	ble.n	8006468 <_dtoa_r+0x8b0>
 80063f0:	9b05      	ldr	r3, [sp, #20]
 80063f2:	f1c0 001c 	rsb	r0, r0, #28
 80063f6:	4403      	add	r3, r0
 80063f8:	9305      	str	r3, [sp, #20]
 80063fa:	4405      	add	r5, r0
 80063fc:	4480      	add	r8, r0
 80063fe:	9b05      	ldr	r3, [sp, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	dd05      	ble.n	8006410 <_dtoa_r+0x858>
 8006404:	461a      	mov	r2, r3
 8006406:	9904      	ldr	r1, [sp, #16]
 8006408:	4620      	mov	r0, r4
 800640a:	f000 ffe1 	bl	80073d0 <__lshift>
 800640e:	9004      	str	r0, [sp, #16]
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	dd05      	ble.n	8006422 <_dtoa_r+0x86a>
 8006416:	4639      	mov	r1, r7
 8006418:	4642      	mov	r2, r8
 800641a:	4620      	mov	r0, r4
 800641c:	f000 ffd8 	bl	80073d0 <__lshift>
 8006420:	4607      	mov	r7, r0
 8006422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006424:	b353      	cbz	r3, 800647c <_dtoa_r+0x8c4>
 8006426:	4639      	mov	r1, r7
 8006428:	9804      	ldr	r0, [sp, #16]
 800642a:	f001 f825 	bl	8007478 <__mcmp>
 800642e:	2800      	cmp	r0, #0
 8006430:	da24      	bge.n	800647c <_dtoa_r+0x8c4>
 8006432:	2300      	movs	r3, #0
 8006434:	220a      	movs	r2, #10
 8006436:	9904      	ldr	r1, [sp, #16]
 8006438:	4620      	mov	r0, r4
 800643a:	f000 fe15 	bl	8007068 <__multadd>
 800643e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006440:	9004      	str	r0, [sp, #16]
 8006442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 814d 	beq.w	80066e6 <_dtoa_r+0xb2e>
 800644c:	2300      	movs	r3, #0
 800644e:	4631      	mov	r1, r6
 8006450:	220a      	movs	r2, #10
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fe08 	bl	8007068 <__multadd>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	4606      	mov	r6, r0
 800645e:	dc4f      	bgt.n	8006500 <_dtoa_r+0x948>
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	2b02      	cmp	r3, #2
 8006464:	dd4c      	ble.n	8006500 <_dtoa_r+0x948>
 8006466:	e011      	b.n	800648c <_dtoa_r+0x8d4>
 8006468:	d0c9      	beq.n	80063fe <_dtoa_r+0x846>
 800646a:	9a05      	ldr	r2, [sp, #20]
 800646c:	331c      	adds	r3, #28
 800646e:	441a      	add	r2, r3
 8006470:	9205      	str	r2, [sp, #20]
 8006472:	441d      	add	r5, r3
 8006474:	4498      	add	r8, r3
 8006476:	e7c2      	b.n	80063fe <_dtoa_r+0x846>
 8006478:	4603      	mov	r3, r0
 800647a:	e7f6      	b.n	800646a <_dtoa_r+0x8b2>
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	dc38      	bgt.n	80064f4 <_dtoa_r+0x93c>
 8006482:	9b06      	ldr	r3, [sp, #24]
 8006484:	2b02      	cmp	r3, #2
 8006486:	dd35      	ble.n	80064f4 <_dtoa_r+0x93c>
 8006488:	f8cd 9008 	str.w	r9, [sp, #8]
 800648c:	9b02      	ldr	r3, [sp, #8]
 800648e:	b963      	cbnz	r3, 80064aa <_dtoa_r+0x8f2>
 8006490:	4639      	mov	r1, r7
 8006492:	2205      	movs	r2, #5
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fde7 	bl	8007068 <__multadd>
 800649a:	4601      	mov	r1, r0
 800649c:	4607      	mov	r7, r0
 800649e:	9804      	ldr	r0, [sp, #16]
 80064a0:	f000 ffea 	bl	8007478 <__mcmp>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f73f adcc 	bgt.w	8006042 <_dtoa_r+0x48a>
 80064aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064ac:	465d      	mov	r5, fp
 80064ae:	ea6f 0a03 	mvn.w	sl, r3
 80064b2:	f04f 0900 	mov.w	r9, #0
 80064b6:	4639      	mov	r1, r7
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 fdbe 	bl	800703a <_Bfree>
 80064be:	2e00      	cmp	r6, #0
 80064c0:	f43f aeb7 	beq.w	8006232 <_dtoa_r+0x67a>
 80064c4:	f1b9 0f00 	cmp.w	r9, #0
 80064c8:	d005      	beq.n	80064d6 <_dtoa_r+0x91e>
 80064ca:	45b1      	cmp	r9, r6
 80064cc:	d003      	beq.n	80064d6 <_dtoa_r+0x91e>
 80064ce:	4649      	mov	r1, r9
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fdb2 	bl	800703a <_Bfree>
 80064d6:	4631      	mov	r1, r6
 80064d8:	4620      	mov	r0, r4
 80064da:	f000 fdae 	bl	800703a <_Bfree>
 80064de:	e6a8      	b.n	8006232 <_dtoa_r+0x67a>
 80064e0:	2700      	movs	r7, #0
 80064e2:	463e      	mov	r6, r7
 80064e4:	e7e1      	b.n	80064aa <_dtoa_r+0x8f2>
 80064e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80064ea:	463e      	mov	r6, r7
 80064ec:	e5a9      	b.n	8006042 <_dtoa_r+0x48a>
 80064ee:	bf00      	nop
 80064f0:	40240000 	.word	0x40240000
 80064f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 80fa 	beq.w	80066f4 <_dtoa_r+0xb3c>
 8006500:	2d00      	cmp	r5, #0
 8006502:	dd05      	ble.n	8006510 <_dtoa_r+0x958>
 8006504:	4631      	mov	r1, r6
 8006506:	462a      	mov	r2, r5
 8006508:	4620      	mov	r0, r4
 800650a:	f000 ff61 	bl	80073d0 <__lshift>
 800650e:	4606      	mov	r6, r0
 8006510:	9b07      	ldr	r3, [sp, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d04c      	beq.n	80065b0 <_dtoa_r+0x9f8>
 8006516:	6871      	ldr	r1, [r6, #4]
 8006518:	4620      	mov	r0, r4
 800651a:	f000 fd5a 	bl	8006fd2 <_Balloc>
 800651e:	6932      	ldr	r2, [r6, #16]
 8006520:	3202      	adds	r2, #2
 8006522:	4605      	mov	r5, r0
 8006524:	0092      	lsls	r2, r2, #2
 8006526:	f106 010c 	add.w	r1, r6, #12
 800652a:	300c      	adds	r0, #12
 800652c:	f000 fd44 	bl	8006fb8 <memcpy>
 8006530:	2201      	movs	r2, #1
 8006532:	4629      	mov	r1, r5
 8006534:	4620      	mov	r0, r4
 8006536:	f000 ff4b 	bl	80073d0 <__lshift>
 800653a:	9b00      	ldr	r3, [sp, #0]
 800653c:	f8cd b014 	str.w	fp, [sp, #20]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	46b1      	mov	r9, r6
 8006546:	9307      	str	r3, [sp, #28]
 8006548:	4606      	mov	r6, r0
 800654a:	4639      	mov	r1, r7
 800654c:	9804      	ldr	r0, [sp, #16]
 800654e:	f7ff faa7 	bl	8005aa0 <quorem>
 8006552:	4649      	mov	r1, r9
 8006554:	4605      	mov	r5, r0
 8006556:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800655a:	9804      	ldr	r0, [sp, #16]
 800655c:	f000 ff8c 	bl	8007478 <__mcmp>
 8006560:	4632      	mov	r2, r6
 8006562:	9000      	str	r0, [sp, #0]
 8006564:	4639      	mov	r1, r7
 8006566:	4620      	mov	r0, r4
 8006568:	f000 ffa0 	bl	80074ac <__mdiff>
 800656c:	68c3      	ldr	r3, [r0, #12]
 800656e:	4602      	mov	r2, r0
 8006570:	bb03      	cbnz	r3, 80065b4 <_dtoa_r+0x9fc>
 8006572:	4601      	mov	r1, r0
 8006574:	9008      	str	r0, [sp, #32]
 8006576:	9804      	ldr	r0, [sp, #16]
 8006578:	f000 ff7e 	bl	8007478 <__mcmp>
 800657c:	9a08      	ldr	r2, [sp, #32]
 800657e:	4603      	mov	r3, r0
 8006580:	4611      	mov	r1, r2
 8006582:	4620      	mov	r0, r4
 8006584:	9308      	str	r3, [sp, #32]
 8006586:	f000 fd58 	bl	800703a <_Bfree>
 800658a:	9b08      	ldr	r3, [sp, #32]
 800658c:	b9a3      	cbnz	r3, 80065b8 <_dtoa_r+0xa00>
 800658e:	9a06      	ldr	r2, [sp, #24]
 8006590:	b992      	cbnz	r2, 80065b8 <_dtoa_r+0xa00>
 8006592:	9a07      	ldr	r2, [sp, #28]
 8006594:	b982      	cbnz	r2, 80065b8 <_dtoa_r+0xa00>
 8006596:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800659a:	d029      	beq.n	80065f0 <_dtoa_r+0xa38>
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd01      	ble.n	80065a6 <_dtoa_r+0x9ee>
 80065a2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80065a6:	9b05      	ldr	r3, [sp, #20]
 80065a8:	1c5d      	adds	r5, r3, #1
 80065aa:	f883 8000 	strb.w	r8, [r3]
 80065ae:	e782      	b.n	80064b6 <_dtoa_r+0x8fe>
 80065b0:	4630      	mov	r0, r6
 80065b2:	e7c2      	b.n	800653a <_dtoa_r+0x982>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7e3      	b.n	8006580 <_dtoa_r+0x9c8>
 80065b8:	9a00      	ldr	r2, [sp, #0]
 80065ba:	2a00      	cmp	r2, #0
 80065bc:	db04      	blt.n	80065c8 <_dtoa_r+0xa10>
 80065be:	d125      	bne.n	800660c <_dtoa_r+0xa54>
 80065c0:	9a06      	ldr	r2, [sp, #24]
 80065c2:	bb1a      	cbnz	r2, 800660c <_dtoa_r+0xa54>
 80065c4:	9a07      	ldr	r2, [sp, #28]
 80065c6:	bb0a      	cbnz	r2, 800660c <_dtoa_r+0xa54>
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	ddec      	ble.n	80065a6 <_dtoa_r+0x9ee>
 80065cc:	2201      	movs	r2, #1
 80065ce:	9904      	ldr	r1, [sp, #16]
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fefd 	bl	80073d0 <__lshift>
 80065d6:	4639      	mov	r1, r7
 80065d8:	9004      	str	r0, [sp, #16]
 80065da:	f000 ff4d 	bl	8007478 <__mcmp>
 80065de:	2800      	cmp	r0, #0
 80065e0:	dc03      	bgt.n	80065ea <_dtoa_r+0xa32>
 80065e2:	d1e0      	bne.n	80065a6 <_dtoa_r+0x9ee>
 80065e4:	f018 0f01 	tst.w	r8, #1
 80065e8:	d0dd      	beq.n	80065a6 <_dtoa_r+0x9ee>
 80065ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80065ee:	d1d8      	bne.n	80065a2 <_dtoa_r+0x9ea>
 80065f0:	9b05      	ldr	r3, [sp, #20]
 80065f2:	9a05      	ldr	r2, [sp, #20]
 80065f4:	1c5d      	adds	r5, r3, #1
 80065f6:	2339      	movs	r3, #57	; 0x39
 80065f8:	7013      	strb	r3, [r2, #0]
 80065fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065fe:	2b39      	cmp	r3, #57	; 0x39
 8006600:	f105 32ff 	add.w	r2, r5, #4294967295
 8006604:	d04f      	beq.n	80066a6 <_dtoa_r+0xaee>
 8006606:	3301      	adds	r3, #1
 8006608:	7013      	strb	r3, [r2, #0]
 800660a:	e754      	b.n	80064b6 <_dtoa_r+0x8fe>
 800660c:	9a05      	ldr	r2, [sp, #20]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f102 0501 	add.w	r5, r2, #1
 8006614:	dd06      	ble.n	8006624 <_dtoa_r+0xa6c>
 8006616:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800661a:	d0e9      	beq.n	80065f0 <_dtoa_r+0xa38>
 800661c:	f108 0801 	add.w	r8, r8, #1
 8006620:	9b05      	ldr	r3, [sp, #20]
 8006622:	e7c2      	b.n	80065aa <_dtoa_r+0x9f2>
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	f805 8c01 	strb.w	r8, [r5, #-1]
 800662a:	eba5 030b 	sub.w	r3, r5, fp
 800662e:	4293      	cmp	r3, r2
 8006630:	d021      	beq.n	8006676 <_dtoa_r+0xabe>
 8006632:	2300      	movs	r3, #0
 8006634:	220a      	movs	r2, #10
 8006636:	9904      	ldr	r1, [sp, #16]
 8006638:	4620      	mov	r0, r4
 800663a:	f000 fd15 	bl	8007068 <__multadd>
 800663e:	45b1      	cmp	r9, r6
 8006640:	9004      	str	r0, [sp, #16]
 8006642:	f04f 0300 	mov.w	r3, #0
 8006646:	f04f 020a 	mov.w	r2, #10
 800664a:	4649      	mov	r1, r9
 800664c:	4620      	mov	r0, r4
 800664e:	d105      	bne.n	800665c <_dtoa_r+0xaa4>
 8006650:	f000 fd0a 	bl	8007068 <__multadd>
 8006654:	4681      	mov	r9, r0
 8006656:	4606      	mov	r6, r0
 8006658:	9505      	str	r5, [sp, #20]
 800665a:	e776      	b.n	800654a <_dtoa_r+0x992>
 800665c:	f000 fd04 	bl	8007068 <__multadd>
 8006660:	4631      	mov	r1, r6
 8006662:	4681      	mov	r9, r0
 8006664:	2300      	movs	r3, #0
 8006666:	220a      	movs	r2, #10
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fcfd 	bl	8007068 <__multadd>
 800666e:	4606      	mov	r6, r0
 8006670:	e7f2      	b.n	8006658 <_dtoa_r+0xaa0>
 8006672:	f04f 0900 	mov.w	r9, #0
 8006676:	2201      	movs	r2, #1
 8006678:	9904      	ldr	r1, [sp, #16]
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fea8 	bl	80073d0 <__lshift>
 8006680:	4639      	mov	r1, r7
 8006682:	9004      	str	r0, [sp, #16]
 8006684:	f000 fef8 	bl	8007478 <__mcmp>
 8006688:	2800      	cmp	r0, #0
 800668a:	dcb6      	bgt.n	80065fa <_dtoa_r+0xa42>
 800668c:	d102      	bne.n	8006694 <_dtoa_r+0xadc>
 800668e:	f018 0f01 	tst.w	r8, #1
 8006692:	d1b2      	bne.n	80065fa <_dtoa_r+0xa42>
 8006694:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	f105 32ff 	add.w	r2, r5, #4294967295
 800669e:	f47f af0a 	bne.w	80064b6 <_dtoa_r+0x8fe>
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7f6      	b.n	8006694 <_dtoa_r+0xadc>
 80066a6:	4593      	cmp	fp, r2
 80066a8:	d105      	bne.n	80066b6 <_dtoa_r+0xafe>
 80066aa:	2331      	movs	r3, #49	; 0x31
 80066ac:	f10a 0a01 	add.w	sl, sl, #1
 80066b0:	f88b 3000 	strb.w	r3, [fp]
 80066b4:	e6ff      	b.n	80064b6 <_dtoa_r+0x8fe>
 80066b6:	4615      	mov	r5, r2
 80066b8:	e79f      	b.n	80065fa <_dtoa_r+0xa42>
 80066ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006720 <_dtoa_r+0xb68>
 80066be:	e007      	b.n	80066d0 <_dtoa_r+0xb18>
 80066c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006724 <_dtoa_r+0xb6c>
 80066c6:	b11b      	cbz	r3, 80066d0 <_dtoa_r+0xb18>
 80066c8:	f10b 0308 	add.w	r3, fp, #8
 80066cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4658      	mov	r0, fp
 80066d2:	b017      	add	sp, #92	; 0x5c
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	9b06      	ldr	r3, [sp, #24]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	f77f ae35 	ble.w	800634a <_dtoa_r+0x792>
 80066e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e2:	9307      	str	r3, [sp, #28]
 80066e4:	e649      	b.n	800637a <_dtoa_r+0x7c2>
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dc03      	bgt.n	80066f4 <_dtoa_r+0xb3c>
 80066ec:	9b06      	ldr	r3, [sp, #24]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f73f aecc 	bgt.w	800648c <_dtoa_r+0x8d4>
 80066f4:	465d      	mov	r5, fp
 80066f6:	4639      	mov	r1, r7
 80066f8:	9804      	ldr	r0, [sp, #16]
 80066fa:	f7ff f9d1 	bl	8005aa0 <quorem>
 80066fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006702:	f805 8b01 	strb.w	r8, [r5], #1
 8006706:	9a02      	ldr	r2, [sp, #8]
 8006708:	eba5 030b 	sub.w	r3, r5, fp
 800670c:	429a      	cmp	r2, r3
 800670e:	ddb0      	ble.n	8006672 <_dtoa_r+0xaba>
 8006710:	2300      	movs	r3, #0
 8006712:	220a      	movs	r2, #10
 8006714:	9904      	ldr	r1, [sp, #16]
 8006716:	4620      	mov	r0, r4
 8006718:	f000 fca6 	bl	8007068 <__multadd>
 800671c:	9004      	str	r0, [sp, #16]
 800671e:	e7ea      	b.n	80066f6 <_dtoa_r+0xb3e>
 8006720:	080094e3 	.word	0x080094e3
 8006724:	08009340 	.word	0x08009340

08006728 <std>:
 8006728:	2300      	movs	r3, #0
 800672a:	b510      	push	{r4, lr}
 800672c:	4604      	mov	r4, r0
 800672e:	e9c0 3300 	strd	r3, r3, [r0]
 8006732:	6083      	str	r3, [r0, #8]
 8006734:	8181      	strh	r1, [r0, #12]
 8006736:	6643      	str	r3, [r0, #100]	; 0x64
 8006738:	81c2      	strh	r2, [r0, #14]
 800673a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800673e:	6183      	str	r3, [r0, #24]
 8006740:	4619      	mov	r1, r3
 8006742:	2208      	movs	r2, #8
 8006744:	305c      	adds	r0, #92	; 0x5c
 8006746:	f7fd fe05 	bl	8004354 <memset>
 800674a:	4b05      	ldr	r3, [pc, #20]	; (8006760 <std+0x38>)
 800674c:	6263      	str	r3, [r4, #36]	; 0x24
 800674e:	4b05      	ldr	r3, [pc, #20]	; (8006764 <std+0x3c>)
 8006750:	62a3      	str	r3, [r4, #40]	; 0x28
 8006752:	4b05      	ldr	r3, [pc, #20]	; (8006768 <std+0x40>)
 8006754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <std+0x44>)
 8006758:	6224      	str	r4, [r4, #32]
 800675a:	6323      	str	r3, [r4, #48]	; 0x30
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	080084c1 	.word	0x080084c1
 8006764:	080084e3 	.word	0x080084e3
 8006768:	0800851b 	.word	0x0800851b
 800676c:	0800853f 	.word	0x0800853f

08006770 <_cleanup_r>:
 8006770:	4901      	ldr	r1, [pc, #4]	; (8006778 <_cleanup_r+0x8>)
 8006772:	f000 b8a1 	b.w	80068b8 <_fwalk_reent>
 8006776:	bf00      	nop
 8006778:	08008be1 	.word	0x08008be1

0800677c <__sfmoreglue>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	1e4a      	subs	r2, r1, #1
 8006780:	2568      	movs	r5, #104	; 0x68
 8006782:	4355      	muls	r5, r2
 8006784:	460e      	mov	r6, r1
 8006786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800678a:	f7fd fdf9 	bl	8004380 <_malloc_r>
 800678e:	4604      	mov	r4, r0
 8006790:	b140      	cbz	r0, 80067a4 <__sfmoreglue+0x28>
 8006792:	2100      	movs	r1, #0
 8006794:	e9c0 1600 	strd	r1, r6, [r0]
 8006798:	300c      	adds	r0, #12
 800679a:	60a0      	str	r0, [r4, #8]
 800679c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067a0:	f7fd fdd8 	bl	8004354 <memset>
 80067a4:	4620      	mov	r0, r4
 80067a6:	bd70      	pop	{r4, r5, r6, pc}

080067a8 <__sinit>:
 80067a8:	6983      	ldr	r3, [r0, #24]
 80067aa:	b510      	push	{r4, lr}
 80067ac:	4604      	mov	r4, r0
 80067ae:	bb33      	cbnz	r3, 80067fe <__sinit+0x56>
 80067b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80067b4:	6503      	str	r3, [r0, #80]	; 0x50
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <__sinit+0x58>)
 80067b8:	4a12      	ldr	r2, [pc, #72]	; (8006804 <__sinit+0x5c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6282      	str	r2, [r0, #40]	; 0x28
 80067be:	4298      	cmp	r0, r3
 80067c0:	bf04      	itt	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	6183      	streq	r3, [r0, #24]
 80067c6:	f000 f81f 	bl	8006808 <__sfp>
 80067ca:	6060      	str	r0, [r4, #4]
 80067cc:	4620      	mov	r0, r4
 80067ce:	f000 f81b 	bl	8006808 <__sfp>
 80067d2:	60a0      	str	r0, [r4, #8]
 80067d4:	4620      	mov	r0, r4
 80067d6:	f000 f817 	bl	8006808 <__sfp>
 80067da:	2200      	movs	r2, #0
 80067dc:	60e0      	str	r0, [r4, #12]
 80067de:	2104      	movs	r1, #4
 80067e0:	6860      	ldr	r0, [r4, #4]
 80067e2:	f7ff ffa1 	bl	8006728 <std>
 80067e6:	2201      	movs	r2, #1
 80067e8:	2109      	movs	r1, #9
 80067ea:	68a0      	ldr	r0, [r4, #8]
 80067ec:	f7ff ff9c 	bl	8006728 <std>
 80067f0:	2202      	movs	r2, #2
 80067f2:	2112      	movs	r1, #18
 80067f4:	68e0      	ldr	r0, [r4, #12]
 80067f6:	f7ff ff97 	bl	8006728 <std>
 80067fa:	2301      	movs	r3, #1
 80067fc:	61a3      	str	r3, [r4, #24]
 80067fe:	bd10      	pop	{r4, pc}
 8006800:	080092b4 	.word	0x080092b4
 8006804:	08006771 	.word	0x08006771

08006808 <__sfp>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <__sfp+0x70>)
 800680c:	681e      	ldr	r6, [r3, #0]
 800680e:	69b3      	ldr	r3, [r6, #24]
 8006810:	4607      	mov	r7, r0
 8006812:	b913      	cbnz	r3, 800681a <__sfp+0x12>
 8006814:	4630      	mov	r0, r6
 8006816:	f7ff ffc7 	bl	80067a8 <__sinit>
 800681a:	3648      	adds	r6, #72	; 0x48
 800681c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006820:	3b01      	subs	r3, #1
 8006822:	d503      	bpl.n	800682c <__sfp+0x24>
 8006824:	6833      	ldr	r3, [r6, #0]
 8006826:	b133      	cbz	r3, 8006836 <__sfp+0x2e>
 8006828:	6836      	ldr	r6, [r6, #0]
 800682a:	e7f7      	b.n	800681c <__sfp+0x14>
 800682c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006830:	b16d      	cbz	r5, 800684e <__sfp+0x46>
 8006832:	3468      	adds	r4, #104	; 0x68
 8006834:	e7f4      	b.n	8006820 <__sfp+0x18>
 8006836:	2104      	movs	r1, #4
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff ff9f 	bl	800677c <__sfmoreglue>
 800683e:	6030      	str	r0, [r6, #0]
 8006840:	2800      	cmp	r0, #0
 8006842:	d1f1      	bne.n	8006828 <__sfp+0x20>
 8006844:	230c      	movs	r3, #12
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	4604      	mov	r4, r0
 800684a:	4620      	mov	r0, r4
 800684c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <__sfp+0x74>)
 8006850:	6665      	str	r5, [r4, #100]	; 0x64
 8006852:	e9c4 5500 	strd	r5, r5, [r4]
 8006856:	60a5      	str	r5, [r4, #8]
 8006858:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800685c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006860:	2208      	movs	r2, #8
 8006862:	4629      	mov	r1, r5
 8006864:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006868:	f7fd fd74 	bl	8004354 <memset>
 800686c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006870:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006874:	e7e9      	b.n	800684a <__sfp+0x42>
 8006876:	bf00      	nop
 8006878:	080092b4 	.word	0x080092b4
 800687c:	ffff0001 	.word	0xffff0001

08006880 <_fwalk>:
 8006880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006884:	4688      	mov	r8, r1
 8006886:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800688a:	2600      	movs	r6, #0
 800688c:	b914      	cbnz	r4, 8006894 <_fwalk+0x14>
 800688e:	4630      	mov	r0, r6
 8006890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006894:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006898:	3f01      	subs	r7, #1
 800689a:	d501      	bpl.n	80068a0 <_fwalk+0x20>
 800689c:	6824      	ldr	r4, [r4, #0]
 800689e:	e7f5      	b.n	800688c <_fwalk+0xc>
 80068a0:	89ab      	ldrh	r3, [r5, #12]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d906      	bls.n	80068b4 <_fwalk+0x34>
 80068a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068aa:	3301      	adds	r3, #1
 80068ac:	d002      	beq.n	80068b4 <_fwalk+0x34>
 80068ae:	4628      	mov	r0, r5
 80068b0:	47c0      	blx	r8
 80068b2:	4306      	orrs	r6, r0
 80068b4:	3568      	adds	r5, #104	; 0x68
 80068b6:	e7ef      	b.n	8006898 <_fwalk+0x18>

080068b8 <_fwalk_reent>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	4680      	mov	r8, r0
 80068be:	4689      	mov	r9, r1
 80068c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80068c4:	2600      	movs	r6, #0
 80068c6:	b914      	cbnz	r4, 80068ce <_fwalk_reent+0x16>
 80068c8:	4630      	mov	r0, r6
 80068ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80068d2:	3f01      	subs	r7, #1
 80068d4:	d501      	bpl.n	80068da <_fwalk_reent+0x22>
 80068d6:	6824      	ldr	r4, [r4, #0]
 80068d8:	e7f5      	b.n	80068c6 <_fwalk_reent+0xe>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d907      	bls.n	80068f0 <_fwalk_reent+0x38>
 80068e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e4:	3301      	adds	r3, #1
 80068e6:	d003      	beq.n	80068f0 <_fwalk_reent+0x38>
 80068e8:	4629      	mov	r1, r5
 80068ea:	4640      	mov	r0, r8
 80068ec:	47c8      	blx	r9
 80068ee:	4306      	orrs	r6, r0
 80068f0:	3568      	adds	r5, #104	; 0x68
 80068f2:	e7ee      	b.n	80068d2 <_fwalk_reent+0x1a>

080068f4 <rshift>:
 80068f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068f6:	6906      	ldr	r6, [r0, #16]
 80068f8:	114b      	asrs	r3, r1, #5
 80068fa:	429e      	cmp	r6, r3
 80068fc:	f100 0414 	add.w	r4, r0, #20
 8006900:	dd30      	ble.n	8006964 <rshift+0x70>
 8006902:	f011 011f 	ands.w	r1, r1, #31
 8006906:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800690a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800690e:	d108      	bne.n	8006922 <rshift+0x2e>
 8006910:	4621      	mov	r1, r4
 8006912:	42b2      	cmp	r2, r6
 8006914:	460b      	mov	r3, r1
 8006916:	d211      	bcs.n	800693c <rshift+0x48>
 8006918:	f852 3b04 	ldr.w	r3, [r2], #4
 800691c:	f841 3b04 	str.w	r3, [r1], #4
 8006920:	e7f7      	b.n	8006912 <rshift+0x1e>
 8006922:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006926:	f1c1 0c20 	rsb	ip, r1, #32
 800692a:	40cd      	lsrs	r5, r1
 800692c:	3204      	adds	r2, #4
 800692e:	4623      	mov	r3, r4
 8006930:	42b2      	cmp	r2, r6
 8006932:	4617      	mov	r7, r2
 8006934:	d30c      	bcc.n	8006950 <rshift+0x5c>
 8006936:	601d      	str	r5, [r3, #0]
 8006938:	b105      	cbz	r5, 800693c <rshift+0x48>
 800693a:	3304      	adds	r3, #4
 800693c:	1b1a      	subs	r2, r3, r4
 800693e:	42a3      	cmp	r3, r4
 8006940:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006944:	bf08      	it	eq
 8006946:	2300      	moveq	r3, #0
 8006948:	6102      	str	r2, [r0, #16]
 800694a:	bf08      	it	eq
 800694c:	6143      	streq	r3, [r0, #20]
 800694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006950:	683f      	ldr	r7, [r7, #0]
 8006952:	fa07 f70c 	lsl.w	r7, r7, ip
 8006956:	433d      	orrs	r5, r7
 8006958:	f843 5b04 	str.w	r5, [r3], #4
 800695c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006960:	40cd      	lsrs	r5, r1
 8006962:	e7e5      	b.n	8006930 <rshift+0x3c>
 8006964:	4623      	mov	r3, r4
 8006966:	e7e9      	b.n	800693c <rshift+0x48>

08006968 <__hexdig_fun>:
 8006968:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800696c:	2b09      	cmp	r3, #9
 800696e:	d802      	bhi.n	8006976 <__hexdig_fun+0xe>
 8006970:	3820      	subs	r0, #32
 8006972:	b2c0      	uxtb	r0, r0
 8006974:	4770      	bx	lr
 8006976:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800697a:	2b05      	cmp	r3, #5
 800697c:	d801      	bhi.n	8006982 <__hexdig_fun+0x1a>
 800697e:	3847      	subs	r0, #71	; 0x47
 8006980:	e7f7      	b.n	8006972 <__hexdig_fun+0xa>
 8006982:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006986:	2b05      	cmp	r3, #5
 8006988:	d801      	bhi.n	800698e <__hexdig_fun+0x26>
 800698a:	3827      	subs	r0, #39	; 0x27
 800698c:	e7f1      	b.n	8006972 <__hexdig_fun+0xa>
 800698e:	2000      	movs	r0, #0
 8006990:	4770      	bx	lr

08006992 <__gethex>:
 8006992:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006996:	b08b      	sub	sp, #44	; 0x2c
 8006998:	468a      	mov	sl, r1
 800699a:	9002      	str	r0, [sp, #8]
 800699c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800699e:	9306      	str	r3, [sp, #24]
 80069a0:	4690      	mov	r8, r2
 80069a2:	f000 fadf 	bl	8006f64 <__localeconv_l>
 80069a6:	6803      	ldr	r3, [r0, #0]
 80069a8:	9303      	str	r3, [sp, #12]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7f9 fc10 	bl	80001d0 <strlen>
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	9001      	str	r0, [sp, #4]
 80069b4:	4403      	add	r3, r0
 80069b6:	f04f 0b00 	mov.w	fp, #0
 80069ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80069be:	9307      	str	r3, [sp, #28]
 80069c0:	f8da 3000 	ldr.w	r3, [sl]
 80069c4:	3302      	adds	r3, #2
 80069c6:	461f      	mov	r7, r3
 80069c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80069cc:	2830      	cmp	r0, #48	; 0x30
 80069ce:	d06c      	beq.n	8006aaa <__gethex+0x118>
 80069d0:	f7ff ffca 	bl	8006968 <__hexdig_fun>
 80069d4:	4604      	mov	r4, r0
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d16a      	bne.n	8006ab0 <__gethex+0x11e>
 80069da:	9a01      	ldr	r2, [sp, #4]
 80069dc:	9903      	ldr	r1, [sp, #12]
 80069de:	4638      	mov	r0, r7
 80069e0:	f001 fdb1 	bl	8008546 <strncmp>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	d166      	bne.n	8006ab6 <__gethex+0x124>
 80069e8:	9b01      	ldr	r3, [sp, #4]
 80069ea:	5cf8      	ldrb	r0, [r7, r3]
 80069ec:	18fe      	adds	r6, r7, r3
 80069ee:	f7ff ffbb 	bl	8006968 <__hexdig_fun>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d062      	beq.n	8006abc <__gethex+0x12a>
 80069f6:	4633      	mov	r3, r6
 80069f8:	7818      	ldrb	r0, [r3, #0]
 80069fa:	2830      	cmp	r0, #48	; 0x30
 80069fc:	461f      	mov	r7, r3
 80069fe:	f103 0301 	add.w	r3, r3, #1
 8006a02:	d0f9      	beq.n	80069f8 <__gethex+0x66>
 8006a04:	f7ff ffb0 	bl	8006968 <__hexdig_fun>
 8006a08:	fab0 f580 	clz	r5, r0
 8006a0c:	096d      	lsrs	r5, r5, #5
 8006a0e:	4634      	mov	r4, r6
 8006a10:	f04f 0b01 	mov.w	fp, #1
 8006a14:	463a      	mov	r2, r7
 8006a16:	4616      	mov	r6, r2
 8006a18:	3201      	adds	r2, #1
 8006a1a:	7830      	ldrb	r0, [r6, #0]
 8006a1c:	f7ff ffa4 	bl	8006968 <__hexdig_fun>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d1f8      	bne.n	8006a16 <__gethex+0x84>
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	9903      	ldr	r1, [sp, #12]
 8006a28:	4630      	mov	r0, r6
 8006a2a:	f001 fd8c 	bl	8008546 <strncmp>
 8006a2e:	b950      	cbnz	r0, 8006a46 <__gethex+0xb4>
 8006a30:	b954      	cbnz	r4, 8006a48 <__gethex+0xb6>
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	18f4      	adds	r4, r6, r3
 8006a36:	4622      	mov	r2, r4
 8006a38:	4616      	mov	r6, r2
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	7830      	ldrb	r0, [r6, #0]
 8006a3e:	f7ff ff93 	bl	8006968 <__hexdig_fun>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1f8      	bne.n	8006a38 <__gethex+0xa6>
 8006a46:	b10c      	cbz	r4, 8006a4c <__gethex+0xba>
 8006a48:	1ba4      	subs	r4, r4, r6
 8006a4a:	00a4      	lsls	r4, r4, #2
 8006a4c:	7833      	ldrb	r3, [r6, #0]
 8006a4e:	2b50      	cmp	r3, #80	; 0x50
 8006a50:	d001      	beq.n	8006a56 <__gethex+0xc4>
 8006a52:	2b70      	cmp	r3, #112	; 0x70
 8006a54:	d140      	bne.n	8006ad8 <__gethex+0x146>
 8006a56:	7873      	ldrb	r3, [r6, #1]
 8006a58:	2b2b      	cmp	r3, #43	; 0x2b
 8006a5a:	d031      	beq.n	8006ac0 <__gethex+0x12e>
 8006a5c:	2b2d      	cmp	r3, #45	; 0x2d
 8006a5e:	d033      	beq.n	8006ac8 <__gethex+0x136>
 8006a60:	1c71      	adds	r1, r6, #1
 8006a62:	f04f 0900 	mov.w	r9, #0
 8006a66:	7808      	ldrb	r0, [r1, #0]
 8006a68:	f7ff ff7e 	bl	8006968 <__hexdig_fun>
 8006a6c:	1e43      	subs	r3, r0, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b18      	cmp	r3, #24
 8006a72:	d831      	bhi.n	8006ad8 <__gethex+0x146>
 8006a74:	f1a0 0210 	sub.w	r2, r0, #16
 8006a78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a7c:	f7ff ff74 	bl	8006968 <__hexdig_fun>
 8006a80:	1e43      	subs	r3, r0, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b18      	cmp	r3, #24
 8006a86:	d922      	bls.n	8006ace <__gethex+0x13c>
 8006a88:	f1b9 0f00 	cmp.w	r9, #0
 8006a8c:	d000      	beq.n	8006a90 <__gethex+0xfe>
 8006a8e:	4252      	negs	r2, r2
 8006a90:	4414      	add	r4, r2
 8006a92:	f8ca 1000 	str.w	r1, [sl]
 8006a96:	b30d      	cbz	r5, 8006adc <__gethex+0x14a>
 8006a98:	f1bb 0f00 	cmp.w	fp, #0
 8006a9c:	bf0c      	ite	eq
 8006a9e:	2706      	moveq	r7, #6
 8006aa0:	2700      	movne	r7, #0
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	b00b      	add	sp, #44	; 0x2c
 8006aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aaa:	f10b 0b01 	add.w	fp, fp, #1
 8006aae:	e78a      	b.n	80069c6 <__gethex+0x34>
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	462c      	mov	r4, r5
 8006ab4:	e7ae      	b.n	8006a14 <__gethex+0x82>
 8006ab6:	463e      	mov	r6, r7
 8006ab8:	2501      	movs	r5, #1
 8006aba:	e7c7      	b.n	8006a4c <__gethex+0xba>
 8006abc:	4604      	mov	r4, r0
 8006abe:	e7fb      	b.n	8006ab8 <__gethex+0x126>
 8006ac0:	f04f 0900 	mov.w	r9, #0
 8006ac4:	1cb1      	adds	r1, r6, #2
 8006ac6:	e7ce      	b.n	8006a66 <__gethex+0xd4>
 8006ac8:	f04f 0901 	mov.w	r9, #1
 8006acc:	e7fa      	b.n	8006ac4 <__gethex+0x132>
 8006ace:	230a      	movs	r3, #10
 8006ad0:	fb03 0202 	mla	r2, r3, r2, r0
 8006ad4:	3a10      	subs	r2, #16
 8006ad6:	e7cf      	b.n	8006a78 <__gethex+0xe6>
 8006ad8:	4631      	mov	r1, r6
 8006ada:	e7da      	b.n	8006a92 <__gethex+0x100>
 8006adc:	1bf3      	subs	r3, r6, r7
 8006ade:	3b01      	subs	r3, #1
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	2b07      	cmp	r3, #7
 8006ae4:	dc49      	bgt.n	8006b7a <__gethex+0x1e8>
 8006ae6:	9802      	ldr	r0, [sp, #8]
 8006ae8:	f000 fa73 	bl	8006fd2 <_Balloc>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	f100 0914 	add.w	r9, r0, #20
 8006af2:	f04f 0b00 	mov.w	fp, #0
 8006af6:	f1c3 0301 	rsb	r3, r3, #1
 8006afa:	4605      	mov	r5, r0
 8006afc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006b00:	46da      	mov	sl, fp
 8006b02:	9308      	str	r3, [sp, #32]
 8006b04:	42b7      	cmp	r7, r6
 8006b06:	d33b      	bcc.n	8006b80 <__gethex+0x1ee>
 8006b08:	9804      	ldr	r0, [sp, #16]
 8006b0a:	f840 ab04 	str.w	sl, [r0], #4
 8006b0e:	eba0 0009 	sub.w	r0, r0, r9
 8006b12:	1080      	asrs	r0, r0, #2
 8006b14:	6128      	str	r0, [r5, #16]
 8006b16:	0147      	lsls	r7, r0, #5
 8006b18:	4650      	mov	r0, sl
 8006b1a:	f000 fb1e 	bl	800715a <__hi0bits>
 8006b1e:	f8d8 6000 	ldr.w	r6, [r8]
 8006b22:	1a3f      	subs	r7, r7, r0
 8006b24:	42b7      	cmp	r7, r6
 8006b26:	dd64      	ble.n	8006bf2 <__gethex+0x260>
 8006b28:	1bbf      	subs	r7, r7, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 fe2d 	bl	800778c <__any_on>
 8006b32:	4682      	mov	sl, r0
 8006b34:	b178      	cbz	r0, 8006b56 <__gethex+0x1c4>
 8006b36:	1e7b      	subs	r3, r7, #1
 8006b38:	1159      	asrs	r1, r3, #5
 8006b3a:	f003 021f 	and.w	r2, r3, #31
 8006b3e:	f04f 0a01 	mov.w	sl, #1
 8006b42:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b46:	fa0a f202 	lsl.w	r2, sl, r2
 8006b4a:	420a      	tst	r2, r1
 8006b4c:	d003      	beq.n	8006b56 <__gethex+0x1c4>
 8006b4e:	4553      	cmp	r3, sl
 8006b50:	dc46      	bgt.n	8006be0 <__gethex+0x24e>
 8006b52:	f04f 0a02 	mov.w	sl, #2
 8006b56:	4639      	mov	r1, r7
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f7ff fecb 	bl	80068f4 <rshift>
 8006b5e:	443c      	add	r4, r7
 8006b60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	da52      	bge.n	8006c0e <__gethex+0x27c>
 8006b68:	4629      	mov	r1, r5
 8006b6a:	9802      	ldr	r0, [sp, #8]
 8006b6c:	f000 fa65 	bl	800703a <_Bfree>
 8006b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b72:	2300      	movs	r3, #0
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	27a3      	movs	r7, #163	; 0xa3
 8006b78:	e793      	b.n	8006aa2 <__gethex+0x110>
 8006b7a:	3101      	adds	r1, #1
 8006b7c:	105b      	asrs	r3, r3, #1
 8006b7e:	e7b0      	b.n	8006ae2 <__gethex+0x150>
 8006b80:	1e73      	subs	r3, r6, #1
 8006b82:	9305      	str	r3, [sp, #20]
 8006b84:	9a07      	ldr	r2, [sp, #28]
 8006b86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d018      	beq.n	8006bc0 <__gethex+0x22e>
 8006b8e:	f1bb 0f20 	cmp.w	fp, #32
 8006b92:	d107      	bne.n	8006ba4 <__gethex+0x212>
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	f8c3 a000 	str.w	sl, [r3]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	f04f 0a00 	mov.w	sl, #0
 8006ba0:	9304      	str	r3, [sp, #16]
 8006ba2:	46d3      	mov	fp, sl
 8006ba4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ba8:	f7ff fede 	bl	8006968 <__hexdig_fun>
 8006bac:	f000 000f 	and.w	r0, r0, #15
 8006bb0:	fa00 f00b 	lsl.w	r0, r0, fp
 8006bb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006bb8:	f10b 0b04 	add.w	fp, fp, #4
 8006bbc:	9b05      	ldr	r3, [sp, #20]
 8006bbe:	e00d      	b.n	8006bdc <__gethex+0x24a>
 8006bc0:	9b05      	ldr	r3, [sp, #20]
 8006bc2:	9a08      	ldr	r2, [sp, #32]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	42bb      	cmp	r3, r7
 8006bc8:	d3e1      	bcc.n	8006b8e <__gethex+0x1fc>
 8006bca:	4618      	mov	r0, r3
 8006bcc:	9a01      	ldr	r2, [sp, #4]
 8006bce:	9903      	ldr	r1, [sp, #12]
 8006bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd2:	f001 fcb8 	bl	8008546 <strncmp>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1d8      	bne.n	8006b8e <__gethex+0x1fc>
 8006bdc:	461e      	mov	r6, r3
 8006bde:	e791      	b.n	8006b04 <__gethex+0x172>
 8006be0:	1eb9      	subs	r1, r7, #2
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 fdd2 	bl	800778c <__any_on>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0b2      	beq.n	8006b52 <__gethex+0x1c0>
 8006bec:	f04f 0a03 	mov.w	sl, #3
 8006bf0:	e7b1      	b.n	8006b56 <__gethex+0x1c4>
 8006bf2:	da09      	bge.n	8006c08 <__gethex+0x276>
 8006bf4:	1bf7      	subs	r7, r6, r7
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	463a      	mov	r2, r7
 8006bfa:	9802      	ldr	r0, [sp, #8]
 8006bfc:	f000 fbe8 	bl	80073d0 <__lshift>
 8006c00:	1be4      	subs	r4, r4, r7
 8006c02:	4605      	mov	r5, r0
 8006c04:	f100 0914 	add.w	r9, r0, #20
 8006c08:	f04f 0a00 	mov.w	sl, #0
 8006c0c:	e7a8      	b.n	8006b60 <__gethex+0x1ce>
 8006c0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006c12:	42a0      	cmp	r0, r4
 8006c14:	dd6a      	ble.n	8006cec <__gethex+0x35a>
 8006c16:	1b04      	subs	r4, r0, r4
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	dc2e      	bgt.n	8006c7a <__gethex+0x2e8>
 8006c1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d022      	beq.n	8006c6a <__gethex+0x2d8>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d024      	beq.n	8006c72 <__gethex+0x2e0>
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d115      	bne.n	8006c58 <__gethex+0x2c6>
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d113      	bne.n	8006c58 <__gethex+0x2c6>
 8006c30:	2e01      	cmp	r6, #1
 8006c32:	dc0b      	bgt.n	8006c4c <__gethex+0x2ba>
 8006c34:	9a06      	ldr	r2, [sp, #24]
 8006c36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	612b      	str	r3, [r5, #16]
 8006c40:	f8c9 3000 	str.w	r3, [r9]
 8006c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c46:	2762      	movs	r7, #98	; 0x62
 8006c48:	601d      	str	r5, [r3, #0]
 8006c4a:	e72a      	b.n	8006aa2 <__gethex+0x110>
 8006c4c:	1e71      	subs	r1, r6, #1
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f000 fd9c 	bl	800778c <__any_on>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d1ed      	bne.n	8006c34 <__gethex+0x2a2>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	9802      	ldr	r0, [sp, #8]
 8006c5c:	f000 f9ed 	bl	800703a <_Bfree>
 8006c60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c62:	2300      	movs	r3, #0
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	2750      	movs	r7, #80	; 0x50
 8006c68:	e71b      	b.n	8006aa2 <__gethex+0x110>
 8006c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d0e1      	beq.n	8006c34 <__gethex+0x2a2>
 8006c70:	e7f2      	b.n	8006c58 <__gethex+0x2c6>
 8006c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1dd      	bne.n	8006c34 <__gethex+0x2a2>
 8006c78:	e7ee      	b.n	8006c58 <__gethex+0x2c6>
 8006c7a:	1e67      	subs	r7, r4, #1
 8006c7c:	f1ba 0f00 	cmp.w	sl, #0
 8006c80:	d131      	bne.n	8006ce6 <__gethex+0x354>
 8006c82:	b127      	cbz	r7, 8006c8e <__gethex+0x2fc>
 8006c84:	4639      	mov	r1, r7
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fd80 	bl	800778c <__any_on>
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	117a      	asrs	r2, r7, #5
 8006c90:	2301      	movs	r3, #1
 8006c92:	f007 071f 	and.w	r7, r7, #31
 8006c96:	fa03 f707 	lsl.w	r7, r3, r7
 8006c9a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006c9e:	4621      	mov	r1, r4
 8006ca0:	421f      	tst	r7, r3
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	bf18      	it	ne
 8006ca6:	f04a 0a02 	orrne.w	sl, sl, #2
 8006caa:	1b36      	subs	r6, r6, r4
 8006cac:	f7ff fe22 	bl	80068f4 <rshift>
 8006cb0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006cb4:	2702      	movs	r7, #2
 8006cb6:	f1ba 0f00 	cmp.w	sl, #0
 8006cba:	d048      	beq.n	8006d4e <__gethex+0x3bc>
 8006cbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d015      	beq.n	8006cf0 <__gethex+0x35e>
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d017      	beq.n	8006cf8 <__gethex+0x366>
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d109      	bne.n	8006ce0 <__gethex+0x34e>
 8006ccc:	f01a 0f02 	tst.w	sl, #2
 8006cd0:	d006      	beq.n	8006ce0 <__gethex+0x34e>
 8006cd2:	f8d9 3000 	ldr.w	r3, [r9]
 8006cd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006cda:	f01a 0f01 	tst.w	sl, #1
 8006cde:	d10e      	bne.n	8006cfe <__gethex+0x36c>
 8006ce0:	f047 0710 	orr.w	r7, r7, #16
 8006ce4:	e033      	b.n	8006d4e <__gethex+0x3bc>
 8006ce6:	f04f 0a01 	mov.w	sl, #1
 8006cea:	e7d0      	b.n	8006c8e <__gethex+0x2fc>
 8006cec:	2701      	movs	r7, #1
 8006cee:	e7e2      	b.n	8006cb6 <__gethex+0x324>
 8006cf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cf2:	f1c3 0301 	rsb	r3, r3, #1
 8006cf6:	9315      	str	r3, [sp, #84]	; 0x54
 8006cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0f0      	beq.n	8006ce0 <__gethex+0x34e>
 8006cfe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006d02:	f105 0314 	add.w	r3, r5, #20
 8006d06:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006d0a:	eb03 010a 	add.w	r1, r3, sl
 8006d0e:	f04f 0c00 	mov.w	ip, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d18:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d1c:	d01c      	beq.n	8006d58 <__gethex+0x3c6>
 8006d1e:	3201      	adds	r2, #1
 8006d20:	6002      	str	r2, [r0, #0]
 8006d22:	2f02      	cmp	r7, #2
 8006d24:	f105 0314 	add.w	r3, r5, #20
 8006d28:	d138      	bne.n	8006d9c <__gethex+0x40a>
 8006d2a:	f8d8 2000 	ldr.w	r2, [r8]
 8006d2e:	3a01      	subs	r2, #1
 8006d30:	42b2      	cmp	r2, r6
 8006d32:	d10a      	bne.n	8006d4a <__gethex+0x3b8>
 8006d34:	1171      	asrs	r1, r6, #5
 8006d36:	2201      	movs	r2, #1
 8006d38:	f006 061f 	and.w	r6, r6, #31
 8006d3c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d40:	fa02 f606 	lsl.w	r6, r2, r6
 8006d44:	421e      	tst	r6, r3
 8006d46:	bf18      	it	ne
 8006d48:	4617      	movne	r7, r2
 8006d4a:	f047 0720 	orr.w	r7, r7, #32
 8006d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d50:	601d      	str	r5, [r3, #0]
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	601c      	str	r4, [r3, #0]
 8006d56:	e6a4      	b.n	8006aa2 <__gethex+0x110>
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d5e:	d8d8      	bhi.n	8006d12 <__gethex+0x380>
 8006d60:	68ab      	ldr	r3, [r5, #8]
 8006d62:	4599      	cmp	r9, r3
 8006d64:	db12      	blt.n	8006d8c <__gethex+0x3fa>
 8006d66:	6869      	ldr	r1, [r5, #4]
 8006d68:	9802      	ldr	r0, [sp, #8]
 8006d6a:	3101      	adds	r1, #1
 8006d6c:	f000 f931 	bl	8006fd2 <_Balloc>
 8006d70:	692a      	ldr	r2, [r5, #16]
 8006d72:	3202      	adds	r2, #2
 8006d74:	f105 010c 	add.w	r1, r5, #12
 8006d78:	4683      	mov	fp, r0
 8006d7a:	0092      	lsls	r2, r2, #2
 8006d7c:	300c      	adds	r0, #12
 8006d7e:	f000 f91b 	bl	8006fb8 <memcpy>
 8006d82:	4629      	mov	r1, r5
 8006d84:	9802      	ldr	r0, [sp, #8]
 8006d86:	f000 f958 	bl	800703a <_Bfree>
 8006d8a:	465d      	mov	r5, fp
 8006d8c:	692b      	ldr	r3, [r5, #16]
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006d94:	612a      	str	r2, [r5, #16]
 8006d96:	2201      	movs	r2, #1
 8006d98:	615a      	str	r2, [r3, #20]
 8006d9a:	e7c2      	b.n	8006d22 <__gethex+0x390>
 8006d9c:	692a      	ldr	r2, [r5, #16]
 8006d9e:	454a      	cmp	r2, r9
 8006da0:	dd0b      	ble.n	8006dba <__gethex+0x428>
 8006da2:	2101      	movs	r1, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	f7ff fda5 	bl	80068f4 <rshift>
 8006daa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dae:	3401      	adds	r4, #1
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	f6ff aed9 	blt.w	8006b68 <__gethex+0x1d6>
 8006db6:	2701      	movs	r7, #1
 8006db8:	e7c7      	b.n	8006d4a <__gethex+0x3b8>
 8006dba:	f016 061f 	ands.w	r6, r6, #31
 8006dbe:	d0fa      	beq.n	8006db6 <__gethex+0x424>
 8006dc0:	449a      	add	sl, r3
 8006dc2:	f1c6 0620 	rsb	r6, r6, #32
 8006dc6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006dca:	f000 f9c6 	bl	800715a <__hi0bits>
 8006dce:	42b0      	cmp	r0, r6
 8006dd0:	dbe7      	blt.n	8006da2 <__gethex+0x410>
 8006dd2:	e7f0      	b.n	8006db6 <__gethex+0x424>

08006dd4 <L_shift>:
 8006dd4:	f1c2 0208 	rsb	r2, r2, #8
 8006dd8:	0092      	lsls	r2, r2, #2
 8006dda:	b570      	push	{r4, r5, r6, lr}
 8006ddc:	f1c2 0620 	rsb	r6, r2, #32
 8006de0:	6843      	ldr	r3, [r0, #4]
 8006de2:	6804      	ldr	r4, [r0, #0]
 8006de4:	fa03 f506 	lsl.w	r5, r3, r6
 8006de8:	432c      	orrs	r4, r5
 8006dea:	40d3      	lsrs	r3, r2
 8006dec:	6004      	str	r4, [r0, #0]
 8006dee:	f840 3f04 	str.w	r3, [r0, #4]!
 8006df2:	4288      	cmp	r0, r1
 8006df4:	d3f4      	bcc.n	8006de0 <L_shift+0xc>
 8006df6:	bd70      	pop	{r4, r5, r6, pc}

08006df8 <__match>:
 8006df8:	b530      	push	{r4, r5, lr}
 8006dfa:	6803      	ldr	r3, [r0, #0]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	b914      	cbnz	r4, 8006e0a <__match+0x12>
 8006e04:	6003      	str	r3, [r0, #0]
 8006e06:	2001      	movs	r0, #1
 8006e08:	bd30      	pop	{r4, r5, pc}
 8006e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e12:	2d19      	cmp	r5, #25
 8006e14:	bf98      	it	ls
 8006e16:	3220      	addls	r2, #32
 8006e18:	42a2      	cmp	r2, r4
 8006e1a:	d0f0      	beq.n	8006dfe <__match+0x6>
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	e7f3      	b.n	8006e08 <__match+0x10>

08006e20 <__hexnan>:
 8006e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	680b      	ldr	r3, [r1, #0]
 8006e26:	6801      	ldr	r1, [r0, #0]
 8006e28:	115f      	asrs	r7, r3, #5
 8006e2a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006e2e:	f013 031f 	ands.w	r3, r3, #31
 8006e32:	b087      	sub	sp, #28
 8006e34:	bf18      	it	ne
 8006e36:	3704      	addne	r7, #4
 8006e38:	2500      	movs	r5, #0
 8006e3a:	1f3e      	subs	r6, r7, #4
 8006e3c:	4682      	mov	sl, r0
 8006e3e:	4690      	mov	r8, r2
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	f847 5c04 	str.w	r5, [r7, #-4]
 8006e46:	46b1      	mov	r9, r6
 8006e48:	4634      	mov	r4, r6
 8006e4a:	9502      	str	r5, [sp, #8]
 8006e4c:	46ab      	mov	fp, r5
 8006e4e:	784a      	ldrb	r2, [r1, #1]
 8006e50:	1c4b      	adds	r3, r1, #1
 8006e52:	9303      	str	r3, [sp, #12]
 8006e54:	b342      	cbz	r2, 8006ea8 <__hexnan+0x88>
 8006e56:	4610      	mov	r0, r2
 8006e58:	9105      	str	r1, [sp, #20]
 8006e5a:	9204      	str	r2, [sp, #16]
 8006e5c:	f7ff fd84 	bl	8006968 <__hexdig_fun>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d143      	bne.n	8006eec <__hexnan+0xcc>
 8006e64:	9a04      	ldr	r2, [sp, #16]
 8006e66:	9905      	ldr	r1, [sp, #20]
 8006e68:	2a20      	cmp	r2, #32
 8006e6a:	d818      	bhi.n	8006e9e <__hexnan+0x7e>
 8006e6c:	9b02      	ldr	r3, [sp, #8]
 8006e6e:	459b      	cmp	fp, r3
 8006e70:	dd13      	ble.n	8006e9a <__hexnan+0x7a>
 8006e72:	454c      	cmp	r4, r9
 8006e74:	d206      	bcs.n	8006e84 <__hexnan+0x64>
 8006e76:	2d07      	cmp	r5, #7
 8006e78:	dc04      	bgt.n	8006e84 <__hexnan+0x64>
 8006e7a:	462a      	mov	r2, r5
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f7ff ffa8 	bl	8006dd4 <L_shift>
 8006e84:	4544      	cmp	r4, r8
 8006e86:	d944      	bls.n	8006f12 <__hexnan+0xf2>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f1a4 0904 	sub.w	r9, r4, #4
 8006e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e92:	f8cd b008 	str.w	fp, [sp, #8]
 8006e96:	464c      	mov	r4, r9
 8006e98:	461d      	mov	r5, r3
 8006e9a:	9903      	ldr	r1, [sp, #12]
 8006e9c:	e7d7      	b.n	8006e4e <__hexnan+0x2e>
 8006e9e:	2a29      	cmp	r2, #41	; 0x29
 8006ea0:	d14a      	bne.n	8006f38 <__hexnan+0x118>
 8006ea2:	3102      	adds	r1, #2
 8006ea4:	f8ca 1000 	str.w	r1, [sl]
 8006ea8:	f1bb 0f00 	cmp.w	fp, #0
 8006eac:	d044      	beq.n	8006f38 <__hexnan+0x118>
 8006eae:	454c      	cmp	r4, r9
 8006eb0:	d206      	bcs.n	8006ec0 <__hexnan+0xa0>
 8006eb2:	2d07      	cmp	r5, #7
 8006eb4:	dc04      	bgt.n	8006ec0 <__hexnan+0xa0>
 8006eb6:	462a      	mov	r2, r5
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f7ff ff8a 	bl	8006dd4 <L_shift>
 8006ec0:	4544      	cmp	r4, r8
 8006ec2:	d928      	bls.n	8006f16 <__hexnan+0xf6>
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	f854 2b04 	ldr.w	r2, [r4], #4
 8006eca:	f843 2b04 	str.w	r2, [r3], #4
 8006ece:	42a6      	cmp	r6, r4
 8006ed0:	d2f9      	bcs.n	8006ec6 <__hexnan+0xa6>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f843 2b04 	str.w	r2, [r3], #4
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	d2fb      	bcs.n	8006ed4 <__hexnan+0xb4>
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	b91b      	cbnz	r3, 8006ee8 <__hexnan+0xc8>
 8006ee0:	4546      	cmp	r6, r8
 8006ee2:	d127      	bne.n	8006f34 <__hexnan+0x114>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	2005      	movs	r0, #5
 8006eea:	e026      	b.n	8006f3a <__hexnan+0x11a>
 8006eec:	3501      	adds	r5, #1
 8006eee:	2d08      	cmp	r5, #8
 8006ef0:	f10b 0b01 	add.w	fp, fp, #1
 8006ef4:	dd06      	ble.n	8006f04 <__hexnan+0xe4>
 8006ef6:	4544      	cmp	r4, r8
 8006ef8:	d9cf      	bls.n	8006e9a <__hexnan+0x7a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f00:	2501      	movs	r5, #1
 8006f02:	3c04      	subs	r4, #4
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	f000 000f 	and.w	r0, r0, #15
 8006f0a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006f0e:	6020      	str	r0, [r4, #0]
 8006f10:	e7c3      	b.n	8006e9a <__hexnan+0x7a>
 8006f12:	2508      	movs	r5, #8
 8006f14:	e7c1      	b.n	8006e9a <__hexnan+0x7a>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0df      	beq.n	8006edc <__hexnan+0xbc>
 8006f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f20:	f1c3 0320 	rsb	r3, r3, #32
 8006f24:	fa22 f303 	lsr.w	r3, r2, r3
 8006f28:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006f2c:	401a      	ands	r2, r3
 8006f2e:	f847 2c04 	str.w	r2, [r7, #-4]
 8006f32:	e7d3      	b.n	8006edc <__hexnan+0xbc>
 8006f34:	3e04      	subs	r6, #4
 8006f36:	e7d1      	b.n	8006edc <__hexnan+0xbc>
 8006f38:	2004      	movs	r0, #4
 8006f3a:	b007      	add	sp, #28
 8006f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f40 <__locale_ctype_ptr_l>:
 8006f40:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006f44:	4770      	bx	lr
	...

08006f48 <__locale_ctype_ptr>:
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <__locale_ctype_ptr+0x14>)
 8006f4a:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <__locale_ctype_ptr+0x18>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf08      	it	eq
 8006f54:	4613      	moveq	r3, r2
 8006f56:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8006f5a:	4770      	bx	lr
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	20000070 	.word	0x20000070

08006f64 <__localeconv_l>:
 8006f64:	30f0      	adds	r0, #240	; 0xf0
 8006f66:	4770      	bx	lr

08006f68 <_localeconv_r>:
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <_localeconv_r+0x14>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6a18      	ldr	r0, [r3, #32]
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <_localeconv_r+0x18>)
 8006f70:	2800      	cmp	r0, #0
 8006f72:	bf08      	it	eq
 8006f74:	4618      	moveq	r0, r3
 8006f76:	30f0      	adds	r0, #240	; 0xf0
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	2000000c 	.word	0x2000000c
 8006f80:	20000070 	.word	0x20000070

08006f84 <malloc>:
 8006f84:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <malloc+0xc>)
 8006f86:	4601      	mov	r1, r0
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f7fd b9f9 	b.w	8004380 <_malloc_r>
 8006f8e:	bf00      	nop
 8006f90:	2000000c 	.word	0x2000000c

08006f94 <__ascii_mbtowc>:
 8006f94:	b082      	sub	sp, #8
 8006f96:	b901      	cbnz	r1, 8006f9a <__ascii_mbtowc+0x6>
 8006f98:	a901      	add	r1, sp, #4
 8006f9a:	b142      	cbz	r2, 8006fae <__ascii_mbtowc+0x1a>
 8006f9c:	b14b      	cbz	r3, 8006fb2 <__ascii_mbtowc+0x1e>
 8006f9e:	7813      	ldrb	r3, [r2, #0]
 8006fa0:	600b      	str	r3, [r1, #0]
 8006fa2:	7812      	ldrb	r2, [r2, #0]
 8006fa4:	1c10      	adds	r0, r2, #0
 8006fa6:	bf18      	it	ne
 8006fa8:	2001      	movne	r0, #1
 8006faa:	b002      	add	sp, #8
 8006fac:	4770      	bx	lr
 8006fae:	4610      	mov	r0, r2
 8006fb0:	e7fb      	b.n	8006faa <__ascii_mbtowc+0x16>
 8006fb2:	f06f 0001 	mvn.w	r0, #1
 8006fb6:	e7f8      	b.n	8006faa <__ascii_mbtowc+0x16>

08006fb8 <memcpy>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	1e43      	subs	r3, r0, #1
 8006fbc:	440a      	add	r2, r1
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d100      	bne.n	8006fc4 <memcpy+0xc>
 8006fc2:	bd10      	pop	{r4, pc}
 8006fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fcc:	e7f7      	b.n	8006fbe <memcpy+0x6>

08006fce <__malloc_lock>:
 8006fce:	4770      	bx	lr

08006fd0 <__malloc_unlock>:
 8006fd0:	4770      	bx	lr

08006fd2 <_Balloc>:
 8006fd2:	b570      	push	{r4, r5, r6, lr}
 8006fd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	460e      	mov	r6, r1
 8006fda:	b93d      	cbnz	r5, 8006fec <_Balloc+0x1a>
 8006fdc:	2010      	movs	r0, #16
 8006fde:	f7ff ffd1 	bl	8006f84 <malloc>
 8006fe2:	6260      	str	r0, [r4, #36]	; 0x24
 8006fe4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fe8:	6005      	str	r5, [r0, #0]
 8006fea:	60c5      	str	r5, [r0, #12]
 8006fec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006fee:	68eb      	ldr	r3, [r5, #12]
 8006ff0:	b183      	cbz	r3, 8007014 <_Balloc+0x42>
 8006ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ffa:	b9b8      	cbnz	r0, 800702c <_Balloc+0x5a>
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f506 	lsl.w	r5, r1, r6
 8007002:	1d6a      	adds	r2, r5, #5
 8007004:	0092      	lsls	r2, r2, #2
 8007006:	4620      	mov	r0, r4
 8007008:	f7fd f9ac 	bl	8004364 <_calloc_r>
 800700c:	b160      	cbz	r0, 8007028 <_Balloc+0x56>
 800700e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007012:	e00e      	b.n	8007032 <_Balloc+0x60>
 8007014:	2221      	movs	r2, #33	; 0x21
 8007016:	2104      	movs	r1, #4
 8007018:	4620      	mov	r0, r4
 800701a:	f7fd f9a3 	bl	8004364 <_calloc_r>
 800701e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007020:	60e8      	str	r0, [r5, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e4      	bne.n	8006ff2 <_Balloc+0x20>
 8007028:	2000      	movs	r0, #0
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	6802      	ldr	r2, [r0, #0]
 800702e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007032:	2300      	movs	r3, #0
 8007034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007038:	e7f7      	b.n	800702a <_Balloc+0x58>

0800703a <_Bfree>:
 800703a:	b570      	push	{r4, r5, r6, lr}
 800703c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800703e:	4606      	mov	r6, r0
 8007040:	460d      	mov	r5, r1
 8007042:	b93c      	cbnz	r4, 8007054 <_Bfree+0x1a>
 8007044:	2010      	movs	r0, #16
 8007046:	f7ff ff9d 	bl	8006f84 <malloc>
 800704a:	6270      	str	r0, [r6, #36]	; 0x24
 800704c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007050:	6004      	str	r4, [r0, #0]
 8007052:	60c4      	str	r4, [r0, #12]
 8007054:	b13d      	cbz	r5, 8007066 <_Bfree+0x2c>
 8007056:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007058:	686a      	ldr	r2, [r5, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007060:	6029      	str	r1, [r5, #0]
 8007062:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007066:	bd70      	pop	{r4, r5, r6, pc}

08007068 <__multadd>:
 8007068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706c:	690d      	ldr	r5, [r1, #16]
 800706e:	461f      	mov	r7, r3
 8007070:	4606      	mov	r6, r0
 8007072:	460c      	mov	r4, r1
 8007074:	f101 0c14 	add.w	ip, r1, #20
 8007078:	2300      	movs	r3, #0
 800707a:	f8dc 0000 	ldr.w	r0, [ip]
 800707e:	b281      	uxth	r1, r0
 8007080:	fb02 7101 	mla	r1, r2, r1, r7
 8007084:	0c0f      	lsrs	r7, r1, #16
 8007086:	0c00      	lsrs	r0, r0, #16
 8007088:	fb02 7000 	mla	r0, r2, r0, r7
 800708c:	b289      	uxth	r1, r1
 800708e:	3301      	adds	r3, #1
 8007090:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007094:	429d      	cmp	r5, r3
 8007096:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800709a:	f84c 1b04 	str.w	r1, [ip], #4
 800709e:	dcec      	bgt.n	800707a <__multadd+0x12>
 80070a0:	b1d7      	cbz	r7, 80070d8 <__multadd+0x70>
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	dc12      	bgt.n	80070ce <__multadd+0x66>
 80070a8:	6861      	ldr	r1, [r4, #4]
 80070aa:	4630      	mov	r0, r6
 80070ac:	3101      	adds	r1, #1
 80070ae:	f7ff ff90 	bl	8006fd2 <_Balloc>
 80070b2:	6922      	ldr	r2, [r4, #16]
 80070b4:	3202      	adds	r2, #2
 80070b6:	f104 010c 	add.w	r1, r4, #12
 80070ba:	4680      	mov	r8, r0
 80070bc:	0092      	lsls	r2, r2, #2
 80070be:	300c      	adds	r0, #12
 80070c0:	f7ff ff7a 	bl	8006fb8 <memcpy>
 80070c4:	4621      	mov	r1, r4
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ffb7 	bl	800703a <_Bfree>
 80070cc:	4644      	mov	r4, r8
 80070ce:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070d2:	3501      	adds	r5, #1
 80070d4:	615f      	str	r7, [r3, #20]
 80070d6:	6125      	str	r5, [r4, #16]
 80070d8:	4620      	mov	r0, r4
 80070da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070de <__s2b>:
 80070de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070e2:	460c      	mov	r4, r1
 80070e4:	4615      	mov	r5, r2
 80070e6:	461f      	mov	r7, r3
 80070e8:	2209      	movs	r2, #9
 80070ea:	3308      	adds	r3, #8
 80070ec:	4606      	mov	r6, r0
 80070ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f2:	2100      	movs	r1, #0
 80070f4:	2201      	movs	r2, #1
 80070f6:	429a      	cmp	r2, r3
 80070f8:	db20      	blt.n	800713c <__s2b+0x5e>
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ff69 	bl	8006fd2 <_Balloc>
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	6143      	str	r3, [r0, #20]
 8007104:	2d09      	cmp	r5, #9
 8007106:	f04f 0301 	mov.w	r3, #1
 800710a:	6103      	str	r3, [r0, #16]
 800710c:	dd19      	ble.n	8007142 <__s2b+0x64>
 800710e:	f104 0809 	add.w	r8, r4, #9
 8007112:	46c1      	mov	r9, r8
 8007114:	442c      	add	r4, r5
 8007116:	f819 3b01 	ldrb.w	r3, [r9], #1
 800711a:	4601      	mov	r1, r0
 800711c:	3b30      	subs	r3, #48	; 0x30
 800711e:	220a      	movs	r2, #10
 8007120:	4630      	mov	r0, r6
 8007122:	f7ff ffa1 	bl	8007068 <__multadd>
 8007126:	45a1      	cmp	r9, r4
 8007128:	d1f5      	bne.n	8007116 <__s2b+0x38>
 800712a:	eb08 0405 	add.w	r4, r8, r5
 800712e:	3c08      	subs	r4, #8
 8007130:	1b2d      	subs	r5, r5, r4
 8007132:	1963      	adds	r3, r4, r5
 8007134:	42bb      	cmp	r3, r7
 8007136:	db07      	blt.n	8007148 <__s2b+0x6a>
 8007138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800713c:	0052      	lsls	r2, r2, #1
 800713e:	3101      	adds	r1, #1
 8007140:	e7d9      	b.n	80070f6 <__s2b+0x18>
 8007142:	340a      	adds	r4, #10
 8007144:	2509      	movs	r5, #9
 8007146:	e7f3      	b.n	8007130 <__s2b+0x52>
 8007148:	f814 3b01 	ldrb.w	r3, [r4], #1
 800714c:	4601      	mov	r1, r0
 800714e:	3b30      	subs	r3, #48	; 0x30
 8007150:	220a      	movs	r2, #10
 8007152:	4630      	mov	r0, r6
 8007154:	f7ff ff88 	bl	8007068 <__multadd>
 8007158:	e7eb      	b.n	8007132 <__s2b+0x54>

0800715a <__hi0bits>:
 800715a:	0c02      	lsrs	r2, r0, #16
 800715c:	0412      	lsls	r2, r2, #16
 800715e:	4603      	mov	r3, r0
 8007160:	b9b2      	cbnz	r2, 8007190 <__hi0bits+0x36>
 8007162:	0403      	lsls	r3, r0, #16
 8007164:	2010      	movs	r0, #16
 8007166:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800716a:	bf04      	itt	eq
 800716c:	021b      	lsleq	r3, r3, #8
 800716e:	3008      	addeq	r0, #8
 8007170:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007174:	bf04      	itt	eq
 8007176:	011b      	lsleq	r3, r3, #4
 8007178:	3004      	addeq	r0, #4
 800717a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800717e:	bf04      	itt	eq
 8007180:	009b      	lsleq	r3, r3, #2
 8007182:	3002      	addeq	r0, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	db06      	blt.n	8007196 <__hi0bits+0x3c>
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	d503      	bpl.n	8007194 <__hi0bits+0x3a>
 800718c:	3001      	adds	r0, #1
 800718e:	4770      	bx	lr
 8007190:	2000      	movs	r0, #0
 8007192:	e7e8      	b.n	8007166 <__hi0bits+0xc>
 8007194:	2020      	movs	r0, #32
 8007196:	4770      	bx	lr

08007198 <__lo0bits>:
 8007198:	6803      	ldr	r3, [r0, #0]
 800719a:	f013 0207 	ands.w	r2, r3, #7
 800719e:	4601      	mov	r1, r0
 80071a0:	d00b      	beq.n	80071ba <__lo0bits+0x22>
 80071a2:	07da      	lsls	r2, r3, #31
 80071a4:	d423      	bmi.n	80071ee <__lo0bits+0x56>
 80071a6:	0798      	lsls	r0, r3, #30
 80071a8:	bf49      	itett	mi
 80071aa:	085b      	lsrmi	r3, r3, #1
 80071ac:	089b      	lsrpl	r3, r3, #2
 80071ae:	2001      	movmi	r0, #1
 80071b0:	600b      	strmi	r3, [r1, #0]
 80071b2:	bf5c      	itt	pl
 80071b4:	600b      	strpl	r3, [r1, #0]
 80071b6:	2002      	movpl	r0, #2
 80071b8:	4770      	bx	lr
 80071ba:	b298      	uxth	r0, r3
 80071bc:	b9a8      	cbnz	r0, 80071ea <__lo0bits+0x52>
 80071be:	0c1b      	lsrs	r3, r3, #16
 80071c0:	2010      	movs	r0, #16
 80071c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80071c6:	bf04      	itt	eq
 80071c8:	0a1b      	lsreq	r3, r3, #8
 80071ca:	3008      	addeq	r0, #8
 80071cc:	071a      	lsls	r2, r3, #28
 80071ce:	bf04      	itt	eq
 80071d0:	091b      	lsreq	r3, r3, #4
 80071d2:	3004      	addeq	r0, #4
 80071d4:	079a      	lsls	r2, r3, #30
 80071d6:	bf04      	itt	eq
 80071d8:	089b      	lsreq	r3, r3, #2
 80071da:	3002      	addeq	r0, #2
 80071dc:	07da      	lsls	r2, r3, #31
 80071de:	d402      	bmi.n	80071e6 <__lo0bits+0x4e>
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	d006      	beq.n	80071f2 <__lo0bits+0x5a>
 80071e4:	3001      	adds	r0, #1
 80071e6:	600b      	str	r3, [r1, #0]
 80071e8:	4770      	bx	lr
 80071ea:	4610      	mov	r0, r2
 80071ec:	e7e9      	b.n	80071c2 <__lo0bits+0x2a>
 80071ee:	2000      	movs	r0, #0
 80071f0:	4770      	bx	lr
 80071f2:	2020      	movs	r0, #32
 80071f4:	4770      	bx	lr

080071f6 <__i2b>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	2101      	movs	r1, #1
 80071fc:	f7ff fee9 	bl	8006fd2 <_Balloc>
 8007200:	2201      	movs	r2, #1
 8007202:	6144      	str	r4, [r0, #20]
 8007204:	6102      	str	r2, [r0, #16]
 8007206:	bd10      	pop	{r4, pc}

08007208 <__multiply>:
 8007208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	4614      	mov	r4, r2
 800720e:	690a      	ldr	r2, [r1, #16]
 8007210:	6923      	ldr	r3, [r4, #16]
 8007212:	429a      	cmp	r2, r3
 8007214:	bfb8      	it	lt
 8007216:	460b      	movlt	r3, r1
 8007218:	4688      	mov	r8, r1
 800721a:	bfbc      	itt	lt
 800721c:	46a0      	movlt	r8, r4
 800721e:	461c      	movlt	r4, r3
 8007220:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007224:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007228:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800722c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007230:	eb07 0609 	add.w	r6, r7, r9
 8007234:	42b3      	cmp	r3, r6
 8007236:	bfb8      	it	lt
 8007238:	3101      	addlt	r1, #1
 800723a:	f7ff feca 	bl	8006fd2 <_Balloc>
 800723e:	f100 0514 	add.w	r5, r0, #20
 8007242:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007246:	462b      	mov	r3, r5
 8007248:	2200      	movs	r2, #0
 800724a:	4573      	cmp	r3, lr
 800724c:	d316      	bcc.n	800727c <__multiply+0x74>
 800724e:	f104 0214 	add.w	r2, r4, #20
 8007252:	f108 0114 	add.w	r1, r8, #20
 8007256:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800725a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	9201      	str	r2, [sp, #4]
 8007264:	4293      	cmp	r3, r2
 8007266:	d80c      	bhi.n	8007282 <__multiply+0x7a>
 8007268:	2e00      	cmp	r6, #0
 800726a:	dd03      	ble.n	8007274 <__multiply+0x6c>
 800726c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007270:	2b00      	cmp	r3, #0
 8007272:	d05d      	beq.n	8007330 <__multiply+0x128>
 8007274:	6106      	str	r6, [r0, #16]
 8007276:	b003      	add	sp, #12
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	f843 2b04 	str.w	r2, [r3], #4
 8007280:	e7e3      	b.n	800724a <__multiply+0x42>
 8007282:	f8b2 b000 	ldrh.w	fp, [r2]
 8007286:	f1bb 0f00 	cmp.w	fp, #0
 800728a:	d023      	beq.n	80072d4 <__multiply+0xcc>
 800728c:	4689      	mov	r9, r1
 800728e:	46ac      	mov	ip, r5
 8007290:	f04f 0800 	mov.w	r8, #0
 8007294:	f859 4b04 	ldr.w	r4, [r9], #4
 8007298:	f8dc a000 	ldr.w	sl, [ip]
 800729c:	b2a3      	uxth	r3, r4
 800729e:	fa1f fa8a 	uxth.w	sl, sl
 80072a2:	fb0b a303 	mla	r3, fp, r3, sl
 80072a6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80072aa:	f8dc 4000 	ldr.w	r4, [ip]
 80072ae:	4443      	add	r3, r8
 80072b0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80072b4:	fb0b 840a 	mla	r4, fp, sl, r8
 80072b8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80072bc:	46e2      	mov	sl, ip
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80072c4:	454f      	cmp	r7, r9
 80072c6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80072ca:	f84a 3b04 	str.w	r3, [sl], #4
 80072ce:	d82b      	bhi.n	8007328 <__multiply+0x120>
 80072d0:	f8cc 8004 	str.w	r8, [ip, #4]
 80072d4:	9b01      	ldr	r3, [sp, #4]
 80072d6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80072da:	3204      	adds	r2, #4
 80072dc:	f1ba 0f00 	cmp.w	sl, #0
 80072e0:	d020      	beq.n	8007324 <__multiply+0x11c>
 80072e2:	682b      	ldr	r3, [r5, #0]
 80072e4:	4689      	mov	r9, r1
 80072e6:	46a8      	mov	r8, r5
 80072e8:	f04f 0b00 	mov.w	fp, #0
 80072ec:	f8b9 c000 	ldrh.w	ip, [r9]
 80072f0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80072f4:	fb0a 440c 	mla	r4, sl, ip, r4
 80072f8:	445c      	add	r4, fp
 80072fa:	46c4      	mov	ip, r8
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007302:	f84c 3b04 	str.w	r3, [ip], #4
 8007306:	f859 3b04 	ldr.w	r3, [r9], #4
 800730a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800730e:	0c1b      	lsrs	r3, r3, #16
 8007310:	fb0a b303 	mla	r3, sl, r3, fp
 8007314:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007318:	454f      	cmp	r7, r9
 800731a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800731e:	d805      	bhi.n	800732c <__multiply+0x124>
 8007320:	f8c8 3004 	str.w	r3, [r8, #4]
 8007324:	3504      	adds	r5, #4
 8007326:	e79b      	b.n	8007260 <__multiply+0x58>
 8007328:	46d4      	mov	ip, sl
 800732a:	e7b3      	b.n	8007294 <__multiply+0x8c>
 800732c:	46e0      	mov	r8, ip
 800732e:	e7dd      	b.n	80072ec <__multiply+0xe4>
 8007330:	3e01      	subs	r6, #1
 8007332:	e799      	b.n	8007268 <__multiply+0x60>

08007334 <__pow5mult>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4615      	mov	r5, r2
 800733a:	f012 0203 	ands.w	r2, r2, #3
 800733e:	4606      	mov	r6, r0
 8007340:	460f      	mov	r7, r1
 8007342:	d007      	beq.n	8007354 <__pow5mult+0x20>
 8007344:	3a01      	subs	r2, #1
 8007346:	4c21      	ldr	r4, [pc, #132]	; (80073cc <__pow5mult+0x98>)
 8007348:	2300      	movs	r3, #0
 800734a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800734e:	f7ff fe8b 	bl	8007068 <__multadd>
 8007352:	4607      	mov	r7, r0
 8007354:	10ad      	asrs	r5, r5, #2
 8007356:	d035      	beq.n	80073c4 <__pow5mult+0x90>
 8007358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800735a:	b93c      	cbnz	r4, 800736c <__pow5mult+0x38>
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff fe11 	bl	8006f84 <malloc>
 8007362:	6270      	str	r0, [r6, #36]	; 0x24
 8007364:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007368:	6004      	str	r4, [r0, #0]
 800736a:	60c4      	str	r4, [r0, #12]
 800736c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007370:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007374:	b94c      	cbnz	r4, 800738a <__pow5mult+0x56>
 8007376:	f240 2171 	movw	r1, #625	; 0x271
 800737a:	4630      	mov	r0, r6
 800737c:	f7ff ff3b 	bl	80071f6 <__i2b>
 8007380:	2300      	movs	r3, #0
 8007382:	f8c8 0008 	str.w	r0, [r8, #8]
 8007386:	4604      	mov	r4, r0
 8007388:	6003      	str	r3, [r0, #0]
 800738a:	f04f 0800 	mov.w	r8, #0
 800738e:	07eb      	lsls	r3, r5, #31
 8007390:	d50a      	bpl.n	80073a8 <__pow5mult+0x74>
 8007392:	4639      	mov	r1, r7
 8007394:	4622      	mov	r2, r4
 8007396:	4630      	mov	r0, r6
 8007398:	f7ff ff36 	bl	8007208 <__multiply>
 800739c:	4639      	mov	r1, r7
 800739e:	4681      	mov	r9, r0
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff fe4a 	bl	800703a <_Bfree>
 80073a6:	464f      	mov	r7, r9
 80073a8:	106d      	asrs	r5, r5, #1
 80073aa:	d00b      	beq.n	80073c4 <__pow5mult+0x90>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	b938      	cbnz	r0, 80073c0 <__pow5mult+0x8c>
 80073b0:	4622      	mov	r2, r4
 80073b2:	4621      	mov	r1, r4
 80073b4:	4630      	mov	r0, r6
 80073b6:	f7ff ff27 	bl	8007208 <__multiply>
 80073ba:	6020      	str	r0, [r4, #0]
 80073bc:	f8c0 8000 	str.w	r8, [r0]
 80073c0:	4604      	mov	r4, r0
 80073c2:	e7e4      	b.n	800738e <__pow5mult+0x5a>
 80073c4:	4638      	mov	r0, r7
 80073c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ca:	bf00      	nop
 80073cc:	080094b0 	.word	0x080094b0

080073d0 <__lshift>:
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	460c      	mov	r4, r1
 80073d6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	6849      	ldr	r1, [r1, #4]
 80073de:	eb0a 0903 	add.w	r9, sl, r3
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	4607      	mov	r7, r0
 80073e6:	4616      	mov	r6, r2
 80073e8:	f109 0501 	add.w	r5, r9, #1
 80073ec:	42ab      	cmp	r3, r5
 80073ee:	db32      	blt.n	8007456 <__lshift+0x86>
 80073f0:	4638      	mov	r0, r7
 80073f2:	f7ff fdee 	bl	8006fd2 <_Balloc>
 80073f6:	2300      	movs	r3, #0
 80073f8:	4680      	mov	r8, r0
 80073fa:	f100 0114 	add.w	r1, r0, #20
 80073fe:	461a      	mov	r2, r3
 8007400:	4553      	cmp	r3, sl
 8007402:	db2b      	blt.n	800745c <__lshift+0x8c>
 8007404:	6920      	ldr	r0, [r4, #16]
 8007406:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800740a:	f104 0314 	add.w	r3, r4, #20
 800740e:	f016 021f 	ands.w	r2, r6, #31
 8007412:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007416:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800741a:	d025      	beq.n	8007468 <__lshift+0x98>
 800741c:	f1c2 0e20 	rsb	lr, r2, #32
 8007420:	2000      	movs	r0, #0
 8007422:	681e      	ldr	r6, [r3, #0]
 8007424:	468a      	mov	sl, r1
 8007426:	4096      	lsls	r6, r2
 8007428:	4330      	orrs	r0, r6
 800742a:	f84a 0b04 	str.w	r0, [sl], #4
 800742e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007432:	459c      	cmp	ip, r3
 8007434:	fa20 f00e 	lsr.w	r0, r0, lr
 8007438:	d814      	bhi.n	8007464 <__lshift+0x94>
 800743a:	6048      	str	r0, [r1, #4]
 800743c:	b108      	cbz	r0, 8007442 <__lshift+0x72>
 800743e:	f109 0502 	add.w	r5, r9, #2
 8007442:	3d01      	subs	r5, #1
 8007444:	4638      	mov	r0, r7
 8007446:	f8c8 5010 	str.w	r5, [r8, #16]
 800744a:	4621      	mov	r1, r4
 800744c:	f7ff fdf5 	bl	800703a <_Bfree>
 8007450:	4640      	mov	r0, r8
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	3101      	adds	r1, #1
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	e7c7      	b.n	80073ec <__lshift+0x1c>
 800745c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007460:	3301      	adds	r3, #1
 8007462:	e7cd      	b.n	8007400 <__lshift+0x30>
 8007464:	4651      	mov	r1, sl
 8007466:	e7dc      	b.n	8007422 <__lshift+0x52>
 8007468:	3904      	subs	r1, #4
 800746a:	f853 2b04 	ldr.w	r2, [r3], #4
 800746e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007472:	459c      	cmp	ip, r3
 8007474:	d8f9      	bhi.n	800746a <__lshift+0x9a>
 8007476:	e7e4      	b.n	8007442 <__lshift+0x72>

08007478 <__mcmp>:
 8007478:	6903      	ldr	r3, [r0, #16]
 800747a:	690a      	ldr	r2, [r1, #16]
 800747c:	1a9b      	subs	r3, r3, r2
 800747e:	b530      	push	{r4, r5, lr}
 8007480:	d10c      	bne.n	800749c <__mcmp+0x24>
 8007482:	0092      	lsls	r2, r2, #2
 8007484:	3014      	adds	r0, #20
 8007486:	3114      	adds	r1, #20
 8007488:	1884      	adds	r4, r0, r2
 800748a:	4411      	add	r1, r2
 800748c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007490:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007494:	4295      	cmp	r5, r2
 8007496:	d003      	beq.n	80074a0 <__mcmp+0x28>
 8007498:	d305      	bcc.n	80074a6 <__mcmp+0x2e>
 800749a:	2301      	movs	r3, #1
 800749c:	4618      	mov	r0, r3
 800749e:	bd30      	pop	{r4, r5, pc}
 80074a0:	42a0      	cmp	r0, r4
 80074a2:	d3f3      	bcc.n	800748c <__mcmp+0x14>
 80074a4:	e7fa      	b.n	800749c <__mcmp+0x24>
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	e7f7      	b.n	800749c <__mcmp+0x24>

080074ac <__mdiff>:
 80074ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b0:	460d      	mov	r5, r1
 80074b2:	4607      	mov	r7, r0
 80074b4:	4611      	mov	r1, r2
 80074b6:	4628      	mov	r0, r5
 80074b8:	4614      	mov	r4, r2
 80074ba:	f7ff ffdd 	bl	8007478 <__mcmp>
 80074be:	1e06      	subs	r6, r0, #0
 80074c0:	d108      	bne.n	80074d4 <__mdiff+0x28>
 80074c2:	4631      	mov	r1, r6
 80074c4:	4638      	mov	r0, r7
 80074c6:	f7ff fd84 	bl	8006fd2 <_Balloc>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d4:	bfa4      	itt	ge
 80074d6:	4623      	movge	r3, r4
 80074d8:	462c      	movge	r4, r5
 80074da:	4638      	mov	r0, r7
 80074dc:	6861      	ldr	r1, [r4, #4]
 80074de:	bfa6      	itte	ge
 80074e0:	461d      	movge	r5, r3
 80074e2:	2600      	movge	r6, #0
 80074e4:	2601      	movlt	r6, #1
 80074e6:	f7ff fd74 	bl	8006fd2 <_Balloc>
 80074ea:	692b      	ldr	r3, [r5, #16]
 80074ec:	60c6      	str	r6, [r0, #12]
 80074ee:	6926      	ldr	r6, [r4, #16]
 80074f0:	f105 0914 	add.w	r9, r5, #20
 80074f4:	f104 0214 	add.w	r2, r4, #20
 80074f8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80074fc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007500:	f100 0514 	add.w	r5, r0, #20
 8007504:	f04f 0e00 	mov.w	lr, #0
 8007508:	f852 ab04 	ldr.w	sl, [r2], #4
 800750c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007510:	fa1e f18a 	uxtah	r1, lr, sl
 8007514:	b2a3      	uxth	r3, r4
 8007516:	1ac9      	subs	r1, r1, r3
 8007518:	0c23      	lsrs	r3, r4, #16
 800751a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800751e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007522:	b289      	uxth	r1, r1
 8007524:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007528:	45c8      	cmp	r8, r9
 800752a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800752e:	4694      	mov	ip, r2
 8007530:	f845 3b04 	str.w	r3, [r5], #4
 8007534:	d8e8      	bhi.n	8007508 <__mdiff+0x5c>
 8007536:	45bc      	cmp	ip, r7
 8007538:	d304      	bcc.n	8007544 <__mdiff+0x98>
 800753a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800753e:	b183      	cbz	r3, 8007562 <__mdiff+0xb6>
 8007540:	6106      	str	r6, [r0, #16]
 8007542:	e7c5      	b.n	80074d0 <__mdiff+0x24>
 8007544:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007548:	fa1e f381 	uxtah	r3, lr, r1
 800754c:	141a      	asrs	r2, r3, #16
 800754e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007558:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800755c:	f845 3b04 	str.w	r3, [r5], #4
 8007560:	e7e9      	b.n	8007536 <__mdiff+0x8a>
 8007562:	3e01      	subs	r6, #1
 8007564:	e7e9      	b.n	800753a <__mdiff+0x8e>
	...

08007568 <__ulp>:
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <__ulp+0x4c>)
 800756a:	ee10 2a90 	vmov	r2, s1
 800756e:	401a      	ands	r2, r3
 8007570:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd04      	ble.n	8007582 <__ulp+0x1a>
 8007578:	2000      	movs	r0, #0
 800757a:	4619      	mov	r1, r3
 800757c:	ec41 0b10 	vmov	d0, r0, r1
 8007580:	4770      	bx	lr
 8007582:	425b      	negs	r3, r3
 8007584:	151b      	asrs	r3, r3, #20
 8007586:	2b13      	cmp	r3, #19
 8007588:	f04f 0000 	mov.w	r0, #0
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	dc04      	bgt.n	800759c <__ulp+0x34>
 8007592:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007596:	fa42 f103 	asr.w	r1, r2, r3
 800759a:	e7ef      	b.n	800757c <__ulp+0x14>
 800759c:	3b14      	subs	r3, #20
 800759e:	2b1e      	cmp	r3, #30
 80075a0:	f04f 0201 	mov.w	r2, #1
 80075a4:	bfda      	itte	le
 80075a6:	f1c3 031f 	rsble	r3, r3, #31
 80075aa:	fa02 f303 	lslle.w	r3, r2, r3
 80075ae:	4613      	movgt	r3, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	e7e3      	b.n	800757c <__ulp+0x14>
 80075b4:	7ff00000 	.word	0x7ff00000

080075b8 <__b2d>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	6905      	ldr	r5, [r0, #16]
 80075bc:	f100 0714 	add.w	r7, r0, #20
 80075c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80075c4:	1f2e      	subs	r6, r5, #4
 80075c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80075ca:	4620      	mov	r0, r4
 80075cc:	f7ff fdc5 	bl	800715a <__hi0bits>
 80075d0:	f1c0 0320 	rsb	r3, r0, #32
 80075d4:	280a      	cmp	r0, #10
 80075d6:	600b      	str	r3, [r1, #0]
 80075d8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8007650 <__b2d+0x98>
 80075dc:	dc14      	bgt.n	8007608 <__b2d+0x50>
 80075de:	f1c0 0e0b 	rsb	lr, r0, #11
 80075e2:	fa24 f10e 	lsr.w	r1, r4, lr
 80075e6:	42b7      	cmp	r7, r6
 80075e8:	ea41 030c 	orr.w	r3, r1, ip
 80075ec:	bf34      	ite	cc
 80075ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80075f2:	2100      	movcs	r1, #0
 80075f4:	3015      	adds	r0, #21
 80075f6:	fa04 f000 	lsl.w	r0, r4, r0
 80075fa:	fa21 f10e 	lsr.w	r1, r1, lr
 80075fe:	ea40 0201 	orr.w	r2, r0, r1
 8007602:	ec43 2b10 	vmov	d0, r2, r3
 8007606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007608:	42b7      	cmp	r7, r6
 800760a:	bf3a      	itte	cc
 800760c:	f1a5 0608 	subcc.w	r6, r5, #8
 8007610:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007614:	2100      	movcs	r1, #0
 8007616:	380b      	subs	r0, #11
 8007618:	d015      	beq.n	8007646 <__b2d+0x8e>
 800761a:	4084      	lsls	r4, r0
 800761c:	f1c0 0520 	rsb	r5, r0, #32
 8007620:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007624:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007628:	42be      	cmp	r6, r7
 800762a:	fa21 fc05 	lsr.w	ip, r1, r5
 800762e:	ea44 030c 	orr.w	r3, r4, ip
 8007632:	bf8c      	ite	hi
 8007634:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007638:	2400      	movls	r4, #0
 800763a:	fa01 f000 	lsl.w	r0, r1, r0
 800763e:	40ec      	lsrs	r4, r5
 8007640:	ea40 0204 	orr.w	r2, r0, r4
 8007644:	e7dd      	b.n	8007602 <__b2d+0x4a>
 8007646:	ea44 030c 	orr.w	r3, r4, ip
 800764a:	460a      	mov	r2, r1
 800764c:	e7d9      	b.n	8007602 <__b2d+0x4a>
 800764e:	bf00      	nop
 8007650:	3ff00000 	.word	0x3ff00000

08007654 <__d2b>:
 8007654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007658:	460e      	mov	r6, r1
 800765a:	2101      	movs	r1, #1
 800765c:	ec59 8b10 	vmov	r8, r9, d0
 8007660:	4615      	mov	r5, r2
 8007662:	f7ff fcb6 	bl	8006fd2 <_Balloc>
 8007666:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800766a:	4607      	mov	r7, r0
 800766c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007670:	bb34      	cbnz	r4, 80076c0 <__d2b+0x6c>
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	f1b8 0300 	subs.w	r3, r8, #0
 8007678:	d027      	beq.n	80076ca <__d2b+0x76>
 800767a:	a802      	add	r0, sp, #8
 800767c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007680:	f7ff fd8a 	bl	8007198 <__lo0bits>
 8007684:	9900      	ldr	r1, [sp, #0]
 8007686:	b1f0      	cbz	r0, 80076c6 <__d2b+0x72>
 8007688:	9a01      	ldr	r2, [sp, #4]
 800768a:	f1c0 0320 	rsb	r3, r0, #32
 800768e:	fa02 f303 	lsl.w	r3, r2, r3
 8007692:	430b      	orrs	r3, r1
 8007694:	40c2      	lsrs	r2, r0
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	9201      	str	r2, [sp, #4]
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bf14      	ite	ne
 80076a2:	2102      	movne	r1, #2
 80076a4:	2101      	moveq	r1, #1
 80076a6:	6139      	str	r1, [r7, #16]
 80076a8:	b1c4      	cbz	r4, 80076dc <__d2b+0x88>
 80076aa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80076ae:	4404      	add	r4, r0
 80076b0:	6034      	str	r4, [r6, #0]
 80076b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076b6:	6028      	str	r0, [r5, #0]
 80076b8:	4638      	mov	r0, r7
 80076ba:	b003      	add	sp, #12
 80076bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076c4:	e7d5      	b.n	8007672 <__d2b+0x1e>
 80076c6:	6179      	str	r1, [r7, #20]
 80076c8:	e7e7      	b.n	800769a <__d2b+0x46>
 80076ca:	a801      	add	r0, sp, #4
 80076cc:	f7ff fd64 	bl	8007198 <__lo0bits>
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	2101      	movs	r1, #1
 80076d6:	6139      	str	r1, [r7, #16]
 80076d8:	3020      	adds	r0, #32
 80076da:	e7e5      	b.n	80076a8 <__d2b+0x54>
 80076dc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80076e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076e4:	6030      	str	r0, [r6, #0]
 80076e6:	6918      	ldr	r0, [r3, #16]
 80076e8:	f7ff fd37 	bl	800715a <__hi0bits>
 80076ec:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80076f0:	e7e1      	b.n	80076b6 <__d2b+0x62>

080076f2 <__ratio>:
 80076f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f6:	4688      	mov	r8, r1
 80076f8:	4669      	mov	r1, sp
 80076fa:	4681      	mov	r9, r0
 80076fc:	f7ff ff5c 	bl	80075b8 <__b2d>
 8007700:	a901      	add	r1, sp, #4
 8007702:	4640      	mov	r0, r8
 8007704:	ec57 6b10 	vmov	r6, r7, d0
 8007708:	f7ff ff56 	bl	80075b8 <__b2d>
 800770c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007710:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007714:	eba3 0c02 	sub.w	ip, r3, r2
 8007718:	e9dd 3200 	ldrd	r3, r2, [sp]
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007722:	ec5b ab10 	vmov	sl, fp, d0
 8007726:	2b00      	cmp	r3, #0
 8007728:	bfce      	itee	gt
 800772a:	463a      	movgt	r2, r7
 800772c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007730:	465a      	movle	r2, fp
 8007732:	4659      	mov	r1, fp
 8007734:	463d      	mov	r5, r7
 8007736:	bfd4      	ite	le
 8007738:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800773c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007740:	4630      	mov	r0, r6
 8007742:	ee10 2a10 	vmov	r2, s0
 8007746:	460b      	mov	r3, r1
 8007748:	4629      	mov	r1, r5
 800774a:	f7f9 f87f 	bl	800084c <__aeabi_ddiv>
 800774e:	ec41 0b10 	vmov	d0, r0, r1
 8007752:	b003      	add	sp, #12
 8007754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007758 <__copybits>:
 8007758:	3901      	subs	r1, #1
 800775a:	b510      	push	{r4, lr}
 800775c:	1149      	asrs	r1, r1, #5
 800775e:	6914      	ldr	r4, [r2, #16]
 8007760:	3101      	adds	r1, #1
 8007762:	f102 0314 	add.w	r3, r2, #20
 8007766:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800776a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800776e:	42a3      	cmp	r3, r4
 8007770:	4602      	mov	r2, r0
 8007772:	d303      	bcc.n	800777c <__copybits+0x24>
 8007774:	2300      	movs	r3, #0
 8007776:	428a      	cmp	r2, r1
 8007778:	d305      	bcc.n	8007786 <__copybits+0x2e>
 800777a:	bd10      	pop	{r4, pc}
 800777c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007780:	f840 2b04 	str.w	r2, [r0], #4
 8007784:	e7f3      	b.n	800776e <__copybits+0x16>
 8007786:	f842 3b04 	str.w	r3, [r2], #4
 800778a:	e7f4      	b.n	8007776 <__copybits+0x1e>

0800778c <__any_on>:
 800778c:	f100 0214 	add.w	r2, r0, #20
 8007790:	6900      	ldr	r0, [r0, #16]
 8007792:	114b      	asrs	r3, r1, #5
 8007794:	4298      	cmp	r0, r3
 8007796:	b510      	push	{r4, lr}
 8007798:	db11      	blt.n	80077be <__any_on+0x32>
 800779a:	dd0a      	ble.n	80077b2 <__any_on+0x26>
 800779c:	f011 011f 	ands.w	r1, r1, #31
 80077a0:	d007      	beq.n	80077b2 <__any_on+0x26>
 80077a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077a6:	fa24 f001 	lsr.w	r0, r4, r1
 80077aa:	fa00 f101 	lsl.w	r1, r0, r1
 80077ae:	428c      	cmp	r4, r1
 80077b0:	d10b      	bne.n	80077ca <__any_on+0x3e>
 80077b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d803      	bhi.n	80077c2 <__any_on+0x36>
 80077ba:	2000      	movs	r0, #0
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	4603      	mov	r3, r0
 80077c0:	e7f7      	b.n	80077b2 <__any_on+0x26>
 80077c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077c6:	2900      	cmp	r1, #0
 80077c8:	d0f5      	beq.n	80077b6 <__any_on+0x2a>
 80077ca:	2001      	movs	r0, #1
 80077cc:	e7f6      	b.n	80077bc <__any_on+0x30>
	...

080077d0 <_free_r>:
 80077d0:	b538      	push	{r3, r4, r5, lr}
 80077d2:	4605      	mov	r5, r0
 80077d4:	2900      	cmp	r1, #0
 80077d6:	d045      	beq.n	8007864 <_free_r+0x94>
 80077d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077dc:	1f0c      	subs	r4, r1, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfb8      	it	lt
 80077e2:	18e4      	addlt	r4, r4, r3
 80077e4:	f7ff fbf3 	bl	8006fce <__malloc_lock>
 80077e8:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <_free_r+0x98>)
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	4610      	mov	r0, r2
 80077ee:	b933      	cbnz	r3, 80077fe <_free_r+0x2e>
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	6014      	str	r4, [r2, #0]
 80077f4:	4628      	mov	r0, r5
 80077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fa:	f7ff bbe9 	b.w	8006fd0 <__malloc_unlock>
 80077fe:	42a3      	cmp	r3, r4
 8007800:	d90c      	bls.n	800781c <_free_r+0x4c>
 8007802:	6821      	ldr	r1, [r4, #0]
 8007804:	1862      	adds	r2, r4, r1
 8007806:	4293      	cmp	r3, r2
 8007808:	bf04      	itt	eq
 800780a:	681a      	ldreq	r2, [r3, #0]
 800780c:	685b      	ldreq	r3, [r3, #4]
 800780e:	6063      	str	r3, [r4, #4]
 8007810:	bf04      	itt	eq
 8007812:	1852      	addeq	r2, r2, r1
 8007814:	6022      	streq	r2, [r4, #0]
 8007816:	6004      	str	r4, [r0, #0]
 8007818:	e7ec      	b.n	80077f4 <_free_r+0x24>
 800781a:	4613      	mov	r3, r2
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	b10a      	cbz	r2, 8007824 <_free_r+0x54>
 8007820:	42a2      	cmp	r2, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x4a>
 8007824:	6819      	ldr	r1, [r3, #0]
 8007826:	1858      	adds	r0, r3, r1
 8007828:	42a0      	cmp	r0, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x74>
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	4401      	add	r1, r0
 8007830:	1858      	adds	r0, r3, r1
 8007832:	4282      	cmp	r2, r0
 8007834:	6019      	str	r1, [r3, #0]
 8007836:	d1dd      	bne.n	80077f4 <_free_r+0x24>
 8007838:	6810      	ldr	r0, [r2, #0]
 800783a:	6852      	ldr	r2, [r2, #4]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	4401      	add	r1, r0
 8007840:	6019      	str	r1, [r3, #0]
 8007842:	e7d7      	b.n	80077f4 <_free_r+0x24>
 8007844:	d902      	bls.n	800784c <_free_r+0x7c>
 8007846:	230c      	movs	r3, #12
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	e7d3      	b.n	80077f4 <_free_r+0x24>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	1821      	adds	r1, r4, r0
 8007850:	428a      	cmp	r2, r1
 8007852:	bf04      	itt	eq
 8007854:	6811      	ldreq	r1, [r2, #0]
 8007856:	6852      	ldreq	r2, [r2, #4]
 8007858:	6062      	str	r2, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1809      	addeq	r1, r1, r0
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	605c      	str	r4, [r3, #4]
 8007862:	e7c7      	b.n	80077f4 <_free_r+0x24>
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	20000200 	.word	0x20000200

0800786c <__ssputs_r>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	688e      	ldr	r6, [r1, #8]
 8007872:	429e      	cmp	r6, r3
 8007874:	4682      	mov	sl, r0
 8007876:	460c      	mov	r4, r1
 8007878:	4690      	mov	r8, r2
 800787a:	4699      	mov	r9, r3
 800787c:	d837      	bhi.n	80078ee <__ssputs_r+0x82>
 800787e:	898a      	ldrh	r2, [r1, #12]
 8007880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007884:	d031      	beq.n	80078ea <__ssputs_r+0x7e>
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	6909      	ldr	r1, [r1, #16]
 800788a:	1a6f      	subs	r7, r5, r1
 800788c:	6965      	ldr	r5, [r4, #20]
 800788e:	2302      	movs	r3, #2
 8007890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007894:	fb95 f5f3 	sdiv	r5, r5, r3
 8007898:	f109 0301 	add.w	r3, r9, #1
 800789c:	443b      	add	r3, r7
 800789e:	429d      	cmp	r5, r3
 80078a0:	bf38      	it	cc
 80078a2:	461d      	movcc	r5, r3
 80078a4:	0553      	lsls	r3, r2, #21
 80078a6:	d530      	bpl.n	800790a <__ssputs_r+0x9e>
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7fc fd69 	bl	8004380 <_malloc_r>
 80078ae:	4606      	mov	r6, r0
 80078b0:	b950      	cbnz	r0, 80078c8 <__ssputs_r+0x5c>
 80078b2:	230c      	movs	r3, #12
 80078b4:	f8ca 3000 	str.w	r3, [sl]
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	463a      	mov	r2, r7
 80078ca:	6921      	ldr	r1, [r4, #16]
 80078cc:	f7ff fb74 	bl	8006fb8 <memcpy>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	6126      	str	r6, [r4, #16]
 80078de:	6165      	str	r5, [r4, #20]
 80078e0:	443e      	add	r6, r7
 80078e2:	1bed      	subs	r5, r5, r7
 80078e4:	6026      	str	r6, [r4, #0]
 80078e6:	60a5      	str	r5, [r4, #8]
 80078e8:	464e      	mov	r6, r9
 80078ea:	454e      	cmp	r6, r9
 80078ec:	d900      	bls.n	80078f0 <__ssputs_r+0x84>
 80078ee:	464e      	mov	r6, r9
 80078f0:	4632      	mov	r2, r6
 80078f2:	4641      	mov	r1, r8
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	f001 fa25 	bl	8008d44 <memmove>
 80078fa:	68a3      	ldr	r3, [r4, #8]
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	441e      	add	r6, r3
 8007904:	6026      	str	r6, [r4, #0]
 8007906:	2000      	movs	r0, #0
 8007908:	e7dc      	b.n	80078c4 <__ssputs_r+0x58>
 800790a:	462a      	mov	r2, r5
 800790c:	f001 fa33 	bl	8008d76 <_realloc_r>
 8007910:	4606      	mov	r6, r0
 8007912:	2800      	cmp	r0, #0
 8007914:	d1e2      	bne.n	80078dc <__ssputs_r+0x70>
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	4650      	mov	r0, sl
 800791a:	f7ff ff59 	bl	80077d0 <_free_r>
 800791e:	e7c8      	b.n	80078b2 <__ssputs_r+0x46>

08007920 <_svfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	461d      	mov	r5, r3
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	061f      	lsls	r7, r3, #24
 800792a:	b09d      	sub	sp, #116	; 0x74
 800792c:	4680      	mov	r8, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4616      	mov	r6, r2
 8007932:	d50f      	bpl.n	8007954 <_svfiprintf_r+0x34>
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	b96b      	cbnz	r3, 8007954 <_svfiprintf_r+0x34>
 8007938:	2140      	movs	r1, #64	; 0x40
 800793a:	f7fc fd21 	bl	8004380 <_malloc_r>
 800793e:	6020      	str	r0, [r4, #0]
 8007940:	6120      	str	r0, [r4, #16]
 8007942:	b928      	cbnz	r0, 8007950 <_svfiprintf_r+0x30>
 8007944:	230c      	movs	r3, #12
 8007946:	f8c8 3000 	str.w	r3, [r8]
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	e0c8      	b.n	8007ae2 <_svfiprintf_r+0x1c2>
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	6163      	str	r3, [r4, #20]
 8007954:	2300      	movs	r3, #0
 8007956:	9309      	str	r3, [sp, #36]	; 0x24
 8007958:	2320      	movs	r3, #32
 800795a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795e:	2330      	movs	r3, #48	; 0x30
 8007960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007964:	9503      	str	r5, [sp, #12]
 8007966:	f04f 0b01 	mov.w	fp, #1
 800796a:	4637      	mov	r7, r6
 800796c:	463d      	mov	r5, r7
 800796e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007972:	b10b      	cbz	r3, 8007978 <_svfiprintf_r+0x58>
 8007974:	2b25      	cmp	r3, #37	; 0x25
 8007976:	d13e      	bne.n	80079f6 <_svfiprintf_r+0xd6>
 8007978:	ebb7 0a06 	subs.w	sl, r7, r6
 800797c:	d00b      	beq.n	8007996 <_svfiprintf_r+0x76>
 800797e:	4653      	mov	r3, sl
 8007980:	4632      	mov	r2, r6
 8007982:	4621      	mov	r1, r4
 8007984:	4640      	mov	r0, r8
 8007986:	f7ff ff71 	bl	800786c <__ssputs_r>
 800798a:	3001      	adds	r0, #1
 800798c:	f000 80a4 	beq.w	8007ad8 <_svfiprintf_r+0x1b8>
 8007990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007992:	4453      	add	r3, sl
 8007994:	9309      	str	r3, [sp, #36]	; 0x24
 8007996:	783b      	ldrb	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 809d 	beq.w	8007ad8 <_svfiprintf_r+0x1b8>
 800799e:	2300      	movs	r3, #0
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295
 80079a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b0:	931a      	str	r3, [sp, #104]	; 0x68
 80079b2:	462f      	mov	r7, r5
 80079b4:	2205      	movs	r2, #5
 80079b6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80079ba:	4850      	ldr	r0, [pc, #320]	; (8007afc <_svfiprintf_r+0x1dc>)
 80079bc:	f7f8 fc10 	bl	80001e0 <memchr>
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	b9d0      	cbnz	r0, 80079fa <_svfiprintf_r+0xda>
 80079c4:	06d9      	lsls	r1, r3, #27
 80079c6:	bf44      	itt	mi
 80079c8:	2220      	movmi	r2, #32
 80079ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079ce:	071a      	lsls	r2, r3, #28
 80079d0:	bf44      	itt	mi
 80079d2:	222b      	movmi	r2, #43	; 0x2b
 80079d4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80079d8:	782a      	ldrb	r2, [r5, #0]
 80079da:	2a2a      	cmp	r2, #42	; 0x2a
 80079dc:	d015      	beq.n	8007a0a <_svfiprintf_r+0xea>
 80079de:	9a07      	ldr	r2, [sp, #28]
 80079e0:	462f      	mov	r7, r5
 80079e2:	2000      	movs	r0, #0
 80079e4:	250a      	movs	r5, #10
 80079e6:	4639      	mov	r1, r7
 80079e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079ec:	3b30      	subs	r3, #48	; 0x30
 80079ee:	2b09      	cmp	r3, #9
 80079f0:	d94d      	bls.n	8007a8e <_svfiprintf_r+0x16e>
 80079f2:	b1b8      	cbz	r0, 8007a24 <_svfiprintf_r+0x104>
 80079f4:	e00f      	b.n	8007a16 <_svfiprintf_r+0xf6>
 80079f6:	462f      	mov	r7, r5
 80079f8:	e7b8      	b.n	800796c <_svfiprintf_r+0x4c>
 80079fa:	4a40      	ldr	r2, [pc, #256]	; (8007afc <_svfiprintf_r+0x1dc>)
 80079fc:	1a80      	subs	r0, r0, r2
 80079fe:	fa0b f000 	lsl.w	r0, fp, r0
 8007a02:	4318      	orrs	r0, r3
 8007a04:	9004      	str	r0, [sp, #16]
 8007a06:	463d      	mov	r5, r7
 8007a08:	e7d3      	b.n	80079b2 <_svfiprintf_r+0x92>
 8007a0a:	9a03      	ldr	r2, [sp, #12]
 8007a0c:	1d11      	adds	r1, r2, #4
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	9103      	str	r1, [sp, #12]
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	db01      	blt.n	8007a1a <_svfiprintf_r+0xfa>
 8007a16:	9207      	str	r2, [sp, #28]
 8007a18:	e004      	b.n	8007a24 <_svfiprintf_r+0x104>
 8007a1a:	4252      	negs	r2, r2
 8007a1c:	f043 0302 	orr.w	r3, r3, #2
 8007a20:	9207      	str	r2, [sp, #28]
 8007a22:	9304      	str	r3, [sp, #16]
 8007a24:	783b      	ldrb	r3, [r7, #0]
 8007a26:	2b2e      	cmp	r3, #46	; 0x2e
 8007a28:	d10c      	bne.n	8007a44 <_svfiprintf_r+0x124>
 8007a2a:	787b      	ldrb	r3, [r7, #1]
 8007a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2e:	d133      	bne.n	8007a98 <_svfiprintf_r+0x178>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	9203      	str	r2, [sp, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bfb8      	it	lt
 8007a3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a40:	3702      	adds	r7, #2
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	4d2e      	ldr	r5, [pc, #184]	; (8007b00 <_svfiprintf_r+0x1e0>)
 8007a46:	7839      	ldrb	r1, [r7, #0]
 8007a48:	2203      	movs	r2, #3
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f7f8 fbc8 	bl	80001e0 <memchr>
 8007a50:	b138      	cbz	r0, 8007a62 <_svfiprintf_r+0x142>
 8007a52:	2340      	movs	r3, #64	; 0x40
 8007a54:	1b40      	subs	r0, r0, r5
 8007a56:	fa03 f000 	lsl.w	r0, r3, r0
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	4303      	orrs	r3, r0
 8007a5e:	3701      	adds	r7, #1
 8007a60:	9304      	str	r3, [sp, #16]
 8007a62:	7839      	ldrb	r1, [r7, #0]
 8007a64:	4827      	ldr	r0, [pc, #156]	; (8007b04 <_svfiprintf_r+0x1e4>)
 8007a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a6a:	2206      	movs	r2, #6
 8007a6c:	1c7e      	adds	r6, r7, #1
 8007a6e:	f7f8 fbb7 	bl	80001e0 <memchr>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d038      	beq.n	8007ae8 <_svfiprintf_r+0x1c8>
 8007a76:	4b24      	ldr	r3, [pc, #144]	; (8007b08 <_svfiprintf_r+0x1e8>)
 8007a78:	bb13      	cbnz	r3, 8007ac0 <_svfiprintf_r+0x1a0>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	f023 0307 	bic.w	r3, r3, #7
 8007a82:	3308      	adds	r3, #8
 8007a84:	9303      	str	r3, [sp, #12]
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	444b      	add	r3, r9
 8007a8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a8c:	e76d      	b.n	800796a <_svfiprintf_r+0x4a>
 8007a8e:	fb05 3202 	mla	r2, r5, r2, r3
 8007a92:	2001      	movs	r0, #1
 8007a94:	460f      	mov	r7, r1
 8007a96:	e7a6      	b.n	80079e6 <_svfiprintf_r+0xc6>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	3701      	adds	r7, #1
 8007a9c:	9305      	str	r3, [sp, #20]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	250a      	movs	r5, #10
 8007aa2:	4638      	mov	r0, r7
 8007aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa8:	3a30      	subs	r2, #48	; 0x30
 8007aaa:	2a09      	cmp	r2, #9
 8007aac:	d903      	bls.n	8007ab6 <_svfiprintf_r+0x196>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0c8      	beq.n	8007a44 <_svfiprintf_r+0x124>
 8007ab2:	9105      	str	r1, [sp, #20]
 8007ab4:	e7c6      	b.n	8007a44 <_svfiprintf_r+0x124>
 8007ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8007aba:	2301      	movs	r3, #1
 8007abc:	4607      	mov	r7, r0
 8007abe:	e7f0      	b.n	8007aa2 <_svfiprintf_r+0x182>
 8007ac0:	ab03      	add	r3, sp, #12
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <_svfiprintf_r+0x1ec>)
 8007ac8:	a904      	add	r1, sp, #16
 8007aca:	4640      	mov	r0, r8
 8007acc:	f7fc fd46 	bl	800455c <_printf_float>
 8007ad0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ad4:	4681      	mov	r9, r0
 8007ad6:	d1d6      	bne.n	8007a86 <_svfiprintf_r+0x166>
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	065b      	lsls	r3, r3, #25
 8007adc:	f53f af35 	bmi.w	800794a <_svfiprintf_r+0x2a>
 8007ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ae2:	b01d      	add	sp, #116	; 0x74
 8007ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae8:	ab03      	add	r3, sp, #12
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	4622      	mov	r2, r4
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <_svfiprintf_r+0x1ec>)
 8007af0:	a904      	add	r1, sp, #16
 8007af2:	4640      	mov	r0, r8
 8007af4:	f7fc ffe8 	bl	8004ac8 <_printf_i>
 8007af8:	e7ea      	b.n	8007ad0 <_svfiprintf_r+0x1b0>
 8007afa:	bf00      	nop
 8007afc:	080094bc 	.word	0x080094bc
 8007b00:	080094c2 	.word	0x080094c2
 8007b04:	080094c6 	.word	0x080094c6
 8007b08:	0800455d 	.word	0x0800455d
 8007b0c:	0800786d 	.word	0x0800786d

08007b10 <__sfputc_r>:
 8007b10:	6893      	ldr	r3, [r2, #8]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	b410      	push	{r4}
 8007b18:	6093      	str	r3, [r2, #8]
 8007b1a:	da08      	bge.n	8007b2e <__sfputc_r+0x1e>
 8007b1c:	6994      	ldr	r4, [r2, #24]
 8007b1e:	42a3      	cmp	r3, r4
 8007b20:	db01      	blt.n	8007b26 <__sfputc_r+0x16>
 8007b22:	290a      	cmp	r1, #10
 8007b24:	d103      	bne.n	8007b2e <__sfputc_r+0x1e>
 8007b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b2a:	f000 bee3 	b.w	80088f4 <__swbuf_r>
 8007b2e:	6813      	ldr	r3, [r2, #0]
 8007b30:	1c58      	adds	r0, r3, #1
 8007b32:	6010      	str	r0, [r2, #0]
 8007b34:	7019      	strb	r1, [r3, #0]
 8007b36:	4608      	mov	r0, r1
 8007b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <__sfputs_r>:
 8007b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b40:	4606      	mov	r6, r0
 8007b42:	460f      	mov	r7, r1
 8007b44:	4614      	mov	r4, r2
 8007b46:	18d5      	adds	r5, r2, r3
 8007b48:	42ac      	cmp	r4, r5
 8007b4a:	d101      	bne.n	8007b50 <__sfputs_r+0x12>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	e007      	b.n	8007b60 <__sfputs_r+0x22>
 8007b50:	463a      	mov	r2, r7
 8007b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b56:	4630      	mov	r0, r6
 8007b58:	f7ff ffda 	bl	8007b10 <__sfputc_r>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d1f3      	bne.n	8007b48 <__sfputs_r+0xa>
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b64 <_vfiprintf_r>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	460c      	mov	r4, r1
 8007b6a:	b09d      	sub	sp, #116	; 0x74
 8007b6c:	4617      	mov	r7, r2
 8007b6e:	461d      	mov	r5, r3
 8007b70:	4606      	mov	r6, r0
 8007b72:	b118      	cbz	r0, 8007b7c <_vfiprintf_r+0x18>
 8007b74:	6983      	ldr	r3, [r0, #24]
 8007b76:	b90b      	cbnz	r3, 8007b7c <_vfiprintf_r+0x18>
 8007b78:	f7fe fe16 	bl	80067a8 <__sinit>
 8007b7c:	4b7c      	ldr	r3, [pc, #496]	; (8007d70 <_vfiprintf_r+0x20c>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d158      	bne.n	8007c34 <_vfiprintf_r+0xd0>
 8007b82:	6874      	ldr	r4, [r6, #4]
 8007b84:	89a3      	ldrh	r3, [r4, #12]
 8007b86:	0718      	lsls	r0, r3, #28
 8007b88:	d55e      	bpl.n	8007c48 <_vfiprintf_r+0xe4>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d05b      	beq.n	8007c48 <_vfiprintf_r+0xe4>
 8007b90:	2300      	movs	r3, #0
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	2320      	movs	r3, #32
 8007b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b9a:	2330      	movs	r3, #48	; 0x30
 8007b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba0:	9503      	str	r5, [sp, #12]
 8007ba2:	f04f 0b01 	mov.w	fp, #1
 8007ba6:	46b8      	mov	r8, r7
 8007ba8:	4645      	mov	r5, r8
 8007baa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bae:	b10b      	cbz	r3, 8007bb4 <_vfiprintf_r+0x50>
 8007bb0:	2b25      	cmp	r3, #37	; 0x25
 8007bb2:	d154      	bne.n	8007c5e <_vfiprintf_r+0xfa>
 8007bb4:	ebb8 0a07 	subs.w	sl, r8, r7
 8007bb8:	d00b      	beq.n	8007bd2 <_vfiprintf_r+0x6e>
 8007bba:	4653      	mov	r3, sl
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff ffbc 	bl	8007b3e <__sfputs_r>
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f000 80c2 	beq.w	8007d50 <_vfiprintf_r+0x1ec>
 8007bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bce:	4453      	add	r3, sl
 8007bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bd2:	f898 3000 	ldrb.w	r3, [r8]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 80ba 	beq.w	8007d50 <_vfiprintf_r+0x1ec>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f04f 32ff 	mov.w	r2, #4294967295
 8007be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be6:	9304      	str	r3, [sp, #16]
 8007be8:	9307      	str	r3, [sp, #28]
 8007bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bee:	931a      	str	r3, [sp, #104]	; 0x68
 8007bf0:	46a8      	mov	r8, r5
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007bf8:	485e      	ldr	r0, [pc, #376]	; (8007d74 <_vfiprintf_r+0x210>)
 8007bfa:	f7f8 faf1 	bl	80001e0 <memchr>
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	bb78      	cbnz	r0, 8007c62 <_vfiprintf_r+0xfe>
 8007c02:	06d9      	lsls	r1, r3, #27
 8007c04:	bf44      	itt	mi
 8007c06:	2220      	movmi	r2, #32
 8007c08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c0c:	071a      	lsls	r2, r3, #28
 8007c0e:	bf44      	itt	mi
 8007c10:	222b      	movmi	r2, #43	; 0x2b
 8007c12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c16:	782a      	ldrb	r2, [r5, #0]
 8007c18:	2a2a      	cmp	r2, #42	; 0x2a
 8007c1a:	d02a      	beq.n	8007c72 <_vfiprintf_r+0x10e>
 8007c1c:	9a07      	ldr	r2, [sp, #28]
 8007c1e:	46a8      	mov	r8, r5
 8007c20:	2000      	movs	r0, #0
 8007c22:	250a      	movs	r5, #10
 8007c24:	4641      	mov	r1, r8
 8007c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c2a:	3b30      	subs	r3, #48	; 0x30
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d969      	bls.n	8007d04 <_vfiprintf_r+0x1a0>
 8007c30:	b360      	cbz	r0, 8007c8c <_vfiprintf_r+0x128>
 8007c32:	e024      	b.n	8007c7e <_vfiprintf_r+0x11a>
 8007c34:	4b50      	ldr	r3, [pc, #320]	; (8007d78 <_vfiprintf_r+0x214>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <_vfiprintf_r+0xda>
 8007c3a:	68b4      	ldr	r4, [r6, #8]
 8007c3c:	e7a2      	b.n	8007b84 <_vfiprintf_r+0x20>
 8007c3e:	4b4f      	ldr	r3, [pc, #316]	; (8007d7c <_vfiprintf_r+0x218>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68f4      	ldreq	r4, [r6, #12]
 8007c46:	e79d      	b.n	8007b84 <_vfiprintf_r+0x20>
 8007c48:	4621      	mov	r1, r4
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f000 fec4 	bl	80089d8 <__swsetup_r>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d09d      	beq.n	8007b90 <_vfiprintf_r+0x2c>
 8007c54:	f04f 30ff 	mov.w	r0, #4294967295
 8007c58:	b01d      	add	sp, #116	; 0x74
 8007c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5e:	46a8      	mov	r8, r5
 8007c60:	e7a2      	b.n	8007ba8 <_vfiprintf_r+0x44>
 8007c62:	4a44      	ldr	r2, [pc, #272]	; (8007d74 <_vfiprintf_r+0x210>)
 8007c64:	1a80      	subs	r0, r0, r2
 8007c66:	fa0b f000 	lsl.w	r0, fp, r0
 8007c6a:	4318      	orrs	r0, r3
 8007c6c:	9004      	str	r0, [sp, #16]
 8007c6e:	4645      	mov	r5, r8
 8007c70:	e7be      	b.n	8007bf0 <_vfiprintf_r+0x8c>
 8007c72:	9a03      	ldr	r2, [sp, #12]
 8007c74:	1d11      	adds	r1, r2, #4
 8007c76:	6812      	ldr	r2, [r2, #0]
 8007c78:	9103      	str	r1, [sp, #12]
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	db01      	blt.n	8007c82 <_vfiprintf_r+0x11e>
 8007c7e:	9207      	str	r2, [sp, #28]
 8007c80:	e004      	b.n	8007c8c <_vfiprintf_r+0x128>
 8007c82:	4252      	negs	r2, r2
 8007c84:	f043 0302 	orr.w	r3, r3, #2
 8007c88:	9207      	str	r2, [sp, #28]
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	f898 3000 	ldrb.w	r3, [r8]
 8007c90:	2b2e      	cmp	r3, #46	; 0x2e
 8007c92:	d10e      	bne.n	8007cb2 <_vfiprintf_r+0x14e>
 8007c94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c98:	2b2a      	cmp	r3, #42	; 0x2a
 8007c9a:	d138      	bne.n	8007d0e <_vfiprintf_r+0x1aa>
 8007c9c:	9b03      	ldr	r3, [sp, #12]
 8007c9e:	1d1a      	adds	r2, r3, #4
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	9203      	str	r2, [sp, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bfb8      	it	lt
 8007ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cac:	f108 0802 	add.w	r8, r8, #2
 8007cb0:	9305      	str	r3, [sp, #20]
 8007cb2:	4d33      	ldr	r5, [pc, #204]	; (8007d80 <_vfiprintf_r+0x21c>)
 8007cb4:	f898 1000 	ldrb.w	r1, [r8]
 8007cb8:	2203      	movs	r2, #3
 8007cba:	4628      	mov	r0, r5
 8007cbc:	f7f8 fa90 	bl	80001e0 <memchr>
 8007cc0:	b140      	cbz	r0, 8007cd4 <_vfiprintf_r+0x170>
 8007cc2:	2340      	movs	r3, #64	; 0x40
 8007cc4:	1b40      	subs	r0, r0, r5
 8007cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cca:	9b04      	ldr	r3, [sp, #16]
 8007ccc:	4303      	orrs	r3, r0
 8007cce:	f108 0801 	add.w	r8, r8, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	f898 1000 	ldrb.w	r1, [r8]
 8007cd8:	482a      	ldr	r0, [pc, #168]	; (8007d84 <_vfiprintf_r+0x220>)
 8007cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cde:	2206      	movs	r2, #6
 8007ce0:	f108 0701 	add.w	r7, r8, #1
 8007ce4:	f7f8 fa7c 	bl	80001e0 <memchr>
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d037      	beq.n	8007d5c <_vfiprintf_r+0x1f8>
 8007cec:	4b26      	ldr	r3, [pc, #152]	; (8007d88 <_vfiprintf_r+0x224>)
 8007cee:	bb1b      	cbnz	r3, 8007d38 <_vfiprintf_r+0x1d4>
 8007cf0:	9b03      	ldr	r3, [sp, #12]
 8007cf2:	3307      	adds	r3, #7
 8007cf4:	f023 0307 	bic.w	r3, r3, #7
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	9303      	str	r3, [sp, #12]
 8007cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfe:	444b      	add	r3, r9
 8007d00:	9309      	str	r3, [sp, #36]	; 0x24
 8007d02:	e750      	b.n	8007ba6 <_vfiprintf_r+0x42>
 8007d04:	fb05 3202 	mla	r2, r5, r2, r3
 8007d08:	2001      	movs	r0, #1
 8007d0a:	4688      	mov	r8, r1
 8007d0c:	e78a      	b.n	8007c24 <_vfiprintf_r+0xc0>
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f108 0801 	add.w	r8, r8, #1
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	4619      	mov	r1, r3
 8007d18:	250a      	movs	r5, #10
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d20:	3a30      	subs	r2, #48	; 0x30
 8007d22:	2a09      	cmp	r2, #9
 8007d24:	d903      	bls.n	8007d2e <_vfiprintf_r+0x1ca>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d0c3      	beq.n	8007cb2 <_vfiprintf_r+0x14e>
 8007d2a:	9105      	str	r1, [sp, #20]
 8007d2c:	e7c1      	b.n	8007cb2 <_vfiprintf_r+0x14e>
 8007d2e:	fb05 2101 	mla	r1, r5, r1, r2
 8007d32:	2301      	movs	r3, #1
 8007d34:	4680      	mov	r8, r0
 8007d36:	e7f0      	b.n	8007d1a <_vfiprintf_r+0x1b6>
 8007d38:	ab03      	add	r3, sp, #12
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	4622      	mov	r2, r4
 8007d3e:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <_vfiprintf_r+0x228>)
 8007d40:	a904      	add	r1, sp, #16
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7fc fc0a 	bl	800455c <_printf_float>
 8007d48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d4c:	4681      	mov	r9, r0
 8007d4e:	d1d5      	bne.n	8007cfc <_vfiprintf_r+0x198>
 8007d50:	89a3      	ldrh	r3, [r4, #12]
 8007d52:	065b      	lsls	r3, r3, #25
 8007d54:	f53f af7e 	bmi.w	8007c54 <_vfiprintf_r+0xf0>
 8007d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d5a:	e77d      	b.n	8007c58 <_vfiprintf_r+0xf4>
 8007d5c:	ab03      	add	r3, sp, #12
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4622      	mov	r2, r4
 8007d62:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <_vfiprintf_r+0x228>)
 8007d64:	a904      	add	r1, sp, #16
 8007d66:	4630      	mov	r0, r6
 8007d68:	f7fc feae 	bl	8004ac8 <_printf_i>
 8007d6c:	e7ec      	b.n	8007d48 <_vfiprintf_r+0x1e4>
 8007d6e:	bf00      	nop
 8007d70:	08009370 	.word	0x08009370
 8007d74:	080094bc 	.word	0x080094bc
 8007d78:	08009390 	.word	0x08009390
 8007d7c:	08009350 	.word	0x08009350
 8007d80:	080094c2 	.word	0x080094c2
 8007d84:	080094c6 	.word	0x080094c6
 8007d88:	0800455d 	.word	0x0800455d
 8007d8c:	08007b3f 	.word	0x08007b3f

08007d90 <__svfiscanf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8007d98:	460c      	mov	r4, r1
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	9144      	str	r1, [sp, #272]	; 0x110
 8007d9e:	9145      	str	r1, [sp, #276]	; 0x114
 8007da0:	499f      	ldr	r1, [pc, #636]	; (8008020 <__svfiscanf_r+0x290>)
 8007da2:	91a0      	str	r1, [sp, #640]	; 0x280
 8007da4:	f10d 0804 	add.w	r8, sp, #4
 8007da8:	499e      	ldr	r1, [pc, #632]	; (8008024 <__svfiscanf_r+0x294>)
 8007daa:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008028 <__svfiscanf_r+0x298>
 8007dae:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007db2:	4606      	mov	r6, r0
 8007db4:	4692      	mov	sl, r2
 8007db6:	91a1      	str	r1, [sp, #644]	; 0x284
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	270a      	movs	r7, #10
 8007dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 812a 	beq.w	800801a <__svfiscanf_r+0x28a>
 8007dc6:	4655      	mov	r5, sl
 8007dc8:	f7ff f8be 	bl	8006f48 <__locale_ctype_ptr>
 8007dcc:	f815 bb01 	ldrb.w	fp, [r5], #1
 8007dd0:	4458      	add	r0, fp
 8007dd2:	7843      	ldrb	r3, [r0, #1]
 8007dd4:	f013 0308 	ands.w	r3, r3, #8
 8007dd8:	d01c      	beq.n	8007e14 <__svfiscanf_r+0x84>
 8007dda:	6863      	ldr	r3, [r4, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	dd12      	ble.n	8007e06 <__svfiscanf_r+0x76>
 8007de0:	f7ff f8b2 	bl	8006f48 <__locale_ctype_ptr>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	4410      	add	r0, r2
 8007dea:	7842      	ldrb	r2, [r0, #1]
 8007dec:	0712      	lsls	r2, r2, #28
 8007dee:	d401      	bmi.n	8007df4 <__svfiscanf_r+0x64>
 8007df0:	46aa      	mov	sl, r5
 8007df2:	e7e3      	b.n	8007dbc <__svfiscanf_r+0x2c>
 8007df4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007df6:	3201      	adds	r2, #1
 8007df8:	9245      	str	r2, [sp, #276]	; 0x114
 8007dfa:	6862      	ldr	r2, [r4, #4]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	6062      	str	r2, [r4, #4]
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	e7e9      	b.n	8007dda <__svfiscanf_r+0x4a>
 8007e06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	4798      	blx	r3
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	d0e6      	beq.n	8007de0 <__svfiscanf_r+0x50>
 8007e12:	e7ed      	b.n	8007df0 <__svfiscanf_r+0x60>
 8007e14:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8007e18:	f040 8082 	bne.w	8007f20 <__svfiscanf_r+0x190>
 8007e1c:	9343      	str	r3, [sp, #268]	; 0x10c
 8007e1e:	9341      	str	r3, [sp, #260]	; 0x104
 8007e20:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007e24:	2b2a      	cmp	r3, #42	; 0x2a
 8007e26:	d103      	bne.n	8007e30 <__svfiscanf_r+0xa0>
 8007e28:	2310      	movs	r3, #16
 8007e2a:	9341      	str	r3, [sp, #260]	; 0x104
 8007e2c:	f10a 0502 	add.w	r5, sl, #2
 8007e30:	46aa      	mov	sl, r5
 8007e32:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007e36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007e3a:	2a09      	cmp	r2, #9
 8007e3c:	d922      	bls.n	8007e84 <__svfiscanf_r+0xf4>
 8007e3e:	2203      	movs	r2, #3
 8007e40:	4879      	ldr	r0, [pc, #484]	; (8008028 <__svfiscanf_r+0x298>)
 8007e42:	f7f8 f9cd 	bl	80001e0 <memchr>
 8007e46:	b138      	cbz	r0, 8007e58 <__svfiscanf_r+0xc8>
 8007e48:	eba0 0309 	sub.w	r3, r0, r9
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	4098      	lsls	r0, r3
 8007e50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007e52:	4318      	orrs	r0, r3
 8007e54:	9041      	str	r0, [sp, #260]	; 0x104
 8007e56:	46aa      	mov	sl, r5
 8007e58:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5c:	2b67      	cmp	r3, #103	; 0x67
 8007e5e:	f10a 0501 	add.w	r5, sl, #1
 8007e62:	d82b      	bhi.n	8007ebc <__svfiscanf_r+0x12c>
 8007e64:	2b65      	cmp	r3, #101	; 0x65
 8007e66:	f080 809f 	bcs.w	8007fa8 <__svfiscanf_r+0x218>
 8007e6a:	2b47      	cmp	r3, #71	; 0x47
 8007e6c:	d810      	bhi.n	8007e90 <__svfiscanf_r+0x100>
 8007e6e:	2b45      	cmp	r3, #69	; 0x45
 8007e70:	f080 809a 	bcs.w	8007fa8 <__svfiscanf_r+0x218>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d06c      	beq.n	8007f52 <__svfiscanf_r+0x1c2>
 8007e78:	2b25      	cmp	r3, #37	; 0x25
 8007e7a:	d051      	beq.n	8007f20 <__svfiscanf_r+0x190>
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007e80:	9742      	str	r7, [sp, #264]	; 0x108
 8007e82:	e027      	b.n	8007ed4 <__svfiscanf_r+0x144>
 8007e84:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007e86:	fb07 1303 	mla	r3, r7, r3, r1
 8007e8a:	3b30      	subs	r3, #48	; 0x30
 8007e8c:	9343      	str	r3, [sp, #268]	; 0x10c
 8007e8e:	e7cf      	b.n	8007e30 <__svfiscanf_r+0xa0>
 8007e90:	2b5b      	cmp	r3, #91	; 0x5b
 8007e92:	d06a      	beq.n	8007f6a <__svfiscanf_r+0x1da>
 8007e94:	d80c      	bhi.n	8007eb0 <__svfiscanf_r+0x120>
 8007e96:	2b58      	cmp	r3, #88	; 0x58
 8007e98:	d1f0      	bne.n	8007e7c <__svfiscanf_r+0xec>
 8007e9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ea0:	9241      	str	r2, [sp, #260]	; 0x104
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	9242      	str	r2, [sp, #264]	; 0x108
 8007ea6:	2b6e      	cmp	r3, #110	; 0x6e
 8007ea8:	bf8c      	ite	hi
 8007eaa:	2304      	movhi	r3, #4
 8007eac:	2303      	movls	r3, #3
 8007eae:	e010      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007eb0:	2b63      	cmp	r3, #99	; 0x63
 8007eb2:	d065      	beq.n	8007f80 <__svfiscanf_r+0x1f0>
 8007eb4:	2b64      	cmp	r3, #100	; 0x64
 8007eb6:	d1e1      	bne.n	8007e7c <__svfiscanf_r+0xec>
 8007eb8:	9742      	str	r7, [sp, #264]	; 0x108
 8007eba:	e7f4      	b.n	8007ea6 <__svfiscanf_r+0x116>
 8007ebc:	2b70      	cmp	r3, #112	; 0x70
 8007ebe:	d04b      	beq.n	8007f58 <__svfiscanf_r+0x1c8>
 8007ec0:	d826      	bhi.n	8007f10 <__svfiscanf_r+0x180>
 8007ec2:	2b6e      	cmp	r3, #110	; 0x6e
 8007ec4:	d062      	beq.n	8007f8c <__svfiscanf_r+0x1fc>
 8007ec6:	d84c      	bhi.n	8007f62 <__svfiscanf_r+0x1d2>
 8007ec8:	2b69      	cmp	r3, #105	; 0x69
 8007eca:	d1d7      	bne.n	8007e7c <__svfiscanf_r+0xec>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9342      	str	r3, [sp, #264]	; 0x108
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ed4:	6863      	ldr	r3, [r4, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd68      	ble.n	8007fac <__svfiscanf_r+0x21c>
 8007eda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007edc:	0659      	lsls	r1, r3, #25
 8007ede:	d407      	bmi.n	8007ef0 <__svfiscanf_r+0x160>
 8007ee0:	f7ff f832 	bl	8006f48 <__locale_ctype_ptr>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	781a      	ldrb	r2, [r3, #0]
 8007ee8:	4410      	add	r0, r2
 8007eea:	7842      	ldrb	r2, [r0, #1]
 8007eec:	0712      	lsls	r2, r2, #28
 8007eee:	d464      	bmi.n	8007fba <__svfiscanf_r+0x22a>
 8007ef0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dc73      	bgt.n	8007fde <__svfiscanf_r+0x24e>
 8007ef6:	466b      	mov	r3, sp
 8007ef8:	4622      	mov	r2, r4
 8007efa:	a941      	add	r1, sp, #260	; 0x104
 8007efc:	4630      	mov	r0, r6
 8007efe:	f000 f8bf 	bl	8008080 <_scanf_chars>
 8007f02:	2801      	cmp	r0, #1
 8007f04:	f000 8089 	beq.w	800801a <__svfiscanf_r+0x28a>
 8007f08:	2802      	cmp	r0, #2
 8007f0a:	f47f af71 	bne.w	8007df0 <__svfiscanf_r+0x60>
 8007f0e:	e01d      	b.n	8007f4c <__svfiscanf_r+0x1bc>
 8007f10:	2b75      	cmp	r3, #117	; 0x75
 8007f12:	d0d1      	beq.n	8007eb8 <__svfiscanf_r+0x128>
 8007f14:	2b78      	cmp	r3, #120	; 0x78
 8007f16:	d0c0      	beq.n	8007e9a <__svfiscanf_r+0x10a>
 8007f18:	2b73      	cmp	r3, #115	; 0x73
 8007f1a:	d1af      	bne.n	8007e7c <__svfiscanf_r+0xec>
 8007f1c:	2302      	movs	r3, #2
 8007f1e:	e7d8      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007f20:	6863      	ldr	r3, [r4, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd0c      	ble.n	8007f40 <__svfiscanf_r+0x1b0>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	455a      	cmp	r2, fp
 8007f2c:	d175      	bne.n	800801a <__svfiscanf_r+0x28a>
 8007f2e:	3301      	adds	r3, #1
 8007f30:	6862      	ldr	r2, [r4, #4]
 8007f32:	6023      	str	r3, [r4, #0]
 8007f34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f36:	3a01      	subs	r2, #1
 8007f38:	3301      	adds	r3, #1
 8007f3a:	6062      	str	r2, [r4, #4]
 8007f3c:	9345      	str	r3, [sp, #276]	; 0x114
 8007f3e:	e757      	b.n	8007df0 <__svfiscanf_r+0x60>
 8007f40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f42:	4621      	mov	r1, r4
 8007f44:	4630      	mov	r0, r6
 8007f46:	4798      	blx	r3
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d0ec      	beq.n	8007f26 <__svfiscanf_r+0x196>
 8007f4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d159      	bne.n	8008006 <__svfiscanf_r+0x276>
 8007f52:	f04f 30ff 	mov.w	r0, #4294967295
 8007f56:	e05c      	b.n	8008012 <__svfiscanf_r+0x282>
 8007f58:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007f5a:	f042 0220 	orr.w	r2, r2, #32
 8007f5e:	9241      	str	r2, [sp, #260]	; 0x104
 8007f60:	e79b      	b.n	8007e9a <__svfiscanf_r+0x10a>
 8007f62:	2308      	movs	r3, #8
 8007f64:	9342      	str	r3, [sp, #264]	; 0x108
 8007f66:	2304      	movs	r3, #4
 8007f68:	e7b3      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	f000 fa75 	bl	800845c <__sccl>
 8007f72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f78:	9341      	str	r3, [sp, #260]	; 0x104
 8007f7a:	4605      	mov	r5, r0
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e7a8      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007f80:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f86:	9341      	str	r3, [sp, #260]	; 0x104
 8007f88:	2300      	movs	r3, #0
 8007f8a:	e7a2      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007f8c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007f8e:	06c3      	lsls	r3, r0, #27
 8007f90:	f53f af2e 	bmi.w	8007df0 <__svfiscanf_r+0x60>
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f98:	1d19      	adds	r1, r3, #4
 8007f9a:	9100      	str	r1, [sp, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	07c0      	lsls	r0, r0, #31
 8007fa0:	bf4c      	ite	mi
 8007fa2:	801a      	strhmi	r2, [r3, #0]
 8007fa4:	601a      	strpl	r2, [r3, #0]
 8007fa6:	e723      	b.n	8007df0 <__svfiscanf_r+0x60>
 8007fa8:	2305      	movs	r3, #5
 8007faa:	e792      	b.n	8007ed2 <__svfiscanf_r+0x142>
 8007fac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	4798      	blx	r3
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d090      	beq.n	8007eda <__svfiscanf_r+0x14a>
 8007fb8:	e7c8      	b.n	8007f4c <__svfiscanf_r+0x1bc>
 8007fba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007fbc:	3201      	adds	r2, #1
 8007fbe:	9245      	str	r2, [sp, #276]	; 0x114
 8007fc0:	6862      	ldr	r2, [r4, #4]
 8007fc2:	3a01      	subs	r2, #1
 8007fc4:	2a00      	cmp	r2, #0
 8007fc6:	6062      	str	r2, [r4, #4]
 8007fc8:	dd02      	ble.n	8007fd0 <__svfiscanf_r+0x240>
 8007fca:	3301      	adds	r3, #1
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	e787      	b.n	8007ee0 <__svfiscanf_r+0x150>
 8007fd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	4798      	blx	r3
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d081      	beq.n	8007ee0 <__svfiscanf_r+0x150>
 8007fdc:	e7b6      	b.n	8007f4c <__svfiscanf_r+0x1bc>
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	dc06      	bgt.n	8007ff0 <__svfiscanf_r+0x260>
 8007fe2:	466b      	mov	r3, sp
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	a941      	add	r1, sp, #260	; 0x104
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f000 f8ad 	bl	8008148 <_scanf_i>
 8007fee:	e788      	b.n	8007f02 <__svfiscanf_r+0x172>
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	; (800802c <__svfiscanf_r+0x29c>)
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f43f aefc 	beq.w	8007df0 <__svfiscanf_r+0x60>
 8007ff8:	466b      	mov	r3, sp
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	a941      	add	r1, sp, #260	; 0x104
 8007ffe:	4630      	mov	r0, r6
 8008000:	f3af 8000 	nop.w
 8008004:	e77d      	b.n	8007f02 <__svfiscanf_r+0x172>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f013 0f40 	tst.w	r3, #64	; 0x40
 800800c:	bf18      	it	ne
 800800e:	f04f 30ff 	movne.w	r0, #4294967295
 8008012:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800801a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800801c:	e7f9      	b.n	8008012 <__svfiscanf_r+0x282>
 800801e:	bf00      	nop
 8008020:	08008811 	.word	0x08008811
 8008024:	08008345 	.word	0x08008345
 8008028:	080094c2 	.word	0x080094c2
 800802c:	00000000 	.word	0x00000000

08008030 <_vfiscanf_r>:
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	460c      	mov	r4, r1
 8008036:	4616      	mov	r6, r2
 8008038:	461f      	mov	r7, r3
 800803a:	4605      	mov	r5, r0
 800803c:	b118      	cbz	r0, 8008046 <_vfiscanf_r+0x16>
 800803e:	6983      	ldr	r3, [r0, #24]
 8008040:	b90b      	cbnz	r3, 8008046 <_vfiscanf_r+0x16>
 8008042:	f7fe fbb1 	bl	80067a8 <__sinit>
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <_vfiscanf_r+0x44>)
 8008048:	429c      	cmp	r4, r3
 800804a:	d108      	bne.n	800805e <_vfiscanf_r+0x2e>
 800804c:	686c      	ldr	r4, [r5, #4]
 800804e:	463b      	mov	r3, r7
 8008050:	4632      	mov	r2, r6
 8008052:	4621      	mov	r1, r4
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800805a:	f7ff be99 	b.w	8007d90 <__svfiscanf_r>
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <_vfiscanf_r+0x48>)
 8008060:	429c      	cmp	r4, r3
 8008062:	d101      	bne.n	8008068 <_vfiscanf_r+0x38>
 8008064:	68ac      	ldr	r4, [r5, #8]
 8008066:	e7f2      	b.n	800804e <_vfiscanf_r+0x1e>
 8008068:	4b04      	ldr	r3, [pc, #16]	; (800807c <_vfiscanf_r+0x4c>)
 800806a:	429c      	cmp	r4, r3
 800806c:	bf08      	it	eq
 800806e:	68ec      	ldreq	r4, [r5, #12]
 8008070:	e7ed      	b.n	800804e <_vfiscanf_r+0x1e>
 8008072:	bf00      	nop
 8008074:	08009370 	.word	0x08009370
 8008078:	08009390 	.word	0x08009390
 800807c:	08009350 	.word	0x08009350

08008080 <_scanf_chars>:
 8008080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008084:	4615      	mov	r5, r2
 8008086:	688a      	ldr	r2, [r1, #8]
 8008088:	4680      	mov	r8, r0
 800808a:	460c      	mov	r4, r1
 800808c:	b932      	cbnz	r2, 800809c <_scanf_chars+0x1c>
 800808e:	698a      	ldr	r2, [r1, #24]
 8008090:	2a00      	cmp	r2, #0
 8008092:	bf14      	ite	ne
 8008094:	f04f 32ff 	movne.w	r2, #4294967295
 8008098:	2201      	moveq	r2, #1
 800809a:	608a      	str	r2, [r1, #8]
 800809c:	6822      	ldr	r2, [r4, #0]
 800809e:	06d1      	lsls	r1, r2, #27
 80080a0:	bf5f      	itttt	pl
 80080a2:	681a      	ldrpl	r2, [r3, #0]
 80080a4:	1d11      	addpl	r1, r2, #4
 80080a6:	6019      	strpl	r1, [r3, #0]
 80080a8:	6817      	ldrpl	r7, [r2, #0]
 80080aa:	2600      	movs	r6, #0
 80080ac:	69a3      	ldr	r3, [r4, #24]
 80080ae:	b1db      	cbz	r3, 80080e8 <_scanf_chars+0x68>
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d107      	bne.n	80080c4 <_scanf_chars+0x44>
 80080b4:	682b      	ldr	r3, [r5, #0]
 80080b6:	6962      	ldr	r2, [r4, #20]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	5cd3      	ldrb	r3, [r2, r3]
 80080bc:	b9a3      	cbnz	r3, 80080e8 <_scanf_chars+0x68>
 80080be:	2e00      	cmp	r6, #0
 80080c0:	d132      	bne.n	8008128 <_scanf_chars+0xa8>
 80080c2:	e006      	b.n	80080d2 <_scanf_chars+0x52>
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d007      	beq.n	80080d8 <_scanf_chars+0x58>
 80080c8:	2e00      	cmp	r6, #0
 80080ca:	d12d      	bne.n	8008128 <_scanf_chars+0xa8>
 80080cc:	69a3      	ldr	r3, [r4, #24]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d12a      	bne.n	8008128 <_scanf_chars+0xa8>
 80080d2:	2001      	movs	r0, #1
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	f7fe ff36 	bl	8006f48 <__locale_ctype_ptr>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	4418      	add	r0, r3
 80080e2:	7843      	ldrb	r3, [r0, #1]
 80080e4:	071b      	lsls	r3, r3, #28
 80080e6:	d4ef      	bmi.n	80080c8 <_scanf_chars+0x48>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	06da      	lsls	r2, r3, #27
 80080ec:	bf5e      	ittt	pl
 80080ee:	682b      	ldrpl	r3, [r5, #0]
 80080f0:	781b      	ldrbpl	r3, [r3, #0]
 80080f2:	703b      	strbpl	r3, [r7, #0]
 80080f4:	682a      	ldr	r2, [r5, #0]
 80080f6:	686b      	ldr	r3, [r5, #4]
 80080f8:	f102 0201 	add.w	r2, r2, #1
 80080fc:	602a      	str	r2, [r5, #0]
 80080fe:	68a2      	ldr	r2, [r4, #8]
 8008100:	f103 33ff 	add.w	r3, r3, #4294967295
 8008104:	f102 32ff 	add.w	r2, r2, #4294967295
 8008108:	606b      	str	r3, [r5, #4]
 800810a:	f106 0601 	add.w	r6, r6, #1
 800810e:	bf58      	it	pl
 8008110:	3701      	addpl	r7, #1
 8008112:	60a2      	str	r2, [r4, #8]
 8008114:	b142      	cbz	r2, 8008128 <_scanf_chars+0xa8>
 8008116:	2b00      	cmp	r3, #0
 8008118:	dcc8      	bgt.n	80080ac <_scanf_chars+0x2c>
 800811a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800811e:	4629      	mov	r1, r5
 8008120:	4640      	mov	r0, r8
 8008122:	4798      	blx	r3
 8008124:	2800      	cmp	r0, #0
 8008126:	d0c1      	beq.n	80080ac <_scanf_chars+0x2c>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	f013 0310 	ands.w	r3, r3, #16
 800812e:	d105      	bne.n	800813c <_scanf_chars+0xbc>
 8008130:	68e2      	ldr	r2, [r4, #12]
 8008132:	3201      	adds	r2, #1
 8008134:	60e2      	str	r2, [r4, #12]
 8008136:	69a2      	ldr	r2, [r4, #24]
 8008138:	b102      	cbz	r2, 800813c <_scanf_chars+0xbc>
 800813a:	703b      	strb	r3, [r7, #0]
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	441e      	add	r6, r3
 8008140:	6126      	str	r6, [r4, #16]
 8008142:	2000      	movs	r0, #0
 8008144:	e7c6      	b.n	80080d4 <_scanf_chars+0x54>
	...

08008148 <_scanf_i>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	469a      	mov	sl, r3
 800814e:	4b74      	ldr	r3, [pc, #464]	; (8008320 <_scanf_i+0x1d8>)
 8008150:	460c      	mov	r4, r1
 8008152:	4683      	mov	fp, r0
 8008154:	4616      	mov	r6, r2
 8008156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800815a:	b087      	sub	sp, #28
 800815c:	ab03      	add	r3, sp, #12
 800815e:	68a7      	ldr	r7, [r4, #8]
 8008160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008164:	4b6f      	ldr	r3, [pc, #444]	; (8008324 <_scanf_i+0x1dc>)
 8008166:	69a1      	ldr	r1, [r4, #24]
 8008168:	4a6f      	ldr	r2, [pc, #444]	; (8008328 <_scanf_i+0x1e0>)
 800816a:	2903      	cmp	r1, #3
 800816c:	bf08      	it	eq
 800816e:	461a      	moveq	r2, r3
 8008170:	1e7b      	subs	r3, r7, #1
 8008172:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008176:	bf84      	itt	hi
 8008178:	f240 135d 	movwhi	r3, #349	; 0x15d
 800817c:	60a3      	strhi	r3, [r4, #8]
 800817e:	6823      	ldr	r3, [r4, #0]
 8008180:	9200      	str	r2, [sp, #0]
 8008182:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008186:	bf88      	it	hi
 8008188:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800818c:	f104 091c 	add.w	r9, r4, #28
 8008190:	6023      	str	r3, [r4, #0]
 8008192:	bf8c      	ite	hi
 8008194:	197f      	addhi	r7, r7, r5
 8008196:	2700      	movls	r7, #0
 8008198:	464b      	mov	r3, r9
 800819a:	f04f 0800 	mov.w	r8, #0
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	6831      	ldr	r1, [r6, #0]
 80081a2:	ab03      	add	r3, sp, #12
 80081a4:	2202      	movs	r2, #2
 80081a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80081aa:	7809      	ldrb	r1, [r1, #0]
 80081ac:	f7f8 f818 	bl	80001e0 <memchr>
 80081b0:	9b01      	ldr	r3, [sp, #4]
 80081b2:	b330      	cbz	r0, 8008202 <_scanf_i+0xba>
 80081b4:	f1b8 0f01 	cmp.w	r8, #1
 80081b8:	d15a      	bne.n	8008270 <_scanf_i+0x128>
 80081ba:	6862      	ldr	r2, [r4, #4]
 80081bc:	b92a      	cbnz	r2, 80081ca <_scanf_i+0x82>
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	2108      	movs	r1, #8
 80081c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c6:	6061      	str	r1, [r4, #4]
 80081c8:	6022      	str	r2, [r4, #0]
 80081ca:	6822      	ldr	r2, [r4, #0]
 80081cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80081d0:	6022      	str	r2, [r4, #0]
 80081d2:	68a2      	ldr	r2, [r4, #8]
 80081d4:	1e51      	subs	r1, r2, #1
 80081d6:	60a1      	str	r1, [r4, #8]
 80081d8:	b19a      	cbz	r2, 8008202 <_scanf_i+0xba>
 80081da:	6832      	ldr	r2, [r6, #0]
 80081dc:	1c51      	adds	r1, r2, #1
 80081de:	6031      	str	r1, [r6, #0]
 80081e0:	7812      	ldrb	r2, [r2, #0]
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	1c5d      	adds	r5, r3, #1
 80081e6:	6873      	ldr	r3, [r6, #4]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	6073      	str	r3, [r6, #4]
 80081ee:	dc07      	bgt.n	8008200 <_scanf_i+0xb8>
 80081f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081f4:	4631      	mov	r1, r6
 80081f6:	4658      	mov	r0, fp
 80081f8:	4798      	blx	r3
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f040 8086 	bne.w	800830c <_scanf_i+0x1c4>
 8008200:	462b      	mov	r3, r5
 8008202:	f108 0801 	add.w	r8, r8, #1
 8008206:	f1b8 0f03 	cmp.w	r8, #3
 800820a:	d1c8      	bne.n	800819e <_scanf_i+0x56>
 800820c:	6862      	ldr	r2, [r4, #4]
 800820e:	b90a      	cbnz	r2, 8008214 <_scanf_i+0xcc>
 8008210:	220a      	movs	r2, #10
 8008212:	6062      	str	r2, [r4, #4]
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	4945      	ldr	r1, [pc, #276]	; (800832c <_scanf_i+0x1e4>)
 8008218:	6960      	ldr	r0, [r4, #20]
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	1a89      	subs	r1, r1, r2
 800821e:	f000 f91d 	bl	800845c <__sccl>
 8008222:	9b01      	ldr	r3, [sp, #4]
 8008224:	f04f 0800 	mov.w	r8, #0
 8008228:	461d      	mov	r5, r3
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d03a      	beq.n	80082a8 <_scanf_i+0x160>
 8008232:	6831      	ldr	r1, [r6, #0]
 8008234:	6960      	ldr	r0, [r4, #20]
 8008236:	f891 c000 	ldrb.w	ip, [r1]
 800823a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800823e:	2800      	cmp	r0, #0
 8008240:	d032      	beq.n	80082a8 <_scanf_i+0x160>
 8008242:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008246:	d121      	bne.n	800828c <_scanf_i+0x144>
 8008248:	0510      	lsls	r0, r2, #20
 800824a:	d51f      	bpl.n	800828c <_scanf_i+0x144>
 800824c:	f108 0801 	add.w	r8, r8, #1
 8008250:	b117      	cbz	r7, 8008258 <_scanf_i+0x110>
 8008252:	3301      	adds	r3, #1
 8008254:	3f01      	subs	r7, #1
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	6873      	ldr	r3, [r6, #4]
 800825a:	3b01      	subs	r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	6073      	str	r3, [r6, #4]
 8008260:	dd1b      	ble.n	800829a <_scanf_i+0x152>
 8008262:	6833      	ldr	r3, [r6, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	6033      	str	r3, [r6, #0]
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	3b01      	subs	r3, #1
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	e7dc      	b.n	800822a <_scanf_i+0xe2>
 8008270:	f1b8 0f02 	cmp.w	r8, #2
 8008274:	d1ad      	bne.n	80081d2 <_scanf_i+0x8a>
 8008276:	6822      	ldr	r2, [r4, #0]
 8008278:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800827c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008280:	d1bf      	bne.n	8008202 <_scanf_i+0xba>
 8008282:	2110      	movs	r1, #16
 8008284:	6061      	str	r1, [r4, #4]
 8008286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800828a:	e7a1      	b.n	80081d0 <_scanf_i+0x88>
 800828c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008290:	6022      	str	r2, [r4, #0]
 8008292:	780b      	ldrb	r3, [r1, #0]
 8008294:	702b      	strb	r3, [r5, #0]
 8008296:	3501      	adds	r5, #1
 8008298:	e7de      	b.n	8008258 <_scanf_i+0x110>
 800829a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800829e:	4631      	mov	r1, r6
 80082a0:	4658      	mov	r0, fp
 80082a2:	4798      	blx	r3
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d0df      	beq.n	8008268 <_scanf_i+0x120>
 80082a8:	6823      	ldr	r3, [r4, #0]
 80082aa:	05d9      	lsls	r1, r3, #23
 80082ac:	d50c      	bpl.n	80082c8 <_scanf_i+0x180>
 80082ae:	454d      	cmp	r5, r9
 80082b0:	d908      	bls.n	80082c4 <_scanf_i+0x17c>
 80082b2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80082b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ba:	4632      	mov	r2, r6
 80082bc:	4658      	mov	r0, fp
 80082be:	4798      	blx	r3
 80082c0:	1e6f      	subs	r7, r5, #1
 80082c2:	463d      	mov	r5, r7
 80082c4:	454d      	cmp	r5, r9
 80082c6:	d029      	beq.n	800831c <_scanf_i+0x1d4>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	f012 0210 	ands.w	r2, r2, #16
 80082ce:	d113      	bne.n	80082f8 <_scanf_i+0x1b0>
 80082d0:	702a      	strb	r2, [r5, #0]
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	9e00      	ldr	r6, [sp, #0]
 80082d6:	4649      	mov	r1, r9
 80082d8:	4658      	mov	r0, fp
 80082da:	47b0      	blx	r6
 80082dc:	f8da 3000 	ldr.w	r3, [sl]
 80082e0:	6821      	ldr	r1, [r4, #0]
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	f8ca 2000 	str.w	r2, [sl]
 80082e8:	f011 0f20 	tst.w	r1, #32
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	d010      	beq.n	8008312 <_scanf_i+0x1ca>
 80082f0:	6018      	str	r0, [r3, #0]
 80082f2:	68e3      	ldr	r3, [r4, #12]
 80082f4:	3301      	adds	r3, #1
 80082f6:	60e3      	str	r3, [r4, #12]
 80082f8:	eba5 0509 	sub.w	r5, r5, r9
 80082fc:	44a8      	add	r8, r5
 80082fe:	6925      	ldr	r5, [r4, #16]
 8008300:	4445      	add	r5, r8
 8008302:	6125      	str	r5, [r4, #16]
 8008304:	2000      	movs	r0, #0
 8008306:	b007      	add	sp, #28
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	f04f 0800 	mov.w	r8, #0
 8008310:	e7ca      	b.n	80082a8 <_scanf_i+0x160>
 8008312:	07ca      	lsls	r2, r1, #31
 8008314:	bf4c      	ite	mi
 8008316:	8018      	strhmi	r0, [r3, #0]
 8008318:	6018      	strpl	r0, [r3, #0]
 800831a:	e7ea      	b.n	80082f2 <_scanf_i+0x1aa>
 800831c:	2001      	movs	r0, #1
 800831e:	e7f2      	b.n	8008306 <_scanf_i+0x1be>
 8008320:	08009260 	.word	0x08009260
 8008324:	08008661 	.word	0x08008661
 8008328:	08008779 	.word	0x08008779
 800832c:	080094dd 	.word	0x080094dd

08008330 <lflush>:
 8008330:	8983      	ldrh	r3, [r0, #12]
 8008332:	f003 0309 	and.w	r3, r3, #9
 8008336:	2b09      	cmp	r3, #9
 8008338:	d101      	bne.n	800833e <lflush+0xe>
 800833a:	f000 bc7b 	b.w	8008c34 <fflush>
 800833e:	2000      	movs	r0, #0
 8008340:	4770      	bx	lr
	...

08008344 <__srefill_r>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	460c      	mov	r4, r1
 8008348:	4605      	mov	r5, r0
 800834a:	b118      	cbz	r0, 8008354 <__srefill_r+0x10>
 800834c:	6983      	ldr	r3, [r0, #24]
 800834e:	b90b      	cbnz	r3, 8008354 <__srefill_r+0x10>
 8008350:	f7fe fa2a 	bl	80067a8 <__sinit>
 8008354:	4b3c      	ldr	r3, [pc, #240]	; (8008448 <__srefill_r+0x104>)
 8008356:	429c      	cmp	r4, r3
 8008358:	d10a      	bne.n	8008370 <__srefill_r+0x2c>
 800835a:	686c      	ldr	r4, [r5, #4]
 800835c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008360:	2300      	movs	r3, #0
 8008362:	6063      	str	r3, [r4, #4]
 8008364:	b293      	uxth	r3, r2
 8008366:	069e      	lsls	r6, r3, #26
 8008368:	d50c      	bpl.n	8008384 <__srefill_r+0x40>
 800836a:	f04f 30ff 	mov.w	r0, #4294967295
 800836e:	e067      	b.n	8008440 <__srefill_r+0xfc>
 8008370:	4b36      	ldr	r3, [pc, #216]	; (800844c <__srefill_r+0x108>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d101      	bne.n	800837a <__srefill_r+0x36>
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	e7f0      	b.n	800835c <__srefill_r+0x18>
 800837a:	4b35      	ldr	r3, [pc, #212]	; (8008450 <__srefill_r+0x10c>)
 800837c:	429c      	cmp	r4, r3
 800837e:	bf08      	it	eq
 8008380:	68ec      	ldreq	r4, [r5, #12]
 8008382:	e7eb      	b.n	800835c <__srefill_r+0x18>
 8008384:	0758      	lsls	r0, r3, #29
 8008386:	d449      	bmi.n	800841c <__srefill_r+0xd8>
 8008388:	06d9      	lsls	r1, r3, #27
 800838a:	d405      	bmi.n	8008398 <__srefill_r+0x54>
 800838c:	2309      	movs	r3, #9
 800838e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	81a2      	strh	r2, [r4, #12]
 8008396:	e7e8      	b.n	800836a <__srefill_r+0x26>
 8008398:	071a      	lsls	r2, r3, #28
 800839a:	d50b      	bpl.n	80083b4 <__srefill_r+0x70>
 800839c:	4621      	mov	r1, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	f000 fc1e 	bl	8008be0 <_fflush_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d1e0      	bne.n	800836a <__srefill_r+0x26>
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	60a0      	str	r0, [r4, #8]
 80083ac:	f023 0308 	bic.w	r3, r3, #8
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	61a0      	str	r0, [r4, #24]
 80083b4:	89a3      	ldrh	r3, [r4, #12]
 80083b6:	f043 0304 	orr.w	r3, r3, #4
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b91b      	cbnz	r3, 80083c8 <__srefill_r+0x84>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 fc7e 	bl	8008cc4 <__smakebuf_r>
 80083c8:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80083cc:	b2be      	uxth	r6, r7
 80083ce:	07b3      	lsls	r3, r6, #30
 80083d0:	d00f      	beq.n	80083f2 <__srefill_r+0xae>
 80083d2:	2301      	movs	r3, #1
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	4b1f      	ldr	r3, [pc, #124]	; (8008454 <__srefill_r+0x110>)
 80083d8:	491f      	ldr	r1, [pc, #124]	; (8008458 <__srefill_r+0x114>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	f006 0609 	and.w	r6, r6, #9
 80083e0:	f7fe fa4e 	bl	8006880 <_fwalk>
 80083e4:	2e09      	cmp	r6, #9
 80083e6:	81a7      	strh	r7, [r4, #12]
 80083e8:	d103      	bne.n	80083f2 <__srefill_r+0xae>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 fb71 	bl	8008ad4 <__sflush_r>
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	6022      	str	r2, [r4, #0]
 80083f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083f8:	6963      	ldr	r3, [r4, #20]
 80083fa:	6a21      	ldr	r1, [r4, #32]
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b0      	blx	r6
 8008400:	2800      	cmp	r0, #0
 8008402:	6060      	str	r0, [r4, #4]
 8008404:	dc1d      	bgt.n	8008442 <__srefill_r+0xfe>
 8008406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800840a:	bf17      	itett	ne
 800840c:	2200      	movne	r2, #0
 800840e:	f043 0320 	orreq.w	r3, r3, #32
 8008412:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008416:	6062      	strne	r2, [r4, #4]
 8008418:	81a3      	strh	r3, [r4, #12]
 800841a:	e7a6      	b.n	800836a <__srefill_r+0x26>
 800841c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800841e:	2900      	cmp	r1, #0
 8008420:	d0cc      	beq.n	80083bc <__srefill_r+0x78>
 8008422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008426:	4299      	cmp	r1, r3
 8008428:	d002      	beq.n	8008430 <__srefill_r+0xec>
 800842a:	4628      	mov	r0, r5
 800842c:	f7ff f9d0 	bl	80077d0 <_free_r>
 8008430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008432:	6063      	str	r3, [r4, #4]
 8008434:	2000      	movs	r0, #0
 8008436:	6360      	str	r0, [r4, #52]	; 0x34
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0bf      	beq.n	80083bc <__srefill_r+0x78>
 800843c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008442:	2000      	movs	r0, #0
 8008444:	e7fc      	b.n	8008440 <__srefill_r+0xfc>
 8008446:	bf00      	nop
 8008448:	08009370 	.word	0x08009370
 800844c:	08009390 	.word	0x08009390
 8008450:	08009350 	.word	0x08009350
 8008454:	080092b4 	.word	0x080092b4
 8008458:	08008331 	.word	0x08008331

0800845c <__sccl>:
 800845c:	b570      	push	{r4, r5, r6, lr}
 800845e:	780b      	ldrb	r3, [r1, #0]
 8008460:	2b5e      	cmp	r3, #94	; 0x5e
 8008462:	bf13      	iteet	ne
 8008464:	1c4a      	addne	r2, r1, #1
 8008466:	1c8a      	addeq	r2, r1, #2
 8008468:	784b      	ldrbeq	r3, [r1, #1]
 800846a:	2100      	movne	r1, #0
 800846c:	bf08      	it	eq
 800846e:	2101      	moveq	r1, #1
 8008470:	1e44      	subs	r4, r0, #1
 8008472:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8008476:	f804 1f01 	strb.w	r1, [r4, #1]!
 800847a:	42ac      	cmp	r4, r5
 800847c:	d1fb      	bne.n	8008476 <__sccl+0x1a>
 800847e:	b913      	cbnz	r3, 8008486 <__sccl+0x2a>
 8008480:	3a01      	subs	r2, #1
 8008482:	4610      	mov	r0, r2
 8008484:	bd70      	pop	{r4, r5, r6, pc}
 8008486:	f081 0401 	eor.w	r4, r1, #1
 800848a:	54c4      	strb	r4, [r0, r3]
 800848c:	1c51      	adds	r1, r2, #1
 800848e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8008492:	2d2d      	cmp	r5, #45	; 0x2d
 8008494:	f101 36ff 	add.w	r6, r1, #4294967295
 8008498:	460a      	mov	r2, r1
 800849a:	d006      	beq.n	80084aa <__sccl+0x4e>
 800849c:	2d5d      	cmp	r5, #93	; 0x5d
 800849e:	d0f0      	beq.n	8008482 <__sccl+0x26>
 80084a0:	b90d      	cbnz	r5, 80084a6 <__sccl+0x4a>
 80084a2:	4632      	mov	r2, r6
 80084a4:	e7ed      	b.n	8008482 <__sccl+0x26>
 80084a6:	462b      	mov	r3, r5
 80084a8:	e7ef      	b.n	800848a <__sccl+0x2e>
 80084aa:	780e      	ldrb	r6, [r1, #0]
 80084ac:	2e5d      	cmp	r6, #93	; 0x5d
 80084ae:	d0fa      	beq.n	80084a6 <__sccl+0x4a>
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	dcf8      	bgt.n	80084a6 <__sccl+0x4a>
 80084b4:	3301      	adds	r3, #1
 80084b6:	429e      	cmp	r6, r3
 80084b8:	54c4      	strb	r4, [r0, r3]
 80084ba:	dcfb      	bgt.n	80084b4 <__sccl+0x58>
 80084bc:	3102      	adds	r1, #2
 80084be:	e7e6      	b.n	800848e <__sccl+0x32>

080084c0 <__sread>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	f000 fc7c 	bl	8008dc4 <_read_r>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	bfab      	itete	ge
 80084d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80084d2:	89a3      	ldrhlt	r3, [r4, #12]
 80084d4:	181b      	addge	r3, r3, r0
 80084d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80084da:	bfac      	ite	ge
 80084dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80084de:	81a3      	strhlt	r3, [r4, #12]
 80084e0:	bd10      	pop	{r4, pc}

080084e2 <__swrite>:
 80084e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084e6:	461f      	mov	r7, r3
 80084e8:	898b      	ldrh	r3, [r1, #12]
 80084ea:	05db      	lsls	r3, r3, #23
 80084ec:	4605      	mov	r5, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	4616      	mov	r6, r2
 80084f2:	d505      	bpl.n	8008500 <__swrite+0x1e>
 80084f4:	2302      	movs	r3, #2
 80084f6:	2200      	movs	r2, #0
 80084f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fc:	f000 fbac 	bl	8008c58 <_lseek_r>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	4632      	mov	r2, r6
 800850e:	463b      	mov	r3, r7
 8008510:	4628      	mov	r0, r5
 8008512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008516:	f000 ba4d 	b.w	80089b4 <_write_r>

0800851a <__sseek>:
 800851a:	b510      	push	{r4, lr}
 800851c:	460c      	mov	r4, r1
 800851e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008522:	f000 fb99 	bl	8008c58 <_lseek_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	89a3      	ldrh	r3, [r4, #12]
 800852a:	bf15      	itete	ne
 800852c:	6560      	strne	r0, [r4, #84]	; 0x54
 800852e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008536:	81a3      	strheq	r3, [r4, #12]
 8008538:	bf18      	it	ne
 800853a:	81a3      	strhne	r3, [r4, #12]
 800853c:	bd10      	pop	{r4, pc}

0800853e <__sclose>:
 800853e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008542:	f000 bab7 	b.w	8008ab4 <_close_r>

08008546 <strncmp>:
 8008546:	b510      	push	{r4, lr}
 8008548:	b16a      	cbz	r2, 8008566 <strncmp+0x20>
 800854a:	3901      	subs	r1, #1
 800854c:	1884      	adds	r4, r0, r2
 800854e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008552:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008556:	4293      	cmp	r3, r2
 8008558:	d103      	bne.n	8008562 <strncmp+0x1c>
 800855a:	42a0      	cmp	r0, r4
 800855c:	d001      	beq.n	8008562 <strncmp+0x1c>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1f5      	bne.n	800854e <strncmp+0x8>
 8008562:	1a98      	subs	r0, r3, r2
 8008564:	bd10      	pop	{r4, pc}
 8008566:	4610      	mov	r0, r2
 8008568:	e7fc      	b.n	8008564 <strncmp+0x1e>

0800856a <_strtol_l.isra.0>:
 800856a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800856e:	4680      	mov	r8, r0
 8008570:	4689      	mov	r9, r1
 8008572:	4692      	mov	sl, r2
 8008574:	461e      	mov	r6, r3
 8008576:	460f      	mov	r7, r1
 8008578:	463d      	mov	r5, r7
 800857a:	9808      	ldr	r0, [sp, #32]
 800857c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008580:	f7fe fcde 	bl	8006f40 <__locale_ctype_ptr_l>
 8008584:	4420      	add	r0, r4
 8008586:	7843      	ldrb	r3, [r0, #1]
 8008588:	f013 0308 	ands.w	r3, r3, #8
 800858c:	d132      	bne.n	80085f4 <_strtol_l.isra.0+0x8a>
 800858e:	2c2d      	cmp	r4, #45	; 0x2d
 8008590:	d132      	bne.n	80085f8 <_strtol_l.isra.0+0x8e>
 8008592:	787c      	ldrb	r4, [r7, #1]
 8008594:	1cbd      	adds	r5, r7, #2
 8008596:	2201      	movs	r2, #1
 8008598:	2e00      	cmp	r6, #0
 800859a:	d05d      	beq.n	8008658 <_strtol_l.isra.0+0xee>
 800859c:	2e10      	cmp	r6, #16
 800859e:	d109      	bne.n	80085b4 <_strtol_l.isra.0+0x4a>
 80085a0:	2c30      	cmp	r4, #48	; 0x30
 80085a2:	d107      	bne.n	80085b4 <_strtol_l.isra.0+0x4a>
 80085a4:	782b      	ldrb	r3, [r5, #0]
 80085a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80085aa:	2b58      	cmp	r3, #88	; 0x58
 80085ac:	d14f      	bne.n	800864e <_strtol_l.isra.0+0xe4>
 80085ae:	786c      	ldrb	r4, [r5, #1]
 80085b0:	2610      	movs	r6, #16
 80085b2:	3502      	adds	r5, #2
 80085b4:	2a00      	cmp	r2, #0
 80085b6:	bf14      	ite	ne
 80085b8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80085bc:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80085c0:	2700      	movs	r7, #0
 80085c2:	fbb1 fcf6 	udiv	ip, r1, r6
 80085c6:	4638      	mov	r0, r7
 80085c8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80085cc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d817      	bhi.n	8008604 <_strtol_l.isra.0+0x9a>
 80085d4:	461c      	mov	r4, r3
 80085d6:	42a6      	cmp	r6, r4
 80085d8:	dd23      	ble.n	8008622 <_strtol_l.isra.0+0xb8>
 80085da:	1c7b      	adds	r3, r7, #1
 80085dc:	d007      	beq.n	80085ee <_strtol_l.isra.0+0x84>
 80085de:	4584      	cmp	ip, r0
 80085e0:	d31c      	bcc.n	800861c <_strtol_l.isra.0+0xb2>
 80085e2:	d101      	bne.n	80085e8 <_strtol_l.isra.0+0x7e>
 80085e4:	45a6      	cmp	lr, r4
 80085e6:	db19      	blt.n	800861c <_strtol_l.isra.0+0xb2>
 80085e8:	fb00 4006 	mla	r0, r0, r6, r4
 80085ec:	2701      	movs	r7, #1
 80085ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085f2:	e7eb      	b.n	80085cc <_strtol_l.isra.0+0x62>
 80085f4:	462f      	mov	r7, r5
 80085f6:	e7bf      	b.n	8008578 <_strtol_l.isra.0+0xe>
 80085f8:	2c2b      	cmp	r4, #43	; 0x2b
 80085fa:	bf04      	itt	eq
 80085fc:	1cbd      	addeq	r5, r7, #2
 80085fe:	787c      	ldrbeq	r4, [r7, #1]
 8008600:	461a      	mov	r2, r3
 8008602:	e7c9      	b.n	8008598 <_strtol_l.isra.0+0x2e>
 8008604:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008608:	2b19      	cmp	r3, #25
 800860a:	d801      	bhi.n	8008610 <_strtol_l.isra.0+0xa6>
 800860c:	3c37      	subs	r4, #55	; 0x37
 800860e:	e7e2      	b.n	80085d6 <_strtol_l.isra.0+0x6c>
 8008610:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008614:	2b19      	cmp	r3, #25
 8008616:	d804      	bhi.n	8008622 <_strtol_l.isra.0+0xb8>
 8008618:	3c57      	subs	r4, #87	; 0x57
 800861a:	e7dc      	b.n	80085d6 <_strtol_l.isra.0+0x6c>
 800861c:	f04f 37ff 	mov.w	r7, #4294967295
 8008620:	e7e5      	b.n	80085ee <_strtol_l.isra.0+0x84>
 8008622:	1c7b      	adds	r3, r7, #1
 8008624:	d108      	bne.n	8008638 <_strtol_l.isra.0+0xce>
 8008626:	2322      	movs	r3, #34	; 0x22
 8008628:	f8c8 3000 	str.w	r3, [r8]
 800862c:	4608      	mov	r0, r1
 800862e:	f1ba 0f00 	cmp.w	sl, #0
 8008632:	d107      	bne.n	8008644 <_strtol_l.isra.0+0xda>
 8008634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008638:	b102      	cbz	r2, 800863c <_strtol_l.isra.0+0xd2>
 800863a:	4240      	negs	r0, r0
 800863c:	f1ba 0f00 	cmp.w	sl, #0
 8008640:	d0f8      	beq.n	8008634 <_strtol_l.isra.0+0xca>
 8008642:	b10f      	cbz	r7, 8008648 <_strtol_l.isra.0+0xde>
 8008644:	f105 39ff 	add.w	r9, r5, #4294967295
 8008648:	f8ca 9000 	str.w	r9, [sl]
 800864c:	e7f2      	b.n	8008634 <_strtol_l.isra.0+0xca>
 800864e:	2430      	movs	r4, #48	; 0x30
 8008650:	2e00      	cmp	r6, #0
 8008652:	d1af      	bne.n	80085b4 <_strtol_l.isra.0+0x4a>
 8008654:	2608      	movs	r6, #8
 8008656:	e7ad      	b.n	80085b4 <_strtol_l.isra.0+0x4a>
 8008658:	2c30      	cmp	r4, #48	; 0x30
 800865a:	d0a3      	beq.n	80085a4 <_strtol_l.isra.0+0x3a>
 800865c:	260a      	movs	r6, #10
 800865e:	e7a9      	b.n	80085b4 <_strtol_l.isra.0+0x4a>

08008660 <_strtol_r>:
 8008660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008662:	4c06      	ldr	r4, [pc, #24]	; (800867c <_strtol_r+0x1c>)
 8008664:	4d06      	ldr	r5, [pc, #24]	; (8008680 <_strtol_r+0x20>)
 8008666:	6824      	ldr	r4, [r4, #0]
 8008668:	6a24      	ldr	r4, [r4, #32]
 800866a:	2c00      	cmp	r4, #0
 800866c:	bf08      	it	eq
 800866e:	462c      	moveq	r4, r5
 8008670:	9400      	str	r4, [sp, #0]
 8008672:	f7ff ff7a 	bl	800856a <_strtol_l.isra.0>
 8008676:	b003      	add	sp, #12
 8008678:	bd30      	pop	{r4, r5, pc}
 800867a:	bf00      	nop
 800867c:	2000000c 	.word	0x2000000c
 8008680:	20000070 	.word	0x20000070

08008684 <_strtoul_l.isra.0>:
 8008684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	4680      	mov	r8, r0
 800868a:	4689      	mov	r9, r1
 800868c:	4692      	mov	sl, r2
 800868e:	461e      	mov	r6, r3
 8008690:	460f      	mov	r7, r1
 8008692:	463d      	mov	r5, r7
 8008694:	9808      	ldr	r0, [sp, #32]
 8008696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800869a:	f7fe fc51 	bl	8006f40 <__locale_ctype_ptr_l>
 800869e:	4420      	add	r0, r4
 80086a0:	7843      	ldrb	r3, [r0, #1]
 80086a2:	f013 0308 	ands.w	r3, r3, #8
 80086a6:	d130      	bne.n	800870a <_strtoul_l.isra.0+0x86>
 80086a8:	2c2d      	cmp	r4, #45	; 0x2d
 80086aa:	d130      	bne.n	800870e <_strtoul_l.isra.0+0x8a>
 80086ac:	787c      	ldrb	r4, [r7, #1]
 80086ae:	1cbd      	adds	r5, r7, #2
 80086b0:	2101      	movs	r1, #1
 80086b2:	2e00      	cmp	r6, #0
 80086b4:	d05c      	beq.n	8008770 <_strtoul_l.isra.0+0xec>
 80086b6:	2e10      	cmp	r6, #16
 80086b8:	d109      	bne.n	80086ce <_strtoul_l.isra.0+0x4a>
 80086ba:	2c30      	cmp	r4, #48	; 0x30
 80086bc:	d107      	bne.n	80086ce <_strtoul_l.isra.0+0x4a>
 80086be:	782b      	ldrb	r3, [r5, #0]
 80086c0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80086c4:	2b58      	cmp	r3, #88	; 0x58
 80086c6:	d14e      	bne.n	8008766 <_strtoul_l.isra.0+0xe2>
 80086c8:	786c      	ldrb	r4, [r5, #1]
 80086ca:	2610      	movs	r6, #16
 80086cc:	3502      	adds	r5, #2
 80086ce:	f04f 32ff 	mov.w	r2, #4294967295
 80086d2:	2300      	movs	r3, #0
 80086d4:	fbb2 f2f6 	udiv	r2, r2, r6
 80086d8:	fb06 fc02 	mul.w	ip, r6, r2
 80086dc:	ea6f 0c0c 	mvn.w	ip, ip
 80086e0:	4618      	mov	r0, r3
 80086e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80086e6:	2f09      	cmp	r7, #9
 80086e8:	d817      	bhi.n	800871a <_strtoul_l.isra.0+0x96>
 80086ea:	463c      	mov	r4, r7
 80086ec:	42a6      	cmp	r6, r4
 80086ee:	dd23      	ble.n	8008738 <_strtoul_l.isra.0+0xb4>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	db1e      	blt.n	8008732 <_strtoul_l.isra.0+0xae>
 80086f4:	4282      	cmp	r2, r0
 80086f6:	d31c      	bcc.n	8008732 <_strtoul_l.isra.0+0xae>
 80086f8:	d101      	bne.n	80086fe <_strtoul_l.isra.0+0x7a>
 80086fa:	45a4      	cmp	ip, r4
 80086fc:	db19      	blt.n	8008732 <_strtoul_l.isra.0+0xae>
 80086fe:	fb00 4006 	mla	r0, r0, r6, r4
 8008702:	2301      	movs	r3, #1
 8008704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008708:	e7eb      	b.n	80086e2 <_strtoul_l.isra.0+0x5e>
 800870a:	462f      	mov	r7, r5
 800870c:	e7c1      	b.n	8008692 <_strtoul_l.isra.0+0xe>
 800870e:	2c2b      	cmp	r4, #43	; 0x2b
 8008710:	bf04      	itt	eq
 8008712:	1cbd      	addeq	r5, r7, #2
 8008714:	787c      	ldrbeq	r4, [r7, #1]
 8008716:	4619      	mov	r1, r3
 8008718:	e7cb      	b.n	80086b2 <_strtoul_l.isra.0+0x2e>
 800871a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800871e:	2f19      	cmp	r7, #25
 8008720:	d801      	bhi.n	8008726 <_strtoul_l.isra.0+0xa2>
 8008722:	3c37      	subs	r4, #55	; 0x37
 8008724:	e7e2      	b.n	80086ec <_strtoul_l.isra.0+0x68>
 8008726:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800872a:	2f19      	cmp	r7, #25
 800872c:	d804      	bhi.n	8008738 <_strtoul_l.isra.0+0xb4>
 800872e:	3c57      	subs	r4, #87	; 0x57
 8008730:	e7dc      	b.n	80086ec <_strtoul_l.isra.0+0x68>
 8008732:	f04f 33ff 	mov.w	r3, #4294967295
 8008736:	e7e5      	b.n	8008704 <_strtoul_l.isra.0+0x80>
 8008738:	2b00      	cmp	r3, #0
 800873a:	da09      	bge.n	8008750 <_strtoul_l.isra.0+0xcc>
 800873c:	2322      	movs	r3, #34	; 0x22
 800873e:	f8c8 3000 	str.w	r3, [r8]
 8008742:	f04f 30ff 	mov.w	r0, #4294967295
 8008746:	f1ba 0f00 	cmp.w	sl, #0
 800874a:	d107      	bne.n	800875c <_strtoul_l.isra.0+0xd8>
 800874c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008750:	b101      	cbz	r1, 8008754 <_strtoul_l.isra.0+0xd0>
 8008752:	4240      	negs	r0, r0
 8008754:	f1ba 0f00 	cmp.w	sl, #0
 8008758:	d0f8      	beq.n	800874c <_strtoul_l.isra.0+0xc8>
 800875a:	b10b      	cbz	r3, 8008760 <_strtoul_l.isra.0+0xdc>
 800875c:	f105 39ff 	add.w	r9, r5, #4294967295
 8008760:	f8ca 9000 	str.w	r9, [sl]
 8008764:	e7f2      	b.n	800874c <_strtoul_l.isra.0+0xc8>
 8008766:	2430      	movs	r4, #48	; 0x30
 8008768:	2e00      	cmp	r6, #0
 800876a:	d1b0      	bne.n	80086ce <_strtoul_l.isra.0+0x4a>
 800876c:	2608      	movs	r6, #8
 800876e:	e7ae      	b.n	80086ce <_strtoul_l.isra.0+0x4a>
 8008770:	2c30      	cmp	r4, #48	; 0x30
 8008772:	d0a4      	beq.n	80086be <_strtoul_l.isra.0+0x3a>
 8008774:	260a      	movs	r6, #10
 8008776:	e7aa      	b.n	80086ce <_strtoul_l.isra.0+0x4a>

08008778 <_strtoul_r>:
 8008778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877a:	4c06      	ldr	r4, [pc, #24]	; (8008794 <_strtoul_r+0x1c>)
 800877c:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_strtoul_r+0x20>)
 800877e:	6824      	ldr	r4, [r4, #0]
 8008780:	6a24      	ldr	r4, [r4, #32]
 8008782:	2c00      	cmp	r4, #0
 8008784:	bf08      	it	eq
 8008786:	462c      	moveq	r4, r5
 8008788:	9400      	str	r4, [sp, #0]
 800878a:	f7ff ff7b 	bl	8008684 <_strtoul_l.isra.0>
 800878e:	b003      	add	sp, #12
 8008790:	bd30      	pop	{r4, r5, pc}
 8008792:	bf00      	nop
 8008794:	2000000c 	.word	0x2000000c
 8008798:	20000070 	.word	0x20000070

0800879c <__submore>:
 800879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a0:	460c      	mov	r4, r1
 80087a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087a8:	4299      	cmp	r1, r3
 80087aa:	d11d      	bne.n	80087e8 <__submore+0x4c>
 80087ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80087b0:	f7fb fde6 	bl	8004380 <_malloc_r>
 80087b4:	b918      	cbnz	r0, 80087be <__submore+0x22>
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80087c4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80087c8:	6360      	str	r0, [r4, #52]	; 0x34
 80087ca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80087ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087d2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80087d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087da:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80087de:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80087e2:	6020      	str	r0, [r4, #0]
 80087e4:	2000      	movs	r0, #0
 80087e6:	e7e8      	b.n	80087ba <__submore+0x1e>
 80087e8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80087ea:	0077      	lsls	r7, r6, #1
 80087ec:	463a      	mov	r2, r7
 80087ee:	f000 fac2 	bl	8008d76 <_realloc_r>
 80087f2:	4605      	mov	r5, r0
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d0de      	beq.n	80087b6 <__submore+0x1a>
 80087f8:	eb00 0806 	add.w	r8, r0, r6
 80087fc:	4601      	mov	r1, r0
 80087fe:	4632      	mov	r2, r6
 8008800:	4640      	mov	r0, r8
 8008802:	f7fe fbd9 	bl	8006fb8 <memcpy>
 8008806:	f8c4 8000 	str.w	r8, [r4]
 800880a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800880e:	e7e9      	b.n	80087e4 <__submore+0x48>

08008810 <_ungetc_r>:
 8008810:	1c4b      	adds	r3, r1, #1
 8008812:	b570      	push	{r4, r5, r6, lr}
 8008814:	4606      	mov	r6, r0
 8008816:	460d      	mov	r5, r1
 8008818:	4614      	mov	r4, r2
 800881a:	d103      	bne.n	8008824 <_ungetc_r+0x14>
 800881c:	f04f 35ff 	mov.w	r5, #4294967295
 8008820:	4628      	mov	r0, r5
 8008822:	bd70      	pop	{r4, r5, r6, pc}
 8008824:	b118      	cbz	r0, 800882e <_ungetc_r+0x1e>
 8008826:	6983      	ldr	r3, [r0, #24]
 8008828:	b90b      	cbnz	r3, 800882e <_ungetc_r+0x1e>
 800882a:	f7fd ffbd 	bl	80067a8 <__sinit>
 800882e:	4b2e      	ldr	r3, [pc, #184]	; (80088e8 <_ungetc_r+0xd8>)
 8008830:	429c      	cmp	r4, r3
 8008832:	d12c      	bne.n	800888e <_ungetc_r+0x7e>
 8008834:	6874      	ldr	r4, [r6, #4]
 8008836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883a:	f023 0320 	bic.w	r3, r3, #32
 800883e:	81a3      	strh	r3, [r4, #12]
 8008840:	b29b      	uxth	r3, r3
 8008842:	0759      	lsls	r1, r3, #29
 8008844:	d413      	bmi.n	800886e <_ungetc_r+0x5e>
 8008846:	06da      	lsls	r2, r3, #27
 8008848:	d5e8      	bpl.n	800881c <_ungetc_r+0xc>
 800884a:	071b      	lsls	r3, r3, #28
 800884c:	d50b      	bpl.n	8008866 <_ungetc_r+0x56>
 800884e:	4621      	mov	r1, r4
 8008850:	4630      	mov	r0, r6
 8008852:	f000 f9c5 	bl	8008be0 <_fflush_r>
 8008856:	2800      	cmp	r0, #0
 8008858:	d1e0      	bne.n	800881c <_ungetc_r+0xc>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	60a0      	str	r0, [r4, #8]
 800885e:	f023 0308 	bic.w	r3, r3, #8
 8008862:	81a3      	strh	r3, [r4, #12]
 8008864:	61a0      	str	r0, [r4, #24]
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0304 	orr.w	r3, r3, #4
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008870:	6862      	ldr	r2, [r4, #4]
 8008872:	b2ed      	uxtb	r5, r5
 8008874:	b1e3      	cbz	r3, 80088b0 <_ungetc_r+0xa0>
 8008876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008878:	4293      	cmp	r3, r2
 800887a:	dd12      	ble.n	80088a2 <_ungetc_r+0x92>
 800887c:	6823      	ldr	r3, [r4, #0]
 800887e:	1e5a      	subs	r2, r3, #1
 8008880:	6022      	str	r2, [r4, #0]
 8008882:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	3301      	adds	r3, #1
 800888a:	6063      	str	r3, [r4, #4]
 800888c:	e7c8      	b.n	8008820 <_ungetc_r+0x10>
 800888e:	4b17      	ldr	r3, [pc, #92]	; (80088ec <_ungetc_r+0xdc>)
 8008890:	429c      	cmp	r4, r3
 8008892:	d101      	bne.n	8008898 <_ungetc_r+0x88>
 8008894:	68b4      	ldr	r4, [r6, #8]
 8008896:	e7ce      	b.n	8008836 <_ungetc_r+0x26>
 8008898:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <_ungetc_r+0xe0>)
 800889a:	429c      	cmp	r4, r3
 800889c:	bf08      	it	eq
 800889e:	68f4      	ldreq	r4, [r6, #12]
 80088a0:	e7c9      	b.n	8008836 <_ungetc_r+0x26>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4630      	mov	r0, r6
 80088a6:	f7ff ff79 	bl	800879c <__submore>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d0e6      	beq.n	800887c <_ungetc_r+0x6c>
 80088ae:	e7b5      	b.n	800881c <_ungetc_r+0xc>
 80088b0:	6921      	ldr	r1, [r4, #16]
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	b151      	cbz	r1, 80088cc <_ungetc_r+0xbc>
 80088b6:	4299      	cmp	r1, r3
 80088b8:	d208      	bcs.n	80088cc <_ungetc_r+0xbc>
 80088ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80088be:	42a9      	cmp	r1, r5
 80088c0:	d104      	bne.n	80088cc <_ungetc_r+0xbc>
 80088c2:	3b01      	subs	r3, #1
 80088c4:	3201      	adds	r2, #1
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	6062      	str	r2, [r4, #4]
 80088ca:	e7a9      	b.n	8008820 <_ungetc_r+0x10>
 80088cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80088d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d4:	6363      	str	r3, [r4, #52]	; 0x34
 80088d6:	2303      	movs	r3, #3
 80088d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80088da:	4623      	mov	r3, r4
 80088dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80088e0:	6023      	str	r3, [r4, #0]
 80088e2:	2301      	movs	r3, #1
 80088e4:	e7d1      	b.n	800888a <_ungetc_r+0x7a>
 80088e6:	bf00      	nop
 80088e8:	08009370 	.word	0x08009370
 80088ec:	08009390 	.word	0x08009390
 80088f0:	08009350 	.word	0x08009350

080088f4 <__swbuf_r>:
 80088f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f6:	460e      	mov	r6, r1
 80088f8:	4614      	mov	r4, r2
 80088fa:	4605      	mov	r5, r0
 80088fc:	b118      	cbz	r0, 8008906 <__swbuf_r+0x12>
 80088fe:	6983      	ldr	r3, [r0, #24]
 8008900:	b90b      	cbnz	r3, 8008906 <__swbuf_r+0x12>
 8008902:	f7fd ff51 	bl	80067a8 <__sinit>
 8008906:	4b21      	ldr	r3, [pc, #132]	; (800898c <__swbuf_r+0x98>)
 8008908:	429c      	cmp	r4, r3
 800890a:	d12a      	bne.n	8008962 <__swbuf_r+0x6e>
 800890c:	686c      	ldr	r4, [r5, #4]
 800890e:	69a3      	ldr	r3, [r4, #24]
 8008910:	60a3      	str	r3, [r4, #8]
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	071a      	lsls	r2, r3, #28
 8008916:	d52e      	bpl.n	8008976 <__swbuf_r+0x82>
 8008918:	6923      	ldr	r3, [r4, #16]
 800891a:	b363      	cbz	r3, 8008976 <__swbuf_r+0x82>
 800891c:	6923      	ldr	r3, [r4, #16]
 800891e:	6820      	ldr	r0, [r4, #0]
 8008920:	1ac0      	subs	r0, r0, r3
 8008922:	6963      	ldr	r3, [r4, #20]
 8008924:	b2f6      	uxtb	r6, r6
 8008926:	4283      	cmp	r3, r0
 8008928:	4637      	mov	r7, r6
 800892a:	dc04      	bgt.n	8008936 <__swbuf_r+0x42>
 800892c:	4621      	mov	r1, r4
 800892e:	4628      	mov	r0, r5
 8008930:	f000 f956 	bl	8008be0 <_fflush_r>
 8008934:	bb28      	cbnz	r0, 8008982 <__swbuf_r+0x8e>
 8008936:	68a3      	ldr	r3, [r4, #8]
 8008938:	3b01      	subs	r3, #1
 800893a:	60a3      	str	r3, [r4, #8]
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	1c5a      	adds	r2, r3, #1
 8008940:	6022      	str	r2, [r4, #0]
 8008942:	701e      	strb	r6, [r3, #0]
 8008944:	6963      	ldr	r3, [r4, #20]
 8008946:	3001      	adds	r0, #1
 8008948:	4283      	cmp	r3, r0
 800894a:	d004      	beq.n	8008956 <__swbuf_r+0x62>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	07db      	lsls	r3, r3, #31
 8008950:	d519      	bpl.n	8008986 <__swbuf_r+0x92>
 8008952:	2e0a      	cmp	r6, #10
 8008954:	d117      	bne.n	8008986 <__swbuf_r+0x92>
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 f941 	bl	8008be0 <_fflush_r>
 800895e:	b190      	cbz	r0, 8008986 <__swbuf_r+0x92>
 8008960:	e00f      	b.n	8008982 <__swbuf_r+0x8e>
 8008962:	4b0b      	ldr	r3, [pc, #44]	; (8008990 <__swbuf_r+0x9c>)
 8008964:	429c      	cmp	r4, r3
 8008966:	d101      	bne.n	800896c <__swbuf_r+0x78>
 8008968:	68ac      	ldr	r4, [r5, #8]
 800896a:	e7d0      	b.n	800890e <__swbuf_r+0x1a>
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <__swbuf_r+0xa0>)
 800896e:	429c      	cmp	r4, r3
 8008970:	bf08      	it	eq
 8008972:	68ec      	ldreq	r4, [r5, #12]
 8008974:	e7cb      	b.n	800890e <__swbuf_r+0x1a>
 8008976:	4621      	mov	r1, r4
 8008978:	4628      	mov	r0, r5
 800897a:	f000 f82d 	bl	80089d8 <__swsetup_r>
 800897e:	2800      	cmp	r0, #0
 8008980:	d0cc      	beq.n	800891c <__swbuf_r+0x28>
 8008982:	f04f 37ff 	mov.w	r7, #4294967295
 8008986:	4638      	mov	r0, r7
 8008988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800898a:	bf00      	nop
 800898c:	08009370 	.word	0x08009370
 8008990:	08009390 	.word	0x08009390
 8008994:	08009350 	.word	0x08009350

08008998 <__ascii_wctomb>:
 8008998:	b149      	cbz	r1, 80089ae <__ascii_wctomb+0x16>
 800899a:	2aff      	cmp	r2, #255	; 0xff
 800899c:	bf85      	ittet	hi
 800899e:	238a      	movhi	r3, #138	; 0x8a
 80089a0:	6003      	strhi	r3, [r0, #0]
 80089a2:	700a      	strbls	r2, [r1, #0]
 80089a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089a8:	bf98      	it	ls
 80089aa:	2001      	movls	r0, #1
 80089ac:	4770      	bx	lr
 80089ae:	4608      	mov	r0, r1
 80089b0:	4770      	bx	lr
	...

080089b4 <_write_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4c07      	ldr	r4, [pc, #28]	; (80089d4 <_write_r+0x20>)
 80089b8:	4605      	mov	r5, r0
 80089ba:	4608      	mov	r0, r1
 80089bc:	4611      	mov	r1, r2
 80089be:	2200      	movs	r2, #0
 80089c0:	6022      	str	r2, [r4, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f7f9 f9e4 	bl	8001d90 <_write>
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d102      	bne.n	80089d2 <_write_r+0x1e>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	b103      	cbz	r3, 80089d2 <_write_r+0x1e>
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
 80089d4:	2000028c 	.word	0x2000028c

080089d8 <__swsetup_r>:
 80089d8:	4b32      	ldr	r3, [pc, #200]	; (8008aa4 <__swsetup_r+0xcc>)
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	681d      	ldr	r5, [r3, #0]
 80089de:	4606      	mov	r6, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	b125      	cbz	r5, 80089ee <__swsetup_r+0x16>
 80089e4:	69ab      	ldr	r3, [r5, #24]
 80089e6:	b913      	cbnz	r3, 80089ee <__swsetup_r+0x16>
 80089e8:	4628      	mov	r0, r5
 80089ea:	f7fd fedd 	bl	80067a8 <__sinit>
 80089ee:	4b2e      	ldr	r3, [pc, #184]	; (8008aa8 <__swsetup_r+0xd0>)
 80089f0:	429c      	cmp	r4, r3
 80089f2:	d10f      	bne.n	8008a14 <__swsetup_r+0x3c>
 80089f4:	686c      	ldr	r4, [r5, #4]
 80089f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	0715      	lsls	r5, r2, #28
 80089fe:	d42c      	bmi.n	8008a5a <__swsetup_r+0x82>
 8008a00:	06d0      	lsls	r0, r2, #27
 8008a02:	d411      	bmi.n	8008a28 <__swsetup_r+0x50>
 8008a04:	2209      	movs	r2, #9
 8008a06:	6032      	str	r2, [r6, #0]
 8008a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a12:	e03e      	b.n	8008a92 <__swsetup_r+0xba>
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <__swsetup_r+0xd4>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <__swsetup_r+0x46>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7eb      	b.n	80089f6 <__swsetup_r+0x1e>
 8008a1e:	4b24      	ldr	r3, [pc, #144]	; (8008ab0 <__swsetup_r+0xd8>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7e6      	b.n	80089f6 <__swsetup_r+0x1e>
 8008a28:	0751      	lsls	r1, r2, #29
 8008a2a:	d512      	bpl.n	8008a52 <__swsetup_r+0x7a>
 8008a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a2e:	b141      	cbz	r1, 8008a42 <__swsetup_r+0x6a>
 8008a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a34:	4299      	cmp	r1, r3
 8008a36:	d002      	beq.n	8008a3e <__swsetup_r+0x66>
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7fe fec9 	bl	80077d0 <_free_r>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6363      	str	r3, [r4, #52]	; 0x34
 8008a42:	89a3      	ldrh	r3, [r4, #12]
 8008a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a48:	81a3      	strh	r3, [r4, #12]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6063      	str	r3, [r4, #4]
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	6023      	str	r3, [r4, #0]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f043 0308 	orr.w	r3, r3, #8
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	b94b      	cbnz	r3, 8008a72 <__swsetup_r+0x9a>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a68:	d003      	beq.n	8008a72 <__swsetup_r+0x9a>
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f000 f929 	bl	8008cc4 <__smakebuf_r>
 8008a72:	89a2      	ldrh	r2, [r4, #12]
 8008a74:	f012 0301 	ands.w	r3, r2, #1
 8008a78:	d00c      	beq.n	8008a94 <__swsetup_r+0xbc>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60a3      	str	r3, [r4, #8]
 8008a7e:	6963      	ldr	r3, [r4, #20]
 8008a80:	425b      	negs	r3, r3
 8008a82:	61a3      	str	r3, [r4, #24]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	b953      	cbnz	r3, 8008a9e <__swsetup_r+0xc6>
 8008a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008a90:	d1ba      	bne.n	8008a08 <__swsetup_r+0x30>
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	0792      	lsls	r2, r2, #30
 8008a96:	bf58      	it	pl
 8008a98:	6963      	ldrpl	r3, [r4, #20]
 8008a9a:	60a3      	str	r3, [r4, #8]
 8008a9c:	e7f2      	b.n	8008a84 <__swsetup_r+0xac>
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e7f7      	b.n	8008a92 <__swsetup_r+0xba>
 8008aa2:	bf00      	nop
 8008aa4:	2000000c 	.word	0x2000000c
 8008aa8:	08009370 	.word	0x08009370
 8008aac:	08009390 	.word	0x08009390
 8008ab0:	08009350 	.word	0x08009350

08008ab4 <_close_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4c06      	ldr	r4, [pc, #24]	; (8008ad0 <_close_r+0x1c>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4605      	mov	r5, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	f7f9 f988 	bl	8001dd4 <_close>
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d102      	bne.n	8008ace <_close_r+0x1a>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	b103      	cbz	r3, 8008ace <_close_r+0x1a>
 8008acc:	602b      	str	r3, [r5, #0]
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	2000028c 	.word	0x2000028c

08008ad4 <__sflush_r>:
 8008ad4:	898a      	ldrh	r2, [r1, #12]
 8008ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ada:	4605      	mov	r5, r0
 8008adc:	0710      	lsls	r0, r2, #28
 8008ade:	460c      	mov	r4, r1
 8008ae0:	d458      	bmi.n	8008b94 <__sflush_r+0xc0>
 8008ae2:	684b      	ldr	r3, [r1, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dc05      	bgt.n	8008af4 <__sflush_r+0x20>
 8008ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc02      	bgt.n	8008af4 <__sflush_r+0x20>
 8008aee:	2000      	movs	r0, #0
 8008af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	d0f9      	beq.n	8008aee <__sflush_r+0x1a>
 8008afa:	2300      	movs	r3, #0
 8008afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b00:	682f      	ldr	r7, [r5, #0]
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	d032      	beq.n	8008b6e <__sflush_r+0x9a>
 8008b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	075a      	lsls	r2, r3, #29
 8008b0e:	d505      	bpl.n	8008b1c <__sflush_r+0x48>
 8008b10:	6863      	ldr	r3, [r4, #4]
 8008b12:	1ac0      	subs	r0, r0, r3
 8008b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b16:	b10b      	cbz	r3, 8008b1c <__sflush_r+0x48>
 8008b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b1a:	1ac0      	subs	r0, r0, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4602      	mov	r2, r0
 8008b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b22:	6a21      	ldr	r1, [r4, #32]
 8008b24:	4628      	mov	r0, r5
 8008b26:	47b0      	blx	r6
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	d106      	bne.n	8008b3c <__sflush_r+0x68>
 8008b2e:	6829      	ldr	r1, [r5, #0]
 8008b30:	291d      	cmp	r1, #29
 8008b32:	d848      	bhi.n	8008bc6 <__sflush_r+0xf2>
 8008b34:	4a29      	ldr	r2, [pc, #164]	; (8008bdc <__sflush_r+0x108>)
 8008b36:	40ca      	lsrs	r2, r1
 8008b38:	07d6      	lsls	r6, r2, #31
 8008b3a:	d544      	bpl.n	8008bc6 <__sflush_r+0xf2>
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	6062      	str	r2, [r4, #4]
 8008b40:	04d9      	lsls	r1, r3, #19
 8008b42:	6922      	ldr	r2, [r4, #16]
 8008b44:	6022      	str	r2, [r4, #0]
 8008b46:	d504      	bpl.n	8008b52 <__sflush_r+0x7e>
 8008b48:	1c42      	adds	r2, r0, #1
 8008b4a:	d101      	bne.n	8008b50 <__sflush_r+0x7c>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b903      	cbnz	r3, 8008b52 <__sflush_r+0x7e>
 8008b50:	6560      	str	r0, [r4, #84]	; 0x54
 8008b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b54:	602f      	str	r7, [r5, #0]
 8008b56:	2900      	cmp	r1, #0
 8008b58:	d0c9      	beq.n	8008aee <__sflush_r+0x1a>
 8008b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b5e:	4299      	cmp	r1, r3
 8008b60:	d002      	beq.n	8008b68 <__sflush_r+0x94>
 8008b62:	4628      	mov	r0, r5
 8008b64:	f7fe fe34 	bl	80077d0 <_free_r>
 8008b68:	2000      	movs	r0, #0
 8008b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8008b6c:	e7c0      	b.n	8008af0 <__sflush_r+0x1c>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b0      	blx	r6
 8008b74:	1c41      	adds	r1, r0, #1
 8008b76:	d1c8      	bne.n	8008b0a <__sflush_r+0x36>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0c5      	beq.n	8008b0a <__sflush_r+0x36>
 8008b7e:	2b1d      	cmp	r3, #29
 8008b80:	d001      	beq.n	8008b86 <__sflush_r+0xb2>
 8008b82:	2b16      	cmp	r3, #22
 8008b84:	d101      	bne.n	8008b8a <__sflush_r+0xb6>
 8008b86:	602f      	str	r7, [r5, #0]
 8008b88:	e7b1      	b.n	8008aee <__sflush_r+0x1a>
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b90:	81a3      	strh	r3, [r4, #12]
 8008b92:	e7ad      	b.n	8008af0 <__sflush_r+0x1c>
 8008b94:	690f      	ldr	r7, [r1, #16]
 8008b96:	2f00      	cmp	r7, #0
 8008b98:	d0a9      	beq.n	8008aee <__sflush_r+0x1a>
 8008b9a:	0793      	lsls	r3, r2, #30
 8008b9c:	680e      	ldr	r6, [r1, #0]
 8008b9e:	bf08      	it	eq
 8008ba0:	694b      	ldreq	r3, [r1, #20]
 8008ba2:	600f      	str	r7, [r1, #0]
 8008ba4:	bf18      	it	ne
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	eba6 0807 	sub.w	r8, r6, r7
 8008bac:	608b      	str	r3, [r1, #8]
 8008bae:	f1b8 0f00 	cmp.w	r8, #0
 8008bb2:	dd9c      	ble.n	8008aee <__sflush_r+0x1a>
 8008bb4:	4643      	mov	r3, r8
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b0      	blx	r6
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	dc06      	bgt.n	8008bd2 <__sflush_r+0xfe>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	e78e      	b.n	8008af0 <__sflush_r+0x1c>
 8008bd2:	4407      	add	r7, r0
 8008bd4:	eba8 0800 	sub.w	r8, r8, r0
 8008bd8:	e7e9      	b.n	8008bae <__sflush_r+0xda>
 8008bda:	bf00      	nop
 8008bdc:	20400001 	.word	0x20400001

08008be0 <_fflush_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b1db      	cbz	r3, 8008c22 <_fflush_r+0x42>
 8008bea:	b118      	cbz	r0, 8008bf4 <_fflush_r+0x14>
 8008bec:	6983      	ldr	r3, [r0, #24]
 8008bee:	b90b      	cbnz	r3, 8008bf4 <_fflush_r+0x14>
 8008bf0:	f7fd fdda 	bl	80067a8 <__sinit>
 8008bf4:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <_fflush_r+0x48>)
 8008bf6:	429c      	cmp	r4, r3
 8008bf8:	d109      	bne.n	8008c0e <_fflush_r+0x2e>
 8008bfa:	686c      	ldr	r4, [r5, #4]
 8008bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c00:	b17b      	cbz	r3, 8008c22 <_fflush_r+0x42>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4628      	mov	r0, r5
 8008c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0a:	f7ff bf63 	b.w	8008ad4 <__sflush_r>
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <_fflush_r+0x4c>)
 8008c10:	429c      	cmp	r4, r3
 8008c12:	d101      	bne.n	8008c18 <_fflush_r+0x38>
 8008c14:	68ac      	ldr	r4, [r5, #8]
 8008c16:	e7f1      	b.n	8008bfc <_fflush_r+0x1c>
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <_fflush_r+0x50>)
 8008c1a:	429c      	cmp	r4, r3
 8008c1c:	bf08      	it	eq
 8008c1e:	68ec      	ldreq	r4, [r5, #12]
 8008c20:	e7ec      	b.n	8008bfc <_fflush_r+0x1c>
 8008c22:	2000      	movs	r0, #0
 8008c24:	bd38      	pop	{r3, r4, r5, pc}
 8008c26:	bf00      	nop
 8008c28:	08009370 	.word	0x08009370
 8008c2c:	08009390 	.word	0x08009390
 8008c30:	08009350 	.word	0x08009350

08008c34 <fflush>:
 8008c34:	4601      	mov	r1, r0
 8008c36:	b920      	cbnz	r0, 8008c42 <fflush+0xe>
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <fflush+0x18>)
 8008c3a:	4905      	ldr	r1, [pc, #20]	; (8008c50 <fflush+0x1c>)
 8008c3c:	6818      	ldr	r0, [r3, #0]
 8008c3e:	f7fd be3b 	b.w	80068b8 <_fwalk_reent>
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <fflush+0x20>)
 8008c44:	6818      	ldr	r0, [r3, #0]
 8008c46:	f7ff bfcb 	b.w	8008be0 <_fflush_r>
 8008c4a:	bf00      	nop
 8008c4c:	080092b4 	.word	0x080092b4
 8008c50:	08008be1 	.word	0x08008be1
 8008c54:	2000000c 	.word	0x2000000c

08008c58 <_lseek_r>:
 8008c58:	b538      	push	{r3, r4, r5, lr}
 8008c5a:	4c07      	ldr	r4, [pc, #28]	; (8008c78 <_lseek_r+0x20>)
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	4608      	mov	r0, r1
 8008c60:	4611      	mov	r1, r2
 8008c62:	2200      	movs	r2, #0
 8008c64:	6022      	str	r2, [r4, #0]
 8008c66:	461a      	mov	r2, r3
 8008c68:	f7f9 f8db 	bl	8001e22 <_lseek>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_lseek_r+0x1e>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_lseek_r+0x1e>
 8008c74:	602b      	str	r3, [r5, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	2000028c 	.word	0x2000028c

08008c7c <__swhatbuf_r>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	460e      	mov	r6, r1
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2900      	cmp	r1, #0
 8008c86:	b096      	sub	sp, #88	; 0x58
 8008c88:	4614      	mov	r4, r2
 8008c8a:	461d      	mov	r5, r3
 8008c8c:	da07      	bge.n	8008c9e <__swhatbuf_r+0x22>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	89b3      	ldrh	r3, [r6, #12]
 8008c94:	061a      	lsls	r2, r3, #24
 8008c96:	d410      	bmi.n	8008cba <__swhatbuf_r+0x3e>
 8008c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c9c:	e00e      	b.n	8008cbc <__swhatbuf_r+0x40>
 8008c9e:	466a      	mov	r2, sp
 8008ca0:	f000 f8a2 	bl	8008de8 <_fstat_r>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	dbf2      	blt.n	8008c8e <__swhatbuf_r+0x12>
 8008ca8:	9a01      	ldr	r2, [sp, #4]
 8008caa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cb2:	425a      	negs	r2, r3
 8008cb4:	415a      	adcs	r2, r3
 8008cb6:	602a      	str	r2, [r5, #0]
 8008cb8:	e7ee      	b.n	8008c98 <__swhatbuf_r+0x1c>
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	6023      	str	r3, [r4, #0]
 8008cc0:	b016      	add	sp, #88	; 0x58
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}

08008cc4 <__smakebuf_r>:
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cc8:	079d      	lsls	r5, r3, #30
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	d507      	bpl.n	8008ce0 <__smakebuf_r+0x1c>
 8008cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	6163      	str	r3, [r4, #20]
 8008cdc:	b002      	add	sp, #8
 8008cde:	bd70      	pop	{r4, r5, r6, pc}
 8008ce0:	ab01      	add	r3, sp, #4
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f7ff ffca 	bl	8008c7c <__swhatbuf_r>
 8008ce8:	9900      	ldr	r1, [sp, #0]
 8008cea:	4605      	mov	r5, r0
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7fb fb47 	bl	8004380 <_malloc_r>
 8008cf2:	b948      	cbnz	r0, 8008d08 <__smakebuf_r+0x44>
 8008cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf8:	059a      	lsls	r2, r3, #22
 8008cfa:	d4ef      	bmi.n	8008cdc <__smakebuf_r+0x18>
 8008cfc:	f023 0303 	bic.w	r3, r3, #3
 8008d00:	f043 0302 	orr.w	r3, r3, #2
 8008d04:	81a3      	strh	r3, [r4, #12]
 8008d06:	e7e3      	b.n	8008cd0 <__smakebuf_r+0xc>
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <__smakebuf_r+0x7c>)
 8008d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	6020      	str	r0, [r4, #0]
 8008d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d14:	81a3      	strh	r3, [r4, #12]
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	6163      	str	r3, [r4, #20]
 8008d1a:	9b01      	ldr	r3, [sp, #4]
 8008d1c:	6120      	str	r0, [r4, #16]
 8008d1e:	b15b      	cbz	r3, 8008d38 <__smakebuf_r+0x74>
 8008d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d24:	4630      	mov	r0, r6
 8008d26:	f000 f871 	bl	8008e0c <_isatty_r>
 8008d2a:	b128      	cbz	r0, 8008d38 <__smakebuf_r+0x74>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	f043 0301 	orr.w	r3, r3, #1
 8008d36:	81a3      	strh	r3, [r4, #12]
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	431d      	orrs	r5, r3
 8008d3c:	81a5      	strh	r5, [r4, #12]
 8008d3e:	e7cd      	b.n	8008cdc <__smakebuf_r+0x18>
 8008d40:	08006771 	.word	0x08006771

08008d44 <memmove>:
 8008d44:	4288      	cmp	r0, r1
 8008d46:	b510      	push	{r4, lr}
 8008d48:	eb01 0302 	add.w	r3, r1, r2
 8008d4c:	d807      	bhi.n	8008d5e <memmove+0x1a>
 8008d4e:	1e42      	subs	r2, r0, #1
 8008d50:	4299      	cmp	r1, r3
 8008d52:	d00a      	beq.n	8008d6a <memmove+0x26>
 8008d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d58:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d5c:	e7f8      	b.n	8008d50 <memmove+0xc>
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	d9f5      	bls.n	8008d4e <memmove+0xa>
 8008d62:	1881      	adds	r1, r0, r2
 8008d64:	1ad2      	subs	r2, r2, r3
 8008d66:	42d3      	cmn	r3, r2
 8008d68:	d100      	bne.n	8008d6c <memmove+0x28>
 8008d6a:	bd10      	pop	{r4, pc}
 8008d6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d70:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d74:	e7f7      	b.n	8008d66 <memmove+0x22>

08008d76 <_realloc_r>:
 8008d76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d78:	4607      	mov	r7, r0
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	460e      	mov	r6, r1
 8008d7e:	b921      	cbnz	r1, 8008d8a <_realloc_r+0x14>
 8008d80:	4611      	mov	r1, r2
 8008d82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d86:	f7fb bafb 	b.w	8004380 <_malloc_r>
 8008d8a:	b922      	cbnz	r2, 8008d96 <_realloc_r+0x20>
 8008d8c:	f7fe fd20 	bl	80077d0 <_free_r>
 8008d90:	4625      	mov	r5, r4
 8008d92:	4628      	mov	r0, r5
 8008d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d96:	f000 f849 	bl	8008e2c <_malloc_usable_size_r>
 8008d9a:	42a0      	cmp	r0, r4
 8008d9c:	d20f      	bcs.n	8008dbe <_realloc_r+0x48>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4638      	mov	r0, r7
 8008da2:	f7fb faed 	bl	8004380 <_malloc_r>
 8008da6:	4605      	mov	r5, r0
 8008da8:	2800      	cmp	r0, #0
 8008daa:	d0f2      	beq.n	8008d92 <_realloc_r+0x1c>
 8008dac:	4631      	mov	r1, r6
 8008dae:	4622      	mov	r2, r4
 8008db0:	f7fe f902 	bl	8006fb8 <memcpy>
 8008db4:	4631      	mov	r1, r6
 8008db6:	4638      	mov	r0, r7
 8008db8:	f7fe fd0a 	bl	80077d0 <_free_r>
 8008dbc:	e7e9      	b.n	8008d92 <_realloc_r+0x1c>
 8008dbe:	4635      	mov	r5, r6
 8008dc0:	e7e7      	b.n	8008d92 <_realloc_r+0x1c>
	...

08008dc4 <_read_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4c07      	ldr	r4, [pc, #28]	; (8008de4 <_read_r+0x20>)
 8008dc8:	4605      	mov	r5, r0
 8008dca:	4608      	mov	r0, r1
 8008dcc:	4611      	mov	r1, r2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	6022      	str	r2, [r4, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f7f8 ffbe 	bl	8001d54 <_read>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d102      	bne.n	8008de2 <_read_r+0x1e>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	b103      	cbz	r3, 8008de2 <_read_r+0x1e>
 8008de0:	602b      	str	r3, [r5, #0]
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	2000028c 	.word	0x2000028c

08008de8 <_fstat_r>:
 8008de8:	b538      	push	{r3, r4, r5, lr}
 8008dea:	4c07      	ldr	r4, [pc, #28]	; (8008e08 <_fstat_r+0x20>)
 8008dec:	2300      	movs	r3, #0
 8008dee:	4605      	mov	r5, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	f7f8 fff9 	bl	8001dec <_fstat>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	d102      	bne.n	8008e04 <_fstat_r+0x1c>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	b103      	cbz	r3, 8008e04 <_fstat_r+0x1c>
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	bd38      	pop	{r3, r4, r5, pc}
 8008e06:	bf00      	nop
 8008e08:	2000028c 	.word	0x2000028c

08008e0c <_isatty_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4c06      	ldr	r4, [pc, #24]	; (8008e28 <_isatty_r+0x1c>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	4605      	mov	r5, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	6023      	str	r3, [r4, #0]
 8008e18:	f7f8 fff8 	bl	8001e0c <_isatty>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_isatty_r+0x1a>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_isatty_r+0x1a>
 8008e24:	602b      	str	r3, [r5, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	2000028c 	.word	0x2000028c

08008e2c <_malloc_usable_size_r>:
 8008e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e30:	1f18      	subs	r0, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	bfbc      	itt	lt
 8008e36:	580b      	ldrlt	r3, [r1, r0]
 8008e38:	18c0      	addlt	r0, r0, r3
 8008e3a:	4770      	bx	lr

08008e3c <fmod>:
 8008e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e40:	ed2d 8b02 	vpush	{d8}
 8008e44:	b08b      	sub	sp, #44	; 0x2c
 8008e46:	ec55 4b10 	vmov	r4, r5, d0
 8008e4a:	ec57 6b11 	vmov	r6, r7, d1
 8008e4e:	f000 f859 	bl	8008f04 <__ieee754_fmod>
 8008e52:	4b2a      	ldr	r3, [pc, #168]	; (8008efc <fmod+0xc0>)
 8008e54:	eeb0 8a40 	vmov.f32	s16, s0
 8008e58:	eef0 8a60 	vmov.f32	s17, s1
 8008e5c:	f993 8000 	ldrsb.w	r8, [r3]
 8008e60:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008e64:	d030      	beq.n	8008ec8 <fmod+0x8c>
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	f7f7 fe5d 	bl	8000b2c <__aeabi_dcmpun>
 8008e72:	bb48      	cbnz	r0, 8008ec8 <fmod+0x8c>
 8008e74:	4622      	mov	r2, r4
 8008e76:	462b      	mov	r3, r5
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4629      	mov	r1, r5
 8008e7c:	f7f7 fe56 	bl	8000b2c <__aeabi_dcmpun>
 8008e80:	4681      	mov	r9, r0
 8008e82:	bb08      	cbnz	r0, 8008ec8 <fmod+0x8c>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4630      	mov	r0, r6
 8008e8a:	4639      	mov	r1, r7
 8008e8c:	f7f7 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e90:	b1d0      	cbz	r0, 8008ec8 <fmod+0x8c>
 8008e92:	2301      	movs	r3, #1
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	4b1a      	ldr	r3, [pc, #104]	; (8008f00 <fmod+0xc4>)
 8008e98:	9301      	str	r3, [sp, #4]
 8008e9a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008e9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008ea2:	f8cd 9020 	str.w	r9, [sp, #32]
 8008ea6:	f1b8 0f00 	cmp.w	r8, #0
 8008eaa:	d116      	bne.n	8008eda <fmod+0x9e>
 8008eac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008eb0:	4668      	mov	r0, sp
 8008eb2:	f000 f939 	bl	8009128 <matherr>
 8008eb6:	b1d8      	cbz	r0, 8008ef0 <fmod+0xb4>
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	b11b      	cbz	r3, 8008ec4 <fmod+0x88>
 8008ebc:	f7fb fa20 	bl	8004300 <__errno>
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	6003      	str	r3, [r0, #0]
 8008ec4:	ed9d 8b06 	vldr	d8, [sp, #24]
 8008ec8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ecc:	eef0 0a68 	vmov.f32	s1, s17
 8008ed0:	b00b      	add	sp, #44	; 0x2c
 8008ed2:	ecbd 8b02 	vpop	{d8}
 8008ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008eda:	2200      	movs	r2, #0
 8008edc:	2300      	movs	r3, #0
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	f7f7 fcb3 	bl	800084c <__aeabi_ddiv>
 8008ee6:	f1b8 0f02 	cmp.w	r8, #2
 8008eea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008eee:	d1df      	bne.n	8008eb0 <fmod+0x74>
 8008ef0:	f7fb fa06 	bl	8004300 <__errno>
 8008ef4:	2321      	movs	r3, #33	; 0x21
 8008ef6:	6003      	str	r3, [r0, #0]
 8008ef8:	e7de      	b.n	8008eb8 <fmod+0x7c>
 8008efa:	bf00      	nop
 8008efc:	200001dc 	.word	0x200001dc
 8008f00:	080095e9 	.word	0x080095e9

08008f04 <__ieee754_fmod>:
 8008f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f08:	ec53 2b11 	vmov	r2, r3, d1
 8008f0c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8008f10:	ea5e 0402 	orrs.w	r4, lr, r2
 8008f14:	ec51 0b10 	vmov	r0, r1, d0
 8008f18:	461e      	mov	r6, r3
 8008f1a:	ee11 5a10 	vmov	r5, s2
 8008f1e:	4694      	mov	ip, r2
 8008f20:	d00c      	beq.n	8008f3c <__ieee754_fmod+0x38>
 8008f22:	4c7a      	ldr	r4, [pc, #488]	; (800910c <__ieee754_fmod+0x208>)
 8008f24:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008f28:	45a0      	cmp	r8, r4
 8008f2a:	4689      	mov	r9, r1
 8008f2c:	dc06      	bgt.n	8008f3c <__ieee754_fmod+0x38>
 8008f2e:	4254      	negs	r4, r2
 8008f30:	4314      	orrs	r4, r2
 8008f32:	4f77      	ldr	r7, [pc, #476]	; (8009110 <__ieee754_fmod+0x20c>)
 8008f34:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8008f38:	42bc      	cmp	r4, r7
 8008f3a:	d909      	bls.n	8008f50 <__ieee754_fmod+0x4c>
 8008f3c:	f7f7 fb5c 	bl	80005f8 <__aeabi_dmul>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	f7f7 fc82 	bl	800084c <__aeabi_ddiv>
 8008f48:	ec41 0b10 	vmov	d0, r0, r1
 8008f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f50:	45f0      	cmp	r8, lr
 8008f52:	ee10 2a10 	vmov	r2, s0
 8008f56:	4607      	mov	r7, r0
 8008f58:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8008f5c:	dc0a      	bgt.n	8008f74 <__ieee754_fmod+0x70>
 8008f5e:	dbf3      	blt.n	8008f48 <__ieee754_fmod+0x44>
 8008f60:	42a8      	cmp	r0, r5
 8008f62:	d3f1      	bcc.n	8008f48 <__ieee754_fmod+0x44>
 8008f64:	d106      	bne.n	8008f74 <__ieee754_fmod+0x70>
 8008f66:	496b      	ldr	r1, [pc, #428]	; (8009114 <__ieee754_fmod+0x210>)
 8008f68:	0fe4      	lsrs	r4, r4, #31
 8008f6a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8008f6e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008f72:	e7e9      	b.n	8008f48 <__ieee754_fmod+0x44>
 8008f74:	4b68      	ldr	r3, [pc, #416]	; (8009118 <__ieee754_fmod+0x214>)
 8008f76:	4598      	cmp	r8, r3
 8008f78:	dc49      	bgt.n	800900e <__ieee754_fmod+0x10a>
 8008f7a:	f1b8 0f00 	cmp.w	r8, #0
 8008f7e:	d13d      	bne.n	8008ffc <__ieee754_fmod+0xf8>
 8008f80:	4866      	ldr	r0, [pc, #408]	; (800911c <__ieee754_fmod+0x218>)
 8008f82:	4611      	mov	r1, r2
 8008f84:	2900      	cmp	r1, #0
 8008f86:	dc36      	bgt.n	8008ff6 <__ieee754_fmod+0xf2>
 8008f88:	459e      	cmp	lr, r3
 8008f8a:	dc51      	bgt.n	8009030 <__ieee754_fmod+0x12c>
 8008f8c:	f1be 0f00 	cmp.w	lr, #0
 8008f90:	d145      	bne.n	800901e <__ieee754_fmod+0x11a>
 8008f92:	4b62      	ldr	r3, [pc, #392]	; (800911c <__ieee754_fmod+0x218>)
 8008f94:	4629      	mov	r1, r5
 8008f96:	2900      	cmp	r1, #0
 8008f98:	dc3e      	bgt.n	8009018 <__ieee754_fmod+0x114>
 8008f9a:	4961      	ldr	r1, [pc, #388]	; (8009120 <__ieee754_fmod+0x21c>)
 8008f9c:	4288      	cmp	r0, r1
 8008f9e:	db4c      	blt.n	800903a <__ieee754_fmod+0x136>
 8008fa0:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8008fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008fa8:	4a5d      	ldr	r2, [pc, #372]	; (8009120 <__ieee754_fmod+0x21c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	db59      	blt.n	8009062 <__ieee754_fmod+0x15e>
 8008fae:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008fb2:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008fb6:	1ac0      	subs	r0, r0, r3
 8008fb8:	1b8a      	subs	r2, r1, r6
 8008fba:	eba7 050c 	sub.w	r5, r7, ip
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d166      	bne.n	8009090 <__ieee754_fmod+0x18c>
 8008fc2:	4567      	cmp	r7, ip
 8008fc4:	bf38      	it	cc
 8008fc6:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8008fca:	2a00      	cmp	r2, #0
 8008fcc:	bfbc      	itt	lt
 8008fce:	463d      	movlt	r5, r7
 8008fd0:	460a      	movlt	r2, r1
 8008fd2:	ea52 0105 	orrs.w	r1, r2, r5
 8008fd6:	d0c6      	beq.n	8008f66 <__ieee754_fmod+0x62>
 8008fd8:	494f      	ldr	r1, [pc, #316]	; (8009118 <__ieee754_fmod+0x214>)
 8008fda:	428a      	cmp	r2, r1
 8008fdc:	dd6d      	ble.n	80090ba <__ieee754_fmod+0x1b6>
 8008fde:	4950      	ldr	r1, [pc, #320]	; (8009120 <__ieee754_fmod+0x21c>)
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	db70      	blt.n	80090c6 <__ieee754_fmod+0x1c2>
 8008fe4:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8008fe8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8008fec:	4314      	orrs	r4, r2
 8008fee:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	e7a8      	b.n	8008f48 <__ieee754_fmod+0x44>
 8008ff6:	3801      	subs	r0, #1
 8008ff8:	0049      	lsls	r1, r1, #1
 8008ffa:	e7c3      	b.n	8008f84 <__ieee754_fmod+0x80>
 8008ffc:	4848      	ldr	r0, [pc, #288]	; (8009120 <__ieee754_fmod+0x21c>)
 8008ffe:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8009002:	0049      	lsls	r1, r1, #1
 8009004:	2900      	cmp	r1, #0
 8009006:	f100 30ff 	add.w	r0, r0, #4294967295
 800900a:	dcfa      	bgt.n	8009002 <__ieee754_fmod+0xfe>
 800900c:	e7bc      	b.n	8008f88 <__ieee754_fmod+0x84>
 800900e:	ea4f 5028 	mov.w	r0, r8, asr #20
 8009012:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009016:	e7b7      	b.n	8008f88 <__ieee754_fmod+0x84>
 8009018:	3b01      	subs	r3, #1
 800901a:	0049      	lsls	r1, r1, #1
 800901c:	e7bb      	b.n	8008f96 <__ieee754_fmod+0x92>
 800901e:	4b40      	ldr	r3, [pc, #256]	; (8009120 <__ieee754_fmod+0x21c>)
 8009020:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8009024:	0049      	lsls	r1, r1, #1
 8009026:	2900      	cmp	r1, #0
 8009028:	f103 33ff 	add.w	r3, r3, #4294967295
 800902c:	dcfa      	bgt.n	8009024 <__ieee754_fmod+0x120>
 800902e:	e7b4      	b.n	8008f9a <__ieee754_fmod+0x96>
 8009030:	ea4f 532e 	mov.w	r3, lr, asr #20
 8009034:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009038:	e7af      	b.n	8008f9a <__ieee754_fmod+0x96>
 800903a:	1a0f      	subs	r7, r1, r0
 800903c:	2f1f      	cmp	r7, #31
 800903e:	dc0a      	bgt.n	8009056 <__ieee754_fmod+0x152>
 8009040:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8009044:	fa08 f807 	lsl.w	r8, r8, r7
 8009048:	fa22 f101 	lsr.w	r1, r2, r1
 800904c:	ea41 0108 	orr.w	r1, r1, r8
 8009050:	fa02 f707 	lsl.w	r7, r2, r7
 8009054:	e7a8      	b.n	8008fa8 <__ieee754_fmod+0xa4>
 8009056:	4933      	ldr	r1, [pc, #204]	; (8009124 <__ieee754_fmod+0x220>)
 8009058:	1a09      	subs	r1, r1, r0
 800905a:	fa02 f101 	lsl.w	r1, r2, r1
 800905e:	2700      	movs	r7, #0
 8009060:	e7a2      	b.n	8008fa8 <__ieee754_fmod+0xa4>
 8009062:	eba2 0c03 	sub.w	ip, r2, r3
 8009066:	f1bc 0f1f 	cmp.w	ip, #31
 800906a:	dc0a      	bgt.n	8009082 <__ieee754_fmod+0x17e>
 800906c:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8009070:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009074:	fa25 f606 	lsr.w	r6, r5, r6
 8009078:	ea46 060e 	orr.w	r6, r6, lr
 800907c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8009080:	e799      	b.n	8008fb6 <__ieee754_fmod+0xb2>
 8009082:	4e28      	ldr	r6, [pc, #160]	; (8009124 <__ieee754_fmod+0x220>)
 8009084:	1af6      	subs	r6, r6, r3
 8009086:	fa05 f606 	lsl.w	r6, r5, r6
 800908a:	f04f 0c00 	mov.w	ip, #0
 800908e:	e792      	b.n	8008fb6 <__ieee754_fmod+0xb2>
 8009090:	4567      	cmp	r7, ip
 8009092:	bf38      	it	cc
 8009094:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8009098:	2a00      	cmp	r2, #0
 800909a:	da05      	bge.n	80090a8 <__ieee754_fmod+0x1a4>
 800909c:	0ffa      	lsrs	r2, r7, #31
 800909e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80090a2:	007f      	lsls	r7, r7, #1
 80090a4:	3801      	subs	r0, #1
 80090a6:	e787      	b.n	8008fb8 <__ieee754_fmod+0xb4>
 80090a8:	ea52 0105 	orrs.w	r1, r2, r5
 80090ac:	f43f af5b 	beq.w	8008f66 <__ieee754_fmod+0x62>
 80090b0:	0fe9      	lsrs	r1, r5, #31
 80090b2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 80090b6:	006f      	lsls	r7, r5, #1
 80090b8:	e7f4      	b.n	80090a4 <__ieee754_fmod+0x1a0>
 80090ba:	0fe8      	lsrs	r0, r5, #31
 80090bc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80090c0:	006d      	lsls	r5, r5, #1
 80090c2:	3b01      	subs	r3, #1
 80090c4:	e789      	b.n	8008fda <__ieee754_fmod+0xd6>
 80090c6:	1ac9      	subs	r1, r1, r3
 80090c8:	2914      	cmp	r1, #20
 80090ca:	dc0a      	bgt.n	80090e2 <__ieee754_fmod+0x1de>
 80090cc:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80090d0:	fa02 f303 	lsl.w	r3, r2, r3
 80090d4:	40cd      	lsrs	r5, r1
 80090d6:	432b      	orrs	r3, r5
 80090d8:	410a      	asrs	r2, r1
 80090da:	ea42 0104 	orr.w	r1, r2, r4
 80090de:	4618      	mov	r0, r3
 80090e0:	e732      	b.n	8008f48 <__ieee754_fmod+0x44>
 80090e2:	291f      	cmp	r1, #31
 80090e4:	dc07      	bgt.n	80090f6 <__ieee754_fmod+0x1f2>
 80090e6:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80090ea:	40cd      	lsrs	r5, r1
 80090ec:	fa02 f303 	lsl.w	r3, r2, r3
 80090f0:	432b      	orrs	r3, r5
 80090f2:	4622      	mov	r2, r4
 80090f4:	e7f1      	b.n	80090da <__ieee754_fmod+0x1d6>
 80090f6:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80090fa:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80090fe:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8009102:	33e2      	adds	r3, #226	; 0xe2
 8009104:	fa42 f303 	asr.w	r3, r2, r3
 8009108:	e7f3      	b.n	80090f2 <__ieee754_fmod+0x1ee>
 800910a:	bf00      	nop
 800910c:	7fefffff 	.word	0x7fefffff
 8009110:	7ff00000 	.word	0x7ff00000
 8009114:	080095f0 	.word	0x080095f0
 8009118:	000fffff 	.word	0x000fffff
 800911c:	fffffbed 	.word	0xfffffbed
 8009120:	fffffc02 	.word	0xfffffc02
 8009124:	fffffbe2 	.word	0xfffffbe2

08009128 <matherr>:
 8009128:	2000      	movs	r0, #0
 800912a:	4770      	bx	lr

0800912c <_init>:
 800912c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912e:	bf00      	nop
 8009130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009132:	bc08      	pop	{r3}
 8009134:	469e      	mov	lr, r3
 8009136:	4770      	bx	lr

08009138 <_fini>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr
