
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08002ee4  08002ee4  00012ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f34  08002f34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f38  08002f38  00012f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002f48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002f48  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093bf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016a1  00000000  00000000  000293fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002aaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000848  00000000  00000000  0002b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f082  00000000  00000000  0002bbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007327  00000000  00000000  0004ac7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bc7ed  00000000  00000000  00051fa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010e78e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  0010e80c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002ecc 	.word	0x08002ecc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002ecc 	.word	0x08002ecc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc87 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81e 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8ce 	bl	8000678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f89c 	bl	8000618 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

	  //Vivek Patel
	  //Red First letter
	  morseCode('v',GPIO_PIN_4);
 80004e0:	2110      	movs	r1, #16
 80004e2:	2076      	movs	r0, #118	; 0x76
 80004e4:	f000 f912 	bl	800070c <morseCode>
	  wStop();
 80004e8:	f000 fb66 	bl	8000bb8 <wStop>

	  //Green second letter
	  morseCode('p',GPIO_PIN_5);
 80004ec:	2120      	movs	r1, #32
 80004ee:	2070      	movs	r0, #112	; 0x70
 80004f0:	f000 f90c 	bl	800070c <morseCode>
	  iStop();
 80004f4:	f000 fb68 	bl	8000bc8 <iStop>

	  //Uday Sharma
	  //Red First letter
	  morseCode('u',GPIO_PIN_4);
 80004f8:	2110      	movs	r1, #16
 80004fa:	2075      	movs	r0, #117	; 0x75
 80004fc:	f000 f906 	bl	800070c <morseCode>
	  wStop();
 8000500:	f000 fb5a 	bl	8000bb8 <wStop>

	  //green second letter
	  morseCode('s',GPIO_PIN_5);
 8000504:	2120      	movs	r1, #32
 8000506:	2073      	movs	r0, #115	; 0x73
 8000508:	f000 f900 	bl	800070c <morseCode>
	  iStop();
 800050c:	f000 fb5c 	bl	8000bc8 <iStop>
	  morseCode('v',GPIO_PIN_4);
 8000510:	e7e6      	b.n	80004e0 <main+0x14>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ac      	sub	sp, #176	; 0xb0
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fcca 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2254      	movs	r2, #84	; 0x54
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fcbc 	bl	8002ebc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f000 ff4c 	bl	80013e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b32      	ldr	r3, [pc, #200]	; (8000614 <SystemClock_Config+0x100>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a31      	ldr	r2, [pc, #196]	; (8000614 <SystemClock_Config+0x100>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800056c:	2360      	movs	r3, #96	; 0x60
 800056e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000578:	2301      	movs	r3, #1
 800057a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000584:	2310      	movs	r3, #16
 8000586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800058a:	2307      	movs	r3, #7
 800058c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 ff91 	bl	80014c8 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005ac:	f000 fb14 	bl	8000bd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c8:	2101      	movs	r1, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fb9c 	bl	8001d08 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d6:	f000 faff 	bl	8000bd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005da:	2302      	movs	r3, #2
 80005dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005de:	2300      	movs	r3, #0
 80005e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fd93 	bl	8002110 <HAL_RCCEx_PeriphCLKConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80005f0:	f000 faf2 	bl	8000bd8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f8:	f000 ff10 	bl	800141c <HAL_PWREx_ControlVoltageScaling>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000602:	f000 fae9 	bl	8000bd8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000606:	f001 ff75 	bl	80024f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060a:	bf00      	nop
 800060c:	37b0      	adds	r7, #176	; 0xb0
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_USART2_UART_Init+0x5c>)
 8000620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x58>)
 8000656:	2200      	movs	r2, #0
 8000658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x58>)
 800065c:	f002 f84a 	bl	80026f4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 fab7 	bl	8000bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028
 8000674:	40004400 	.word	0x40004400

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_GPIO_Init+0x8c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_GPIO_Init+0x8c>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_GPIO_Init+0x8c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_GPIO_Init+0x8c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2138      	movs	r1, #56	; 0x38
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x90>)
 80006dc:	f000 fe68 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin PB4 PB5 */
  GPIO_InitStruct.Pin = LD3_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80006e0:	2338      	movs	r3, #56	; 0x38
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_GPIO_Init+0x90>)
 80006f8:	f000 fcf0 	bl	80010dc <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000400 	.word	0x48000400

0800070c <morseCode>:

/* USER CODE BEGIN 4 */
void morseCode(char letter, uint16_t pin)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	71fb      	strb	r3, [r7, #7]
 8000718:	4613      	mov	r3, r2
 800071a:	80bb      	strh	r3, [r7, #4]
	switch(letter){
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3b61      	subs	r3, #97	; 0x61
 8000720:	2b19      	cmp	r3, #25
 8000722:	f200 8206 	bhi.w	8000b32 <morseCode+0x426>
 8000726:	a201      	add	r2, pc, #4	; (adr r2, 800072c <morseCode+0x20>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	08000795 	.word	0x08000795
 8000730:	080007ab 	.word	0x080007ab
 8000734:	080007d9 	.word	0x080007d9
 8000738:	08000807 	.word	0x08000807
 800073c:	08000829 	.word	0x08000829
 8000740:	08000833 	.word	0x08000833
 8000744:	08000861 	.word	0x08000861
 8000748:	08000881 	.word	0x08000881
 800074c:	080008af 	.word	0x080008af
 8000750:	080008c5 	.word	0x080008c5
 8000754:	080008f3 	.word	0x080008f3
 8000758:	08000915 	.word	0x08000915
 800075c:	08000943 	.word	0x08000943
 8000760:	08000959 	.word	0x08000959
 8000764:	0800096f 	.word	0x0800096f
 8000768:	08000991 	.word	0x08000991
 800076c:	080009bd 	.word	0x080009bd
 8000770:	080009eb 	.word	0x080009eb
 8000774:	08000a0d 	.word	0x08000a0d
 8000778:	08000a2f 	.word	0x08000a2f
 800077c:	08000a39 	.word	0x08000a39
 8000780:	08000a5b 	.word	0x08000a5b
 8000784:	08000a87 	.word	0x08000a87
 8000788:	08000aa9 	.word	0x08000aa9
 800078c:	08000ad7 	.word	0x08000ad7
 8000790:	08000b05 	.word	0x08000b05
	case 'a':
	  dot(pin);
 8000794:	88bb      	ldrh	r3, [r7, #4]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f9d0 	bl	8000b3c <dot>
	  lStop();
 800079c:	f000 fa04 	bl	8000ba8 <lStop>
	  dash(pin);
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f9e4 	bl	8000b70 <dash>
	  break;
 80007a8:	e1c3      	b.n	8000b32 <morseCode+0x426>
	case 'b':
	  dash(pin);
 80007aa:	88bb      	ldrh	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f9df 	bl	8000b70 <dash>
	  lStop();
 80007b2:	f000 f9f9 	bl	8000ba8 <lStop>
	  dot(pin);
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 f9bf 	bl	8000b3c <dot>
	  lStop();
 80007be:	f000 f9f3 	bl	8000ba8 <lStop>
	  dot(pin);
 80007c2:	88bb      	ldrh	r3, [r7, #4]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f9b9 	bl	8000b3c <dot>
	  lStop();
 80007ca:	f000 f9ed 	bl	8000ba8 <lStop>
	  dot(pin);
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f9b3 	bl	8000b3c <dot>
	  break;
 80007d6:	e1ac      	b.n	8000b32 <morseCode+0x426>
	case 'c':
	  dash(pin);
 80007d8:	88bb      	ldrh	r3, [r7, #4]
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 f9c8 	bl	8000b70 <dash>
	  lStop();
 80007e0:	f000 f9e2 	bl	8000ba8 <lStop>
	  dot(pin);
 80007e4:	88bb      	ldrh	r3, [r7, #4]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f9a8 	bl	8000b3c <dot>
	  lStop();
 80007ec:	f000 f9dc 	bl	8000ba8 <lStop>
	  dash(pin);
 80007f0:	88bb      	ldrh	r3, [r7, #4]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f9bc 	bl	8000b70 <dash>
	  lStop();
 80007f8:	f000 f9d6 	bl	8000ba8 <lStop>
      dot(pin);
 80007fc:	88bb      	ldrh	r3, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f99c 	bl	8000b3c <dot>
	  break;
 8000804:	e195      	b.n	8000b32 <morseCode+0x426>
	case 'd':
	  dash(pin);
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f9b1 	bl	8000b70 <dash>
	  lStop();
 800080e:	f000 f9cb 	bl	8000ba8 <lStop>
	  dot(pin);
 8000812:	88bb      	ldrh	r3, [r7, #4]
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f991 	bl	8000b3c <dot>
	  lStop();
 800081a:	f000 f9c5 	bl	8000ba8 <lStop>
	  dot(pin);
 800081e:	88bb      	ldrh	r3, [r7, #4]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f98b 	bl	8000b3c <dot>
	  break;
 8000826:	e184      	b.n	8000b32 <morseCode+0x426>
	case 'e':
	  dot(pin);
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f986 	bl	8000b3c <dot>
	  break;
 8000830:	e17f      	b.n	8000b32 <morseCode+0x426>
	case 'f':
	  dot(pin);
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 f981 	bl	8000b3c <dot>
	  lStop();
 800083a:	f000 f9b5 	bl	8000ba8 <lStop>
	  dot(pin);
 800083e:	88bb      	ldrh	r3, [r7, #4]
 8000840:	4618      	mov	r0, r3
 8000842:	f000 f97b 	bl	8000b3c <dot>
	  lStop();
 8000846:	f000 f9af 	bl	8000ba8 <lStop>
	  dash(pin);
 800084a:	88bb      	ldrh	r3, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	f000 f98f 	bl	8000b70 <dash>
	  lStop();
 8000852:	f000 f9a9 	bl	8000ba8 <lStop>
	  dot(pin);
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f96f 	bl	8000b3c <dot>
	  break;
 800085e:	e168      	b.n	8000b32 <morseCode+0x426>
	case 'g':
	  dash(pin);
 8000860:	88bb      	ldrh	r3, [r7, #4]
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f984 	bl	8000b70 <dash>
	  lStop();
 8000868:	f000 f99e 	bl	8000ba8 <lStop>
	  dash(pin);
 800086c:	88bb      	ldrh	r3, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f97e 	bl	8000b70 <dash>
	  lStop();
 8000874:	f000 f998 	bl	8000ba8 <lStop>
	  dot(pin);
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f000 f95e 	bl	8000b3c <dot>
	case 'h':
	  dot(pin);
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f95a 	bl	8000b3c <dot>
	  lStop();
 8000888:	f000 f98e 	bl	8000ba8 <lStop>
	  dot(pin);
 800088c:	88bb      	ldrh	r3, [r7, #4]
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f954 	bl	8000b3c <dot>
	  lStop();
 8000894:	f000 f988 	bl	8000ba8 <lStop>
	  dot(pin);
 8000898:	88bb      	ldrh	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f94e 	bl	8000b3c <dot>
	  lStop();
 80008a0:	f000 f982 	bl	8000ba8 <lStop>
	  dot(pin);
 80008a4:	88bb      	ldrh	r3, [r7, #4]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f000 f948 	bl	8000b3c <dot>
	  break;
 80008ac:	e141      	b.n	8000b32 <morseCode+0x426>
	case 'i':
	  dot(pin);
 80008ae:	88bb      	ldrh	r3, [r7, #4]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 f943 	bl	8000b3c <dot>
	  lStop();
 80008b6:	f000 f977 	bl	8000ba8 <lStop>
	  dot(pin);
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f93d 	bl	8000b3c <dot>
	  break;
 80008c2:	e136      	b.n	8000b32 <morseCode+0x426>
	case 'j':
	  dot(pin);
 80008c4:	88bb      	ldrh	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f938 	bl	8000b3c <dot>
	  lStop();
 80008cc:	f000 f96c 	bl	8000ba8 <lStop>
	  dash(pin);
 80008d0:	88bb      	ldrh	r3, [r7, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f94c 	bl	8000b70 <dash>
	  lStop();
 80008d8:	f000 f966 	bl	8000ba8 <lStop>
	  dash(pin);
 80008dc:	88bb      	ldrh	r3, [r7, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f946 	bl	8000b70 <dash>
	  lStop();
 80008e4:	f000 f960 	bl	8000ba8 <lStop>
	  dash(pin);
 80008e8:	88bb      	ldrh	r3, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 f940 	bl	8000b70 <dash>
	  break;
 80008f0:	e11f      	b.n	8000b32 <morseCode+0x426>
	case 'k':
	  dash(pin);
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 f93b 	bl	8000b70 <dash>
	  lStop();
 80008fa:	f000 f955 	bl	8000ba8 <lStop>
	  dot(pin);
 80008fe:	88bb      	ldrh	r3, [r7, #4]
 8000900:	4618      	mov	r0, r3
 8000902:	f000 f91b 	bl	8000b3c <dot>
	  lStop();
 8000906:	f000 f94f 	bl	8000ba8 <lStop>
	  dash(pin);
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 f92f 	bl	8000b70 <dash>
	  break;
 8000912:	e10e      	b.n	8000b32 <morseCode+0x426>
	case 'l':
	  dot(pin);
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f910 	bl	8000b3c <dot>
	  lStop();
 800091c:	f000 f944 	bl	8000ba8 <lStop>
	  dash(pin);
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	4618      	mov	r0, r3
 8000924:	f000 f924 	bl	8000b70 <dash>
	  lStop();
 8000928:	f000 f93e 	bl	8000ba8 <lStop>
	  dot(pin);
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	f000 f904 	bl	8000b3c <dot>
	  lStop();
 8000934:	f000 f938 	bl	8000ba8 <lStop>
	  dot(pin);
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f8fe 	bl	8000b3c <dot>
	  break;
 8000940:	e0f7      	b.n	8000b32 <morseCode+0x426>
	case 'm':
	  dash(pin);
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 f913 	bl	8000b70 <dash>
	  lStop();
 800094a:	f000 f92d 	bl	8000ba8 <lStop>
	  dash(pin);
 800094e:	88bb      	ldrh	r3, [r7, #4]
 8000950:	4618      	mov	r0, r3
 8000952:	f000 f90d 	bl	8000b70 <dash>
	  break;
 8000956:	e0ec      	b.n	8000b32 <morseCode+0x426>
	case 'n':
	  dash(pin);
 8000958:	88bb      	ldrh	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f908 	bl	8000b70 <dash>
	  lStop();
 8000960:	f000 f922 	bl	8000ba8 <lStop>
	  dot(pin);
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f8e8 	bl	8000b3c <dot>
	  break;
 800096c:	e0e1      	b.n	8000b32 <morseCode+0x426>
	case 'o':
	  dash(pin);
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	4618      	mov	r0, r3
 8000972:	f000 f8fd 	bl	8000b70 <dash>
	  lStop();
 8000976:	f000 f917 	bl	8000ba8 <lStop>
	  dash(pin);
 800097a:	88bb      	ldrh	r3, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f8f7 	bl	8000b70 <dash>
	  lStop();
 8000982:	f000 f911 	bl	8000ba8 <lStop>
	  dash(pin);
 8000986:	88bb      	ldrh	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f8f1 	bl	8000b70 <dash>
	  break;
 800098e:	e0d0      	b.n	8000b32 <morseCode+0x426>
	case 'p':
	  dot(pin);
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f8d2 	bl	8000b3c <dot>
	  lStop();
 8000998:	f000 f906 	bl	8000ba8 <lStop>
	  dash(pin);
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f8e6 	bl	8000b70 <dash>
	  lStop();
 80009a4:	f000 f900 	bl	8000ba8 <lStop>
	  dash(pin);
 80009a8:	88bb      	ldrh	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f8e0 	bl	8000b70 <dash>
	  lStop();
 80009b0:	f000 f8fa 	bl	8000ba8 <lStop>
	  dot(pin);
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f8c0 	bl	8000b3c <dot>
	case 'q':
	  dash(pin);
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f8d6 	bl	8000b70 <dash>
	  lStop();
 80009c4:	f000 f8f0 	bl	8000ba8 <lStop>
	  dash(pin);
 80009c8:	88bb      	ldrh	r3, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f8d0 	bl	8000b70 <dash>
	  lStop();
 80009d0:	f000 f8ea 	bl	8000ba8 <lStop>
	  dot(pin);
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 f8b0 	bl	8000b3c <dot>
	  lStop();
 80009dc:	f000 f8e4 	bl	8000ba8 <lStop>
	  dash(pin);
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 f8c4 	bl	8000b70 <dash>
	  break;
 80009e8:	e0a3      	b.n	8000b32 <morseCode+0x426>
	case 'r':
      dot(pin);
 80009ea:	88bb      	ldrh	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f8a5 	bl	8000b3c <dot>
	  lStop();
 80009f2:	f000 f8d9 	bl	8000ba8 <lStop>
	  dash(pin);
 80009f6:	88bb      	ldrh	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8b9 	bl	8000b70 <dash>
	  lStop();
 80009fe:	f000 f8d3 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f899 	bl	8000b3c <dot>
	  break;
 8000a0a:	e092      	b.n	8000b32 <morseCode+0x426>
	case 's':
	  dot(pin);
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f894 	bl	8000b3c <dot>
	  lStop();
 8000a14:	f000 f8c8 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f88e 	bl	8000b3c <dot>
	  lStop();
 8000a20:	f000 f8c2 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f888 	bl	8000b3c <dot>
	  break;
 8000a2c:	e081      	b.n	8000b32 <morseCode+0x426>
	case 't':
	  dash(pin);
 8000a2e:	88bb      	ldrh	r3, [r7, #4]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f89d 	bl	8000b70 <dash>
	  break;
 8000a36:	e07c      	b.n	8000b32 <morseCode+0x426>
	case 'u':
	  dot(pin);
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f87e 	bl	8000b3c <dot>
	  lStop();
 8000a40:	f000 f8b2 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f878 	bl	8000b3c <dot>
	  lStop();
 8000a4c:	f000 f8ac 	bl	8000ba8 <lStop>
	  dash(pin);
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f88c 	bl	8000b70 <dash>
	  break;
 8000a58:	e06b      	b.n	8000b32 <morseCode+0x426>
	case 'v':
	  dot(pin);
 8000a5a:	88bb      	ldrh	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 f86d 	bl	8000b3c <dot>
	  lStop();
 8000a62:	f000 f8a1 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a66:	88bb      	ldrh	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f867 	bl	8000b3c <dot>
	  lStop();
 8000a6e:	f000 f89b 	bl	8000ba8 <lStop>
	  dot(pin);
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 f861 	bl	8000b3c <dot>
	  lStop();
 8000a7a:	f000 f895 	bl	8000ba8 <lStop>
	  dash(pin);
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f875 	bl	8000b70 <dash>
	case 'w':
	  dot(pin);
 8000a86:	88bb      	ldrh	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f857 	bl	8000b3c <dot>
	  lStop();
 8000a8e:	f000 f88b 	bl	8000ba8 <lStop>
	  dash(pin);
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f86b 	bl	8000b70 <dash>
	  lStop();
 8000a9a:	f000 f885 	bl	8000ba8 <lStop>
	  dash(pin);
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f865 	bl	8000b70 <dash>
	  break;
 8000aa6:	e044      	b.n	8000b32 <morseCode+0x426>
	case 'x':
	  dash(pin);
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f860 	bl	8000b70 <dash>
	  lStop();
 8000ab0:	f000 f87a 	bl	8000ba8 <lStop>
	  dot(pin);
 8000ab4:	88bb      	ldrh	r3, [r7, #4]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f840 	bl	8000b3c <dot>
	  lStop();
 8000abc:	f000 f874 	bl	8000ba8 <lStop>
	  dot(pin);
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f83a 	bl	8000b3c <dot>
	  lStop();
 8000ac8:	f000 f86e 	bl	8000ba8 <lStop>
	  dash(pin);
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f84e 	bl	8000b70 <dash>
	  break;
 8000ad4:	e02d      	b.n	8000b32 <morseCode+0x426>
	case 'y':
	  dash(pin);
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f849 	bl	8000b70 <dash>
	  lStop();
 8000ade:	f000 f863 	bl	8000ba8 <lStop>
	  dot(pin);
 8000ae2:	88bb      	ldrh	r3, [r7, #4]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f829 	bl	8000b3c <dot>
	  lStop();
 8000aea:	f000 f85d 	bl	8000ba8 <lStop>
	  dash(pin);
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 f83d 	bl	8000b70 <dash>
	  lStop();
 8000af6:	f000 f857 	bl	8000ba8 <lStop>
	  dash(pin);
 8000afa:	88bb      	ldrh	r3, [r7, #4]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f837 	bl	8000b70 <dash>
	  break;
 8000b02:	e016      	b.n	8000b32 <morseCode+0x426>
	case 'z':
	  dash(pin);
 8000b04:	88bb      	ldrh	r3, [r7, #4]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f832 	bl	8000b70 <dash>
	  lStop();
 8000b0c:	f000 f84c 	bl	8000ba8 <lStop>
	  dash(pin);
 8000b10:	88bb      	ldrh	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f82c 	bl	8000b70 <dash>
	  lStop();
 8000b18:	f000 f846 	bl	8000ba8 <lStop>
	  dot(pin);
 8000b1c:	88bb      	ldrh	r3, [r7, #4]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f80c 	bl	8000b3c <dot>
	  lStop();
 8000b24:	f000 f840 	bl	8000ba8 <lStop>
	  dot(pin);
 8000b28:	88bb      	ldrh	r3, [r7, #4]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f806 	bl	8000b3c <dot>
	  break;
 8000b30:	bf00      	nop
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop

08000b3c <dot>:
// RETURNS       :
//   void
//

void dot(uint16_t pin)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000b46:	88fb      	ldrh	r3, [r7, #6]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <dot+0x30>)
 8000b4e:	f000 fc2f 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b56:	f000 f9b9 	bl	8000ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <dot+0x30>)
 8000b60:	f000 fc26 	bl	80013b0 <HAL_GPIO_WritePin>

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	48000400 	.word	0x48000400

08000b70 <dash>:

void dash(uint16_t pin)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB, pin, GPIO_PIN_SET);
 8000b7a:	88fb      	ldrh	r3, [r7, #6]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <dash+0x34>)
 8000b82:	f000 fc15 	bl	80013b0 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8000b86:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000b8a:	f000 f99f 	bl	8000ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, pin, 0);
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	2200      	movs	r2, #0
 8000b92:	4619      	mov	r1, r3
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <dash+0x34>)
 8000b96:	f000 fc0b 	bl	80013b0 <HAL_GPIO_WritePin>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <lStop>:

void lStop()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000bac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb0:	f000 f98c 	bl	8000ecc <HAL_Delay>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <wStop>:
void wStop()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	HAL_Delay(1500);
 8000bbc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000bc0:	f000 f984 	bl	8000ecc <HAL_Delay>
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <iStop>:
void iStop()
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	HAL_Delay(2500);
 8000bcc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8000bd0:	f000 f97c 	bl	8000ecc <HAL_Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bde:	e7fe      	b.n	8000bde <Error_Handler+0x6>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a20      	ldr	r2, [pc, #128]	; (8000cc8 <HAL_UART_MspInit+0xa0>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d13a      	bne.n	8000cc0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <HAL_UART_MspInit+0xa4>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f000 fa20 	bl	80010dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f000 fa0e 	bl	80010dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	; 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8b6 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <SystemInit+0x64>)
 8000d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2e:	4a16      	ldr	r2, [pc, #88]	; (8000d88 <SystemInit+0x64>)
 8000d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <SystemInit+0x68>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <SystemInit+0x68>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <SystemInit+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <SystemInit+0x68>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <SystemInit+0x68>)
 8000d50:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d54:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <SystemInit+0x68>)
 8000d5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <SystemInit+0x68>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <SystemInit+0x68>)
 8000d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <SystemInit+0x68>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SystemInit+0x64>)
 8000d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00
 8000d8c:	40021000 	.word	0x40021000

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d94:	f7ff ffc6 	bl	8000d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000da4:	480a      	ldr	r0, [pc, #40]	; (8000dd0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000daa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
	ldr	r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000db2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <LoopForever+0x16>)
	cmp	r2, r3
 8000dba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 f859 	bl	8002e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc2:	f7ff fb83 	bl	80004cc <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dc8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000dcc:	08002f3c 	.word	0x08002f3c
	ldr	r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dd4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000dd8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ddc:	200000ac 	.word	0x200000ac

08000de0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_IRQHandler>

08000de2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f941 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000df2:	2000      	movs	r0, #0
 8000df4:	f000 f80e 	bl	8000e14 <HAL_InitTick>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	71fb      	strb	r3, [r7, #7]
 8000e02:	e001      	b.n	8000e08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e04:	f7ff feec 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d023      	beq.n	8000e70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_InitTick+0x70>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_InitTick+0x6c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f93f 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10f      	bne.n	8000e6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d809      	bhi.n	8000e64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f000 f917 	bl	800108a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_InitTick+0x74>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	e007      	b.n	8000e74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
 8000e68:	e004      	b.n	8000e74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e001      	b.n	8000e74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200000a8 	.word	0x200000a8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200000a8 	.word	0x200000a8

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_Delay+0x40>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5c 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb0 	bl	8001030 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e148      	b.n	800137e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	2101      	movs	r1, #1
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	4013      	ands	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f000 813a 	beq.w	8001378 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d00b      	beq.n	8001124 <HAL_GPIO_Init+0x48>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d007      	beq.n	8001124 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001118:	2b11      	cmp	r3, #17
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d130      	bne.n	8001186 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800115a:	2201      	movs	r2, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	f003 0201 	and.w	r2, r3, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0xea>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b12      	cmp	r3, #18
 80011c4:	d123      	bne.n	800120e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4013      	ands	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	08da      	lsrs	r2, r3, #3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3208      	adds	r2, #8
 8001208:	6939      	ldr	r1, [r7, #16]
 800120a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0203 	and.w	r2, r3, #3
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 8094 	beq.w	8001378 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001250:	4b52      	ldr	r3, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2c0>)
 8001252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x2c0>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6613      	str	r3, [r2, #96]	; 0x60
 800125c:	4b4f      	ldr	r3, [pc, #316]	; (800139c <HAL_GPIO_Init+0x2c0>)
 800125e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001292:	d00d      	beq.n	80012b0 <HAL_GPIO_Init+0x1d4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a43      	ldr	r2, [pc, #268]	; (80013a4 <HAL_GPIO_Init+0x2c8>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <HAL_GPIO_Init+0x1d0>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <HAL_GPIO_Init+0x2cc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d101      	bne.n	80012a8 <HAL_GPIO_Init+0x1cc>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012a8:	2307      	movs	r3, #7
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1d6>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2c4>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012d0:	4b36      	ldr	r3, [pc, #216]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012f4:	4a2d      	ldr	r2, [pc, #180]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131e:	4a23      	ldr	r2, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001348:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001372:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <HAL_GPIO_Init+0x2d0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f aeaf 	bne.w	80010ec <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	371c      	adds	r7, #28
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013cc:	e002      	b.n	80013d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000

08001400 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <HAL_PWREx_GetVoltageRange+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40007000 	.word	0x40007000

0800141c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800142a:	d130      	bne.n	800148e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001438:	d038      	beq.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001442:	4a1e      	ldr	r2, [pc, #120]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001444:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001448:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	fb02 f303 	mul.w	r3, r2, r3
 8001454:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001460:	e002      	b.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3b01      	subs	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d102      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f2      	bne.n	8001462 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001488:	d110      	bne.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e00f      	b.n	80014ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149a:	d007      	beq.n	80014ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40007000 	.word	0x40007000
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 bc11 	b.w	8001cfe <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014dc:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e6:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0310 	and.w	r3, r3, #16
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80e4 	beq.w	80016c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d007      	beq.n	8001514 <HAL_RCC_OscConfig+0x4c>
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b0c      	cmp	r3, #12
 8001508:	f040 808b 	bne.w	8001622 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2b01      	cmp	r3, #1
 8001510:	f040 8087 	bne.w	8001622 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_RCC_OscConfig+0x64>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e3e8      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4b8b      	ldr	r3, [pc, #556]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_RCC_OscConfig+0x7e>
 800153c:	4b88      	ldr	r3, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001544:	e005      	b.n	8001552 <HAL_RCC_OscConfig+0x8a>
 8001546:	4b86      	ldr	r3, [pc, #536]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001552:	4293      	cmp	r3, r2
 8001554:	d223      	bcs.n	800159e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4618      	mov	r0, r3
 800155c:	f000 fd78 	bl	8002050 <RCC_SetFlashLatencyFromMSIRange>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e3c9      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800156a:	4b7d      	ldr	r3, [pc, #500]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7c      	ldr	r2, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b7a      	ldr	r3, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4977      	ldr	r1, [pc, #476]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001584:	4313      	orrs	r3, r2
 8001586:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	021b      	lsls	r3, r3, #8
 8001596:	4972      	ldr	r1, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001598:	4313      	orrs	r3, r2
 800159a:	604b      	str	r3, [r1, #4]
 800159c:	e025      	b.n	80015ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159e:	4b70      	ldr	r3, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	496a      	ldr	r1, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015bc:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	4965      	ldr	r1, [pc, #404]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d109      	bne.n	80015ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fd38 	bl	8002050 <RCC_SetFlashLatencyFromMSIRange>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e389      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015ea:	f000 fc6f 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 80015ee:	4601      	mov	r1, r0
 80015f0:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x29c>)
 80015fc:	5cd3      	ldrb	r3, [r2, r3]
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	fa21 f303 	lsr.w	r3, r1, r3
 8001606:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_OscConfig+0x2a0>)
 8001608:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800160a:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_RCC_OscConfig+0x2a4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc00 	bl	8000e14 <HAL_InitTick>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d052      	beq.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	e36d      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d032      	beq.n	8001690 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001636:	f7ff fc3d 	bl	8000eb4 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800163e:	f7ff fc39 	bl	8000eb4 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e356      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001650:	4b43      	ldr	r3, [pc, #268]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165c:	4b40      	ldr	r3, [pc, #256]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	493a      	ldr	r1, [pc, #232]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4935      	ldr	r1, [pc, #212]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e01a      	b.n	80016c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001690:	4b33      	ldr	r3, [pc, #204]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a32      	ldr	r2, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800169c:	f7ff fc0a 	bl	8000eb4 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016a4:	f7ff fc06 	bl	8000eb4 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e323      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016b6:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1f0      	bne.n	80016a4 <HAL_RCC_OscConfig+0x1dc>
 80016c2:	e000      	b.n	80016c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d073      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x21c>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d10e      	bne.n	80016fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d063      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d15f      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e300      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x24c>
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0x288>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x270>
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x288>
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a05      	ldr	r2, [pc, #20]	; (8001760 <HAL_RCC_OscConfig+0x298>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fbac 	bl	8000eb4 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800175e:	e010      	b.n	8001782 <HAL_RCC_OscConfig+0x2ba>
 8001760:	40021000 	.word	0x40021000
 8001764:	08002ee4 	.word	0x08002ee4
 8001768:	20000000 	.word	0x20000000
 800176c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001770:	f7ff fba0 	bl	8000eb4 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b64      	cmp	r3, #100	; 0x64
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e2bd      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001782:	4baf      	ldr	r3, [pc, #700]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f0      	beq.n	8001770 <HAL_RCC_OscConfig+0x2a8>
 800178e:	e014      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001790:	f7ff fb90 	bl	8000eb4 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fb8c 	bl	8000eb4 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e2a9      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017aa:	4ba5      	ldr	r3, [pc, #660]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d0>
 80017b6:	e000      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d060      	beq.n	8001888 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_OscConfig+0x310>
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b0c      	cmp	r3, #12
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d116      	bne.n	8001806 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	4b99      	ldr	r3, [pc, #612]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_OscConfig+0x328>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e286      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	4990      	ldr	r1, [pc, #576]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	e040      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d023      	beq.n	8001856 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800180e:	4b8c      	ldr	r3, [pc, #560]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a8b      	ldr	r2, [pc, #556]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fb4b 	bl	8000eb4 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fb47 	bl	8000eb4 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e264      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001834:	4b82      	ldr	r3, [pc, #520]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001840:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	061b      	lsls	r3, r3, #24
 800184e:	497c      	ldr	r1, [pc, #496]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
 8001854:	e018      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	4b7a      	ldr	r3, [pc, #488]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a79      	ldr	r2, [pc, #484]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800185c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff fb27 	bl	8000eb4 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fb23 	bl	8000eb4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e240      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800187c:	4b70      	ldr	r3, [pc, #448]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03c      	beq.n	800190e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800189e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a2:	4a67      	ldr	r2, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb02 	bl	8000eb4 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fafe 	bl	8000eb4 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e21b      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018c6:	4b5e      	ldr	r3, [pc, #376]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ef      	beq.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
 80018d4:	e01b      	b.n	800190e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018d6:	4b5a      	ldr	r3, [pc, #360]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018dc:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80018de:	f023 0301 	bic.w	r3, r3, #1
 80018e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e6:	f7ff fae5 	bl	8000eb4 <HAL_GetTick>
 80018ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ee:	f7ff fae1 	bl	8000eb4 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e1fe      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001900:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1ef      	bne.n	80018ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a6 	beq.w	8001a68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001920:	4b47      	ldr	r3, [pc, #284]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10d      	bne.n	8001948 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	4a43      	ldr	r2, [pc, #268]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001936:	6593      	str	r3, [r2, #88]	; 0x58
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001944:	2301      	movs	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d118      	bne.n	8001986 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001960:	f7ff faa8 	bl	8000eb4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001968:	f7ff faa4 	bl	8000eb4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e1c1      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_RCC_OscConfig+0x57c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d108      	bne.n	80019a0 <HAL_RCC_OscConfig+0x4d8>
 800198e:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001994:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800199e:	e024      	b.n	80019ea <HAL_RCC_OscConfig+0x522>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b05      	cmp	r3, #5
 80019a6:	d110      	bne.n	80019ca <HAL_RCC_OscConfig+0x502>
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ae:	4a24      	ldr	r2, [pc, #144]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	4a20      	ldr	r2, [pc, #128]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c8:	e00f      	b.n	80019ea <HAL_RCC_OscConfig+0x522>
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e0:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f023 0304 	bic.w	r3, r3, #4
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d016      	beq.n	8001a20 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff fa5f 	bl	8000eb4 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019f8:	e00a      	b.n	8001a10 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019fa:	f7ff fa5b 	bl	8000eb4 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e176      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <HAL_RCC_OscConfig+0x578>)
 8001a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0ed      	beq.n	80019fa <HAL_RCC_OscConfig+0x532>
 8001a1e:	e01a      	b.n	8001a56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fa48 	bl	8000eb4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a26:	e00f      	b.n	8001a48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a28:	f7ff fa44 	bl	8000eb4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d906      	bls.n	8001a48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e15f      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a48:	4baa      	ldr	r3, [pc, #680]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1e8      	bne.n	8001a28 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a5c:	4ba5      	ldr	r3, [pc, #660]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	4aa4      	ldr	r2, [pc, #656]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03c      	beq.n	8001aee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a7c:	4b9d      	ldr	r3, [pc, #628]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001a7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a82:	4a9c      	ldr	r2, [pc, #624]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa12 	bl	8000eb4 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a94:	f7ff fa0e 	bl	8000eb4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e12b      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001aa6:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x5cc>
 8001ab4:	e01b      	b.n	8001aee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ab6:	4b8f      	ldr	r3, [pc, #572]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001ab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001abc:	4a8d      	ldr	r2, [pc, #564]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f9f5 	bl	8000eb4 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ace:	f7ff f9f1 	bl	8000eb4 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e10e      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ae0:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001ae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ef      	bne.n	8001ace <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8102 	beq.w	8001cfc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	f040 80c5 	bne.w	8001c8c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f003 0203 	and.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d12c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	3b01      	subs	r3, #1
 8001b22:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d123      	bne.n	8001b70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b32:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d11b      	bne.n	8001b70 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d113      	bne.n	8001b70 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b52:	085b      	lsrs	r3, r3, #1
 8001b54:	3b01      	subs	r3, #1
 8001b56:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	085b      	lsrs	r3, r3, #1
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d067      	beq.n	8001c40 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	2b0c      	cmp	r3, #12
 8001b74:	d062      	beq.n	8001c3c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b76:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0bb      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b86:	4b5b      	ldr	r3, [pc, #364]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b92:	f7ff f98f 	bl	8000eb4 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff f98b 	bl	8000eb4 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0a8      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <HAL_RCC_OscConfig+0x830>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd2:	0212      	lsls	r2, r2, #8
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bda:	0852      	lsrs	r2, r2, #1
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0552      	lsls	r2, r2, #21
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001be6:	0852      	lsrs	r2, r2, #1
 8001be8:	3a01      	subs	r2, #1
 8001bea:	0652      	lsls	r2, r2, #25
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf2:	06d2      	lsls	r2, r2, #27
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	493f      	ldr	r1, [pc, #252]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b3d      	ldr	r3, [pc, #244]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a3c      	ldr	r2, [pc, #240]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f94e 	bl	8000eb4 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f94a 	bl	8000eb4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	e05f      	b.n	8001cfc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e05e      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b2c      	ldr	r3, [pc, #176]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a28      	ldr	r2, [pc, #160]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a25      	ldr	r2, [pc, #148]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7ff f926 	bl	8000eb4 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff f922 	bl	8000eb4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e03f      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x7a4>
 8001c8a:	e037      	b.n	8001cfc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d02d      	beq.n	8001cee <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001cb0:	f023 0303 	bic.w	r3, r3, #3
 8001cb4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7ff f8f5 	bl	8000eb4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff f8f1 	bl	8000eb4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e00e      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_RCC_OscConfig+0x82c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x806>
 8001cec:	e006      	b.n	8001cfc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e005      	b.n	8001cfe <HAL_RCC_OscConfig+0x836>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3720      	adds	r7, #32
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0c8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b66      	ldr	r3, [pc, #408]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4961      	ldr	r1, [pc, #388]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d04c      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d60:	4b56      	ldr	r3, [pc, #344]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d121      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e09e      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d115      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e092      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e086      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07e      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001db0:	4b42      	ldr	r3, [pc, #264]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 0203 	bic.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	493f      	ldr	r1, [pc, #252]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc2:	f7ff f877 	bl	8000eb4 <HAL_GetTick>
 8001dc6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dca:	f7ff f873 	bl	8000eb4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e066      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	4b36      	ldr	r3, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 020c 	and.w	r2, r3, #12
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d1eb      	bne.n	8001dca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d008      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	492c      	ldr	r1, [pc, #176]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e10:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d210      	bcs.n	8001e40 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b26      	ldr	r3, [pc, #152]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 0207 	bic.w	r2, r3, #7
 8001e26:	4924      	ldr	r1, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1b0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e036      	b.n	8001eae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	4918      	ldr	r1, [pc, #96]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4910      	ldr	r1, [pc, #64]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e7e:	f000 f825 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e82:	4601      	mov	r1, r0
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_RCC_ClockConfig+0x1b4>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	091b      	lsrs	r3, r3, #4
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	5cd3      	ldrb	r3, [r2, r3]
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	fa21 f303 	lsr.w	r3, r1, r3
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe ffb6 	bl	8000e14 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001eac:	7afb      	ldrb	r3, [r7, #11]
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08002ee4 	.word	0x08002ee4
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	d121      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d11e      	bne.n	8001f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f00:	4b33      	ldr	r3, [pc, #204]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f0c:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	0a1b      	lsrs	r3, r3, #8
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f28:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10d      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	e004      	b.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	d133      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d002      	beq.n	8001f70 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d003      	beq.n	8001f76 <HAL_RCC_GetSysClockFreq+0xaa>
 8001f6e:	e005      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f70:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f72:	617b      	str	r3, [r7, #20]
      break;
 8001f74:	e005      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f76:	4b19      	ldr	r3, [pc, #100]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f78:	617b      	str	r3, [r7, #20]
      break;
 8001f7a:	e002      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	617b      	str	r3, [r7, #20]
      break;
 8001f80:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	091b      	lsrs	r3, r3, #4
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	fb02 f203 	mul.w	r2, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0e5b      	lsrs	r3, r3, #25
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08002efc 	.word	0x08002efc
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	007a1200 	.word	0x007a1200

08001fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4601      	mov	r1, r0
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	08002ef4 	.word	0x08002ef4

08002024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002028:	f7ff ffda 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 800202c:	4601      	mov	r1, r0
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0adb      	lsrs	r3, r3, #11
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_GetPCLK2Freq+0x28>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40021000 	.word	0x40021000
 800204c:	08002ef4 	.word	0x08002ef4

08002050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800205c:	4b2a      	ldr	r3, [pc, #168]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002068:	f7ff f9ca 	bl	8001400 <HAL_PWREx_GetVoltageRange>
 800206c:	6178      	str	r0, [r7, #20]
 800206e:	e014      	b.n	800209a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002070:	4b25      	ldr	r3, [pc, #148]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a24      	ldr	r2, [pc, #144]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002088:	f7ff f9ba 	bl	8001400 <HAL_PWREx_GetVoltageRange>
 800208c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002098:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d10b      	bne.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b80      	cmp	r3, #128	; 0x80
 80020a6:	d919      	bls.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2ba0      	cmp	r3, #160	; 0xa0
 80020ac:	d902      	bls.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ae:	2302      	movs	r3, #2
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e013      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	e010      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d902      	bls.n	80020c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020c0:	2303      	movs	r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e00a      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b80      	cmp	r3, #128	; 0x80
 80020ca:	d102      	bne.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020cc:	2302      	movs	r3, #2
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	e004      	b.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b70      	cmp	r3, #112	; 0x70
 80020d6:	d101      	bne.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020d8:	2301      	movs	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 0207 	bic.w	r2, r3, #7
 80020e4:	4909      	ldr	r1, [pc, #36]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d001      	beq.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40022000 	.word	0x40022000

08002110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002118:	2300      	movs	r3, #0
 800211a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800211c:	2300      	movs	r3, #0
 800211e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002130:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002134:	d005      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002136:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002140:	e00f      	b.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002142:	4bac      	ldr	r3, [pc, #688]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	4aab      	ldr	r2, [pc, #684]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800214e:	e00c      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f000 f9dc 	bl	8002514 <RCCEx_PLLSAI1_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002160:	e003      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	74fb      	strb	r3, [r7, #19]
      break;
 8002166:	e000      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10b      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002170:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	499d      	ldr	r1, [pc, #628]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002186:	e001      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8099 	beq.w	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219a:	2300      	movs	r3, #0
 800219c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800219e:	4b95      	ldr	r3, [pc, #596]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80021ae:	2300      	movs	r3, #0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00d      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b8f      	ldr	r3, [pc, #572]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a8e      	ldr	r2, [pc, #568]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
 80021c0:	4b8c      	ldr	r3, [pc, #560]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021d0:	4b89      	ldr	r3, [pc, #548]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a88      	ldr	r2, [pc, #544]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fe6a 	bl	8000eb4 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021e2:	e009      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7fe fe66 	bl	8000eb4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d902      	bls.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	74fb      	strb	r3, [r7, #19]
        break;
 80021f6:	e005      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f8:	4b7f      	ldr	r3, [pc, #508]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0ef      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d155      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800220a:	4b7a      	ldr	r3, [pc, #488]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002214:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d01e      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	429a      	cmp	r2, r3
 8002224:	d019      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002226:	4b73      	ldr	r3, [pc, #460]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002238:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800223a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002242:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	4a6a      	ldr	r2, [pc, #424]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002252:	4a68      	ldr	r2, [pc, #416]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d016      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fe26 	bl	8000eb4 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	e00b      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe fe22 	bl	8000eb4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d902      	bls.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	74fb      	strb	r3, [r7, #19]
            break;
 8002282:	e006      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002284:	4b5b      	ldr	r3, [pc, #364]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ec      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002298:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a6:	4953      	ldr	r1, [pc, #332]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022ae:	e004      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
 80022b4:	e001      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ba:	7c7b      	ldrb	r3, [r7, #17]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c0:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	4a4b      	ldr	r2, [pc, #300]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022d8:	4b46      	ldr	r3, [pc, #280]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022de:	f023 0203 	bic.w	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4943      	ldr	r1, [pc, #268]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022fa:	4b3e      	ldr	r3, [pc, #248]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f023 020c 	bic.w	r2, r3, #12
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	493a      	ldr	r1, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800231c:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	4932      	ldr	r1, [pc, #200]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	4929      	ldr	r1, [pc, #164]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	4921      	ldr	r1, [pc, #132]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002382:	4b1c      	ldr	r3, [pc, #112]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	4918      	ldr	r1, [pc, #96]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4910      	ldr	r1, [pc, #64]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d02c      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023e4:	d10a      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e6:	4b03      	ldr	r3, [pc, #12]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023f0:	60d3      	str	r3, [r2, #12]
 80023f2:	e015      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002404:	d10c      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3304      	adds	r3, #4
 800240a:	2101      	movs	r1, #1
 800240c:	4618      	mov	r0, r3
 800240e:	f000 f881 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d028      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243a:	492d      	ldr	r1, [pc, #180]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800244a:	d106      	bne.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800244c:	4b28      	ldr	r3, [pc, #160]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a27      	ldr	r2, [pc, #156]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002456:	60d3      	str	r3, [r2, #12]
 8002458:	e011      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002462:	d10c      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3304      	adds	r3, #4
 8002468:	2101      	movs	r1, #1
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f852 	bl	8002514 <RCCEx_PLLSAI1_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01c      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	4915      	ldr	r1, [pc, #84]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2102      	movs	r1, #2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 f82f 	bl	8002514 <RCCEx_PLLSAI1_Config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ba:	7cfb      	ldrb	r3, [r7, #19]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	4904      	ldr	r1, [pc, #16]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a04      	ldr	r2, [pc, #16]	; (8002510 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d018      	beq.n	8002560 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252e:	4b70      	ldr	r3, [pc, #448]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d10d      	bne.n	800255a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
       ||
 8002542:	2b00      	cmp	r3, #0
 8002544:	d009      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002546:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	091b      	lsrs	r3, r3, #4
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
       ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d044      	beq.n	80025e4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e041      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d00c      	beq.n	8002582 <RCCEx_PLLSAI1_Config+0x6e>
 8002568:	2b03      	cmp	r3, #3
 800256a:	d013      	beq.n	8002594 <RCCEx_PLLSAI1_Config+0x80>
 800256c:	2b01      	cmp	r3, #1
 800256e:	d120      	bne.n	80025b2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002570:	4b5f      	ldr	r3, [pc, #380]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d11d      	bne.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e01a      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002582:	4b5b      	ldr	r3, [pc, #364]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	2b00      	cmp	r3, #0
 800258c:	d116      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002592:	e013      	b.n	80025bc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a0:	4b53      	ldr	r3, [pc, #332]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b0:	e006      	b.n	80025c0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      break;
 80025b6:	e004      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025b8:	bf00      	nop
 80025ba:	e002      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025bc:	bf00      	nop
 80025be:	e000      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80025c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10d      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025c8:	4b49      	ldr	r3, [pc, #292]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	3b01      	subs	r3, #1
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	430b      	orrs	r3, r1
 80025de:	4944      	ldr	r1, [pc, #272]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d17c      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025ea:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a40      	ldr	r2, [pc, #256]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80025f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f6:	f7fe fc5d 	bl	8000eb4 <HAL_GetTick>
 80025fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fc:	e009      	b.n	8002612 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025fe:	f7fe fc59 	bl	8000eb4 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d902      	bls.n	8002612 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	73fb      	strb	r3, [r7, #15]
        break;
 8002610:	e005      	b.n	800261e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ef      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d15f      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d110      	bne.n	800264c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262a:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002632:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6892      	ldr	r2, [r2, #8]
 800263a:	0211      	lsls	r1, r2, #8
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	68d2      	ldr	r2, [r2, #12]
 8002640:	06d2      	lsls	r2, r2, #27
 8002642:	430a      	orrs	r2, r1
 8002644:	492a      	ldr	r1, [pc, #168]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	610b      	str	r3, [r1, #16]
 800264a:	e027      	b.n	800269c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d112      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002652:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800265a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6892      	ldr	r2, [r2, #8]
 8002662:	0211      	lsls	r1, r2, #8
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6912      	ldr	r2, [r2, #16]
 8002668:	0852      	lsrs	r2, r2, #1
 800266a:	3a01      	subs	r2, #1
 800266c:	0552      	lsls	r2, r2, #21
 800266e:	430a      	orrs	r2, r1
 8002670:	491f      	ldr	r1, [pc, #124]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]
 8002676:	e011      	b.n	800269c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6892      	ldr	r2, [r2, #8]
 8002688:	0211      	lsls	r1, r2, #8
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6952      	ldr	r2, [r2, #20]
 800268e:	0852      	lsrs	r2, r2, #1
 8002690:	3a01      	subs	r2, #1
 8002692:	0652      	lsls	r2, r2, #25
 8002694:	430a      	orrs	r2, r1
 8002696:	4916      	ldr	r1, [pc, #88]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7fe fc04 	bl	8000eb4 <HAL_GetTick>
 80026ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ae:	e009      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b0:	f7fe fc00 	bl	8000eb4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d902      	bls.n	80026c4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	73fb      	strb	r3, [r7, #15]
          break;
 80026c2:	e005      	b.n	80026d0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ef      	beq.n	80026b0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026d8:	691a      	ldr	r2, [r3, #16]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4904      	ldr	r1, [pc, #16]	; (80026f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e040      	b.n	8002788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800270a:	2b00      	cmp	r3, #0
 800270c:	d106      	bne.n	800271c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fa86 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2224      	movs	r2, #36	; 0x24
 8002720:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0201 	bic.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f82c 	bl	8002790 <UART_SetConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e022      	b.n	8002788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa30 	bl	8002bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800275e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800276e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 fab7 	bl	8002cf4 <UART_CheckIdleState>
 8002786:	4603      	mov	r3, r0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002790:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002794:	b088      	sub	sp, #32
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4bb0      	ldr	r3, [pc, #704]	; (8002a80 <UART_SetConfig+0x2f0>)
 80027be:	4013      	ands	r3, r2
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	69f9      	ldr	r1, [r7, #28]
 80027c6:	430b      	orrs	r3, r1
 80027c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4aa6      	ldr	r2, [pc, #664]	; (8002a84 <UART_SetConfig+0x2f4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d004      	beq.n	80027fa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a9d      	ldr	r2, [pc, #628]	; (8002a88 <UART_SetConfig+0x2f8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d121      	bne.n	800285c <UART_SetConfig+0xcc>
 8002818:	4b9c      	ldr	r3, [pc, #624]	; (8002a8c <UART_SetConfig+0x2fc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b03      	cmp	r3, #3
 8002824:	d816      	bhi.n	8002854 <UART_SetConfig+0xc4>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <UART_SetConfig+0x9c>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	0800283d 	.word	0x0800283d
 8002830:	08002849 	.word	0x08002849
 8002834:	08002843 	.word	0x08002843
 8002838:	0800284f 	.word	0x0800284f
 800283c:	2301      	movs	r3, #1
 800283e:	76fb      	strb	r3, [r7, #27]
 8002840:	e072      	b.n	8002928 <UART_SetConfig+0x198>
 8002842:	2302      	movs	r3, #2
 8002844:	76fb      	strb	r3, [r7, #27]
 8002846:	e06f      	b.n	8002928 <UART_SetConfig+0x198>
 8002848:	2304      	movs	r3, #4
 800284a:	76fb      	strb	r3, [r7, #27]
 800284c:	e06c      	b.n	8002928 <UART_SetConfig+0x198>
 800284e:	2308      	movs	r3, #8
 8002850:	76fb      	strb	r3, [r7, #27]
 8002852:	e069      	b.n	8002928 <UART_SetConfig+0x198>
 8002854:	2310      	movs	r3, #16
 8002856:	76fb      	strb	r3, [r7, #27]
 8002858:	bf00      	nop
 800285a:	e065      	b.n	8002928 <UART_SetConfig+0x198>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a8b      	ldr	r2, [pc, #556]	; (8002a90 <UART_SetConfig+0x300>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d134      	bne.n	80028d0 <UART_SetConfig+0x140>
 8002866:	4b89      	ldr	r3, [pc, #548]	; (8002a8c <UART_SetConfig+0x2fc>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b0c      	cmp	r3, #12
 8002872:	d829      	bhi.n	80028c8 <UART_SetConfig+0x138>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <UART_SetConfig+0xec>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	080028b1 	.word	0x080028b1
 8002880:	080028c9 	.word	0x080028c9
 8002884:	080028c9 	.word	0x080028c9
 8002888:	080028c9 	.word	0x080028c9
 800288c:	080028bd 	.word	0x080028bd
 8002890:	080028c9 	.word	0x080028c9
 8002894:	080028c9 	.word	0x080028c9
 8002898:	080028c9 	.word	0x080028c9
 800289c:	080028b7 	.word	0x080028b7
 80028a0:	080028c9 	.word	0x080028c9
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	080028c9 	.word	0x080028c9
 80028ac:	080028c3 	.word	0x080028c3
 80028b0:	2300      	movs	r3, #0
 80028b2:	76fb      	strb	r3, [r7, #27]
 80028b4:	e038      	b.n	8002928 <UART_SetConfig+0x198>
 80028b6:	2302      	movs	r3, #2
 80028b8:	76fb      	strb	r3, [r7, #27]
 80028ba:	e035      	b.n	8002928 <UART_SetConfig+0x198>
 80028bc:	2304      	movs	r3, #4
 80028be:	76fb      	strb	r3, [r7, #27]
 80028c0:	e032      	b.n	8002928 <UART_SetConfig+0x198>
 80028c2:	2308      	movs	r3, #8
 80028c4:	76fb      	strb	r3, [r7, #27]
 80028c6:	e02f      	b.n	8002928 <UART_SetConfig+0x198>
 80028c8:	2310      	movs	r3, #16
 80028ca:	76fb      	strb	r3, [r7, #27]
 80028cc:	bf00      	nop
 80028ce:	e02b      	b.n	8002928 <UART_SetConfig+0x198>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6b      	ldr	r2, [pc, #428]	; (8002a84 <UART_SetConfig+0x2f4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d124      	bne.n	8002924 <UART_SetConfig+0x194>
 80028da:	4b6c      	ldr	r3, [pc, #432]	; (8002a8c <UART_SetConfig+0x2fc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d012      	beq.n	8002910 <UART_SetConfig+0x180>
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d802      	bhi.n	80028f6 <UART_SetConfig+0x166>
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d007      	beq.n	8002904 <UART_SetConfig+0x174>
 80028f4:	e012      	b.n	800291c <UART_SetConfig+0x18c>
 80028f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028fa:	d006      	beq.n	800290a <UART_SetConfig+0x17a>
 80028fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002900:	d009      	beq.n	8002916 <UART_SetConfig+0x186>
 8002902:	e00b      	b.n	800291c <UART_SetConfig+0x18c>
 8002904:	2300      	movs	r3, #0
 8002906:	76fb      	strb	r3, [r7, #27]
 8002908:	e00e      	b.n	8002928 <UART_SetConfig+0x198>
 800290a:	2302      	movs	r3, #2
 800290c:	76fb      	strb	r3, [r7, #27]
 800290e:	e00b      	b.n	8002928 <UART_SetConfig+0x198>
 8002910:	2304      	movs	r3, #4
 8002912:	76fb      	strb	r3, [r7, #27]
 8002914:	e008      	b.n	8002928 <UART_SetConfig+0x198>
 8002916:	2308      	movs	r3, #8
 8002918:	76fb      	strb	r3, [r7, #27]
 800291a:	e005      	b.n	8002928 <UART_SetConfig+0x198>
 800291c:	2310      	movs	r3, #16
 800291e:	76fb      	strb	r3, [r7, #27]
 8002920:	bf00      	nop
 8002922:	e001      	b.n	8002928 <UART_SetConfig+0x198>
 8002924:	2310      	movs	r3, #16
 8002926:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <UART_SetConfig+0x2f4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d174      	bne.n	8002a1c <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002932:	7efb      	ldrb	r3, [r7, #27]
 8002934:	2b08      	cmp	r3, #8
 8002936:	d824      	bhi.n	8002982 <UART_SetConfig+0x1f2>
 8002938:	a201      	add	r2, pc, #4	; (adr r2, 8002940 <UART_SetConfig+0x1b0>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002965 	.word	0x08002965
 8002944:	08002983 	.word	0x08002983
 8002948:	0800296d 	.word	0x0800296d
 800294c:	08002983 	.word	0x08002983
 8002950:	08002973 	.word	0x08002973
 8002954:	08002983 	.word	0x08002983
 8002958:	08002983 	.word	0x08002983
 800295c:	08002983 	.word	0x08002983
 8002960:	0800297b 	.word	0x0800297b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002964:	f7ff fb48 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002968:	6178      	str	r0, [r7, #20]
        break;
 800296a:	e00f      	b.n	800298c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b49      	ldr	r3, [pc, #292]	; (8002a94 <UART_SetConfig+0x304>)
 800296e:	617b      	str	r3, [r7, #20]
        break;
 8002970:	e00c      	b.n	800298c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7ff faab 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002976:	6178      	str	r0, [r7, #20]
        break;
 8002978:	e008      	b.n	800298c <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	617b      	str	r3, [r7, #20]
        break;
 8002980:	e004      	b.n	800298c <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	76bb      	strb	r3, [r7, #26]
        break;
 800298a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 8100 	beq.w	8002b94 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d305      	bcc.n	80029b0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d902      	bls.n	80029b6 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	76bb      	strb	r3, [r7, #26]
 80029b4:	e0ee      	b.n	8002b94 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	f04f 0400 	mov.w	r4, #0
 80029c6:	0214      	lsls	r4, r2, #8
 80029c8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80029cc:	020b      	lsls	r3, r1, #8
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6852      	ldr	r2, [r2, #4]
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	4611      	mov	r1, r2
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	eb13 0b01 	adds.w	fp, r3, r1
 80029de:	eb44 0c02 	adc.w	ip, r4, r2
 80029e2:	4658      	mov	r0, fp
 80029e4:	4661      	mov	r1, ip
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f04f 0400 	mov.w	r4, #0
 80029ee:	461a      	mov	r2, r3
 80029f0:	4623      	mov	r3, r4
 80029f2:	f7fd fbeb 	bl	80001cc <__aeabi_uldivmod>
 80029f6:	4603      	mov	r3, r0
 80029f8:	460c      	mov	r4, r1
 80029fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a02:	d308      	bcc.n	8002a16 <UART_SetConfig+0x286>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0a:	d204      	bcs.n	8002a16 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	60da      	str	r2, [r3, #12]
 8002a14:	e0be      	b.n	8002b94 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	76bb      	strb	r3, [r7, #26]
 8002a1a:	e0bb      	b.n	8002b94 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	d169      	bne.n	8002afa <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8002a26:	7efb      	ldrb	r3, [r7, #27]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d835      	bhi.n	8002a98 <UART_SetConfig+0x308>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <UART_SetConfig+0x2a4>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002a61 	.word	0x08002a61
 8002a3c:	08002a69 	.word	0x08002a69
 8002a40:	08002a99 	.word	0x08002a99
 8002a44:	08002a6f 	.word	0x08002a6f
 8002a48:	08002a99 	.word	0x08002a99
 8002a4c:	08002a99 	.word	0x08002a99
 8002a50:	08002a99 	.word	0x08002a99
 8002a54:	08002a77 	.word	0x08002a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a58:	f7ff face 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002a5c:	6178      	str	r0, [r7, #20]
        break;
 8002a5e:	e020      	b.n	8002aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff fae0 	bl	8002024 <HAL_RCC_GetPCLK2Freq>
 8002a64:	6178      	str	r0, [r7, #20]
        break;
 8002a66:	e01c      	b.n	8002aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <UART_SetConfig+0x304>)
 8002a6a:	617b      	str	r3, [r7, #20]
        break;
 8002a6c:	e019      	b.n	8002aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6e:	f7ff fa2d 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002a72:	6178      	str	r0, [r7, #20]
        break;
 8002a74:	e015      	b.n	8002aa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a7a:	617b      	str	r3, [r7, #20]
        break;
 8002a7c:	e011      	b.n	8002aa2 <UART_SetConfig+0x312>
 8002a7e:	bf00      	nop
 8002a80:	efff69f3 	.word	0xefff69f3
 8002a84:	40008000 	.word	0x40008000
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40004400 	.word	0x40004400
 8002a94:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	76bb      	strb	r3, [r7, #26]
        break;
 8002aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d075      	beq.n	8002b94 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005a      	lsls	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	441a      	add	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b0f      	cmp	r3, #15
 8002ac4:	d916      	bls.n	8002af4 <UART_SetConfig+0x364>
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002acc:	d212      	bcs.n	8002af4 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f023 030f 	bic.w	r3, r3, #15
 8002ad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	085b      	lsrs	r3, r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	89fa      	ldrh	r2, [r7, #14]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	e04f      	b.n	8002b94 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	76bb      	strb	r3, [r7, #26]
 8002af8:	e04c      	b.n	8002b94 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002afa:	7efb      	ldrb	r3, [r7, #27]
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d828      	bhi.n	8002b52 <UART_SetConfig+0x3c2>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_SetConfig+0x378>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b2d 	.word	0x08002b2d
 8002b0c:	08002b35 	.word	0x08002b35
 8002b10:	08002b3d 	.word	0x08002b3d
 8002b14:	08002b53 	.word	0x08002b53
 8002b18:	08002b43 	.word	0x08002b43
 8002b1c:	08002b53 	.word	0x08002b53
 8002b20:	08002b53 	.word	0x08002b53
 8002b24:	08002b53 	.word	0x08002b53
 8002b28:	08002b4b 	.word	0x08002b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b2c:	f7ff fa64 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 8002b30:	6178      	str	r0, [r7, #20]
        break;
 8002b32:	e013      	b.n	8002b5c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b34:	f7ff fa76 	bl	8002024 <HAL_RCC_GetPCLK2Freq>
 8002b38:	6178      	str	r0, [r7, #20]
        break;
 8002b3a:	e00f      	b.n	8002b5c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <UART_SetConfig+0x41c>)
 8002b3e:	617b      	str	r3, [r7, #20]
        break;
 8002b40:	e00c      	b.n	8002b5c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b42:	f7ff f9c3 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8002b46:	6178      	str	r0, [r7, #20]
        break;
 8002b48:	e008      	b.n	8002b5c <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b4e:	617b      	str	r3, [r7, #20]
        break;
 8002b50:	e004      	b.n	8002b5c <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	76bb      	strb	r3, [r7, #26]
        break;
 8002b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	085a      	lsrs	r2, r3, #1
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	d908      	bls.n	8002b90 <UART_SetConfig+0x400>
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d204      	bcs.n	8002b90 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	e001      	b.n	8002b94 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002ba0:	7ebb      	ldrb	r3, [r7, #26]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3720      	adds	r7, #32
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8002bac:	00f42400 	.word	0x00f42400

08002bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	f003 0310 	and.w	r3, r3, #16
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01a      	beq.n	8002cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cae:	d10a      	bne.n	8002cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
  }
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002d02:	f7fe f8d7 	bl	8000eb4 <HAL_GetTick>
 8002d06:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d10e      	bne.n	8002d34 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f82a 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e020      	b.n	8002d76 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d10e      	bne.n	8002d60 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d46:	9300      	str	r3, [sp, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f814 	bl	8002d7e <UART_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e00a      	b.n	8002d76 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2220      	movs	r2, #32
 8002d64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d8e:	e05d      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d96:	d059      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7fe f88c 	bl	8000eb4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <UART_WaitOnFlagUntilTimeout+0x30>
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11b      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dbc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e042      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d02b      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e02:	d123      	bne.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e1c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2220      	movs	r2, #32
 8002e32:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00f      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	69da      	ldr	r2, [r3, #28]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d092      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <__libc_init_array>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	4e0d      	ldr	r6, [pc, #52]	; (8002eac <__libc_init_array+0x38>)
 8002e78:	4c0d      	ldr	r4, [pc, #52]	; (8002eb0 <__libc_init_array+0x3c>)
 8002e7a:	1ba4      	subs	r4, r4, r6
 8002e7c:	10a4      	asrs	r4, r4, #2
 8002e7e:	2500      	movs	r5, #0
 8002e80:	42a5      	cmp	r5, r4
 8002e82:	d109      	bne.n	8002e98 <__libc_init_array+0x24>
 8002e84:	4e0b      	ldr	r6, [pc, #44]	; (8002eb4 <__libc_init_array+0x40>)
 8002e86:	4c0c      	ldr	r4, [pc, #48]	; (8002eb8 <__libc_init_array+0x44>)
 8002e88:	f000 f820 	bl	8002ecc <_init>
 8002e8c:	1ba4      	subs	r4, r4, r6
 8002e8e:	10a4      	asrs	r4, r4, #2
 8002e90:	2500      	movs	r5, #0
 8002e92:	42a5      	cmp	r5, r4
 8002e94:	d105      	bne.n	8002ea2 <__libc_init_array+0x2e>
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
 8002e98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e9c:	4798      	blx	r3
 8002e9e:	3501      	adds	r5, #1
 8002ea0:	e7ee      	b.n	8002e80 <__libc_init_array+0xc>
 8002ea2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ea6:	4798      	blx	r3
 8002ea8:	3501      	adds	r5, #1
 8002eaa:	e7f2      	b.n	8002e92 <__libc_init_array+0x1e>
 8002eac:	08002f34 	.word	0x08002f34
 8002eb0:	08002f34 	.word	0x08002f34
 8002eb4:	08002f34 	.word	0x08002f34
 8002eb8:	08002f38 	.word	0x08002f38

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <_init>:
 8002ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ece:	bf00      	nop
 8002ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ed2:	bc08      	pop	{r3}
 8002ed4:	469e      	mov	lr, r3
 8002ed6:	4770      	bx	lr

08002ed8 <_fini>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr
