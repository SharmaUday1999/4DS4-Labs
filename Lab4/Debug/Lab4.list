
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ab4  08004ab4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004abc  08004abc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004abc  08004abc  00014abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200001dc  08004ca0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004ca0  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1eb  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0f  00000000  00000000  0002d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002f308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002fd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a24  00000000  00000000  000306c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000094b4  00000000  00000000  000520e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2f91  00000000  00000000  0005b598  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e529  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003190  00000000  00000000  0011e5a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004744 	.word	0x08004744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08004744 	.word	0x08004744

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <GPIO_SetBits>:
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);

void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	460b      	mov	r3, r1
 800057a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800057c:	887b      	ldrh	r3, [r7, #2]
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 fa02 	bl	800198c <HAL_GPIO_WritePin>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <GPIO_ResetBits>:

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	2200      	movs	r2, #0
 80005a0:	4619      	mov	r1, r3
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 f9f2 	bl	800198c <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <hd44780_wr_hi_nibble>:

/* Function used from the CooCox HD44780 library */
/********************************************************************************************/
void hd44780_wr_hi_nibble(unsigned char data) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	71fb      	strb	r3, [r7, #7]
	if (data & 0x10) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	f003 0310 	and.w	r3, r3, #16
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d004      	beq.n	80005ce <hd44780_wr_hi_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005c4:	2110      	movs	r1, #16
 80005c6:	4821      	ldr	r0, [pc, #132]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005c8:	f7ff ffd2 	bl	8000570 <GPIO_SetBits>
 80005cc:	e003      	b.n	80005d6 <hd44780_wr_hi_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 80005ce:	2110      	movs	r1, #16
 80005d0:	481e      	ldr	r0, [pc, #120]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005d2:	f7ff ffdd 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x20) {
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <hd44780_wr_hi_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005e0:	2120      	movs	r1, #32
 80005e2:	481a      	ldr	r0, [pc, #104]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005e4:	f7ff ffc4 	bl	8000570 <GPIO_SetBits>
 80005e8:	e003      	b.n	80005f2 <hd44780_wr_hi_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 80005ea:	2120      	movs	r1, #32
 80005ec:	4817      	ldr	r0, [pc, #92]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 80005ee:	f7ff ffcf 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x40) {
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d004      	beq.n	8000606 <hd44780_wr_hi_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	4813      	ldr	r0, [pc, #76]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000600:	f7ff ffb6 	bl	8000570 <GPIO_SetBits>
 8000604:	e003      	b.n	800060e <hd44780_wr_hi_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800060a:	f7ff ffc1 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x80) {
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	2b00      	cmp	r3, #0
 8000614:	da04      	bge.n	8000620 <hd44780_wr_hi_nibble+0x70>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800061a:	f7ff ffa9 	bl	8000570 <GPIO_SetBits>
 800061e:	e003      	b.n	8000628 <hd44780_wr_hi_nibble+0x78>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 8000620:	2180      	movs	r1, #128	; 0x80
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 8000624:	f7ff ffb4 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800062e:	f001 f9ad 	bl	800198c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 8000632:	2002      	movs	r0, #2
 8000634:	f000 ff20 	bl	8001478 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 8000638:	2200      	movs	r2, #0
 800063a:	2102      	movs	r1, #2
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <hd44780_wr_hi_nibble+0x9c>)
 800063e:	f001 f9a5 	bl	800198c <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	48000400 	.word	0x48000400

08000650 <hd44780_wr_lo_nibble>:

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void hd44780_wr_lo_nibble(unsigned char data) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	if (data & 0x01) {
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d004      	beq.n	800066e <hd44780_wr_lo_nibble+0x1e>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 8000664:	2110      	movs	r1, #16
 8000666:	4821      	ldr	r0, [pc, #132]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000668:	f7ff ff82 	bl	8000570 <GPIO_SetBits>
 800066c:	e003      	b.n	8000676 <hd44780_wr_lo_nibble+0x26>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT4);
 800066e:	2110      	movs	r1, #16
 8000670:	481e      	ldr	r0, [pc, #120]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000672:	f7ff ff8d 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	f003 0302 	and.w	r3, r3, #2
 800067c:	2b00      	cmp	r3, #0
 800067e:	d004      	beq.n	800068a <hd44780_wr_lo_nibble+0x3a>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 8000680:	2120      	movs	r1, #32
 8000682:	481a      	ldr	r0, [pc, #104]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 8000684:	f7ff ff74 	bl	8000570 <GPIO_SetBits>
 8000688:	e003      	b.n	8000692 <hd44780_wr_lo_nibble+0x42>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT5);
 800068a:	2120      	movs	r1, #32
 800068c:	4817      	ldr	r0, [pc, #92]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 800068e:	f7ff ff7f 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	2b00      	cmp	r3, #0
 800069a:	d004      	beq.n	80006a6 <hd44780_wr_lo_nibble+0x56>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 800069c:	2140      	movs	r1, #64	; 0x40
 800069e:	4813      	ldr	r0, [pc, #76]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006a0:	f7ff ff66 	bl	8000570 <GPIO_SetBits>
 80006a4:	e003      	b.n	80006ae <hd44780_wr_lo_nibble+0x5e>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT6);
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	4810      	ldr	r0, [pc, #64]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006aa:	f7ff ff71 	bl	8000590 <GPIO_ResetBits>
	}
	if (data & 0x08) {
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 0308 	and.w	r3, r3, #8
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d004      	beq.n	80006c2 <hd44780_wr_lo_nibble+0x72>
		GPIO_SetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006bc:	f7ff ff58 	bl	8000570 <GPIO_SetBits>
 80006c0:	e003      	b.n	80006ca <hd44780_wr_lo_nibble+0x7a>
	} else {
		GPIO_ResetBits( HD44780_DATAPORT, HD44780_DATABIT7);
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006c6:	f7ff ff63 	bl	8000590 <GPIO_ResetBits>
	}

	/* set the EN signal */
	hd44780_EN_On();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2102      	movs	r1, #2
 80006ce:	4807      	ldr	r0, [pc, #28]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006d0:	f001 f95c 	bl	800198c <HAL_GPIO_WritePin>

	/* wait */
	hd44780_EN_high_delay()
 80006d4:	2002      	movs	r0, #2
 80006d6:	f000 fecf 	bl	8001478 <HAL_Delay>
	;

	/* reset the EN signal */
	hd44780_EN_Off();
 80006da:	2200      	movs	r2, #0
 80006dc:	2102      	movs	r1, #2
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <hd44780_wr_lo_nibble+0x9c>)
 80006e0:	f001 f954 	bl	800198c <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	48000400 	.word	0x48000400

080006f0 <hd44780_write>:

/* 4bit bus version */
void hd44780_write(unsigned char data) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	/* send the data bits - high nibble first */
	hd44780_wr_hi_nibble(data);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff57 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_wr_lo_nibble(data);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffa3 	bl	8000650 <hd44780_wr_lo_nibble>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <hd44780_wr_cmd>:
	hd44780_init_end_delay();

}
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_8BIT */

void hd44780_wr_cmd(unsigned char cmd) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_Off();
 800071e:	2200      	movs	r2, #0
 8000720:	2101      	movs	r1, #1
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <hd44780_wr_cmd+0x24>)
 8000724:	f001 f932 	bl	800198c <HAL_GPIO_WritePin>
	hd44780_write(cmd);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffe0 	bl	80006f0 <hd44780_write>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000400 	.word	0x48000400

0800073c <hd44780_wr_data>:

void hd44780_wr_data(unsigned char data) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
	hd44780_RS_On();
 8000746:	2201      	movs	r2, #1
 8000748:	2101      	movs	r1, #1
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <hd44780_wr_data+0x24>)
 800074c:	f001 f91e 	bl	800198c <HAL_GPIO_WritePin>
	hd44780_write(data);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ffcc 	bl	80006f0 <hd44780_write>
}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	48000400 	.word	0x48000400

08000764 <HD44780_Init>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the peripheral clocks for the HD44780 data and control lines */
	//RCC_AHBPeriphClockCmd(HD44780_RCC_AHBPeriph, ENABLE);
	__GPIOB_CLK_ENABLE()
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <HD44780_Init+0xbc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <HD44780_Init+0xbc>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <HD44780_Init+0xbc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
	;

	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStructure.Pin = HD44780_DATABIT7 | HD44780_DATABIT6
 8000782:	23f0      	movs	r3, #240	; 0xf0
 8000784:	607b      	str	r3, [r7, #4]
			| HD44780_DATABIT5 | HD44780_DATABIT4;
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_DATAPORT, &GPIO_InitStructure);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4823      	ldr	r0, [pc, #140]	; (8000824 <HD44780_Init+0xc0>)
 8000798:	f000 ff76 	bl	8001688 <HAL_GPIO_Init>

	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	/* removed HD44780_RW_BIT from this declaration as we don't use
	 * R/~W on the LCD is grounded.
	 */
	GPIO_InitStructure.Pin = HD44780_RS_BIT |HD44780_RW_BIT| HD44780_EN_BIT;
 800079c:	230b      	movs	r3, #11
 800079e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(HD44780_CONTROLPORT, &GPIO_InitStructure);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	481c      	ldr	r0, [pc, #112]	; (8000824 <HD44780_Init+0xc0>)
 80007b2:	f000 ff69 	bl	8001688 <HAL_GPIO_Init>

	/* clear control bits */
	hd44780_EN_Off();
 80007b6:	2200      	movs	r2, #0
 80007b8:	2102      	movs	r1, #2
 80007ba:	481a      	ldr	r0, [pc, #104]	; (8000824 <HD44780_Init+0xc0>)
 80007bc:	f001 f8e6 	bl	800198c <HAL_GPIO_WritePin>
	hd44780_RS_Off();
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <HD44780_Init+0xc0>)
 80007c6:	f001 f8e1 	bl	800198c <HAL_GPIO_WritePin>
	hd44780_RW_Off();
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4815      	ldr	r0, [pc, #84]	; (8000824 <HD44780_Init+0xc0>)
 80007d0:	f001 f8dc 	bl	800198c <HAL_GPIO_WritePin>

	/* wait initial delay for LCD to settle */
	//HAL_Delay(100);		//added as nothing here and spec'd as 100ms after power-on. R. Hofer
	/* reset procedure - 3 function calls resets the device */
	hd44780_init_delay();
 80007d4:	2010      	movs	r0, #16
 80007d6:	f000 fe4f 	bl	8001478 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007da:	2030      	movs	r0, #48	; 0x30
 80007dc:	f7ff fee8 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay2();
 80007e0:	2005      	movs	r0, #5
 80007e2:	f000 fe49 	bl	8001478 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007e6:	2030      	movs	r0, #48	; 0x30
 80007e8:	f7ff fee2 	bl	80005b0 <hd44780_wr_hi_nibble>
	hd44780_init_delay3();
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 fe43 	bl	8001478 <HAL_Delay>
	hd44780_wr_hi_nibble( HD44780_CMD_RESET);
 80007f2:	2030      	movs	r0, #48	; 0x30
 80007f4:	f7ff fedc 	bl	80005b0 <hd44780_wr_hi_nibble>

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT
	/* 4bit interface */
	hd44780_wr_hi_nibble( HD44780_CMD_FUNCTION);
 80007f8:	2020      	movs	r0, #32
 80007fa:	f7ff fed9 	bl	80005b0 <hd44780_wr_hi_nibble>
#endif /* HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	hd44780_function(HD44780_CONF_BUS, HD44780_CONF_LINES, HD44780_CONF_FONT);
 80007fe:	2028      	movs	r0, #40	; 0x28
 8000800:	f7ff ff88 	bl	8000714 <hd44780_wr_cmd>

	/* turn the display on with no cursor or blinking */
	hd44780_display(HD44780_DISP_ON, HD44780_DISP_CURS_OFF,
 8000804:	200c      	movs	r0, #12
 8000806:	f7ff ff85 	bl	8000714 <hd44780_wr_cmd>
			HD44780_DISP_BLINK_OFF);

	/* clear the display */
	hd44780_clear();
 800080a:	2001      	movs	r0, #1
 800080c:	f7ff ff82 	bl	8000714 <hd44780_wr_cmd>

	/* addr increment, shift cursor */
	hd44780_entry(HD44780_ENTRY_ADDR_INC, HD44780_ENTRY_SHIFT_CURS);
 8000810:	2006      	movs	r0, #6
 8000812:	f7ff ff7f 	bl	8000714 <hd44780_wr_cmd>

}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000
 8000824:	48000400 	.word	0x48000400

08000828 <HD44780_PutChar>:

 Parameters			: c				-	character to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutChar(unsigned char c) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	hd44780_wr_data(c & 0xff);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff ff81 	bl	800073c <hd44780_wr_data>
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HD44780_GotoXY>:
 Parameters			: x				-	column position (0 - HD44780_DISP_LENGTH-1)
 y				-	row position (0 - HD44780_DISP_ROWS-1)

 Return value		: NONE
 *********************************************************************************************/
void HD44780_GotoXY(unsigned char x, unsigned char y) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	460a      	mov	r2, r1
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	4613      	mov	r3, r2
 8000852:	71bb      	strb	r3, [r7, #6]
	unsigned char copy_y = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]

	if (x > (HD44780_DISP_LENGTH - 1))
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d901      	bls.n	8000862 <HD44780_GotoXY+0x1e>
		x = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	71fb      	strb	r3, [r7, #7]

	if (y > (HD44780_DISP_ROWS - 1))
 8000862:	79bb      	ldrb	r3, [r7, #6]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d901      	bls.n	800086c <HD44780_GotoXY+0x28>
		y = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	71bb      	strb	r3, [r7, #6]

	switch (y) {
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d816      	bhi.n	80008a0 <HD44780_GotoXY+0x5c>
 8000872:	a201      	add	r2, pc, #4	; (adr r2, 8000878 <HD44780_GotoXY+0x34>)
 8000874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000878:	08000889 	.word	0x08000889
 800087c:	0800088f 	.word	0x0800088f
 8000880:	08000895 	.word	0x08000895
 8000884:	0800089b 	.word	0x0800089b
	case 0:
		copy_y = 0x80;
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	73fb      	strb	r3, [r7, #15]
		break;
 800088c:	e008      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 1:
		copy_y = 0xc0;
 800088e:	23c0      	movs	r3, #192	; 0xc0
 8000890:	73fb      	strb	r3, [r7, #15]
		break;
 8000892:	e005      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 2:
		copy_y = 0x94;
 8000894:	2394      	movs	r3, #148	; 0x94
 8000896:	73fb      	strb	r3, [r7, #15]
		break;
 8000898:	e002      	b.n	80008a0 <HD44780_GotoXY+0x5c>
	case 3:
		copy_y = 0xd4;
 800089a:	23d4      	movs	r3, #212	; 0xd4
 800089c:	73fb      	strb	r3, [r7, #15]
		break;
 800089e:	bf00      	nop
	}
	hd44780_wr_cmd(x + copy_y);
 80008a0:	79fa      	ldrb	r2, [r7, #7]
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	4413      	add	r3, r2
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff ff33 	bl	8000714 <hd44780_wr_cmd>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop

080008b8 <HD44780_PutStr>:

 Parameters			: str			-	string (char array) to print

 Return value		: NONE
 *********************************************************************************************/
void HD44780_PutStr(char *str) {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	__IO unsigned int i = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]

	do {
		HD44780_PutChar(str[i]);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffab 	bl	8000828 <HD44780_PutChar>
		i++;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	3301      	adds	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
	} while (str[i] != '\0');
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1ef      	bne.n	80008c4 <HD44780_PutStr+0xc>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HD44780_ClrScr>:
 Special Note(s) : NONE

 Parameters			: NONE
 Return value		: NONE
 *********************************************************************************************/
void HD44780_ClrScr(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	hd44780_wr_cmd(HD44780_CMD_CLEAR);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff ff0f 	bl	8000714 <hd44780_wr_cmd>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <deBounceInit>:
//
//}


void deBounceInit(uint16_t pin, char port, int8_t mode)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
 8000906:	460b      	mov	r3, r1
 8000908:	717b      	strb	r3, [r7, #5]
 800090a:	4613      	mov	r3, r2
 800090c:	713b      	strb	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0}; // Declaring GPIO_initStruct as GPIO_InitTypeDef Struc
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
    switch(pin)
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	3b03      	subs	r3, #3
 8000922:	2b05      	cmp	r3, #5
 8000924:	d81b      	bhi.n	800095e <deBounceInit+0x62>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <deBounceInit+0x30>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	08000945 	.word	0x08000945
 8000930:	0800094b 	.word	0x0800094b
 8000934:	0800095f 	.word	0x0800095f
 8000938:	0800095f 	.word	0x0800095f
 800093c:	08000951 	.word	0x08000951
 8000940:	08000957 	.word	0x08000957
	{
    	case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8000944:	2308      	movs	r3, #8
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e009      	b.n	800095e <deBounceInit+0x62>
    	case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 800094a:	2310      	movs	r3, #16
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e006      	b.n	800095e <deBounceInit+0x62>
    	case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	e003      	b.n	800095e <deBounceInit+0x62>
    	case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8000956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	bf00      	nop
	}

    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000962:	2301      	movs	r3, #1
 8000964:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	4619      	mov	r1, r3
 800096c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000970:	f000 fe8a 	bl	8001688 <HAL_GPIO_Init>

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <deBounceReadPin>:

int8_t deBounceReadPin(uint16_t pin, char port, int8_t mode)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	80fb      	strh	r3, [r7, #6]
 8000986:	460b      	mov	r3, r1
 8000988:	717b      	strb	r3, [r7, #5]
 800098a:	4613      	mov	r3, r2
 800098c:	713b      	strb	r3, [r7, #4]
	GPIO_PinState pinState = GPIO_PIN_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	73fb      	strb	r3, [r7, #15]
	int8_t pinStateWeAreLookingFor;

	int32_t msTimeStamp = HAL_GetTick();
 8000992:	f000 fd65 	bl	8001460 <HAL_GetTick>
 8000996:	4603      	mov	r3, r0
 8000998:	613b      	str	r3, [r7, #16]
	int32_t stableInterval = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]

	pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f000 ffd9 	bl	800195c <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_RESET) {
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <deBounceReadPin+0x3e>
		pinStateWeAreLookingFor = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	75fb      	strb	r3, [r7, #23]
 80009b8:	e01b      	b.n	80009f2 <deBounceReadPin+0x76>
	} else {
		pinStateWeAreLookingFor = 1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	75fb      	strb	r3, [r7, #23]
	}
	while(HAL_GetTick() < (msTimeStamp + stableInterval)) {
 80009be:	e018      	b.n	80009f2 <deBounceReadPin+0x76>
		pinState = HAL_GPIO_ReadPin(GPIOA, pin);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c8:	f000 ffc8 	bl	800195c <HAL_GPIO_ReadPin>
 80009cc:	4603      	mov	r3, r0
 80009ce:	73fb      	strb	r3, [r7, #15]
		if(pinState != pinStateWeAreLookingFor) {
 80009d0:	7bfa      	ldrb	r2, [r7, #15]
 80009d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d00b      	beq.n	80009f2 <deBounceReadPin+0x76>
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
 80009da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bf0c      	ite	eq
 80009e2:	2301      	moveq	r3, #1
 80009e4:	2300      	movne	r3, #0
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	75fb      	strb	r3, [r7, #23]
			msTimeStamp = HAL_GetTick();
 80009ea:	f000 fd39 	bl	8001460 <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	613b      	str	r3, [r7, #16]
	while(HAL_GetTick() < (msTimeStamp + stableInterval)) {
 80009f2:	f000 fd35 	bl	8001460 <HAL_GetTick>
 80009f6:	4601      	mov	r1, r0
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	4299      	cmp	r1, r3
 8000a00:	d3de      	bcc.n	80009c0 <deBounceReadPin+0x44>
		}
	}
	return pinStateWeAreLookingFor;
 8000a02:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int passwords[] = {1111, 1121, 1133, 1213, 2111, 2331, 311, 3211, 3333};
 8000a16:	4baa      	ldr	r3, [pc, #680]	; (8000cc0 <main+0x2b0>)
 8000a18:	f107 040c 	add.w	r4, r7, #12
 8000a1c:	461d      	mov	r5, r3
 8000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	6023      	str	r3, [r4, #0]
	int state = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fcae 	bl	800138e <HAL_Init>
  int8_t mode = 1;
 8000a32:	2301      	movs	r3, #1
 8000a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  deBounceInit(GPIO_PIN_3, 'A', mode);
 8000a38:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	2141      	movs	r1, #65	; 0x41
 8000a40:	2008      	movs	r0, #8
 8000a42:	f7ff ff5b 	bl	80008fc <deBounceInit>
  deBounceInit(GPIO_PIN_4, 'A', mode);
 8000a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	2141      	movs	r1, #65	; 0x41
 8000a4e:	2010      	movs	r0, #16
 8000a50:	f7ff ff54 	bl	80008fc <deBounceInit>
  deBounceInit(GPIO_PIN_7, 'A', mode);
 8000a54:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a58:	461a      	mov	r2, r3
 8000a5a:	2141      	movs	r1, #65	; 0x41
 8000a5c:	2080      	movs	r0, #128	; 0x80
 8000a5e:	f7ff ff4d 	bl	80008fc <deBounceInit>
  deBounceInit(GPIO_PIN_8,'A', mode);
 8000a62:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000a66:	461a      	mov	r2, r3
 8000a68:	2141      	movs	r1, #65	; 0x41
 8000a6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a6e:	f7ff ff45 	bl	80008fc <deBounceInit>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a72:	f000 f9d3 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a76:	f000 fa83 	bl	8000f80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a7a:	f000 fa51 	bl	8000f20 <MX_USART2_UART_Init>
  HD44780_Init();
 8000a7e:	f7ff fe71 	bl	8000764 <HD44780_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(state){
 8000a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b05      	cmp	r3, #5
 8000a88:	d8fb      	bhi.n	8000a82 <main+0x72>
 8000a8a:	a201      	add	r2, pc, #4	; (adr r2, 8000a90 <main+0x80>)
 8000a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a90:	08000aa9 	.word	0x08000aa9
 8000a94:	08000ae1 	.word	0x08000ae1
 8000a98:	08000b3f 	.word	0x08000b3f
 8000a9c:	08000b6d 	.word	0x08000b6d
 8000aa0:	08000bd1 	.word	0x08000bd1
 8000aa4:	08000c87 	.word	0x08000c87
	 	 case 1:
	 		 HD44780_ClrScr();
 8000aa8:	f7ff ff20 	bl	80008ec <HD44780_ClrScr>
	 		 HD44780_PutStr("Welcome");
 8000aac:	4885      	ldr	r0, [pc, #532]	; (8000cc4 <main+0x2b4>)
 8000aae:	f7ff ff03 	bl	80008b8 <HD44780_PutStr>
	 		 printf("%s\r\n","Welcome");
 8000ab2:	4984      	ldr	r1, [pc, #528]	; (8000cc4 <main+0x2b4>)
 8000ab4:	4884      	ldr	r0, [pc, #528]	; (8000cc8 <main+0x2b8>)
 8000ab6:	f002 fe61 	bl	800377c <iprintf>
	 		 HAL_Delay(2000);
 8000aba:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000abe:	f000 fcdb 	bl	8001478 <HAL_Delay>
	 		 if(deBounceReadPin(GPIO_PIN_8, 'A', mode) == 0) {
 8000ac2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	2141      	movs	r1, #65	; 0x41
 8000aca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ace:	f7ff ff55 	bl	800097c <deBounceReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f040 80ee 	bne.w	8000cb6 <main+0x2a6>
	 			 state = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
	 		 }
	 	 break;
 8000ade:	e0ea      	b.n	8000cb6 <main+0x2a6>

	 	 case 2:
	 		HD44780_ClrScr();
 8000ae0:	f7ff ff04 	bl	80008ec <HD44780_ClrScr>
	 		HD44780_PutStr("$15.2");
 8000ae4:	4879      	ldr	r0, [pc, #484]	; (8000ccc <main+0x2bc>)
 8000ae6:	f7ff fee7 	bl	80008b8 <HD44780_PutStr>
	 		HD44780_GotoXY(0, 1);
 8000aea:	2101      	movs	r1, #1
 8000aec:	2000      	movs	r0, #0
 8000aee:	f7ff fea9 	bl	8000844 <HD44780_GotoXY>
	 		HD44780_PutStr("Ok:1 or Cancel:2");
 8000af2:	4877      	ldr	r0, [pc, #476]	; (8000cd0 <main+0x2c0>)
 8000af4:	f7ff fee0 	bl	80008b8 <HD44780_PutStr>

	 		printf("%s\r\n", "Ok: 1 or Cancel: 2");
 8000af8:	4976      	ldr	r1, [pc, #472]	; (8000cd4 <main+0x2c4>)
 8000afa:	4873      	ldr	r0, [pc, #460]	; (8000cc8 <main+0x2b8>)
 8000afc:	f002 fe3e 	bl	800377c <iprintf>
	 		HAL_Delay(2000);
 8000b00:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b04:	f000 fcb8 	bl	8001478 <HAL_Delay>
	 		if(deBounceReadPin(GPIO_PIN_3, 'A', mode) == 0) {
 8000b08:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2141      	movs	r1, #65	; 0x41
 8000b10:	2008      	movs	r0, #8
 8000b12:	f7ff ff33 	bl	800097c <deBounceReadPin>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <main+0x112>
	 			state = 3;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 		} else if (deBounceReadPin(GPIO_PIN_4, 'A', mode) == 0) {
	 			state = 6;
	 		}
	 	 break;
 8000b20:	e0cb      	b.n	8000cba <main+0x2aa>
	 		} else if (deBounceReadPin(GPIO_PIN_4, 'A', mode) == 0) {
 8000b22:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000b26:	461a      	mov	r2, r3
 8000b28:	2141      	movs	r1, #65	; 0x41
 8000b2a:	2010      	movs	r0, #16
 8000b2c:	f7ff ff26 	bl	800097c <deBounceReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f040 80c1 	bne.w	8000cba <main+0x2aa>
	 			state = 6;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 break;
 8000b3c:	e0bd      	b.n	8000cba <main+0x2aa>

	 	 case 3:
	 		HD44780_ClrScr();
 8000b3e:	f7ff fed5 	bl	80008ec <HD44780_ClrScr>
	 		HD44780_PutStr("Chequing:1");
 8000b42:	4865      	ldr	r0, [pc, #404]	; (8000cd8 <main+0x2c8>)
 8000b44:	f7ff feb8 	bl	80008b8 <HD44780_PutStr>
	 		HD44780_GotoXY(0, 1);
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff fe7a 	bl	8000844 <HD44780_GotoXY>
	 		HD44780_PutStr("Savings:2");
 8000b50:	4862      	ldr	r0, [pc, #392]	; (8000cdc <main+0x2cc>)
 8000b52:	f7ff feb1 	bl	80008b8 <HD44780_PutStr>

	 		printf("%s\r\n", "Press 1 for chequing, and 2 for savings");
 8000b56:	4962      	ldr	r1, [pc, #392]	; (8000ce0 <main+0x2d0>)
 8000b58:	485b      	ldr	r0, [pc, #364]	; (8000cc8 <main+0x2b8>)
 8000b5a:	f002 fe0f 	bl	800377c <iprintf>
	 		HAL_Delay(5000);
 8000b5e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b62:	f000 fc89 	bl	8001478 <HAL_Delay>
	 		state = 4;
 8000b66:	2304      	movs	r3, #4
 8000b68:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 break;
 8000b6a:	e0a7      	b.n	8000cbc <main+0x2ac>

	 	 case 4:
	 		HD44780_ClrScr();
 8000b6c:	f7ff febe 	bl	80008ec <HD44780_ClrScr>
	 		HD44780_PutStr("Enter PIN");
 8000b70:	485c      	ldr	r0, [pc, #368]	; (8000ce4 <main+0x2d4>)
 8000b72:	f7ff fea1 	bl	80008b8 <HD44780_PutStr>
	 		printf("%s\r\n", "Enter PIN");
 8000b76:	495b      	ldr	r1, [pc, #364]	; (8000ce4 <main+0x2d4>)
 8000b78:	4853      	ldr	r0, [pc, #332]	; (8000cc8 <main+0x2b8>)
 8000b7a:	f002 fdff 	bl	800377c <iprintf>
	 		HD44780_GotoXY(0, 1);
 8000b7e:	2101      	movs	r1, #1
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fe5f 	bl	8000844 <HD44780_GotoXY>
	 		char pin[5] = {'0', '0', '0', '0', '\0'};
 8000b86:	4a58      	ldr	r2, [pc, #352]	; (8000ce8 <main+0x2d8>)
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8e:	6018      	str	r0, [r3, #0]
 8000b90:	3304      	adds	r3, #4
 8000b92:	7019      	strb	r1, [r3, #0]
	 		for(int i = 0; i < 4; i++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b98:	e00b      	b.n	8000bb2 <main+0x1a2>
	 			pin[i] = readButton();
 8000b9a:	f000 f8bb 	bl	8000d14 <readButton>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	1d3a      	adds	r2, r7, #4
 8000ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ba6:	4413      	add	r3, r2
 8000ba8:	460a      	mov	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
	 		for(int i = 0; i < 4; i++) {
 8000bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bae:	3301      	adds	r3, #1
 8000bb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	ddf0      	ble.n	8000b9a <main+0x18a>
	 		}
//	 		printf("%s\r\n", "****");
//	 		HD44780_ClrScr();
//	 		HD44780_PutStr("****");
	 		HAL_Delay(500);
 8000bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bbc:	f000 fc5c 	bl	8001478 <HAL_Delay>
	 		int enteredPin = atoi(pin);
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f002 fda4 	bl	8003710 <atoi>
 8000bc8:	6378      	str	r0, [r7, #52]	; 0x34
	 		state = 5;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 break;
 8000bce:	e075      	b.n	8000cbc <main+0x2ac>

	 	 case 5:
	 		HD44780_ClrScr();
 8000bd0:	f7ff fe8c 	bl	80008ec <HD44780_ClrScr>
	 		HD44780_PutStr("Processing...");
 8000bd4:	4845      	ldr	r0, [pc, #276]	; (8000cec <main+0x2dc>)
 8000bd6:	f7ff fe6f 	bl	80008b8 <HD44780_PutStr>
	 		printf("%s\r\n", "Processing...");
 8000bda:	4944      	ldr	r1, [pc, #272]	; (8000cec <main+0x2dc>)
 8000bdc:	483a      	ldr	r0, [pc, #232]	; (8000cc8 <main+0x2b8>)
 8000bde:	f002 fdcd 	bl	800377c <iprintf>
	 		HAL_Delay(10000);
 8000be2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000be6:	f000 fc47 	bl	8001478 <HAL_Delay>
	 		HD44780_ClrScr();
 8000bea:	f7ff fe7f 	bl	80008ec <HD44780_ClrScr>
	 		if(isValid(enteredPin, passwords, 9) == 1) {
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	2209      	movs	r2, #9
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000bf8:	f000 f8e8 	bl	8000dcc <isValid>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d114      	bne.n	8000c2c <main+0x21c>
		 		HD44780_PutStr("Transaction");
 8000c02:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <main+0x2e0>)
 8000c04:	f7ff fe58 	bl	80008b8 <HD44780_PutStr>
		 		HD44780_GotoXY(0, 1);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f7ff fe1a 	bl	8000844 <HD44780_GotoXY>
		 		HD44780_PutStr("Complete");
 8000c10:	4838      	ldr	r0, [pc, #224]	; (8000cf4 <main+0x2e4>)
 8000c12:	f7ff fe51 	bl	80008b8 <HD44780_PutStr>
		 		HAL_Delay(500);
 8000c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c1a:	f000 fc2d 	bl	8001478 <HAL_Delay>

	 			printf("%s\r\n", "Transaction Complete, Thank you!");
 8000c1e:	4936      	ldr	r1, [pc, #216]	; (8000cf8 <main+0x2e8>)
 8000c20:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <main+0x2b8>)
 8000c22:	f002 fdab 	bl	800377c <iprintf>
	 			state = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
		 		HAL_Delay(500);

	 			printf("%s\r\n", "Invalid Pin");
	 			state = 6;
	 		}
	 	 break;
 8000c2a:	e047      	b.n	8000cbc <main+0x2ac>
	 		} else if (isValid(enteredPin, passwords, 9) == 2) {
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2209      	movs	r2, #9
 8000c32:	4619      	mov	r1, r3
 8000c34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c36:	f000 f8c9 	bl	8000dcc <isValid>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d114      	bne.n	8000c6a <main+0x25a>
	 			HD44780_PutStr("Insufficent");
 8000c40:	482e      	ldr	r0, [pc, #184]	; (8000cfc <main+0x2ec>)
 8000c42:	f7ff fe39 	bl	80008b8 <HD44780_PutStr>
		 		HD44780_GotoXY(0, 1);
 8000c46:	2101      	movs	r1, #1
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff fdfb 	bl	8000844 <HD44780_GotoXY>
		 		HD44780_PutStr("Funds");
 8000c4e:	482c      	ldr	r0, [pc, #176]	; (8000d00 <main+0x2f0>)
 8000c50:	f7ff fe32 	bl	80008b8 <HD44780_PutStr>
		 		HAL_Delay(500);
 8000c54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c58:	f000 fc0e 	bl	8001478 <HAL_Delay>
	 			printf("%s\r\n", "Insufficent Funds");
 8000c5c:	4929      	ldr	r1, [pc, #164]	; (8000d04 <main+0x2f4>)
 8000c5e:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <main+0x2b8>)
 8000c60:	f002 fd8c 	bl	800377c <iprintf>
	 			state = 6;
 8000c64:	2306      	movs	r3, #6
 8000c66:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 break;
 8000c68:	e028      	b.n	8000cbc <main+0x2ac>
	 			HD44780_PutStr("Invalid Pin");
 8000c6a:	4827      	ldr	r0, [pc, #156]	; (8000d08 <main+0x2f8>)
 8000c6c:	f7ff fe24 	bl	80008b8 <HD44780_PutStr>
		 		HAL_Delay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f000 fc00 	bl	8001478 <HAL_Delay>
	 			printf("%s\r\n", "Invalid Pin");
 8000c78:	4923      	ldr	r1, [pc, #140]	; (8000d08 <main+0x2f8>)
 8000c7a:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <main+0x2b8>)
 8000c7c:	f002 fd7e 	bl	800377c <iprintf>
	 			state = 6;
 8000c80:	2306      	movs	r3, #6
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
	 	 break;
 8000c84:	e01a      	b.n	8000cbc <main+0x2ac>

	 	 case 6:
	 		HD44780_ClrScr();
 8000c86:	f7ff fe31 	bl	80008ec <HD44780_ClrScr>
	 		HD44780_PutStr("Transaction");
 8000c8a:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <main+0x2e0>)
 8000c8c:	f7ff fe14 	bl	80008b8 <HD44780_PutStr>
	 		HD44780_GotoXY(0, 1);
 8000c90:	2101      	movs	r1, #1
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff fdd6 	bl	8000844 <HD44780_GotoXY>
	 		HD44780_PutStr("Cancelled");
 8000c98:	481c      	ldr	r0, [pc, #112]	; (8000d0c <main+0x2fc>)
 8000c9a:	f7ff fe0d 	bl	80008b8 <HD44780_PutStr>

	 		printf("%s\r\n", "Transaction Cancelled, Goodbye!");
 8000c9e:	491c      	ldr	r1, [pc, #112]	; (8000d10 <main+0x300>)
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <main+0x2b8>)
 8000ca2:	f002 fd6b 	bl	800377c <iprintf>
	 		HAL_Delay(2000);
 8000ca6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000caa:	f000 fbe5 	bl	8001478 <HAL_Delay>
			state = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		 break;
 8000cb2:	bf00      	nop
 8000cb4:	e002      	b.n	8000cbc <main+0x2ac>
	 	 break;
 8000cb6:	bf00      	nop
 8000cb8:	e6e3      	b.n	8000a82 <main+0x72>
	 	 break;
 8000cba:	bf00      	nop
	 switch(state){
 8000cbc:	e6e1      	b.n	8000a82 <main+0x72>
 8000cbe:	bf00      	nop
 8000cc0:	08004894 	.word	0x08004894
 8000cc4:	0800475c 	.word	0x0800475c
 8000cc8:	08004764 	.word	0x08004764
 8000ccc:	0800476c 	.word	0x0800476c
 8000cd0:	08004774 	.word	0x08004774
 8000cd4:	08004788 	.word	0x08004788
 8000cd8:	0800479c 	.word	0x0800479c
 8000cdc:	080047a8 	.word	0x080047a8
 8000ce0:	080047b4 	.word	0x080047b4
 8000ce4:	080047dc 	.word	0x080047dc
 8000ce8:	080048b8 	.word	0x080048b8
 8000cec:	080047e8 	.word	0x080047e8
 8000cf0:	080047f8 	.word	0x080047f8
 8000cf4:	08004804 	.word	0x08004804
 8000cf8:	08004810 	.word	0x08004810
 8000cfc:	08004834 	.word	0x08004834
 8000d00:	08004840 	.word	0x08004840
 8000d04:	08004848 	.word	0x08004848
 8000d08:	0800485c 	.word	0x0800485c
 8000d0c:	08004868 	.word	0x08004868
 8000d10:	08004874 	.word	0x08004874

08000d14 <readButton>:
 * DESCRIPTION  : This function reads the button number entered by the user
 * PARAMETERS   : void
 * RETURNS      : char: the character value of the button number
 */

char readButton(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	uint8_t mode = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	71fb      	strb	r3, [r7, #7]
	int flag = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
	while(flag == 0) {
 8000d22:	e048      	b.n	8000db6 <readButton+0xa2>
		if(deBounceReadPin(GPIO_PIN_3, 'A', mode) == 0) {
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2141      	movs	r1, #65	; 0x41
 8000d2c:	2008      	movs	r0, #8
 8000d2e:	f7ff fe25 	bl	800097c <deBounceReadPin>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10d      	bne.n	8000d54 <readButton+0x40>
			HAL_Delay(1000);
 8000d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3c:	f000 fb9c 	bl	8001478 <HAL_Delay>
			flag = 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
			printf("%c", '*');
 8000d44:	202a      	movs	r0, #42	; 0x2a
 8000d46:	f002 fd31 	bl	80037ac <putchar>
			//Put char onto display
	 		HD44780_PutChar('*');
 8000d4a:	202a      	movs	r0, #42	; 0x2a
 8000d4c:	f7ff fd6c 	bl	8000828 <HD44780_PutChar>
			return('1');
 8000d50:	2331      	movs	r3, #49	; 0x31
 8000d52:	e034      	b.n	8000dbe <readButton+0xaa>
		} else if(deBounceReadPin(GPIO_PIN_4, 'A', mode) == 0) {
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	2141      	movs	r1, #65	; 0x41
 8000d5c:	2010      	movs	r0, #16
 8000d5e:	f7ff fe0d 	bl	800097c <deBounceReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d10d      	bne.n	8000d84 <readButton+0x70>
			HAL_Delay(1000);
 8000d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6c:	f000 fb84 	bl	8001478 <HAL_Delay>
			flag = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	603b      	str	r3, [r7, #0]
			printf("%c", '*');
 8000d74:	202a      	movs	r0, #42	; 0x2a
 8000d76:	f002 fd19 	bl	80037ac <putchar>
			HD44780_PutChar('*');
 8000d7a:	202a      	movs	r0, #42	; 0x2a
 8000d7c:	f7ff fd54 	bl	8000828 <HD44780_PutChar>
			return('2');
 8000d80:	2332      	movs	r3, #50	; 0x32
 8000d82:	e01c      	b.n	8000dbe <readButton+0xaa>
		} else if(deBounceReadPin(GPIO_PIN_7, 'A', mode) == 0) {
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2141      	movs	r1, #65	; 0x41
 8000d8c:	2080      	movs	r0, #128	; 0x80
 8000d8e:	f7ff fdf5 	bl	800097c <deBounceReadPin>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10e      	bne.n	8000db6 <readButton+0xa2>
			HAL_Delay(1000);
 8000d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d9c:	f000 fb6c 	bl	8001478 <HAL_Delay>
			flag = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
			printf("%c\r\n", '*');
 8000da4:	212a      	movs	r1, #42	; 0x2a
 8000da6:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <readButton+0xb4>)
 8000da8:	f002 fce8 	bl	800377c <iprintf>
			HD44780_PutChar('*');
 8000dac:	202a      	movs	r0, #42	; 0x2a
 8000dae:	f7ff fd3b 	bl	8000828 <HD44780_PutChar>
			return('3');
 8000db2:	2333      	movs	r3, #51	; 0x33
 8000db4:	e003      	b.n	8000dbe <readButton+0xaa>
	while(flag == 0) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0b3      	beq.n	8000d24 <readButton+0x10>
		}
	}
	return('w');
 8000dbc:	2377      	movs	r3, #119	; 0x77
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	080048c0 	.word	0x080048c0

08000dcc <isValid>:
 * 				  int passwords[] : passwords array
 * 				  int size        : size of the passwords array
 *
 * RETURNS      : int: 1 if valid, 2 if valid but not enough money, 0 if invalid
 */
int isValid(int pin, int passwords[], int size) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	if (pin == 3333) {
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f640 5205 	movw	r2, #3333	; 0xd05
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <isValid+0x1a>
		return 2;
 8000de2:	2302      	movs	r3, #2
 8000de4:	e014      	b.n	8000e10 <isValid+0x44>
	}
	for (int i = 0; i < size; i++) {
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	e00c      	b.n	8000e06 <isValid+0x3a>
		if (passwords[i] == pin) {
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	68ba      	ldr	r2, [r7, #8]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d101      	bne.n	8000e00 <isValid+0x34>
			return 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e007      	b.n	8000e10 <isValid+0x44>
	for (int i = 0; i < size; i++) {
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dbee      	blt.n	8000dec <isValid+0x20>
		}
	}

	return 0;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	371c      	adds	r7, #28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b0ac      	sub	sp, #176	; 0xb0
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e26:	2244      	movs	r2, #68	; 0x44
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f002 fc9e 	bl	800376c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2254      	movs	r2, #84	; 0x54
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f002 fc90 	bl	800376c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e4c:	f000 fdb6 	bl	80019bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <SystemClock_Config+0x100>)
 8000e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e56:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <SystemClock_Config+0x100>)
 8000e58:	f023 0318 	bic.w	r3, r3, #24
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e60:	2314      	movs	r3, #20
 8000e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e64:	2301      	movs	r3, #1
 8000e66:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e74:	2360      	movs	r3, #96	; 0x60
 8000e76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e80:	2301      	movs	r3, #1
 8000e82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e86:	2301      	movs	r3, #1
 8000e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e92:	2307      	movs	r3, #7
 8000e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fdfb 	bl	8001aa4 <HAL_RCC_OscConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000eb4:	f000 f8bc 	bl	8001030 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb8:	230f      	movs	r3, #15
 8000eba:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ecc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fa06 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ede:	f000 f8a7 	bl	8001030 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4618      	mov	r0, r3
 8000eee:	f001 fbfd 	bl	80026ec <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ef8:	f000 f89a 	bl	8001030 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000efc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f00:	f000 fd7a 	bl	80019f8 <HAL_PWREx_ControlVoltageScaling>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f0a:	f000 f891 	bl	8001030 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f0e:	f001 fddf 	bl	8002ad0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f12:	bf00      	nop
 8000f14:	37b0      	adds	r7, #176	; 0xb0
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <MX_USART2_UART_Init+0x5c>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x58>)
 8000f64:	f001 feb4 	bl	8002cd0 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f000 f85f 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000204 	.word	0x20000204
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	4b24      	ldr	r3, [pc, #144]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b21      	ldr	r3, [pc, #132]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	4b1e      	ldr	r3, [pc, #120]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	4a1d      	ldr	r2, [pc, #116]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4a17      	ldr	r2, [pc, #92]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_GPIO_Init+0xa8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	21fb      	movs	r1, #251	; 0xfb
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <MX_GPIO_Init+0xac>)
 8000fe4:	f000 fcd2 	bl	800198c <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8;
 8000fe8:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f000 fb42 	bl	8001688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 LD3_Pin PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD3_Pin|GPIO_PIN_4
 8001004:	23fb      	movs	r3, #251	; 0xfb
 8001006:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_GPIO_Init+0xac>)
 800101c:	f000 fb34 	bl	8001688 <HAL_GPIO_Init>

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40021000 	.word	0x40021000
 800102c:	48000400 	.word	0x48000400

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001036:	e7fe      	b.n	8001036 <Error_Handler+0x6>

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_MspInit+0x44>)
 8001040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6613      	str	r3, [r2, #96]	; 0x60
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_MspInit+0x44>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_MspInit+0x44>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a08      	ldr	r2, [pc, #32]	; (800107c <HAL_MspInit+0x44>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_MspInit+0x44>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a20      	ldr	r2, [pc, #128]	; (8001120 <HAL_UART_MspInit+0xa0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d13a      	bne.n	8001118 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	6593      	str	r3, [r2, #88]	; 0x58
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a19      	ldr	r2, [pc, #100]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_MspInit+0xa4>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010d2:	2304      	movs	r3, #4
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e2:	2307      	movs	r3, #7
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f0:	f000 faca 	bl	8001688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001106:	2303      	movs	r3, #3
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f000 fab8 	bl	8001688 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f960 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
//	}

	// Conestoga College implemented change to cause VCP to be used for stdin
	extern UART_HandleTypeDef huart2;

	len = 1;						// over ride the read and only get 1 char
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
	if( HAL_UART_Receive(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY) != HAL_OK )
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	b29a      	uxth	r2, r3
 8001190:	f04f 33ff 	mov.w	r3, #4294967295
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	4807      	ldr	r0, [pc, #28]	; (80011b4 <_read+0x38>)
 8001198:	f001 fe7b 	bl	8002e92 <HAL_UART_Receive>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <_read+0x2c>
		len = EOF;					// signal an issue with stream
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	607b      	str	r3, [r7, #4]

	return len;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000204 	.word	0x20000204

080011b8 <_write>:

int _write(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]

	// Conestoga College implemented change to cause VCP to be used for stdin

	extern UART_HandleTypeDef huart2;

	HAL_StatusTypeDef result = HAL_OK;
 80011c4:	2300      	movs	r3, #0
 80011c6:	75fb      	strb	r3, [r7, #23]

	result = HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <_write+0x40>)
 80011d4:	f001 fdca 	bl	8002d6c <HAL_UART_Transmit>
 80011d8:	4603      	mov	r3, r0
 80011da:	75fb      	strb	r3, [r7, #23]
	if(result == HAL_ERROR || result == HAL_BUSY)
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d002      	beq.n	80011e8 <_write+0x30>
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d101      	bne.n	80011ec <_write+0x34>
	{
		Error_Handler();
 80011e8:	f7ff ff22 	bl	8001030 <Error_Handler>
	}

	return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000204 	.word	0x20000204

080011fc <_close>:



int _close(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001224:	605a      	str	r2, [r3, #4]
	return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_isatty>:

int _isatty(int file)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	return 1;
 800123c:	2301      	movs	r3, #1
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800124a:	b480      	push	{r7}
 800124c:	b085      	sub	sp, #20
 800124e:	af00      	add	r7, sp, #0
 8001250:	60f8      	str	r0, [r7, #12]
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
	return 0;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	; (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f002 fa40 	bl	8003718 <__errno>
 8001298:	4602      	mov	r2, r0
 800129a:	230c      	movs	r3, #12
 800129c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20010000 	.word	0x20010000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	200001f8 	.word	0x200001f8
 80012cc:	20000290 	.word	0x20000290

080012d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <SystemInit+0x64>)
 80012d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012da:	4a16      	ldr	r2, [pc, #88]	; (8001334 <SystemInit+0x64>)
 80012dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <SystemInit+0x68>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <SystemInit+0x68>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <SystemInit+0x68>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <SystemInit+0x68>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <SystemInit+0x68>)
 80012fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001300:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001304:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <SystemInit+0x68>)
 8001308:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800130c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SystemInit+0x68>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <SystemInit+0x68>)
 8001314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <SystemInit+0x68>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SystemInit+0x64>)
 8001322:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001326:	609a      	str	r2, [r3, #8]
#endif
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00
 8001338:	40021000 	.word	0x40021000

0800133c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800133c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001374 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001340:	f7ff ffc6 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001344:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800134a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800134c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001350:	480a      	ldr	r0, [pc, #40]	; (800137c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001354:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001356:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
	ldr	r2, =_sbss
 800135a:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <LoopForever+0x12>)
	b	LoopFillZerobss
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800135e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <LoopForever+0x16>)
	cmp	r2, r3
 8001366:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800136a:	f002 f9db 	bl	8003724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800136e:	f7ff fb4f 	bl	8000a10 <main>

08001372 <LoopForever>:

LoopForever:
    b LoopForever
 8001372:	e7fe      	b.n	8001372 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001378:	08004ac4 	.word	0x08004ac4
	ldr	r0, =_sdata
 800137c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001380:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001384:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001388:	2000028c 	.word	0x2000028c

0800138c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800138c:	e7fe      	b.n	800138c <ADC1_IRQHandler>

0800138e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f941 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f80e 	bl	80013c0 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d002      	beq.n	80013b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e001      	b.n	80013b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b0:	f7ff fe42 	bl	8001038 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b4:	79fb      	ldrb	r3, [r7, #7]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_InitTick+0x6c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d023      	beq.n	800141c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_InitTick+0x70>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_InitTick+0x6c>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4619      	mov	r1, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 f93f 	bl	800166e <HAL_SYSTICK_Config>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10f      	bne.n	8001416 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d809      	bhi.n	8001410 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f917 	bl	8001636 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_InitTick+0x74>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e007      	b.n	8001420 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e004      	b.n	8001420 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e001      	b.n	8001420 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	20000000 	.word	0x20000000
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000008 	.word	0x20000008
 800145c:	20000284 	.word	0x20000284

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	20000284 	.word	0x20000284

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_Delay+0x40>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000008 	.word	0x20000008

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f7ff ff8e 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff47 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff5c 	bl	8001504 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff8e 	bl	8001574 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5d 	bl	8001520 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ffb0 	bl	80015dc <SysTick_Config>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	e148      	b.n	800192a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 813a 	beq.w	8001924 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d00b      	beq.n	80016d0 <HAL_GPIO_Init+0x48>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d007      	beq.n	80016d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016c4:	2b11      	cmp	r3, #17
 80016c6:	d003      	beq.n	80016d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b12      	cmp	r3, #18
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b02      	cmp	r3, #2
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0xea>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b12      	cmp	r3, #18
 8001770:	d123      	bne.n	80017ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	6939      	ldr	r1, [r7, #16]
 80017b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0203 	and.w	r2, r3, #3
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 8094 	beq.w	8001924 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 80017fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6613      	str	r3, [r2, #96]	; 0x60
 8001808:	4b4f      	ldr	r3, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x2c0>)
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_GPIO_Init+0x2c4>)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	220f      	movs	r2, #15
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1d4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a43      	ldr	r2, [pc, #268]	; (8001950 <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1d0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a42      	ldr	r2, [pc, #264]	; (8001954 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1cc>
 8001850:	2302      	movs	r3, #2
 8001852:	e004      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 8001854:	2307      	movs	r3, #7
 8001856:	e002      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <HAL_GPIO_Init+0x1d6>
 800185c:	2300      	movs	r3, #0
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	f002 0203 	and.w	r2, r2, #3
 8001864:	0092      	lsls	r2, r2, #2
 8001866:	4093      	lsls	r3, r2
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800186e:	4937      	ldr	r1, [pc, #220]	; (800194c <HAL_GPIO_Init+0x2c4>)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	089b      	lsrs	r3, r3, #2
 8001874:	3302      	adds	r3, #2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43db      	mvns	r3, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018a0:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018a6:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f4:	4a18      	ldr	r2, [pc, #96]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191e:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_GPIO_Init+0x2d0>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa22 f303 	lsr.w	r3, r2, r3
 8001934:	2b00      	cmp	r3, #0
 8001936:	f47f aeaf 	bne.w	8001698 <HAL_GPIO_Init+0x10>
  }
}
 800193a:	bf00      	nop
 800193c:	371c      	adds	r7, #28
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
 8001998:	4613      	mov	r3, r2
 800199a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800199c:	787b      	ldrb	r3, [r7, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a8:	e002      	b.n	80019b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	40007000 	.word	0x40007000

080019dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000

080019f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a06:	d130      	bne.n	8001a6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d038      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a16:	4b20      	ldr	r3, [pc, #128]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a1e:	4a1e      	ldr	r2, [pc, #120]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2232      	movs	r2, #50	; 0x32
 8001a2c:	fb02 f303 	mul.w	r3, r2, r3
 8001a30:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a3c:	e002      	b.n	8001a44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3b01      	subs	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a50:	d102      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1f2      	bne.n	8001a3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a64:	d110      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e00f      	b.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a76:	d007      	beq.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 bc11 	b.w	80022da <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab8:	4ba0      	ldr	r3, [pc, #640]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac2:	4b9e      	ldr	r3, [pc, #632]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0310 	and.w	r3, r3, #16
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80e4 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_RCC_OscConfig+0x4c>
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	f040 808b 	bne.w	8001bfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 8087 	bne.w	8001bfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af0:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_OscConfig+0x64>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e3e8      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d004      	beq.n	8001b22 <HAL_RCC_OscConfig+0x7e>
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	e005      	b.n	8001b2e <HAL_RCC_OscConfig+0x8a>
 8001b22:	4b86      	ldr	r3, [pc, #536]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d223      	bcs.n	8001b7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fd78 	bl	800262c <RCC_SetFlashLatencyFromMSIRange>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e3c9      	b.n	80022da <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a7c      	ldr	r2, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b4c:	f043 0308 	orr.w	r3, r3, #8
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4977      	ldr	r1, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b64:	4b75      	ldr	r3, [pc, #468]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	4972      	ldr	r1, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]
 8001b78:	e025      	b.n	8001bc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	496a      	ldr	r1, [pc, #424]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b98:	4b68      	ldr	r3, [pc, #416]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	021b      	lsls	r3, r3, #8
 8001ba6:	4965      	ldr	r1, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fd38 	bl	800262c <RCC_SetFlashLatencyFromMSIRange>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e389      	b.n	80022da <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc6:	f000 fc6f 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8001bca:	4601      	mov	r1, r0
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <HAL_RCC_OscConfig+0x29c>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	f003 031f 	and.w	r3, r3, #31
 8001bde:	fa21 f303 	lsr.w	r3, r1, r3
 8001be2:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_RCC_OscConfig+0x2a0>)
 8001be4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001be6:	4b58      	ldr	r3, [pc, #352]	; (8001d48 <HAL_RCC_OscConfig+0x2a4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fbe8 	bl	80013c0 <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d052      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	e36d      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d032      	beq.n	8001c6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fc25 	bl	8001460 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fc21 	bl	8001460 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e356      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c2c:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c38:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a3f      	ldr	r2, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	493a      	ldr	r1, [pc, #232]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	021b      	lsls	r3, r3, #8
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
 8001c6a:	e01a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c6c:	4b33      	ldr	r3, [pc, #204]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c78:	f7ff fbf2 	bl	8001460 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbee 	bl	8001460 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e323      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c92:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1dc>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d073      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x21c>
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b0c      	cmp	r3, #12
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d063      	beq.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d15f      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e300      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0x288>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x270>
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0x288>
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <HAL_RCC_OscConfig+0x298>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d01b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fb94 	bl	8001460 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3a:	e010      	b.n	8001d5e <HAL_RCC_OscConfig+0x2ba>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	080048c8 	.word	0x080048c8
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fb88 	bl	8001460 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e2bd      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4baf      	ldr	r3, [pc, #700]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x2a8>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fb78 	bl	8001460 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fb74 	bl	8001460 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e2a9      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d86:	4ba5      	ldr	r3, [pc, #660]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2d0>
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d060      	beq.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x310>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d119      	bne.n	8001de2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d116      	bne.n	8001de2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db4:	4b99      	ldr	r3, [pc, #612]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x328>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e286      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dcc:	4b93      	ldr	r3, [pc, #588]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	061b      	lsls	r3, r3, #24
 8001dda:	4990      	ldr	r1, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de0:	e040      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d023      	beq.n	8001e32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dea:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8b      	ldr	r2, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df6:	f7ff fb33 	bl	8001460 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfe:	f7ff fb2f 	bl	8001460 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e264      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e10:	4b82      	ldr	r3, [pc, #520]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b7f      	ldr	r3, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	497c      	ldr	r1, [pc, #496]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e32:	4b7a      	ldr	r3, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a79      	ldr	r2, [pc, #484]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fb0f 	bl	8001460 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e46:	f7ff fb0b 	bl	8001460 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e240      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e58:	4b70      	ldr	r3, [pc, #448]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d03c      	beq.n	8001eea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01c      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff faea 	bl	8001460 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff fae6 	bl	8001460 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e21b      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea2:	4b5e      	ldr	r3, [pc, #376]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ef      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3ec>
 8001eb0:	e01b      	b.n	8001eea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb2:	4b5a      	ldr	r3, [pc, #360]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001eba:	f023 0301 	bic.w	r3, r3, #1
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec2:	f7ff facd 	bl	8001460 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eca:	f7ff fac9 	bl	8001460 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1fe      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ef      	bne.n	8001eca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80a6 	beq.w	8002044 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001efc:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10d      	bne.n	8001f24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4a43      	ldr	r2, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f12:	6593      	str	r3, [r2, #88]	; 0x58
 8001f14:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f20:	2301      	movs	r3, #1
 8001f22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f24:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d118      	bne.n	8001f62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f30:	4b3b      	ldr	r3, [pc, #236]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff fa90 	bl	8001460 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff fa8c 	bl	8001460 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1c1      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f56:	4b32      	ldr	r3, [pc, #200]	; (8002020 <HAL_RCC_OscConfig+0x57c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d108      	bne.n	8001f7c <HAL_RCC_OscConfig+0x4d8>
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a2a      	ldr	r2, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7a:	e024      	b.n	8001fc6 <HAL_RCC_OscConfig+0x522>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d110      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x502>
 8001f84:	4b25      	ldr	r3, [pc, #148]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a24      	ldr	r2, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	e00f      	b.n	8001fc6 <HAL_RCC_OscConfig+0x522>
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a1b      	ldr	r2, [pc, #108]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d016      	beq.n	8001ffc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fce:	f7ff fa47 	bl	8001460 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd4:	e00a      	b.n	8001fec <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd6:	f7ff fa43 	bl	8001460 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e176      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_OscConfig+0x578>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ed      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x532>
 8001ffa:	e01a      	b.n	8002032 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fa30 	bl	8001460 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff fa2c 	bl	8001460 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d906      	bls.n	8002024 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e15f      	b.n	80022da <HAL_RCC_OscConfig+0x836>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	4baa      	ldr	r3, [pc, #680]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1e8      	bne.n	8002004 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002032:	7ffb      	ldrb	r3, [r7, #31]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d105      	bne.n	8002044 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002038:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	4aa4      	ldr	r2, [pc, #656]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800203e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002042:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d03c      	beq.n	80020ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	2b00      	cmp	r3, #0
 8002056:	d01c      	beq.n	8002092 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002058:	4b9d      	ldr	r3, [pc, #628]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800205a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205e:	4a9c      	ldr	r2, [pc, #624]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7ff f9fa 	bl	8001460 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002070:	f7ff f9f6 	bl	8001460 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e12b      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002082:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCC_OscConfig+0x5cc>
 8002090:	e01b      	b.n	80020ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002092:	4b8f      	ldr	r3, [pc, #572]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002098:	4a8d      	ldr	r2, [pc, #564]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7ff f9dd 	bl	8001460 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020aa:	f7ff f9d9 	bl	8001460 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e10e      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020bc:	4b84      	ldr	r3, [pc, #528]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80020be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ef      	bne.n	80020aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 8102 	beq.w	80022d8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	2b02      	cmp	r3, #2
 80020da:	f040 80c5 	bne.w	8002268 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d12c      	bne.n	800214c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	3b01      	subs	r3, #1
 80020fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d123      	bne.n	800214c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d11b      	bne.n	800214c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d113      	bne.n	800214c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d109      	bne.n	800214c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	085b      	lsrs	r3, r3, #1
 8002144:	3b01      	subs	r3, #1
 8002146:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d067      	beq.n	800221c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d062      	beq.n	8002218 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0bb      	b.n	80022da <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002162:	4b5b      	ldr	r3, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5a      	ldr	r2, [pc, #360]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216e:	f7ff f977 	bl	8001460 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff f973 	bl	8001460 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0a8      	b.n	80022da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <HAL_RCC_OscConfig+0x830>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a4:	3a01      	subs	r2, #1
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ae:	0212      	lsls	r2, r2, #8
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b6:	0852      	lsrs	r2, r2, #1
 80021b8:	3a01      	subs	r2, #1
 80021ba:	0552      	lsls	r2, r2, #21
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c2:	0852      	lsrs	r2, r2, #1
 80021c4:	3a01      	subs	r2, #1
 80021c6:	0652      	lsls	r2, r2, #25
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ce:	06d2      	lsls	r2, r2, #27
 80021d0:	430a      	orrs	r2, r1
 80021d2:	493f      	ldr	r1, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d8:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e4:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a39      	ldr	r2, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f0:	f7ff f936 	bl	8001460 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f932 	bl	8001460 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e067      	b.n	80022da <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002216:	e05f      	b.n	80022d8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e05e      	b.n	80022da <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d157      	bne.n	80022d8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002228:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002234:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a25      	ldr	r2, [pc, #148]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002240:	f7ff f90e 	bl	8001460 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff f90a 	bl	8001460 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e03f      	b.n	80022da <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x7a4>
 8002266:	e037      	b.n	80022d8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d02d      	beq.n	80022ca <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002278:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 800228c:	f023 0303 	bic.w	r3, r3, #3
 8002290:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 8002298:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f8dd 	bl	8001460 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff f8d9 	bl	8001460 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e00e      	b.n	80022da <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <HAL_RCC_OscConfig+0x82c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x806>
 80022c8:	e006      	b.n	80022d8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e005      	b.n	80022da <HAL_RCC_OscConfig+0x836>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0c8      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b66      	ldr	r3, [pc, #408]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4961      	ldr	r1, [pc, #388]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b5f      	ldr	r3, [pc, #380]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b0      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d04c      	beq.n	80023ce <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b03      	cmp	r3, #3
 800233a:	d107      	bne.n	800234c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d121      	bne.n	800238c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e09e      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d107      	bne.n	8002364 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d115      	bne.n	800238c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e092      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d107      	bne.n	800237c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800236c:	4b4a      	ldr	r3, [pc, #296]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e086      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800237c:	4b46      	ldr	r3, [pc, #280]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e07e      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800238c:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f023 0203 	bic.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	493f      	ldr	r1, [pc, #252]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800239e:	f7ff f85f 	bl	8001460 <HAL_GetTick>
 80023a2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a6:	f7ff f85b 	bl	8001460 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e066      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023bc:	4b36      	ldr	r3, [pc, #216]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 020c 	and.w	r2, r3, #12
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d1eb      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	492c      	ldr	r1, [pc, #176]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ec:	4b29      	ldr	r3, [pc, #164]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d210      	bcs.n	800241c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f023 0207 	bic.w	r2, r3, #7
 8002402:	4924      	ldr	r1, [pc, #144]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800240a:	4b22      	ldr	r3, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x1b0>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e036      	b.n	800248a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4918      	ldr	r1, [pc, #96]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002446:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4910      	ldr	r1, [pc, #64]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800245a:	f000 f825 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800245e:	4601      	mov	r1, r0
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x1b4>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	4a0c      	ldr	r2, [pc, #48]	; (800249c <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	5cd3      	ldrb	r3, [r2, r3]
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	fa21 f303 	lsr.w	r3, r1, r3
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe ff9e 	bl	80013c0 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	72fb      	strb	r3, [r7, #11]

  return status;
 8002488:	7afb      	ldrb	r3, [r7, #11]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	080048c8 	.word	0x080048c8
 80024a0:	20000000 	.word	0x20000000
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	2300      	movs	r3, #0
 80024b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c0:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_GetSysClockFreq+0x34>
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d121      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d11e      	bne.n	800251a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024e8:	4b30      	ldr	r3, [pc, #192]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	61fb      	str	r3, [r7, #28]
 80024f6:	e005      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024f8:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	091b      	lsrs	r3, r3, #4
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002504:	4a2a      	ldr	r2, [pc, #168]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d102      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002522:	61bb      	str	r3, [r7, #24]
 8002524:	e004      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d101      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x110>)
 800252e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d133      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d002      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0xa4>
 8002546:	2b03      	cmp	r3, #3
 8002548:	d003      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0xaa>
 800254a:	e005      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800254c:	4b19      	ldr	r3, [pc, #100]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800254e:	617b      	str	r3, [r7, #20]
      break;
 8002550:	e005      	b.n	800255e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002554:	617b      	str	r3, [r7, #20]
      break;
 8002556:	e002      	b.n	800255e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	617b      	str	r3, [r7, #20]
      break;
 800255c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	3301      	adds	r3, #1
 800256a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	fb02 f203 	mul.w	r2, r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_GetSysClockFreq+0x104>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	0e5b      	lsrs	r3, r3, #25
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800259e:	69bb      	ldr	r3, [r7, #24]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3724      	adds	r7, #36	; 0x24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	40021000 	.word	0x40021000
 80025b0:	080048e0 	.word	0x080048e0
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200

080025bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d8:	f7ff fff0 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025dc:	4601      	mov	r1, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4a04      	ldr	r2, [pc, #16]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	080048d8 	.word	0x080048d8

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002604:	f7ff ffda 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002608:	4601      	mov	r1, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0adb      	lsrs	r3, r3, #11
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002616:	5cd3      	ldrb	r3, [r2, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	080048d8 	.word	0x080048d8

0800262c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002634:	2300      	movs	r3, #0
 8002636:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002644:	f7ff f9ca 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 8002648:	6178      	str	r0, [r7, #20]
 800264a:	e014      	b.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002656:	6593      	str	r3, [r2, #88]	; 0x58
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002664:	f7ff f9ba 	bl	80019dc <HAL_PWREx_GetVoltageRange>
 8002668:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b1e      	ldr	r3, [pc, #120]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002674:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267c:	d10b      	bne.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b80      	cmp	r3, #128	; 0x80
 8002682:	d919      	bls.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2ba0      	cmp	r3, #160	; 0xa0
 8002688:	d902      	bls.n	8002690 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800268a:	2302      	movs	r3, #2
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e013      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	e010      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b80      	cmp	r3, #128	; 0x80
 800269a:	d902      	bls.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800269c:	2303      	movs	r3, #3
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e00a      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d102      	bne.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a8:	2302      	movs	r3, #2
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e004      	b.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b70      	cmp	r3, #112	; 0x70
 80026b2:	d101      	bne.n	80026b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 0207 	bic.w	r2, r3, #7
 80026c0:	4909      	ldr	r1, [pc, #36]	; (80026e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026f4:	2300      	movs	r3, #0
 80026f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026f8:	2300      	movs	r3, #0
 80026fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002704:	2b00      	cmp	r3, #0
 8002706:	d02f      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002710:	d005      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002712:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002716:	d015      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x40>
 800271c:	e00f      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800271e:	4bac      	ldr	r3, [pc, #688]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4aab      	ldr	r2, [pc, #684]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800272a:	e00c      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3304      	adds	r3, #4
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f9dc 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002738:	4603      	mov	r3, r0
 800273a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273c:	e003      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	74fb      	strb	r3, [r7, #19]
      break;
 8002742:	e000      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002746:	7cfb      	ldrb	r3, [r7, #19]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800274c:	4ba0      	ldr	r3, [pc, #640]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	499d      	ldr	r1, [pc, #628]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002762:	e001      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8099 	beq.w	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002776:	2300      	movs	r3, #0
 8002778:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800277a:	4b95      	ldr	r3, [pc, #596]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800278a:	2300      	movs	r3, #0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00d      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002790:	4b8f      	ldr	r3, [pc, #572]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	4a8e      	ldr	r2, [pc, #568]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279a:	6593      	str	r3, [r2, #88]	; 0x58
 800279c:	4b8c      	ldr	r3, [pc, #560]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800279e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a8:	2301      	movs	r3, #1
 80027aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b89      	ldr	r3, [pc, #548]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a88      	ldr	r2, [pc, #544]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b8:	f7fe fe52 	bl	8001460 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027be:	e009      	b.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe fe4e 	bl	8001460 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d902      	bls.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	74fb      	strb	r3, [r7, #19]
        break;
 80027d2:	e005      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d4:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ef      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d155      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80027e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d01e      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d019      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800280e:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800282e:	4a68      	ldr	r2, [pc, #416]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d016      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fe0e 	bl	8001460 <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002846:	e00b      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002848:	f7fe fe0a 	bl	8001460 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d902      	bls.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	74fb      	strb	r3, [r7, #19]
            break;
 800285e:	e006      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0ec      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800286e:	7cfb      	ldrb	r3, [r7, #19]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10b      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002874:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	4953      	ldr	r1, [pc, #332]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800288a:	e004      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
 8002890:	e001      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002892:	7cfb      	ldrb	r3, [r7, #19]
 8002894:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002896:	7c7b      	ldrb	r3, [r7, #17]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d105      	bne.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800289c:	4b4c      	ldr	r3, [pc, #304]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	4a4b      	ldr	r2, [pc, #300]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028b4:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	f023 0203 	bic.w	r2, r3, #3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	4943      	ldr	r1, [pc, #268]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f023 020c 	bic.w	r2, r3, #12
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	493a      	ldr	r1, [pc, #232]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f8:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	4932      	ldr	r1, [pc, #200]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002928:	4929      	ldr	r1, [pc, #164]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	4921      	ldr	r1, [pc, #132]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295e:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	4918      	ldr	r1, [pc, #96]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4910      	ldr	r1, [pc, #64]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d02c      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a2:	4b0b      	ldr	r3, [pc, #44]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	4907      	ldr	r1, [pc, #28]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c0:	d10a      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c2:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a02      	ldr	r2, [pc, #8]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80029c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029cc:	60d3      	str	r3, [r2, #12]
 80029ce:	e015      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029e0:	d10c      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	2101      	movs	r1, #1
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 f881 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 80029f8:	7cfb      	ldrb	r3, [r7, #19]
 80029fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d028      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a08:	4b30      	ldr	r3, [pc, #192]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	492d      	ldr	r1, [pc, #180]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
 8002a34:	e011      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f852 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a50:	7cfb      	ldrb	r3, [r7, #19]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002a56:	7cfb      	ldrb	r3, [r7, #19]
 8002a58:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d01c      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a74:	4915      	ldr	r1, [pc, #84]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f82f 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a96:	7cfb      	ldrb	r3, [r7, #19]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ac2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40021000 	.word	0x40021000

08002ad0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ada:	f043 0304 	orr.w	r3, r3, #4
 8002ade:	6013      	str	r3, [r2, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000

08002af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b0a:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
       ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d044      	beq.n	8002bc0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e041      	b.n	8002bc0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d00c      	beq.n	8002b5e <RCCEx_PLLSAI1_Config+0x6e>
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d013      	beq.n	8002b70 <RCCEx_PLLSAI1_Config+0x80>
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d120      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b4c:	4b5f      	ldr	r3, [pc, #380]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11d      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5c:	e01a      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6e:	e013      	b.n	8002b98 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b70:	4b56      	ldr	r3, [pc, #344]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10f      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b7c:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b8c:	e006      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      break;
 8002b92:	e004      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b94:	bf00      	nop
 8002b96:	e002      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10d      	bne.n	8002bc0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ba4:	4b49      	ldr	r3, [pc, #292]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	4944      	ldr	r1, [pc, #272]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d17c      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bcc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd2:	f7fe fc45 	bl	8001460 <HAL_GetTick>
 8002bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bd8:	e009      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bda:	f7fe fc41 	bl	8001460 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d902      	bls.n	8002bee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	73fb      	strb	r3, [r7, #15]
        break;
 8002bec:	e005      	b.n	8002bfa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bee:	4b37      	ldr	r3, [pc, #220]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1ef      	bne.n	8002bda <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d15f      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d110      	bne.n	8002c28 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c06:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6892      	ldr	r2, [r2, #8]
 8002c16:	0211      	lsls	r1, r2, #8
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68d2      	ldr	r2, [r2, #12]
 8002c1c:	06d2      	lsls	r2, r2, #27
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	492a      	ldr	r1, [pc, #168]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
 8002c26:	e027      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d112      	bne.n	8002c54 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	0211      	lsls	r1, r2, #8
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6912      	ldr	r2, [r2, #16]
 8002c44:	0852      	lsrs	r2, r2, #1
 8002c46:	3a01      	subs	r2, #1
 8002c48:	0552      	lsls	r2, r2, #21
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	491f      	ldr	r1, [pc, #124]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	610b      	str	r3, [r1, #16]
 8002c52:	e011      	b.n	8002c78 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6952      	ldr	r2, [r2, #20]
 8002c6a:	0852      	lsrs	r2, r2, #1
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0652      	lsls	r2, r2, #25
 8002c70:	430a      	orrs	r2, r1
 8002c72:	4916      	ldr	r1, [pc, #88]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fbec 	bl	8001460 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c8c:	f7fe fbe8 	bl	8001460 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4904      	ldr	r1, [pc, #16]	; (8002ccc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e040      	b.n	8002d64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe f9c4 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2224      	movs	r2, #36	; 0x24
 8002cfc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f98c 	bl	800302c <UART_SetConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e022      	b.n	8002d64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fb90 	bl	800344c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fc17 	bl	8003590 <UART_CheckIdleState>
 8002d62:	4603      	mov	r3, r0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	f040 8081 	bne.w	8002e88 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_UART_Transmit+0x26>
 8002d8c:	88fb      	ldrh	r3, [r7, #6]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e079      	b.n	8002e8a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_UART_Transmit+0x38>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e072      	b.n	8002e8a <HAL_UART_Transmit+0x11e>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2221      	movs	r2, #33	; 0x21
 8002db6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002db8:	f7fe fb52 	bl	8001460 <HAL_GetTick>
 8002dbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	88fa      	ldrh	r2, [r7, #6]
 8002dc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	88fa      	ldrh	r2, [r7, #6]
 8002dca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	d108      	bne.n	8002dea <HAL_UART_Transmit+0x7e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e003      	b.n	8002df2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002dfa:	e02d      	b.n	8002e58 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	2200      	movs	r2, #0
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fc07 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e039      	b.n	8002e8a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	881a      	ldrh	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e008      	b.n	8002e46 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b292      	uxth	r2, r2
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	3301      	adds	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1cb      	bne.n	8002dfc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2140      	movs	r1, #64	; 0x40
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fbd3 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e005      	b.n	8002e8a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e000      	b.n	8002e8a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002e88:	2302      	movs	r3, #2
  }
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b08a      	sub	sp, #40	; 0x28
 8002e96:	af02      	add	r7, sp, #8
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80bb 	bne.w	8003022 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_UART_Receive+0x26>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0b3      	b.n	8003024 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Receive+0x38>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0ac      	b.n	8003024 <HAL_UART_Receive+0x192>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2222      	movs	r2, #34	; 0x22
 8002edc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ede:	f7fe fabf 	bl	8001460 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002efc:	d10e      	bne.n	8002f1c <HAL_UART_Receive+0x8a>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_UART_Receive+0x80>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f10:	e02d      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f1a:	e028      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <HAL_UART_Receive+0xae>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d104      	bne.n	8002f36 <HAL_UART_Receive+0xa4>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	22ff      	movs	r2, #255	; 0xff
 8002f30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f34:	e01b      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	227f      	movs	r2, #127	; 0x7f
 8002f3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f3e:	e016      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f48:	d10d      	bne.n	8002f66 <HAL_UART_Receive+0xd4>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <HAL_UART_Receive+0xca>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	227f      	movs	r2, #127	; 0x7f
 8002f56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f5a:	e008      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	223f      	movs	r2, #63	; 0x3f
 8002f60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002f64:	e003      	b.n	8002f6e <HAL_UART_Receive+0xdc>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002f74:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7e:	d108      	bne.n	8002f92 <HAL_UART_Receive+0x100>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
 8002f90:	e003      	b.n	8002f9a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002fa2:	e033      	b.n	800300c <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2120      	movs	r1, #32
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fb33 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e032      	b.n	8003024 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10c      	bne.n	8002fde <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	8a7b      	ldrh	r3, [r7, #18]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	3302      	adds	r3, #2
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e00d      	b.n	8002ffa <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	8a7b      	ldrh	r3, [r7, #18]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c5      	bne.n	8002fa4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3720      	adds	r7, #32
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800302c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003030:	b088      	sub	sp, #32
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	4313      	orrs	r3, r2
 8003050:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4bb0      	ldr	r3, [pc, #704]	; (800331c <UART_SetConfig+0x2f0>)
 800305a:	4013      	ands	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	69f9      	ldr	r1, [r7, #28]
 8003062:	430b      	orrs	r3, r1
 8003064:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4aa6      	ldr	r2, [pc, #664]	; (8003320 <UART_SetConfig+0x2f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	4313      	orrs	r3, r2
 8003094:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a9d      	ldr	r2, [pc, #628]	; (8003324 <UART_SetConfig+0x2f8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d121      	bne.n	80030f8 <UART_SetConfig+0xcc>
 80030b4:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <UART_SetConfig+0x2fc>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d816      	bhi.n	80030f0 <UART_SetConfig+0xc4>
 80030c2:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <UART_SetConfig+0x9c>)
 80030c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c8:	080030d9 	.word	0x080030d9
 80030cc:	080030e5 	.word	0x080030e5
 80030d0:	080030df 	.word	0x080030df
 80030d4:	080030eb 	.word	0x080030eb
 80030d8:	2301      	movs	r3, #1
 80030da:	76fb      	strb	r3, [r7, #27]
 80030dc:	e072      	b.n	80031c4 <UART_SetConfig+0x198>
 80030de:	2302      	movs	r3, #2
 80030e0:	76fb      	strb	r3, [r7, #27]
 80030e2:	e06f      	b.n	80031c4 <UART_SetConfig+0x198>
 80030e4:	2304      	movs	r3, #4
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e06c      	b.n	80031c4 <UART_SetConfig+0x198>
 80030ea:	2308      	movs	r3, #8
 80030ec:	76fb      	strb	r3, [r7, #27]
 80030ee:	e069      	b.n	80031c4 <UART_SetConfig+0x198>
 80030f0:	2310      	movs	r3, #16
 80030f2:	76fb      	strb	r3, [r7, #27]
 80030f4:	bf00      	nop
 80030f6:	e065      	b.n	80031c4 <UART_SetConfig+0x198>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a8b      	ldr	r2, [pc, #556]	; (800332c <UART_SetConfig+0x300>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d134      	bne.n	800316c <UART_SetConfig+0x140>
 8003102:	4b89      	ldr	r3, [pc, #548]	; (8003328 <UART_SetConfig+0x2fc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b0c      	cmp	r3, #12
 800310e:	d829      	bhi.n	8003164 <UART_SetConfig+0x138>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0xec>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003165 	.word	0x08003165
 8003120:	08003165 	.word	0x08003165
 8003124:	08003165 	.word	0x08003165
 8003128:	08003159 	.word	0x08003159
 800312c:	08003165 	.word	0x08003165
 8003130:	08003165 	.word	0x08003165
 8003134:	08003165 	.word	0x08003165
 8003138:	08003153 	.word	0x08003153
 800313c:	08003165 	.word	0x08003165
 8003140:	08003165 	.word	0x08003165
 8003144:	08003165 	.word	0x08003165
 8003148:	0800315f 	.word	0x0800315f
 800314c:	2300      	movs	r3, #0
 800314e:	76fb      	strb	r3, [r7, #27]
 8003150:	e038      	b.n	80031c4 <UART_SetConfig+0x198>
 8003152:	2302      	movs	r3, #2
 8003154:	76fb      	strb	r3, [r7, #27]
 8003156:	e035      	b.n	80031c4 <UART_SetConfig+0x198>
 8003158:	2304      	movs	r3, #4
 800315a:	76fb      	strb	r3, [r7, #27]
 800315c:	e032      	b.n	80031c4 <UART_SetConfig+0x198>
 800315e:	2308      	movs	r3, #8
 8003160:	76fb      	strb	r3, [r7, #27]
 8003162:	e02f      	b.n	80031c4 <UART_SetConfig+0x198>
 8003164:	2310      	movs	r3, #16
 8003166:	76fb      	strb	r3, [r7, #27]
 8003168:	bf00      	nop
 800316a:	e02b      	b.n	80031c4 <UART_SetConfig+0x198>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a6b      	ldr	r2, [pc, #428]	; (8003320 <UART_SetConfig+0x2f4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d124      	bne.n	80031c0 <UART_SetConfig+0x194>
 8003176:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <UART_SetConfig+0x2fc>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003180:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003184:	d012      	beq.n	80031ac <UART_SetConfig+0x180>
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d802      	bhi.n	8003192 <UART_SetConfig+0x166>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <UART_SetConfig+0x174>
 8003190:	e012      	b.n	80031b8 <UART_SetConfig+0x18c>
 8003192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003196:	d006      	beq.n	80031a6 <UART_SetConfig+0x17a>
 8003198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800319c:	d009      	beq.n	80031b2 <UART_SetConfig+0x186>
 800319e:	e00b      	b.n	80031b8 <UART_SetConfig+0x18c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	76fb      	strb	r3, [r7, #27]
 80031a4:	e00e      	b.n	80031c4 <UART_SetConfig+0x198>
 80031a6:	2302      	movs	r3, #2
 80031a8:	76fb      	strb	r3, [r7, #27]
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x198>
 80031ac:	2304      	movs	r3, #4
 80031ae:	76fb      	strb	r3, [r7, #27]
 80031b0:	e008      	b.n	80031c4 <UART_SetConfig+0x198>
 80031b2:	2308      	movs	r3, #8
 80031b4:	76fb      	strb	r3, [r7, #27]
 80031b6:	e005      	b.n	80031c4 <UART_SetConfig+0x198>
 80031b8:	2310      	movs	r3, #16
 80031ba:	76fb      	strb	r3, [r7, #27]
 80031bc:	bf00      	nop
 80031be:	e001      	b.n	80031c4 <UART_SetConfig+0x198>
 80031c0:	2310      	movs	r3, #16
 80031c2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a55      	ldr	r2, [pc, #340]	; (8003320 <UART_SetConfig+0x2f4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d174      	bne.n	80032b8 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031ce:	7efb      	ldrb	r3, [r7, #27]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d824      	bhi.n	800321e <UART_SetConfig+0x1f2>
 80031d4:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <UART_SetConfig+0x1b0>)
 80031d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031da:	bf00      	nop
 80031dc:	08003201 	.word	0x08003201
 80031e0:	0800321f 	.word	0x0800321f
 80031e4:	08003209 	.word	0x08003209
 80031e8:	0800321f 	.word	0x0800321f
 80031ec:	0800320f 	.word	0x0800320f
 80031f0:	0800321f 	.word	0x0800321f
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	0800321f 	.word	0x0800321f
 80031fc:	08003217 	.word	0x08003217
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff f9e8 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003204:	6178      	str	r0, [r7, #20]
        break;
 8003206:	e00f      	b.n	8003228 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003208:	4b49      	ldr	r3, [pc, #292]	; (8003330 <UART_SetConfig+0x304>)
 800320a:	617b      	str	r3, [r7, #20]
        break;
 800320c:	e00c      	b.n	8003228 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800320e:	f7ff f94b 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8003212:	6178      	str	r0, [r7, #20]
        break;
 8003214:	e008      	b.n	8003228 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003216:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800321a:	617b      	str	r3, [r7, #20]
        break;
 800321c:	e004      	b.n	8003228 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	76bb      	strb	r3, [r7, #26]
        break;
 8003226:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8100 	beq.w	8003430 <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d305      	bcc.n	800324c <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	429a      	cmp	r2, r3
 800324a:	d902      	bls.n	8003252 <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	76bb      	strb	r3, [r7, #26]
 8003250:	e0ee      	b.n	8003430 <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4619      	mov	r1, r3
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	f04f 0400 	mov.w	r4, #0
 8003262:	0214      	lsls	r4, r2, #8
 8003264:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003268:	020b      	lsls	r3, r1, #8
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6852      	ldr	r2, [r2, #4]
 800326e:	0852      	lsrs	r2, r2, #1
 8003270:	4611      	mov	r1, r2
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	eb13 0b01 	adds.w	fp, r3, r1
 800327a:	eb44 0c02 	adc.w	ip, r4, r2
 800327e:	4658      	mov	r0, fp
 8003280:	4661      	mov	r1, ip
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f04f 0400 	mov.w	r4, #0
 800328a:	461a      	mov	r2, r3
 800328c:	4623      	mov	r3, r4
 800328e:	f7fc ffef 	bl	8000270 <__aeabi_uldivmod>
 8003292:	4603      	mov	r3, r0
 8003294:	460c      	mov	r4, r1
 8003296:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329e:	d308      	bcc.n	80032b2 <UART_SetConfig+0x286>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d204      	bcs.n	80032b2 <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e0be      	b.n	8003430 <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	76bb      	strb	r3, [r7, #26]
 80032b6:	e0bb      	b.n	8003430 <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d169      	bne.n	8003396 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 80032c2:	7efb      	ldrb	r3, [r7, #27]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d835      	bhi.n	8003334 <UART_SetConfig+0x308>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x2a4>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	08003335 	.word	0x08003335
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	08003335 	.word	0x08003335
 80032e8:	08003335 	.word	0x08003335
 80032ec:	08003335 	.word	0x08003335
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7ff f96e 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 80032f8:	6178      	str	r0, [r7, #20]
        break;
 80032fa:	e020      	b.n	800333e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff f980 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8003300:	6178      	str	r0, [r7, #20]
        break;
 8003302:	e01c      	b.n	800333e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <UART_SetConfig+0x304>)
 8003306:	617b      	str	r3, [r7, #20]
        break;
 8003308:	e019      	b.n	800333e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7ff f8cd 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 800330e:	6178      	str	r0, [r7, #20]
        break;
 8003310:	e015      	b.n	800333e <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	617b      	str	r3, [r7, #20]
        break;
 8003318:	e011      	b.n	800333e <UART_SetConfig+0x312>
 800331a:	bf00      	nop
 800331c:	efff69f3 	.word	0xefff69f3
 8003320:	40008000 	.word	0x40008000
 8003324:	40013800 	.word	0x40013800
 8003328:	40021000 	.word	0x40021000
 800332c:	40004400 	.word	0x40004400
 8003330:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	76bb      	strb	r3, [r7, #26]
        break;
 800333c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d075      	beq.n	8003430 <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005a      	lsls	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	441a      	add	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	fbb2 f3f3 	udiv	r3, r2, r3
 8003358:	b29b      	uxth	r3, r3
 800335a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	d916      	bls.n	8003390 <UART_SetConfig+0x364>
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003368:	d212      	bcs.n	8003390 <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	b29b      	uxth	r3, r3
 800336e:	f023 030f 	bic.w	r3, r3, #15
 8003372:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	085b      	lsrs	r3, r3, #1
 8003378:	b29b      	uxth	r3, r3
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	b29a      	uxth	r2, r3
 8003380:	89fb      	ldrh	r3, [r7, #14]
 8003382:	4313      	orrs	r3, r2
 8003384:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	89fa      	ldrh	r2, [r7, #14]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	e04f      	b.n	8003430 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	76bb      	strb	r3, [r7, #26]
 8003394:	e04c      	b.n	8003430 <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003396:	7efb      	ldrb	r3, [r7, #27]
 8003398:	2b08      	cmp	r3, #8
 800339a:	d828      	bhi.n	80033ee <UART_SetConfig+0x3c2>
 800339c:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <UART_SetConfig+0x378>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033df 	.word	0x080033df
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7ff f904 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 80033cc:	6178      	str	r0, [r7, #20]
        break;
 80033ce:	e013      	b.n	80033f8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7ff f916 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 80033d4:	6178      	str	r0, [r7, #20]
        break;
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <UART_SetConfig+0x41c>)
 80033da:	617b      	str	r3, [r7, #20]
        break;
 80033dc:	e00c      	b.n	80033f8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7ff f863 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80033e2:	6178      	str	r0, [r7, #20]
        break;
 80033e4:	e008      	b.n	80033f8 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ea:	617b      	str	r3, [r7, #20]
        break;
 80033ec:	e004      	b.n	80033f8 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	76bb      	strb	r3, [r7, #26]
        break;
 80033f6:	bf00      	nop
    }

    if (pclk != 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d018      	beq.n	8003430 <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	085a      	lsrs	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	441a      	add	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b0f      	cmp	r3, #15
 8003418:	d908      	bls.n	800342c <UART_SetConfig+0x400>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003420:	d204      	bcs.n	800342c <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	e001      	b.n	8003430 <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800343c:	7ebb      	ldrb	r3, [r7, #26]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003448:	00f42400 	.word	0x00f42400

0800344c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01a      	beq.n	8003562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800354a:	d10a      	bne.n	8003562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	605a      	str	r2, [r3, #4]
  }
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800359e:	f7fd ff5f 	bl	8001460 <HAL_GetTick>
 80035a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d10e      	bne.n	80035d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f82a 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e020      	b.n	8003612 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d10e      	bne.n	80035fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f814 	bl	800361a <UART_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00a      	b.n	8003612 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362a:	e05d      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d059      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003634:	f7fd ff14 	bl	8001460 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d302      	bcc.n	800364a <UART_WaitOnFlagUntilTimeout+0x30>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d11b      	bne.n	8003682 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003658:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e042      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b00      	cmp	r3, #0
 800368e:	d02b      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800369e:	d123      	bne.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036b8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0201 	bic.w	r2, r2, #1
 80036c8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00f      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	429a      	cmp	r2, r3
 8003704:	d092      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <atoi>:
 8003710:	220a      	movs	r2, #10
 8003712:	2100      	movs	r1, #0
 8003714:	f000 b8da 	b.w	80038cc <strtol>

08003718 <__errno>:
 8003718:	4b01      	ldr	r3, [pc, #4]	; (8003720 <__errno+0x8>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	2000000c 	.word	0x2000000c

08003724 <__libc_init_array>:
 8003724:	b570      	push	{r4, r5, r6, lr}
 8003726:	4e0d      	ldr	r6, [pc, #52]	; (800375c <__libc_init_array+0x38>)
 8003728:	4c0d      	ldr	r4, [pc, #52]	; (8003760 <__libc_init_array+0x3c>)
 800372a:	1ba4      	subs	r4, r4, r6
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	2500      	movs	r5, #0
 8003730:	42a5      	cmp	r5, r4
 8003732:	d109      	bne.n	8003748 <__libc_init_array+0x24>
 8003734:	4e0b      	ldr	r6, [pc, #44]	; (8003764 <__libc_init_array+0x40>)
 8003736:	4c0c      	ldr	r4, [pc, #48]	; (8003768 <__libc_init_array+0x44>)
 8003738:	f001 f804 	bl	8004744 <_init>
 800373c:	1ba4      	subs	r4, r4, r6
 800373e:	10a4      	asrs	r4, r4, #2
 8003740:	2500      	movs	r5, #0
 8003742:	42a5      	cmp	r5, r4
 8003744:	d105      	bne.n	8003752 <__libc_init_array+0x2e>
 8003746:	bd70      	pop	{r4, r5, r6, pc}
 8003748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800374c:	4798      	blx	r3
 800374e:	3501      	adds	r5, #1
 8003750:	e7ee      	b.n	8003730 <__libc_init_array+0xc>
 8003752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003756:	4798      	blx	r3
 8003758:	3501      	adds	r5, #1
 800375a:	e7f2      	b.n	8003742 <__libc_init_array+0x1e>
 800375c:	08004abc 	.word	0x08004abc
 8003760:	08004abc 	.word	0x08004abc
 8003764:	08004abc 	.word	0x08004abc
 8003768:	08004ac0 	.word	0x08004ac0

0800376c <memset>:
 800376c:	4402      	add	r2, r0
 800376e:	4603      	mov	r3, r0
 8003770:	4293      	cmp	r3, r2
 8003772:	d100      	bne.n	8003776 <memset+0xa>
 8003774:	4770      	bx	lr
 8003776:	f803 1b01 	strb.w	r1, [r3], #1
 800377a:	e7f9      	b.n	8003770 <memset+0x4>

0800377c <iprintf>:
 800377c:	b40f      	push	{r0, r1, r2, r3}
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <iprintf+0x2c>)
 8003780:	b513      	push	{r0, r1, r4, lr}
 8003782:	681c      	ldr	r4, [r3, #0]
 8003784:	b124      	cbz	r4, 8003790 <iprintf+0x14>
 8003786:	69a3      	ldr	r3, [r4, #24]
 8003788:	b913      	cbnz	r3, 8003790 <iprintf+0x14>
 800378a:	4620      	mov	r0, r4
 800378c:	f000 f8f4 	bl	8003978 <__sinit>
 8003790:	ab05      	add	r3, sp, #20
 8003792:	9a04      	ldr	r2, [sp, #16]
 8003794:	68a1      	ldr	r1, [r4, #8]
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	4620      	mov	r0, r4
 800379a:	f000 fa11 	bl	8003bc0 <_vfiprintf_r>
 800379e:	b002      	add	sp, #8
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a4:	b004      	add	sp, #16
 80037a6:	4770      	bx	lr
 80037a8:	2000000c 	.word	0x2000000c

080037ac <putchar>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <putchar+0x24>)
 80037b0:	681c      	ldr	r4, [r3, #0]
 80037b2:	4605      	mov	r5, r0
 80037b4:	b124      	cbz	r4, 80037c0 <putchar+0x14>
 80037b6:	69a3      	ldr	r3, [r4, #24]
 80037b8:	b913      	cbnz	r3, 80037c0 <putchar+0x14>
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 f8dc 	bl	8003978 <__sinit>
 80037c0:	68a2      	ldr	r2, [r4, #8]
 80037c2:	4629      	mov	r1, r5
 80037c4:	4620      	mov	r0, r4
 80037c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ca:	f000 bc97 	b.w	80040fc <_putc_r>
 80037ce:	bf00      	nop
 80037d0:	2000000c 	.word	0x2000000c

080037d4 <_strtol_l.isra.0>:
 80037d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	4680      	mov	r8, r0
 80037da:	4689      	mov	r9, r1
 80037dc:	4692      	mov	sl, r2
 80037de:	461e      	mov	r6, r3
 80037e0:	460f      	mov	r7, r1
 80037e2:	463d      	mov	r5, r7
 80037e4:	9808      	ldr	r0, [sp, #32]
 80037e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80037ea:	f000 f94f 	bl	8003a8c <__locale_ctype_ptr_l>
 80037ee:	4420      	add	r0, r4
 80037f0:	7843      	ldrb	r3, [r0, #1]
 80037f2:	f013 0308 	ands.w	r3, r3, #8
 80037f6:	d132      	bne.n	800385e <_strtol_l.isra.0+0x8a>
 80037f8:	2c2d      	cmp	r4, #45	; 0x2d
 80037fa:	d132      	bne.n	8003862 <_strtol_l.isra.0+0x8e>
 80037fc:	787c      	ldrb	r4, [r7, #1]
 80037fe:	1cbd      	adds	r5, r7, #2
 8003800:	2201      	movs	r2, #1
 8003802:	2e00      	cmp	r6, #0
 8003804:	d05d      	beq.n	80038c2 <_strtol_l.isra.0+0xee>
 8003806:	2e10      	cmp	r6, #16
 8003808:	d109      	bne.n	800381e <_strtol_l.isra.0+0x4a>
 800380a:	2c30      	cmp	r4, #48	; 0x30
 800380c:	d107      	bne.n	800381e <_strtol_l.isra.0+0x4a>
 800380e:	782b      	ldrb	r3, [r5, #0]
 8003810:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003814:	2b58      	cmp	r3, #88	; 0x58
 8003816:	d14f      	bne.n	80038b8 <_strtol_l.isra.0+0xe4>
 8003818:	786c      	ldrb	r4, [r5, #1]
 800381a:	2610      	movs	r6, #16
 800381c:	3502      	adds	r5, #2
 800381e:	2a00      	cmp	r2, #0
 8003820:	bf14      	ite	ne
 8003822:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8003826:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800382a:	2700      	movs	r7, #0
 800382c:	fbb1 fcf6 	udiv	ip, r1, r6
 8003830:	4638      	mov	r0, r7
 8003832:	fb06 1e1c 	mls	lr, r6, ip, r1
 8003836:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800383a:	2b09      	cmp	r3, #9
 800383c:	d817      	bhi.n	800386e <_strtol_l.isra.0+0x9a>
 800383e:	461c      	mov	r4, r3
 8003840:	42a6      	cmp	r6, r4
 8003842:	dd23      	ble.n	800388c <_strtol_l.isra.0+0xb8>
 8003844:	1c7b      	adds	r3, r7, #1
 8003846:	d007      	beq.n	8003858 <_strtol_l.isra.0+0x84>
 8003848:	4584      	cmp	ip, r0
 800384a:	d31c      	bcc.n	8003886 <_strtol_l.isra.0+0xb2>
 800384c:	d101      	bne.n	8003852 <_strtol_l.isra.0+0x7e>
 800384e:	45a6      	cmp	lr, r4
 8003850:	db19      	blt.n	8003886 <_strtol_l.isra.0+0xb2>
 8003852:	fb00 4006 	mla	r0, r0, r6, r4
 8003856:	2701      	movs	r7, #1
 8003858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800385c:	e7eb      	b.n	8003836 <_strtol_l.isra.0+0x62>
 800385e:	462f      	mov	r7, r5
 8003860:	e7bf      	b.n	80037e2 <_strtol_l.isra.0+0xe>
 8003862:	2c2b      	cmp	r4, #43	; 0x2b
 8003864:	bf04      	itt	eq
 8003866:	1cbd      	addeq	r5, r7, #2
 8003868:	787c      	ldrbeq	r4, [r7, #1]
 800386a:	461a      	mov	r2, r3
 800386c:	e7c9      	b.n	8003802 <_strtol_l.isra.0+0x2e>
 800386e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003872:	2b19      	cmp	r3, #25
 8003874:	d801      	bhi.n	800387a <_strtol_l.isra.0+0xa6>
 8003876:	3c37      	subs	r4, #55	; 0x37
 8003878:	e7e2      	b.n	8003840 <_strtol_l.isra.0+0x6c>
 800387a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800387e:	2b19      	cmp	r3, #25
 8003880:	d804      	bhi.n	800388c <_strtol_l.isra.0+0xb8>
 8003882:	3c57      	subs	r4, #87	; 0x57
 8003884:	e7dc      	b.n	8003840 <_strtol_l.isra.0+0x6c>
 8003886:	f04f 37ff 	mov.w	r7, #4294967295
 800388a:	e7e5      	b.n	8003858 <_strtol_l.isra.0+0x84>
 800388c:	1c7b      	adds	r3, r7, #1
 800388e:	d108      	bne.n	80038a2 <_strtol_l.isra.0+0xce>
 8003890:	2322      	movs	r3, #34	; 0x22
 8003892:	f8c8 3000 	str.w	r3, [r8]
 8003896:	4608      	mov	r0, r1
 8003898:	f1ba 0f00 	cmp.w	sl, #0
 800389c:	d107      	bne.n	80038ae <_strtol_l.isra.0+0xda>
 800389e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a2:	b102      	cbz	r2, 80038a6 <_strtol_l.isra.0+0xd2>
 80038a4:	4240      	negs	r0, r0
 80038a6:	f1ba 0f00 	cmp.w	sl, #0
 80038aa:	d0f8      	beq.n	800389e <_strtol_l.isra.0+0xca>
 80038ac:	b10f      	cbz	r7, 80038b2 <_strtol_l.isra.0+0xde>
 80038ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80038b2:	f8ca 9000 	str.w	r9, [sl]
 80038b6:	e7f2      	b.n	800389e <_strtol_l.isra.0+0xca>
 80038b8:	2430      	movs	r4, #48	; 0x30
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	d1af      	bne.n	800381e <_strtol_l.isra.0+0x4a>
 80038be:	2608      	movs	r6, #8
 80038c0:	e7ad      	b.n	800381e <_strtol_l.isra.0+0x4a>
 80038c2:	2c30      	cmp	r4, #48	; 0x30
 80038c4:	d0a3      	beq.n	800380e <_strtol_l.isra.0+0x3a>
 80038c6:	260a      	movs	r6, #10
 80038c8:	e7a9      	b.n	800381e <_strtol_l.isra.0+0x4a>
	...

080038cc <strtol>:
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <strtol+0x24>)
 80038ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	4d08      	ldr	r5, [pc, #32]	; (80038f4 <strtol+0x28>)
 80038d4:	6a23      	ldr	r3, [r4, #32]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf08      	it	eq
 80038da:	462b      	moveq	r3, r5
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	4613      	mov	r3, r2
 80038e0:	460a      	mov	r2, r1
 80038e2:	4601      	mov	r1, r0
 80038e4:	4620      	mov	r0, r4
 80038e6:	f7ff ff75 	bl	80037d4 <_strtol_l.isra.0>
 80038ea:	b003      	add	sp, #12
 80038ec:	bd30      	pop	{r4, r5, pc}
 80038ee:	bf00      	nop
 80038f0:	2000000c 	.word	0x2000000c
 80038f4:	20000070 	.word	0x20000070

080038f8 <std>:
 80038f8:	2300      	movs	r3, #0
 80038fa:	b510      	push	{r4, lr}
 80038fc:	4604      	mov	r4, r0
 80038fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003902:	6083      	str	r3, [r0, #8]
 8003904:	8181      	strh	r1, [r0, #12]
 8003906:	6643      	str	r3, [r0, #100]	; 0x64
 8003908:	81c2      	strh	r2, [r0, #14]
 800390a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800390e:	6183      	str	r3, [r0, #24]
 8003910:	4619      	mov	r1, r3
 8003912:	2208      	movs	r2, #8
 8003914:	305c      	adds	r0, #92	; 0x5c
 8003916:	f7ff ff29 	bl	800376c <memset>
 800391a:	4b05      	ldr	r3, [pc, #20]	; (8003930 <std+0x38>)
 800391c:	6263      	str	r3, [r4, #36]	; 0x24
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <std+0x3c>)
 8003920:	62a3      	str	r3, [r4, #40]	; 0x28
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <std+0x40>)
 8003924:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003926:	4b05      	ldr	r3, [pc, #20]	; (800393c <std+0x44>)
 8003928:	6224      	str	r4, [r4, #32]
 800392a:	6323      	str	r3, [r4, #48]	; 0x30
 800392c:	bd10      	pop	{r4, pc}
 800392e:	bf00      	nop
 8003930:	08004189 	.word	0x08004189
 8003934:	080041ab 	.word	0x080041ab
 8003938:	080041e3 	.word	0x080041e3
 800393c:	08004207 	.word	0x08004207

08003940 <_cleanup_r>:
 8003940:	4901      	ldr	r1, [pc, #4]	; (8003948 <_cleanup_r+0x8>)
 8003942:	f000 b885 	b.w	8003a50 <_fwalk_reent>
 8003946:	bf00      	nop
 8003948:	080044fd 	.word	0x080044fd

0800394c <__sfmoreglue>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	1e4a      	subs	r2, r1, #1
 8003950:	2568      	movs	r5, #104	; 0x68
 8003952:	4355      	muls	r5, r2
 8003954:	460e      	mov	r6, r1
 8003956:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800395a:	f000 f8ad 	bl	8003ab8 <_malloc_r>
 800395e:	4604      	mov	r4, r0
 8003960:	b140      	cbz	r0, 8003974 <__sfmoreglue+0x28>
 8003962:	2100      	movs	r1, #0
 8003964:	e9c0 1600 	strd	r1, r6, [r0]
 8003968:	300c      	adds	r0, #12
 800396a:	60a0      	str	r0, [r4, #8]
 800396c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003970:	f7ff fefc 	bl	800376c <memset>
 8003974:	4620      	mov	r0, r4
 8003976:	bd70      	pop	{r4, r5, r6, pc}

08003978 <__sinit>:
 8003978:	6983      	ldr	r3, [r0, #24]
 800397a:	b510      	push	{r4, lr}
 800397c:	4604      	mov	r4, r0
 800397e:	bb33      	cbnz	r3, 80039ce <__sinit+0x56>
 8003980:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003984:	6503      	str	r3, [r0, #80]	; 0x50
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <__sinit+0x58>)
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <__sinit+0x5c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6282      	str	r2, [r0, #40]	; 0x28
 800398e:	4298      	cmp	r0, r3
 8003990:	bf04      	itt	eq
 8003992:	2301      	moveq	r3, #1
 8003994:	6183      	streq	r3, [r0, #24]
 8003996:	f000 f81f 	bl	80039d8 <__sfp>
 800399a:	6060      	str	r0, [r4, #4]
 800399c:	4620      	mov	r0, r4
 800399e:	f000 f81b 	bl	80039d8 <__sfp>
 80039a2:	60a0      	str	r0, [r4, #8]
 80039a4:	4620      	mov	r0, r4
 80039a6:	f000 f817 	bl	80039d8 <__sfp>
 80039aa:	2200      	movs	r2, #0
 80039ac:	60e0      	str	r0, [r4, #12]
 80039ae:	2104      	movs	r1, #4
 80039b0:	6860      	ldr	r0, [r4, #4]
 80039b2:	f7ff ffa1 	bl	80038f8 <std>
 80039b6:	2201      	movs	r2, #1
 80039b8:	2109      	movs	r1, #9
 80039ba:	68a0      	ldr	r0, [r4, #8]
 80039bc:	f7ff ff9c 	bl	80038f8 <std>
 80039c0:	2202      	movs	r2, #2
 80039c2:	2112      	movs	r1, #18
 80039c4:	68e0      	ldr	r0, [r4, #12]
 80039c6:	f7ff ff97 	bl	80038f8 <std>
 80039ca:	2301      	movs	r3, #1
 80039cc:	61a3      	str	r3, [r4, #24]
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	08004910 	.word	0x08004910
 80039d4:	08003941 	.word	0x08003941

080039d8 <__sfp>:
 80039d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039da:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <__sfp+0x70>)
 80039dc:	681e      	ldr	r6, [r3, #0]
 80039de:	69b3      	ldr	r3, [r6, #24]
 80039e0:	4607      	mov	r7, r0
 80039e2:	b913      	cbnz	r3, 80039ea <__sfp+0x12>
 80039e4:	4630      	mov	r0, r6
 80039e6:	f7ff ffc7 	bl	8003978 <__sinit>
 80039ea:	3648      	adds	r6, #72	; 0x48
 80039ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	d503      	bpl.n	80039fc <__sfp+0x24>
 80039f4:	6833      	ldr	r3, [r6, #0]
 80039f6:	b133      	cbz	r3, 8003a06 <__sfp+0x2e>
 80039f8:	6836      	ldr	r6, [r6, #0]
 80039fa:	e7f7      	b.n	80039ec <__sfp+0x14>
 80039fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a00:	b16d      	cbz	r5, 8003a1e <__sfp+0x46>
 8003a02:	3468      	adds	r4, #104	; 0x68
 8003a04:	e7f4      	b.n	80039f0 <__sfp+0x18>
 8003a06:	2104      	movs	r1, #4
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f7ff ff9f 	bl	800394c <__sfmoreglue>
 8003a0e:	6030      	str	r0, [r6, #0]
 8003a10:	2800      	cmp	r0, #0
 8003a12:	d1f1      	bne.n	80039f8 <__sfp+0x20>
 8003a14:	230c      	movs	r3, #12
 8003a16:	603b      	str	r3, [r7, #0]
 8003a18:	4604      	mov	r4, r0
 8003a1a:	4620      	mov	r0, r4
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <__sfp+0x74>)
 8003a20:	6665      	str	r5, [r4, #100]	; 0x64
 8003a22:	e9c4 5500 	strd	r5, r5, [r4]
 8003a26:	60a5      	str	r5, [r4, #8]
 8003a28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003a2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003a30:	2208      	movs	r2, #8
 8003a32:	4629      	mov	r1, r5
 8003a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a38:	f7ff fe98 	bl	800376c <memset>
 8003a3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a44:	e7e9      	b.n	8003a1a <__sfp+0x42>
 8003a46:	bf00      	nop
 8003a48:	08004910 	.word	0x08004910
 8003a4c:	ffff0001 	.word	0xffff0001

08003a50 <_fwalk_reent>:
 8003a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a54:	4680      	mov	r8, r0
 8003a56:	4689      	mov	r9, r1
 8003a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	b914      	cbnz	r4, 8003a66 <_fwalk_reent+0x16>
 8003a60:	4630      	mov	r0, r6
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003a6a:	3f01      	subs	r7, #1
 8003a6c:	d501      	bpl.n	8003a72 <_fwalk_reent+0x22>
 8003a6e:	6824      	ldr	r4, [r4, #0]
 8003a70:	e7f5      	b.n	8003a5e <_fwalk_reent+0xe>
 8003a72:	89ab      	ldrh	r3, [r5, #12]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d907      	bls.n	8003a88 <_fwalk_reent+0x38>
 8003a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	d003      	beq.n	8003a88 <_fwalk_reent+0x38>
 8003a80:	4629      	mov	r1, r5
 8003a82:	4640      	mov	r0, r8
 8003a84:	47c8      	blx	r9
 8003a86:	4306      	orrs	r6, r0
 8003a88:	3568      	adds	r5, #104	; 0x68
 8003a8a:	e7ee      	b.n	8003a6a <_fwalk_reent+0x1a>

08003a8c <__locale_ctype_ptr_l>:
 8003a8c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8003a90:	4770      	bx	lr

08003a92 <__ascii_mbtowc>:
 8003a92:	b082      	sub	sp, #8
 8003a94:	b901      	cbnz	r1, 8003a98 <__ascii_mbtowc+0x6>
 8003a96:	a901      	add	r1, sp, #4
 8003a98:	b142      	cbz	r2, 8003aac <__ascii_mbtowc+0x1a>
 8003a9a:	b14b      	cbz	r3, 8003ab0 <__ascii_mbtowc+0x1e>
 8003a9c:	7813      	ldrb	r3, [r2, #0]
 8003a9e:	600b      	str	r3, [r1, #0]
 8003aa0:	7812      	ldrb	r2, [r2, #0]
 8003aa2:	1c10      	adds	r0, r2, #0
 8003aa4:	bf18      	it	ne
 8003aa6:	2001      	movne	r0, #1
 8003aa8:	b002      	add	sp, #8
 8003aaa:	4770      	bx	lr
 8003aac:	4610      	mov	r0, r2
 8003aae:	e7fb      	b.n	8003aa8 <__ascii_mbtowc+0x16>
 8003ab0:	f06f 0001 	mvn.w	r0, #1
 8003ab4:	e7f8      	b.n	8003aa8 <__ascii_mbtowc+0x16>
	...

08003ab8 <_malloc_r>:
 8003ab8:	b570      	push	{r4, r5, r6, lr}
 8003aba:	1ccd      	adds	r5, r1, #3
 8003abc:	f025 0503 	bic.w	r5, r5, #3
 8003ac0:	3508      	adds	r5, #8
 8003ac2:	2d0c      	cmp	r5, #12
 8003ac4:	bf38      	it	cc
 8003ac6:	250c      	movcc	r5, #12
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	4606      	mov	r6, r0
 8003acc:	db01      	blt.n	8003ad2 <_malloc_r+0x1a>
 8003ace:	42a9      	cmp	r1, r5
 8003ad0:	d903      	bls.n	8003ada <_malloc_r+0x22>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	6033      	str	r3, [r6, #0]
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	bd70      	pop	{r4, r5, r6, pc}
 8003ada:	f000 fdaf 	bl	800463c <__malloc_lock>
 8003ade:	4a21      	ldr	r2, [pc, #132]	; (8003b64 <_malloc_r+0xac>)
 8003ae0:	6814      	ldr	r4, [r2, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	b991      	cbnz	r1, 8003b0c <_malloc_r+0x54>
 8003ae6:	4c20      	ldr	r4, [pc, #128]	; (8003b68 <_malloc_r+0xb0>)
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	b91b      	cbnz	r3, 8003af4 <_malloc_r+0x3c>
 8003aec:	4630      	mov	r0, r6
 8003aee:	f000 fb3b 	bl	8004168 <_sbrk_r>
 8003af2:	6020      	str	r0, [r4, #0]
 8003af4:	4629      	mov	r1, r5
 8003af6:	4630      	mov	r0, r6
 8003af8:	f000 fb36 	bl	8004168 <_sbrk_r>
 8003afc:	1c43      	adds	r3, r0, #1
 8003afe:	d124      	bne.n	8003b4a <_malloc_r+0x92>
 8003b00:	230c      	movs	r3, #12
 8003b02:	6033      	str	r3, [r6, #0]
 8003b04:	4630      	mov	r0, r6
 8003b06:	f000 fd9a 	bl	800463e <__malloc_unlock>
 8003b0a:	e7e4      	b.n	8003ad6 <_malloc_r+0x1e>
 8003b0c:	680b      	ldr	r3, [r1, #0]
 8003b0e:	1b5b      	subs	r3, r3, r5
 8003b10:	d418      	bmi.n	8003b44 <_malloc_r+0x8c>
 8003b12:	2b0b      	cmp	r3, #11
 8003b14:	d90f      	bls.n	8003b36 <_malloc_r+0x7e>
 8003b16:	600b      	str	r3, [r1, #0]
 8003b18:	50cd      	str	r5, [r1, r3]
 8003b1a:	18cc      	adds	r4, r1, r3
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f000 fd8e 	bl	800463e <__malloc_unlock>
 8003b22:	f104 000b 	add.w	r0, r4, #11
 8003b26:	1d23      	adds	r3, r4, #4
 8003b28:	f020 0007 	bic.w	r0, r0, #7
 8003b2c:	1ac3      	subs	r3, r0, r3
 8003b2e:	d0d3      	beq.n	8003ad8 <_malloc_r+0x20>
 8003b30:	425a      	negs	r2, r3
 8003b32:	50e2      	str	r2, [r4, r3]
 8003b34:	e7d0      	b.n	8003ad8 <_malloc_r+0x20>
 8003b36:	428c      	cmp	r4, r1
 8003b38:	684b      	ldr	r3, [r1, #4]
 8003b3a:	bf16      	itet	ne
 8003b3c:	6063      	strne	r3, [r4, #4]
 8003b3e:	6013      	streq	r3, [r2, #0]
 8003b40:	460c      	movne	r4, r1
 8003b42:	e7eb      	b.n	8003b1c <_malloc_r+0x64>
 8003b44:	460c      	mov	r4, r1
 8003b46:	6849      	ldr	r1, [r1, #4]
 8003b48:	e7cc      	b.n	8003ae4 <_malloc_r+0x2c>
 8003b4a:	1cc4      	adds	r4, r0, #3
 8003b4c:	f024 0403 	bic.w	r4, r4, #3
 8003b50:	42a0      	cmp	r0, r4
 8003b52:	d005      	beq.n	8003b60 <_malloc_r+0xa8>
 8003b54:	1a21      	subs	r1, r4, r0
 8003b56:	4630      	mov	r0, r6
 8003b58:	f000 fb06 	bl	8004168 <_sbrk_r>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d0cf      	beq.n	8003b00 <_malloc_r+0x48>
 8003b60:	6025      	str	r5, [r4, #0]
 8003b62:	e7db      	b.n	8003b1c <_malloc_r+0x64>
 8003b64:	200001fc 	.word	0x200001fc
 8003b68:	20000200 	.word	0x20000200

08003b6c <__sfputc_r>:
 8003b6c:	6893      	ldr	r3, [r2, #8]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	b410      	push	{r4}
 8003b74:	6093      	str	r3, [r2, #8]
 8003b76:	da08      	bge.n	8003b8a <__sfputc_r+0x1e>
 8003b78:	6994      	ldr	r4, [r2, #24]
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	db01      	blt.n	8003b82 <__sfputc_r+0x16>
 8003b7e:	290a      	cmp	r1, #10
 8003b80:	d103      	bne.n	8003b8a <__sfputc_r+0x1e>
 8003b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b86:	f000 bb43 	b.w	8004210 <__swbuf_r>
 8003b8a:	6813      	ldr	r3, [r2, #0]
 8003b8c:	1c58      	adds	r0, r3, #1
 8003b8e:	6010      	str	r0, [r2, #0]
 8003b90:	7019      	strb	r1, [r3, #0]
 8003b92:	4608      	mov	r0, r1
 8003b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <__sfputs_r>:
 8003b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	460f      	mov	r7, r1
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	18d5      	adds	r5, r2, r3
 8003ba4:	42ac      	cmp	r4, r5
 8003ba6:	d101      	bne.n	8003bac <__sfputs_r+0x12>
 8003ba8:	2000      	movs	r0, #0
 8003baa:	e007      	b.n	8003bbc <__sfputs_r+0x22>
 8003bac:	463a      	mov	r2, r7
 8003bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7ff ffda 	bl	8003b6c <__sfputc_r>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d1f3      	bne.n	8003ba4 <__sfputs_r+0xa>
 8003bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bc0 <_vfiprintf_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	b09d      	sub	sp, #116	; 0x74
 8003bc8:	4617      	mov	r7, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	4606      	mov	r6, r0
 8003bce:	b118      	cbz	r0, 8003bd8 <_vfiprintf_r+0x18>
 8003bd0:	6983      	ldr	r3, [r0, #24]
 8003bd2:	b90b      	cbnz	r3, 8003bd8 <_vfiprintf_r+0x18>
 8003bd4:	f7ff fed0 	bl	8003978 <__sinit>
 8003bd8:	4b7c      	ldr	r3, [pc, #496]	; (8003dcc <_vfiprintf_r+0x20c>)
 8003bda:	429c      	cmp	r4, r3
 8003bdc:	d158      	bne.n	8003c90 <_vfiprintf_r+0xd0>
 8003bde:	6874      	ldr	r4, [r6, #4]
 8003be0:	89a3      	ldrh	r3, [r4, #12]
 8003be2:	0718      	lsls	r0, r3, #28
 8003be4:	d55e      	bpl.n	8003ca4 <_vfiprintf_r+0xe4>
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d05b      	beq.n	8003ca4 <_vfiprintf_r+0xe4>
 8003bec:	2300      	movs	r3, #0
 8003bee:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bf6:	2330      	movs	r3, #48	; 0x30
 8003bf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bfc:	9503      	str	r5, [sp, #12]
 8003bfe:	f04f 0b01 	mov.w	fp, #1
 8003c02:	46b8      	mov	r8, r7
 8003c04:	4645      	mov	r5, r8
 8003c06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c0a:	b10b      	cbz	r3, 8003c10 <_vfiprintf_r+0x50>
 8003c0c:	2b25      	cmp	r3, #37	; 0x25
 8003c0e:	d154      	bne.n	8003cba <_vfiprintf_r+0xfa>
 8003c10:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c14:	d00b      	beq.n	8003c2e <_vfiprintf_r+0x6e>
 8003c16:	4653      	mov	r3, sl
 8003c18:	463a      	mov	r2, r7
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f7ff ffbc 	bl	8003b9a <__sfputs_r>
 8003c22:	3001      	adds	r0, #1
 8003c24:	f000 80c2 	beq.w	8003dac <_vfiprintf_r+0x1ec>
 8003c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2a:	4453      	add	r3, sl
 8003c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2e:	f898 3000 	ldrb.w	r3, [r8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80ba 	beq.w	8003dac <_vfiprintf_r+0x1ec>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c42:	9304      	str	r3, [sp, #16]
 8003c44:	9307      	str	r3, [sp, #28]
 8003c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8003c4c:	46a8      	mov	r8, r5
 8003c4e:	2205      	movs	r2, #5
 8003c50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c54:	485e      	ldr	r0, [pc, #376]	; (8003dd0 <_vfiprintf_r+0x210>)
 8003c56:	f7fc fabb 	bl	80001d0 <memchr>
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	bb78      	cbnz	r0, 8003cbe <_vfiprintf_r+0xfe>
 8003c5e:	06d9      	lsls	r1, r3, #27
 8003c60:	bf44      	itt	mi
 8003c62:	2220      	movmi	r2, #32
 8003c64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c68:	071a      	lsls	r2, r3, #28
 8003c6a:	bf44      	itt	mi
 8003c6c:	222b      	movmi	r2, #43	; 0x2b
 8003c6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c72:	782a      	ldrb	r2, [r5, #0]
 8003c74:	2a2a      	cmp	r2, #42	; 0x2a
 8003c76:	d02a      	beq.n	8003cce <_vfiprintf_r+0x10e>
 8003c78:	9a07      	ldr	r2, [sp, #28]
 8003c7a:	46a8      	mov	r8, r5
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	250a      	movs	r5, #10
 8003c80:	4641      	mov	r1, r8
 8003c82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c86:	3b30      	subs	r3, #48	; 0x30
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d969      	bls.n	8003d60 <_vfiprintf_r+0x1a0>
 8003c8c:	b360      	cbz	r0, 8003ce8 <_vfiprintf_r+0x128>
 8003c8e:	e024      	b.n	8003cda <_vfiprintf_r+0x11a>
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <_vfiprintf_r+0x214>)
 8003c92:	429c      	cmp	r4, r3
 8003c94:	d101      	bne.n	8003c9a <_vfiprintf_r+0xda>
 8003c96:	68b4      	ldr	r4, [r6, #8]
 8003c98:	e7a2      	b.n	8003be0 <_vfiprintf_r+0x20>
 8003c9a:	4b4f      	ldr	r3, [pc, #316]	; (8003dd8 <_vfiprintf_r+0x218>)
 8003c9c:	429c      	cmp	r4, r3
 8003c9e:	bf08      	it	eq
 8003ca0:	68f4      	ldreq	r4, [r6, #12]
 8003ca2:	e79d      	b.n	8003be0 <_vfiprintf_r+0x20>
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f000 fb24 	bl	80042f4 <__swsetup_r>
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d09d      	beq.n	8003bec <_vfiprintf_r+0x2c>
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	b01d      	add	sp, #116	; 0x74
 8003cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cba:	46a8      	mov	r8, r5
 8003cbc:	e7a2      	b.n	8003c04 <_vfiprintf_r+0x44>
 8003cbe:	4a44      	ldr	r2, [pc, #272]	; (8003dd0 <_vfiprintf_r+0x210>)
 8003cc0:	1a80      	subs	r0, r0, r2
 8003cc2:	fa0b f000 	lsl.w	r0, fp, r0
 8003cc6:	4318      	orrs	r0, r3
 8003cc8:	9004      	str	r0, [sp, #16]
 8003cca:	4645      	mov	r5, r8
 8003ccc:	e7be      	b.n	8003c4c <_vfiprintf_r+0x8c>
 8003cce:	9a03      	ldr	r2, [sp, #12]
 8003cd0:	1d11      	adds	r1, r2, #4
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	9103      	str	r1, [sp, #12]
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	db01      	blt.n	8003cde <_vfiprintf_r+0x11e>
 8003cda:	9207      	str	r2, [sp, #28]
 8003cdc:	e004      	b.n	8003ce8 <_vfiprintf_r+0x128>
 8003cde:	4252      	negs	r2, r2
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	9207      	str	r2, [sp, #28]
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	f898 3000 	ldrb.w	r3, [r8]
 8003cec:	2b2e      	cmp	r3, #46	; 0x2e
 8003cee:	d10e      	bne.n	8003d0e <_vfiprintf_r+0x14e>
 8003cf0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf6:	d138      	bne.n	8003d6a <_vfiprintf_r+0x1aa>
 8003cf8:	9b03      	ldr	r3, [sp, #12]
 8003cfa:	1d1a      	adds	r2, r3, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	9203      	str	r2, [sp, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bfb8      	it	lt
 8003d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d08:	f108 0802 	add.w	r8, r8, #2
 8003d0c:	9305      	str	r3, [sp, #20]
 8003d0e:	4d33      	ldr	r5, [pc, #204]	; (8003ddc <_vfiprintf_r+0x21c>)
 8003d10:	f898 1000 	ldrb.w	r1, [r8]
 8003d14:	2203      	movs	r2, #3
 8003d16:	4628      	mov	r0, r5
 8003d18:	f7fc fa5a 	bl	80001d0 <memchr>
 8003d1c:	b140      	cbz	r0, 8003d30 <_vfiprintf_r+0x170>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	1b40      	subs	r0, r0, r5
 8003d22:	fa03 f000 	lsl.w	r0, r3, r0
 8003d26:	9b04      	ldr	r3, [sp, #16]
 8003d28:	4303      	orrs	r3, r0
 8003d2a:	f108 0801 	add.w	r8, r8, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	f898 1000 	ldrb.w	r1, [r8]
 8003d34:	482a      	ldr	r0, [pc, #168]	; (8003de0 <_vfiprintf_r+0x220>)
 8003d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d3a:	2206      	movs	r2, #6
 8003d3c:	f108 0701 	add.w	r7, r8, #1
 8003d40:	f7fc fa46 	bl	80001d0 <memchr>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d037      	beq.n	8003db8 <_vfiprintf_r+0x1f8>
 8003d48:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <_vfiprintf_r+0x224>)
 8003d4a:	bb1b      	cbnz	r3, 8003d94 <_vfiprintf_r+0x1d4>
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	f023 0307 	bic.w	r3, r3, #7
 8003d54:	3308      	adds	r3, #8
 8003d56:	9303      	str	r3, [sp, #12]
 8003d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d5a:	444b      	add	r3, r9
 8003d5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5e:	e750      	b.n	8003c02 <_vfiprintf_r+0x42>
 8003d60:	fb05 3202 	mla	r2, r5, r2, r3
 8003d64:	2001      	movs	r0, #1
 8003d66:	4688      	mov	r8, r1
 8003d68:	e78a      	b.n	8003c80 <_vfiprintf_r+0xc0>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f108 0801 	add.w	r8, r8, #1
 8003d70:	9305      	str	r3, [sp, #20]
 8003d72:	4619      	mov	r1, r3
 8003d74:	250a      	movs	r5, #10
 8003d76:	4640      	mov	r0, r8
 8003d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d7c:	3a30      	subs	r2, #48	; 0x30
 8003d7e:	2a09      	cmp	r2, #9
 8003d80:	d903      	bls.n	8003d8a <_vfiprintf_r+0x1ca>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0c3      	beq.n	8003d0e <_vfiprintf_r+0x14e>
 8003d86:	9105      	str	r1, [sp, #20]
 8003d88:	e7c1      	b.n	8003d0e <_vfiprintf_r+0x14e>
 8003d8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003d8e:	2301      	movs	r3, #1
 8003d90:	4680      	mov	r8, r0
 8003d92:	e7f0      	b.n	8003d76 <_vfiprintf_r+0x1b6>
 8003d94:	ab03      	add	r3, sp, #12
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4622      	mov	r2, r4
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <_vfiprintf_r+0x228>)
 8003d9c:	a904      	add	r1, sp, #16
 8003d9e:	4630      	mov	r0, r6
 8003da0:	f3af 8000 	nop.w
 8003da4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003da8:	4681      	mov	r9, r0
 8003daa:	d1d5      	bne.n	8003d58 <_vfiprintf_r+0x198>
 8003dac:	89a3      	ldrh	r3, [r4, #12]
 8003dae:	065b      	lsls	r3, r3, #25
 8003db0:	f53f af7e 	bmi.w	8003cb0 <_vfiprintf_r+0xf0>
 8003db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003db6:	e77d      	b.n	8003cb4 <_vfiprintf_r+0xf4>
 8003db8:	ab03      	add	r3, sp, #12
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <_vfiprintf_r+0x228>)
 8003dc0:	a904      	add	r1, sp, #16
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 f888 	bl	8003ed8 <_printf_i>
 8003dc8:	e7ec      	b.n	8003da4 <_vfiprintf_r+0x1e4>
 8003dca:	bf00      	nop
 8003dcc:	08004934 	.word	0x08004934
 8003dd0:	0800497e 	.word	0x0800497e
 8003dd4:	08004954 	.word	0x08004954
 8003dd8:	08004914 	.word	0x08004914
 8003ddc:	08004984 	.word	0x08004984
 8003de0:	08004988 	.word	0x08004988
 8003de4:	00000000 	.word	0x00000000
 8003de8:	08003b9b 	.word	0x08003b9b

08003dec <_printf_common>:
 8003dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	4691      	mov	r9, r2
 8003df2:	461f      	mov	r7, r3
 8003df4:	688a      	ldr	r2, [r1, #8]
 8003df6:	690b      	ldr	r3, [r1, #16]
 8003df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	bfb8      	it	lt
 8003e00:	4613      	movlt	r3, r2
 8003e02:	f8c9 3000 	str.w	r3, [r9]
 8003e06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e0a:	4606      	mov	r6, r0
 8003e0c:	460c      	mov	r4, r1
 8003e0e:	b112      	cbz	r2, 8003e16 <_printf_common+0x2a>
 8003e10:	3301      	adds	r3, #1
 8003e12:	f8c9 3000 	str.w	r3, [r9]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	0699      	lsls	r1, r3, #26
 8003e1a:	bf42      	ittt	mi
 8003e1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e20:	3302      	addmi	r3, #2
 8003e22:	f8c9 3000 	strmi.w	r3, [r9]
 8003e26:	6825      	ldr	r5, [r4, #0]
 8003e28:	f015 0506 	ands.w	r5, r5, #6
 8003e2c:	d107      	bne.n	8003e3e <_printf_common+0x52>
 8003e2e:	f104 0a19 	add.w	sl, r4, #25
 8003e32:	68e3      	ldr	r3, [r4, #12]
 8003e34:	f8d9 2000 	ldr.w	r2, [r9]
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	42ab      	cmp	r3, r5
 8003e3c:	dc28      	bgt.n	8003e90 <_printf_common+0xa4>
 8003e3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e42:	6822      	ldr	r2, [r4, #0]
 8003e44:	3300      	adds	r3, #0
 8003e46:	bf18      	it	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	0692      	lsls	r2, r2, #26
 8003e4c:	d42d      	bmi.n	8003eaa <_printf_common+0xbe>
 8003e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e52:	4639      	mov	r1, r7
 8003e54:	4630      	mov	r0, r6
 8003e56:	47c0      	blx	r8
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d020      	beq.n	8003e9e <_printf_common+0xb2>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	68e5      	ldr	r5, [r4, #12]
 8003e60:	f8d9 2000 	ldr.w	r2, [r9]
 8003e64:	f003 0306 	and.w	r3, r3, #6
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	bf08      	it	eq
 8003e6c:	1aad      	subeq	r5, r5, r2
 8003e6e:	68a3      	ldr	r3, [r4, #8]
 8003e70:	6922      	ldr	r2, [r4, #16]
 8003e72:	bf0c      	ite	eq
 8003e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e78:	2500      	movne	r5, #0
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bfc4      	itt	gt
 8003e7e:	1a9b      	subgt	r3, r3, r2
 8003e80:	18ed      	addgt	r5, r5, r3
 8003e82:	f04f 0900 	mov.w	r9, #0
 8003e86:	341a      	adds	r4, #26
 8003e88:	454d      	cmp	r5, r9
 8003e8a:	d11a      	bne.n	8003ec2 <_printf_common+0xd6>
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e008      	b.n	8003ea2 <_printf_common+0xb6>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4652      	mov	r2, sl
 8003e94:	4639      	mov	r1, r7
 8003e96:	4630      	mov	r0, r6
 8003e98:	47c0      	blx	r8
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d103      	bne.n	8003ea6 <_printf_common+0xba>
 8003e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea6:	3501      	adds	r5, #1
 8003ea8:	e7c3      	b.n	8003e32 <_printf_common+0x46>
 8003eaa:	18e1      	adds	r1, r4, r3
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	2030      	movs	r0, #48	; 0x30
 8003eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb4:	4422      	add	r2, r4
 8003eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	e7c5      	b.n	8003e4e <_printf_common+0x62>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	4639      	mov	r1, r7
 8003ec8:	4630      	mov	r0, r6
 8003eca:	47c0      	blx	r8
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d0e6      	beq.n	8003e9e <_printf_common+0xb2>
 8003ed0:	f109 0901 	add.w	r9, r9, #1
 8003ed4:	e7d8      	b.n	8003e88 <_printf_common+0x9c>
	...

08003ed8 <_printf_i>:
 8003ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003edc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	7e09      	ldrb	r1, [r1, #24]
 8003ee4:	b085      	sub	sp, #20
 8003ee6:	296e      	cmp	r1, #110	; 0x6e
 8003ee8:	4617      	mov	r7, r2
 8003eea:	4606      	mov	r6, r0
 8003eec:	4698      	mov	r8, r3
 8003eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ef0:	f000 80b3 	beq.w	800405a <_printf_i+0x182>
 8003ef4:	d822      	bhi.n	8003f3c <_printf_i+0x64>
 8003ef6:	2963      	cmp	r1, #99	; 0x63
 8003ef8:	d036      	beq.n	8003f68 <_printf_i+0x90>
 8003efa:	d80a      	bhi.n	8003f12 <_printf_i+0x3a>
 8003efc:	2900      	cmp	r1, #0
 8003efe:	f000 80b9 	beq.w	8004074 <_printf_i+0x19c>
 8003f02:	2958      	cmp	r1, #88	; 0x58
 8003f04:	f000 8083 	beq.w	800400e <_printf_i+0x136>
 8003f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f10:	e032      	b.n	8003f78 <_printf_i+0xa0>
 8003f12:	2964      	cmp	r1, #100	; 0x64
 8003f14:	d001      	beq.n	8003f1a <_printf_i+0x42>
 8003f16:	2969      	cmp	r1, #105	; 0x69
 8003f18:	d1f6      	bne.n	8003f08 <_printf_i+0x30>
 8003f1a:	6820      	ldr	r0, [r4, #0]
 8003f1c:	6813      	ldr	r3, [r2, #0]
 8003f1e:	0605      	lsls	r5, r0, #24
 8003f20:	f103 0104 	add.w	r1, r3, #4
 8003f24:	d52a      	bpl.n	8003f7c <_printf_i+0xa4>
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	da03      	bge.n	8003f36 <_printf_i+0x5e>
 8003f2e:	222d      	movs	r2, #45	; 0x2d
 8003f30:	425b      	negs	r3, r3
 8003f32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f36:	486f      	ldr	r0, [pc, #444]	; (80040f4 <_printf_i+0x21c>)
 8003f38:	220a      	movs	r2, #10
 8003f3a:	e039      	b.n	8003fb0 <_printf_i+0xd8>
 8003f3c:	2973      	cmp	r1, #115	; 0x73
 8003f3e:	f000 809d 	beq.w	800407c <_printf_i+0x1a4>
 8003f42:	d808      	bhi.n	8003f56 <_printf_i+0x7e>
 8003f44:	296f      	cmp	r1, #111	; 0x6f
 8003f46:	d020      	beq.n	8003f8a <_printf_i+0xb2>
 8003f48:	2970      	cmp	r1, #112	; 0x70
 8003f4a:	d1dd      	bne.n	8003f08 <_printf_i+0x30>
 8003f4c:	6823      	ldr	r3, [r4, #0]
 8003f4e:	f043 0320 	orr.w	r3, r3, #32
 8003f52:	6023      	str	r3, [r4, #0]
 8003f54:	e003      	b.n	8003f5e <_printf_i+0x86>
 8003f56:	2975      	cmp	r1, #117	; 0x75
 8003f58:	d017      	beq.n	8003f8a <_printf_i+0xb2>
 8003f5a:	2978      	cmp	r1, #120	; 0x78
 8003f5c:	d1d4      	bne.n	8003f08 <_printf_i+0x30>
 8003f5e:	2378      	movs	r3, #120	; 0x78
 8003f60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f64:	4864      	ldr	r0, [pc, #400]	; (80040f8 <_printf_i+0x220>)
 8003f66:	e055      	b.n	8004014 <_printf_i+0x13c>
 8003f68:	6813      	ldr	r3, [r2, #0]
 8003f6a:	1d19      	adds	r1, r3, #4
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6011      	str	r1, [r2, #0]
 8003f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e08c      	b.n	8004096 <_printf_i+0x1be>
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6011      	str	r1, [r2, #0]
 8003f80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f84:	bf18      	it	ne
 8003f86:	b21b      	sxthne	r3, r3
 8003f88:	e7cf      	b.n	8003f2a <_printf_i+0x52>
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	6825      	ldr	r5, [r4, #0]
 8003f8e:	1d18      	adds	r0, r3, #4
 8003f90:	6010      	str	r0, [r2, #0]
 8003f92:	0628      	lsls	r0, r5, #24
 8003f94:	d501      	bpl.n	8003f9a <_printf_i+0xc2>
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	e002      	b.n	8003fa0 <_printf_i+0xc8>
 8003f9a:	0668      	lsls	r0, r5, #25
 8003f9c:	d5fb      	bpl.n	8003f96 <_printf_i+0xbe>
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	4854      	ldr	r0, [pc, #336]	; (80040f4 <_printf_i+0x21c>)
 8003fa2:	296f      	cmp	r1, #111	; 0x6f
 8003fa4:	bf14      	ite	ne
 8003fa6:	220a      	movne	r2, #10
 8003fa8:	2208      	moveq	r2, #8
 8003faa:	2100      	movs	r1, #0
 8003fac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fb0:	6865      	ldr	r5, [r4, #4]
 8003fb2:	60a5      	str	r5, [r4, #8]
 8003fb4:	2d00      	cmp	r5, #0
 8003fb6:	f2c0 8095 	blt.w	80040e4 <_printf_i+0x20c>
 8003fba:	6821      	ldr	r1, [r4, #0]
 8003fbc:	f021 0104 	bic.w	r1, r1, #4
 8003fc0:	6021      	str	r1, [r4, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d13d      	bne.n	8004042 <_printf_i+0x16a>
 8003fc6:	2d00      	cmp	r5, #0
 8003fc8:	f040 808e 	bne.w	80040e8 <_printf_i+0x210>
 8003fcc:	4665      	mov	r5, ip
 8003fce:	2a08      	cmp	r2, #8
 8003fd0:	d10b      	bne.n	8003fea <_printf_i+0x112>
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d508      	bpl.n	8003fea <_printf_i+0x112>
 8003fd8:	6923      	ldr	r3, [r4, #16]
 8003fda:	6862      	ldr	r2, [r4, #4]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	bfde      	ittt	le
 8003fe0:	2330      	movle	r3, #48	; 0x30
 8003fe2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fe6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fea:	ebac 0305 	sub.w	r3, ip, r5
 8003fee:	6123      	str	r3, [r4, #16]
 8003ff0:	f8cd 8000 	str.w	r8, [sp]
 8003ff4:	463b      	mov	r3, r7
 8003ff6:	aa03      	add	r2, sp, #12
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff fef6 	bl	8003dec <_printf_common>
 8004000:	3001      	adds	r0, #1
 8004002:	d14d      	bne.n	80040a0 <_printf_i+0x1c8>
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	b005      	add	sp, #20
 800400a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800400e:	4839      	ldr	r0, [pc, #228]	; (80040f4 <_printf_i+0x21c>)
 8004010:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004014:	6813      	ldr	r3, [r2, #0]
 8004016:	6821      	ldr	r1, [r4, #0]
 8004018:	1d1d      	adds	r5, r3, #4
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6015      	str	r5, [r2, #0]
 800401e:	060a      	lsls	r2, r1, #24
 8004020:	d50b      	bpl.n	800403a <_printf_i+0x162>
 8004022:	07ca      	lsls	r2, r1, #31
 8004024:	bf44      	itt	mi
 8004026:	f041 0120 	orrmi.w	r1, r1, #32
 800402a:	6021      	strmi	r1, [r4, #0]
 800402c:	b91b      	cbnz	r3, 8004036 <_printf_i+0x15e>
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	f022 0220 	bic.w	r2, r2, #32
 8004034:	6022      	str	r2, [r4, #0]
 8004036:	2210      	movs	r2, #16
 8004038:	e7b7      	b.n	8003faa <_printf_i+0xd2>
 800403a:	064d      	lsls	r5, r1, #25
 800403c:	bf48      	it	mi
 800403e:	b29b      	uxthmi	r3, r3
 8004040:	e7ef      	b.n	8004022 <_printf_i+0x14a>
 8004042:	4665      	mov	r5, ip
 8004044:	fbb3 f1f2 	udiv	r1, r3, r2
 8004048:	fb02 3311 	mls	r3, r2, r1, r3
 800404c:	5cc3      	ldrb	r3, [r0, r3]
 800404e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004052:	460b      	mov	r3, r1
 8004054:	2900      	cmp	r1, #0
 8004056:	d1f5      	bne.n	8004044 <_printf_i+0x16c>
 8004058:	e7b9      	b.n	8003fce <_printf_i+0xf6>
 800405a:	6813      	ldr	r3, [r2, #0]
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	6961      	ldr	r1, [r4, #20]
 8004060:	1d18      	adds	r0, r3, #4
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	0628      	lsls	r0, r5, #24
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	d501      	bpl.n	800406e <_printf_i+0x196>
 800406a:	6019      	str	r1, [r3, #0]
 800406c:	e002      	b.n	8004074 <_printf_i+0x19c>
 800406e:	066a      	lsls	r2, r5, #25
 8004070:	d5fb      	bpl.n	800406a <_printf_i+0x192>
 8004072:	8019      	strh	r1, [r3, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	4665      	mov	r5, ip
 800407a:	e7b9      	b.n	8003ff0 <_printf_i+0x118>
 800407c:	6813      	ldr	r3, [r2, #0]
 800407e:	1d19      	adds	r1, r3, #4
 8004080:	6011      	str	r1, [r2, #0]
 8004082:	681d      	ldr	r5, [r3, #0]
 8004084:	6862      	ldr	r2, [r4, #4]
 8004086:	2100      	movs	r1, #0
 8004088:	4628      	mov	r0, r5
 800408a:	f7fc f8a1 	bl	80001d0 <memchr>
 800408e:	b108      	cbz	r0, 8004094 <_printf_i+0x1bc>
 8004090:	1b40      	subs	r0, r0, r5
 8004092:	6060      	str	r0, [r4, #4]
 8004094:	6863      	ldr	r3, [r4, #4]
 8004096:	6123      	str	r3, [r4, #16]
 8004098:	2300      	movs	r3, #0
 800409a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409e:	e7a7      	b.n	8003ff0 <_printf_i+0x118>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4639      	mov	r1, r7
 80040a6:	4630      	mov	r0, r6
 80040a8:	47c0      	blx	r8
 80040aa:	3001      	adds	r0, #1
 80040ac:	d0aa      	beq.n	8004004 <_printf_i+0x12c>
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	079b      	lsls	r3, r3, #30
 80040b2:	d413      	bmi.n	80040dc <_printf_i+0x204>
 80040b4:	68e0      	ldr	r0, [r4, #12]
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	4298      	cmp	r0, r3
 80040ba:	bfb8      	it	lt
 80040bc:	4618      	movlt	r0, r3
 80040be:	e7a3      	b.n	8004008 <_printf_i+0x130>
 80040c0:	2301      	movs	r3, #1
 80040c2:	464a      	mov	r2, r9
 80040c4:	4639      	mov	r1, r7
 80040c6:	4630      	mov	r0, r6
 80040c8:	47c0      	blx	r8
 80040ca:	3001      	adds	r0, #1
 80040cc:	d09a      	beq.n	8004004 <_printf_i+0x12c>
 80040ce:	3501      	adds	r5, #1
 80040d0:	68e3      	ldr	r3, [r4, #12]
 80040d2:	9a03      	ldr	r2, [sp, #12]
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	42ab      	cmp	r3, r5
 80040d8:	dcf2      	bgt.n	80040c0 <_printf_i+0x1e8>
 80040da:	e7eb      	b.n	80040b4 <_printf_i+0x1dc>
 80040dc:	2500      	movs	r5, #0
 80040de:	f104 0919 	add.w	r9, r4, #25
 80040e2:	e7f5      	b.n	80040d0 <_printf_i+0x1f8>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ac      	bne.n	8004042 <_printf_i+0x16a>
 80040e8:	7803      	ldrb	r3, [r0, #0]
 80040ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f2:	e76c      	b.n	8003fce <_printf_i+0xf6>
 80040f4:	0800498f 	.word	0x0800498f
 80040f8:	080049a0 	.word	0x080049a0

080040fc <_putc_r>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	460d      	mov	r5, r1
 8004100:	4614      	mov	r4, r2
 8004102:	4606      	mov	r6, r0
 8004104:	b118      	cbz	r0, 800410e <_putc_r+0x12>
 8004106:	6983      	ldr	r3, [r0, #24]
 8004108:	b90b      	cbnz	r3, 800410e <_putc_r+0x12>
 800410a:	f7ff fc35 	bl	8003978 <__sinit>
 800410e:	4b13      	ldr	r3, [pc, #76]	; (800415c <_putc_r+0x60>)
 8004110:	429c      	cmp	r4, r3
 8004112:	d112      	bne.n	800413a <_putc_r+0x3e>
 8004114:	6874      	ldr	r4, [r6, #4]
 8004116:	68a3      	ldr	r3, [r4, #8]
 8004118:	3b01      	subs	r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	60a3      	str	r3, [r4, #8]
 800411e:	da16      	bge.n	800414e <_putc_r+0x52>
 8004120:	69a2      	ldr	r2, [r4, #24]
 8004122:	4293      	cmp	r3, r2
 8004124:	db02      	blt.n	800412c <_putc_r+0x30>
 8004126:	b2eb      	uxtb	r3, r5
 8004128:	2b0a      	cmp	r3, #10
 800412a:	d110      	bne.n	800414e <_putc_r+0x52>
 800412c:	4622      	mov	r2, r4
 800412e:	4629      	mov	r1, r5
 8004130:	4630      	mov	r0, r6
 8004132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004136:	f000 b86b 	b.w	8004210 <__swbuf_r>
 800413a:	4b09      	ldr	r3, [pc, #36]	; (8004160 <_putc_r+0x64>)
 800413c:	429c      	cmp	r4, r3
 800413e:	d101      	bne.n	8004144 <_putc_r+0x48>
 8004140:	68b4      	ldr	r4, [r6, #8]
 8004142:	e7e8      	b.n	8004116 <_putc_r+0x1a>
 8004144:	4b07      	ldr	r3, [pc, #28]	; (8004164 <_putc_r+0x68>)
 8004146:	429c      	cmp	r4, r3
 8004148:	bf08      	it	eq
 800414a:	68f4      	ldreq	r4, [r6, #12]
 800414c:	e7e3      	b.n	8004116 <_putc_r+0x1a>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	6022      	str	r2, [r4, #0]
 8004154:	701d      	strb	r5, [r3, #0]
 8004156:	b2e8      	uxtb	r0, r5
 8004158:	bd70      	pop	{r4, r5, r6, pc}
 800415a:	bf00      	nop
 800415c:	08004934 	.word	0x08004934
 8004160:	08004954 	.word	0x08004954
 8004164:	08004914 	.word	0x08004914

08004168 <_sbrk_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	4c06      	ldr	r4, [pc, #24]	; (8004184 <_sbrk_r+0x1c>)
 800416c:	2300      	movs	r3, #0
 800416e:	4605      	mov	r5, r0
 8004170:	4608      	mov	r0, r1
 8004172:	6023      	str	r3, [r4, #0]
 8004174:	f7fd f876 	bl	8001264 <_sbrk>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_sbrk_r+0x1a>
 800417c:	6823      	ldr	r3, [r4, #0]
 800417e:	b103      	cbz	r3, 8004182 <_sbrk_r+0x1a>
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	20000288 	.word	0x20000288

08004188 <__sread>:
 8004188:	b510      	push	{r4, lr}
 800418a:	460c      	mov	r4, r1
 800418c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004190:	f000 faa4 	bl	80046dc <_read_r>
 8004194:	2800      	cmp	r0, #0
 8004196:	bfab      	itete	ge
 8004198:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800419a:	89a3      	ldrhlt	r3, [r4, #12]
 800419c:	181b      	addge	r3, r3, r0
 800419e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041a2:	bfac      	ite	ge
 80041a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80041a6:	81a3      	strhlt	r3, [r4, #12]
 80041a8:	bd10      	pop	{r4, pc}

080041aa <__swrite>:
 80041aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	461f      	mov	r7, r3
 80041b0:	898b      	ldrh	r3, [r1, #12]
 80041b2:	05db      	lsls	r3, r3, #23
 80041b4:	4605      	mov	r5, r0
 80041b6:	460c      	mov	r4, r1
 80041b8:	4616      	mov	r6, r2
 80041ba:	d505      	bpl.n	80041c8 <__swrite+0x1e>
 80041bc:	2302      	movs	r3, #2
 80041be:	2200      	movs	r2, #0
 80041c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041c4:	f000 f9c4 	bl	8004550 <_lseek_r>
 80041c8:	89a3      	ldrh	r3, [r4, #12]
 80041ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041d2:	81a3      	strh	r3, [r4, #12]
 80041d4:	4632      	mov	r2, r6
 80041d6:	463b      	mov	r3, r7
 80041d8:	4628      	mov	r0, r5
 80041da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041de:	f000 b877 	b.w	80042d0 <_write_r>

080041e2 <__sseek>:
 80041e2:	b510      	push	{r4, lr}
 80041e4:	460c      	mov	r4, r1
 80041e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ea:	f000 f9b1 	bl	8004550 <_lseek_r>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	bf15      	itete	ne
 80041f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041fe:	81a3      	strheq	r3, [r4, #12]
 8004200:	bf18      	it	ne
 8004202:	81a3      	strhne	r3, [r4, #12]
 8004204:	bd10      	pop	{r4, pc}

08004206 <__sclose>:
 8004206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800420a:	f000 b8e1 	b.w	80043d0 <_close_r>
	...

08004210 <__swbuf_r>:
 8004210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004212:	460e      	mov	r6, r1
 8004214:	4614      	mov	r4, r2
 8004216:	4605      	mov	r5, r0
 8004218:	b118      	cbz	r0, 8004222 <__swbuf_r+0x12>
 800421a:	6983      	ldr	r3, [r0, #24]
 800421c:	b90b      	cbnz	r3, 8004222 <__swbuf_r+0x12>
 800421e:	f7ff fbab 	bl	8003978 <__sinit>
 8004222:	4b21      	ldr	r3, [pc, #132]	; (80042a8 <__swbuf_r+0x98>)
 8004224:	429c      	cmp	r4, r3
 8004226:	d12a      	bne.n	800427e <__swbuf_r+0x6e>
 8004228:	686c      	ldr	r4, [r5, #4]
 800422a:	69a3      	ldr	r3, [r4, #24]
 800422c:	60a3      	str	r3, [r4, #8]
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	071a      	lsls	r2, r3, #28
 8004232:	d52e      	bpl.n	8004292 <__swbuf_r+0x82>
 8004234:	6923      	ldr	r3, [r4, #16]
 8004236:	b363      	cbz	r3, 8004292 <__swbuf_r+0x82>
 8004238:	6923      	ldr	r3, [r4, #16]
 800423a:	6820      	ldr	r0, [r4, #0]
 800423c:	1ac0      	subs	r0, r0, r3
 800423e:	6963      	ldr	r3, [r4, #20]
 8004240:	b2f6      	uxtb	r6, r6
 8004242:	4283      	cmp	r3, r0
 8004244:	4637      	mov	r7, r6
 8004246:	dc04      	bgt.n	8004252 <__swbuf_r+0x42>
 8004248:	4621      	mov	r1, r4
 800424a:	4628      	mov	r0, r5
 800424c:	f000 f956 	bl	80044fc <_fflush_r>
 8004250:	bb28      	cbnz	r0, 800429e <__swbuf_r+0x8e>
 8004252:	68a3      	ldr	r3, [r4, #8]
 8004254:	3b01      	subs	r3, #1
 8004256:	60a3      	str	r3, [r4, #8]
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	6022      	str	r2, [r4, #0]
 800425e:	701e      	strb	r6, [r3, #0]
 8004260:	6963      	ldr	r3, [r4, #20]
 8004262:	3001      	adds	r0, #1
 8004264:	4283      	cmp	r3, r0
 8004266:	d004      	beq.n	8004272 <__swbuf_r+0x62>
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	07db      	lsls	r3, r3, #31
 800426c:	d519      	bpl.n	80042a2 <__swbuf_r+0x92>
 800426e:	2e0a      	cmp	r6, #10
 8004270:	d117      	bne.n	80042a2 <__swbuf_r+0x92>
 8004272:	4621      	mov	r1, r4
 8004274:	4628      	mov	r0, r5
 8004276:	f000 f941 	bl	80044fc <_fflush_r>
 800427a:	b190      	cbz	r0, 80042a2 <__swbuf_r+0x92>
 800427c:	e00f      	b.n	800429e <__swbuf_r+0x8e>
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <__swbuf_r+0x9c>)
 8004280:	429c      	cmp	r4, r3
 8004282:	d101      	bne.n	8004288 <__swbuf_r+0x78>
 8004284:	68ac      	ldr	r4, [r5, #8]
 8004286:	e7d0      	b.n	800422a <__swbuf_r+0x1a>
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <__swbuf_r+0xa0>)
 800428a:	429c      	cmp	r4, r3
 800428c:	bf08      	it	eq
 800428e:	68ec      	ldreq	r4, [r5, #12]
 8004290:	e7cb      	b.n	800422a <__swbuf_r+0x1a>
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 f82d 	bl	80042f4 <__swsetup_r>
 800429a:	2800      	cmp	r0, #0
 800429c:	d0cc      	beq.n	8004238 <__swbuf_r+0x28>
 800429e:	f04f 37ff 	mov.w	r7, #4294967295
 80042a2:	4638      	mov	r0, r7
 80042a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a6:	bf00      	nop
 80042a8:	08004934 	.word	0x08004934
 80042ac:	08004954 	.word	0x08004954
 80042b0:	08004914 	.word	0x08004914

080042b4 <__ascii_wctomb>:
 80042b4:	b149      	cbz	r1, 80042ca <__ascii_wctomb+0x16>
 80042b6:	2aff      	cmp	r2, #255	; 0xff
 80042b8:	bf85      	ittet	hi
 80042ba:	238a      	movhi	r3, #138	; 0x8a
 80042bc:	6003      	strhi	r3, [r0, #0]
 80042be:	700a      	strbls	r2, [r1, #0]
 80042c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80042c4:	bf98      	it	ls
 80042c6:	2001      	movls	r0, #1
 80042c8:	4770      	bx	lr
 80042ca:	4608      	mov	r0, r1
 80042cc:	4770      	bx	lr
	...

080042d0 <_write_r>:
 80042d0:	b538      	push	{r3, r4, r5, lr}
 80042d2:	4c07      	ldr	r4, [pc, #28]	; (80042f0 <_write_r+0x20>)
 80042d4:	4605      	mov	r5, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	2200      	movs	r2, #0
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	f7fc ff6a 	bl	80011b8 <_write>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d102      	bne.n	80042ee <_write_r+0x1e>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	b103      	cbz	r3, 80042ee <_write_r+0x1e>
 80042ec:	602b      	str	r3, [r5, #0]
 80042ee:	bd38      	pop	{r3, r4, r5, pc}
 80042f0:	20000288 	.word	0x20000288

080042f4 <__swsetup_r>:
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <__swsetup_r+0xcc>)
 80042f6:	b570      	push	{r4, r5, r6, lr}
 80042f8:	681d      	ldr	r5, [r3, #0]
 80042fa:	4606      	mov	r6, r0
 80042fc:	460c      	mov	r4, r1
 80042fe:	b125      	cbz	r5, 800430a <__swsetup_r+0x16>
 8004300:	69ab      	ldr	r3, [r5, #24]
 8004302:	b913      	cbnz	r3, 800430a <__swsetup_r+0x16>
 8004304:	4628      	mov	r0, r5
 8004306:	f7ff fb37 	bl	8003978 <__sinit>
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <__swsetup_r+0xd0>)
 800430c:	429c      	cmp	r4, r3
 800430e:	d10f      	bne.n	8004330 <__swsetup_r+0x3c>
 8004310:	686c      	ldr	r4, [r5, #4]
 8004312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004316:	b29a      	uxth	r2, r3
 8004318:	0715      	lsls	r5, r2, #28
 800431a:	d42c      	bmi.n	8004376 <__swsetup_r+0x82>
 800431c:	06d0      	lsls	r0, r2, #27
 800431e:	d411      	bmi.n	8004344 <__swsetup_r+0x50>
 8004320:	2209      	movs	r2, #9
 8004322:	6032      	str	r2, [r6, #0]
 8004324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	f04f 30ff 	mov.w	r0, #4294967295
 800432e:	e03e      	b.n	80043ae <__swsetup_r+0xba>
 8004330:	4b25      	ldr	r3, [pc, #148]	; (80043c8 <__swsetup_r+0xd4>)
 8004332:	429c      	cmp	r4, r3
 8004334:	d101      	bne.n	800433a <__swsetup_r+0x46>
 8004336:	68ac      	ldr	r4, [r5, #8]
 8004338:	e7eb      	b.n	8004312 <__swsetup_r+0x1e>
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <__swsetup_r+0xd8>)
 800433c:	429c      	cmp	r4, r3
 800433e:	bf08      	it	eq
 8004340:	68ec      	ldreq	r4, [r5, #12]
 8004342:	e7e6      	b.n	8004312 <__swsetup_r+0x1e>
 8004344:	0751      	lsls	r1, r2, #29
 8004346:	d512      	bpl.n	800436e <__swsetup_r+0x7a>
 8004348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800434a:	b141      	cbz	r1, 800435e <__swsetup_r+0x6a>
 800434c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004350:	4299      	cmp	r1, r3
 8004352:	d002      	beq.n	800435a <__swsetup_r+0x66>
 8004354:	4630      	mov	r0, r6
 8004356:	f000 f973 	bl	8004640 <_free_r>
 800435a:	2300      	movs	r3, #0
 800435c:	6363      	str	r3, [r4, #52]	; 0x34
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004364:	81a3      	strh	r3, [r4, #12]
 8004366:	2300      	movs	r3, #0
 8004368:	6063      	str	r3, [r4, #4]
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	89a3      	ldrh	r3, [r4, #12]
 8004370:	f043 0308 	orr.w	r3, r3, #8
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	6923      	ldr	r3, [r4, #16]
 8004378:	b94b      	cbnz	r3, 800438e <__swsetup_r+0x9a>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004384:	d003      	beq.n	800438e <__swsetup_r+0x9a>
 8004386:	4621      	mov	r1, r4
 8004388:	4630      	mov	r0, r6
 800438a:	f000 f917 	bl	80045bc <__smakebuf_r>
 800438e:	89a2      	ldrh	r2, [r4, #12]
 8004390:	f012 0301 	ands.w	r3, r2, #1
 8004394:	d00c      	beq.n	80043b0 <__swsetup_r+0xbc>
 8004396:	2300      	movs	r3, #0
 8004398:	60a3      	str	r3, [r4, #8]
 800439a:	6963      	ldr	r3, [r4, #20]
 800439c:	425b      	negs	r3, r3
 800439e:	61a3      	str	r3, [r4, #24]
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	b953      	cbnz	r3, 80043ba <__swsetup_r+0xc6>
 80043a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80043ac:	d1ba      	bne.n	8004324 <__swsetup_r+0x30>
 80043ae:	bd70      	pop	{r4, r5, r6, pc}
 80043b0:	0792      	lsls	r2, r2, #30
 80043b2:	bf58      	it	pl
 80043b4:	6963      	ldrpl	r3, [r4, #20]
 80043b6:	60a3      	str	r3, [r4, #8]
 80043b8:	e7f2      	b.n	80043a0 <__swsetup_r+0xac>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e7f7      	b.n	80043ae <__swsetup_r+0xba>
 80043be:	bf00      	nop
 80043c0:	2000000c 	.word	0x2000000c
 80043c4:	08004934 	.word	0x08004934
 80043c8:	08004954 	.word	0x08004954
 80043cc:	08004914 	.word	0x08004914

080043d0 <_close_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4c06      	ldr	r4, [pc, #24]	; (80043ec <_close_r+0x1c>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4605      	mov	r5, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	f7fc ff0e 	bl	80011fc <_close>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_close_r+0x1a>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_close_r+0x1a>
 80043e8:	602b      	str	r3, [r5, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20000288 	.word	0x20000288

080043f0 <__sflush_r>:
 80043f0:	898a      	ldrh	r2, [r1, #12]
 80043f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f6:	4605      	mov	r5, r0
 80043f8:	0710      	lsls	r0, r2, #28
 80043fa:	460c      	mov	r4, r1
 80043fc:	d458      	bmi.n	80044b0 <__sflush_r+0xc0>
 80043fe:	684b      	ldr	r3, [r1, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	dc05      	bgt.n	8004410 <__sflush_r+0x20>
 8004404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	dc02      	bgt.n	8004410 <__sflush_r+0x20>
 800440a:	2000      	movs	r0, #0
 800440c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004412:	2e00      	cmp	r6, #0
 8004414:	d0f9      	beq.n	800440a <__sflush_r+0x1a>
 8004416:	2300      	movs	r3, #0
 8004418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800441c:	682f      	ldr	r7, [r5, #0]
 800441e:	6a21      	ldr	r1, [r4, #32]
 8004420:	602b      	str	r3, [r5, #0]
 8004422:	d032      	beq.n	800448a <__sflush_r+0x9a>
 8004424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	075a      	lsls	r2, r3, #29
 800442a:	d505      	bpl.n	8004438 <__sflush_r+0x48>
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	1ac0      	subs	r0, r0, r3
 8004430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004432:	b10b      	cbz	r3, 8004438 <__sflush_r+0x48>
 8004434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004436:	1ac0      	subs	r0, r0, r3
 8004438:	2300      	movs	r3, #0
 800443a:	4602      	mov	r2, r0
 800443c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800443e:	6a21      	ldr	r1, [r4, #32]
 8004440:	4628      	mov	r0, r5
 8004442:	47b0      	blx	r6
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	d106      	bne.n	8004458 <__sflush_r+0x68>
 800444a:	6829      	ldr	r1, [r5, #0]
 800444c:	291d      	cmp	r1, #29
 800444e:	d848      	bhi.n	80044e2 <__sflush_r+0xf2>
 8004450:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <__sflush_r+0x108>)
 8004452:	40ca      	lsrs	r2, r1
 8004454:	07d6      	lsls	r6, r2, #31
 8004456:	d544      	bpl.n	80044e2 <__sflush_r+0xf2>
 8004458:	2200      	movs	r2, #0
 800445a:	6062      	str	r2, [r4, #4]
 800445c:	04d9      	lsls	r1, r3, #19
 800445e:	6922      	ldr	r2, [r4, #16]
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	d504      	bpl.n	800446e <__sflush_r+0x7e>
 8004464:	1c42      	adds	r2, r0, #1
 8004466:	d101      	bne.n	800446c <__sflush_r+0x7c>
 8004468:	682b      	ldr	r3, [r5, #0]
 800446a:	b903      	cbnz	r3, 800446e <__sflush_r+0x7e>
 800446c:	6560      	str	r0, [r4, #84]	; 0x54
 800446e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004470:	602f      	str	r7, [r5, #0]
 8004472:	2900      	cmp	r1, #0
 8004474:	d0c9      	beq.n	800440a <__sflush_r+0x1a>
 8004476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800447a:	4299      	cmp	r1, r3
 800447c:	d002      	beq.n	8004484 <__sflush_r+0x94>
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f8de 	bl	8004640 <_free_r>
 8004484:	2000      	movs	r0, #0
 8004486:	6360      	str	r0, [r4, #52]	; 0x34
 8004488:	e7c0      	b.n	800440c <__sflush_r+0x1c>
 800448a:	2301      	movs	r3, #1
 800448c:	4628      	mov	r0, r5
 800448e:	47b0      	blx	r6
 8004490:	1c41      	adds	r1, r0, #1
 8004492:	d1c8      	bne.n	8004426 <__sflush_r+0x36>
 8004494:	682b      	ldr	r3, [r5, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0c5      	beq.n	8004426 <__sflush_r+0x36>
 800449a:	2b1d      	cmp	r3, #29
 800449c:	d001      	beq.n	80044a2 <__sflush_r+0xb2>
 800449e:	2b16      	cmp	r3, #22
 80044a0:	d101      	bne.n	80044a6 <__sflush_r+0xb6>
 80044a2:	602f      	str	r7, [r5, #0]
 80044a4:	e7b1      	b.n	800440a <__sflush_r+0x1a>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	e7ad      	b.n	800440c <__sflush_r+0x1c>
 80044b0:	690f      	ldr	r7, [r1, #16]
 80044b2:	2f00      	cmp	r7, #0
 80044b4:	d0a9      	beq.n	800440a <__sflush_r+0x1a>
 80044b6:	0793      	lsls	r3, r2, #30
 80044b8:	680e      	ldr	r6, [r1, #0]
 80044ba:	bf08      	it	eq
 80044bc:	694b      	ldreq	r3, [r1, #20]
 80044be:	600f      	str	r7, [r1, #0]
 80044c0:	bf18      	it	ne
 80044c2:	2300      	movne	r3, #0
 80044c4:	eba6 0807 	sub.w	r8, r6, r7
 80044c8:	608b      	str	r3, [r1, #8]
 80044ca:	f1b8 0f00 	cmp.w	r8, #0
 80044ce:	dd9c      	ble.n	800440a <__sflush_r+0x1a>
 80044d0:	4643      	mov	r3, r8
 80044d2:	463a      	mov	r2, r7
 80044d4:	6a21      	ldr	r1, [r4, #32]
 80044d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044d8:	4628      	mov	r0, r5
 80044da:	47b0      	blx	r6
 80044dc:	2800      	cmp	r0, #0
 80044de:	dc06      	bgt.n	80044ee <__sflush_r+0xfe>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e6:	81a3      	strh	r3, [r4, #12]
 80044e8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ec:	e78e      	b.n	800440c <__sflush_r+0x1c>
 80044ee:	4407      	add	r7, r0
 80044f0:	eba8 0800 	sub.w	r8, r8, r0
 80044f4:	e7e9      	b.n	80044ca <__sflush_r+0xda>
 80044f6:	bf00      	nop
 80044f8:	20400001 	.word	0x20400001

080044fc <_fflush_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	690b      	ldr	r3, [r1, #16]
 8004500:	4605      	mov	r5, r0
 8004502:	460c      	mov	r4, r1
 8004504:	b1db      	cbz	r3, 800453e <_fflush_r+0x42>
 8004506:	b118      	cbz	r0, 8004510 <_fflush_r+0x14>
 8004508:	6983      	ldr	r3, [r0, #24]
 800450a:	b90b      	cbnz	r3, 8004510 <_fflush_r+0x14>
 800450c:	f7ff fa34 	bl	8003978 <__sinit>
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <_fflush_r+0x48>)
 8004512:	429c      	cmp	r4, r3
 8004514:	d109      	bne.n	800452a <_fflush_r+0x2e>
 8004516:	686c      	ldr	r4, [r5, #4]
 8004518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800451c:	b17b      	cbz	r3, 800453e <_fflush_r+0x42>
 800451e:	4621      	mov	r1, r4
 8004520:	4628      	mov	r0, r5
 8004522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004526:	f7ff bf63 	b.w	80043f0 <__sflush_r>
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <_fflush_r+0x4c>)
 800452c:	429c      	cmp	r4, r3
 800452e:	d101      	bne.n	8004534 <_fflush_r+0x38>
 8004530:	68ac      	ldr	r4, [r5, #8]
 8004532:	e7f1      	b.n	8004518 <_fflush_r+0x1c>
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <_fflush_r+0x50>)
 8004536:	429c      	cmp	r4, r3
 8004538:	bf08      	it	eq
 800453a:	68ec      	ldreq	r4, [r5, #12]
 800453c:	e7ec      	b.n	8004518 <_fflush_r+0x1c>
 800453e:	2000      	movs	r0, #0
 8004540:	bd38      	pop	{r3, r4, r5, pc}
 8004542:	bf00      	nop
 8004544:	08004934 	.word	0x08004934
 8004548:	08004954 	.word	0x08004954
 800454c:	08004914 	.word	0x08004914

08004550 <_lseek_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	4c07      	ldr	r4, [pc, #28]	; (8004570 <_lseek_r+0x20>)
 8004554:	4605      	mov	r5, r0
 8004556:	4608      	mov	r0, r1
 8004558:	4611      	mov	r1, r2
 800455a:	2200      	movs	r2, #0
 800455c:	6022      	str	r2, [r4, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	f7fc fe73 	bl	800124a <_lseek>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d102      	bne.n	800456e <_lseek_r+0x1e>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	b103      	cbz	r3, 800456e <_lseek_r+0x1e>
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	bd38      	pop	{r3, r4, r5, pc}
 8004570:	20000288 	.word	0x20000288

08004574 <__swhatbuf_r>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	460e      	mov	r6, r1
 8004578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800457c:	2900      	cmp	r1, #0
 800457e:	b096      	sub	sp, #88	; 0x58
 8004580:	4614      	mov	r4, r2
 8004582:	461d      	mov	r5, r3
 8004584:	da07      	bge.n	8004596 <__swhatbuf_r+0x22>
 8004586:	2300      	movs	r3, #0
 8004588:	602b      	str	r3, [r5, #0]
 800458a:	89b3      	ldrh	r3, [r6, #12]
 800458c:	061a      	lsls	r2, r3, #24
 800458e:	d410      	bmi.n	80045b2 <__swhatbuf_r+0x3e>
 8004590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004594:	e00e      	b.n	80045b4 <__swhatbuf_r+0x40>
 8004596:	466a      	mov	r2, sp
 8004598:	f000 f8b2 	bl	8004700 <_fstat_r>
 800459c:	2800      	cmp	r0, #0
 800459e:	dbf2      	blt.n	8004586 <__swhatbuf_r+0x12>
 80045a0:	9a01      	ldr	r2, [sp, #4]
 80045a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045aa:	425a      	negs	r2, r3
 80045ac:	415a      	adcs	r2, r3
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	e7ee      	b.n	8004590 <__swhatbuf_r+0x1c>
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	2000      	movs	r0, #0
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	b016      	add	sp, #88	; 0x58
 80045ba:	bd70      	pop	{r4, r5, r6, pc}

080045bc <__smakebuf_r>:
 80045bc:	898b      	ldrh	r3, [r1, #12]
 80045be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045c0:	079d      	lsls	r5, r3, #30
 80045c2:	4606      	mov	r6, r0
 80045c4:	460c      	mov	r4, r1
 80045c6:	d507      	bpl.n	80045d8 <__smakebuf_r+0x1c>
 80045c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	6123      	str	r3, [r4, #16]
 80045d0:	2301      	movs	r3, #1
 80045d2:	6163      	str	r3, [r4, #20]
 80045d4:	b002      	add	sp, #8
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	ab01      	add	r3, sp, #4
 80045da:	466a      	mov	r2, sp
 80045dc:	f7ff ffca 	bl	8004574 <__swhatbuf_r>
 80045e0:	9900      	ldr	r1, [sp, #0]
 80045e2:	4605      	mov	r5, r0
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff fa67 	bl	8003ab8 <_malloc_r>
 80045ea:	b948      	cbnz	r0, 8004600 <__smakebuf_r+0x44>
 80045ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045f0:	059a      	lsls	r2, r3, #22
 80045f2:	d4ef      	bmi.n	80045d4 <__smakebuf_r+0x18>
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	81a3      	strh	r3, [r4, #12]
 80045fe:	e7e3      	b.n	80045c8 <__smakebuf_r+0xc>
 8004600:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <__smakebuf_r+0x7c>)
 8004602:	62b3      	str	r3, [r6, #40]	; 0x28
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	6020      	str	r0, [r4, #0]
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	9b00      	ldr	r3, [sp, #0]
 8004610:	6163      	str	r3, [r4, #20]
 8004612:	9b01      	ldr	r3, [sp, #4]
 8004614:	6120      	str	r0, [r4, #16]
 8004616:	b15b      	cbz	r3, 8004630 <__smakebuf_r+0x74>
 8004618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800461c:	4630      	mov	r0, r6
 800461e:	f000 f881 	bl	8004724 <_isatty_r>
 8004622:	b128      	cbz	r0, 8004630 <__smakebuf_r+0x74>
 8004624:	89a3      	ldrh	r3, [r4, #12]
 8004626:	f023 0303 	bic.w	r3, r3, #3
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	81a3      	strh	r3, [r4, #12]
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	431d      	orrs	r5, r3
 8004634:	81a5      	strh	r5, [r4, #12]
 8004636:	e7cd      	b.n	80045d4 <__smakebuf_r+0x18>
 8004638:	08003941 	.word	0x08003941

0800463c <__malloc_lock>:
 800463c:	4770      	bx	lr

0800463e <__malloc_unlock>:
 800463e:	4770      	bx	lr

08004640 <_free_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	2900      	cmp	r1, #0
 8004646:	d045      	beq.n	80046d4 <_free_r+0x94>
 8004648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfb8      	it	lt
 8004652:	18e4      	addlt	r4, r4, r3
 8004654:	f7ff fff2 	bl	800463c <__malloc_lock>
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <_free_r+0x98>)
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	4610      	mov	r0, r2
 800465e:	b933      	cbnz	r3, 800466e <_free_r+0x2e>
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	6014      	str	r4, [r2, #0]
 8004664:	4628      	mov	r0, r5
 8004666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800466a:	f7ff bfe8 	b.w	800463e <__malloc_unlock>
 800466e:	42a3      	cmp	r3, r4
 8004670:	d90c      	bls.n	800468c <_free_r+0x4c>
 8004672:	6821      	ldr	r1, [r4, #0]
 8004674:	1862      	adds	r2, r4, r1
 8004676:	4293      	cmp	r3, r2
 8004678:	bf04      	itt	eq
 800467a:	681a      	ldreq	r2, [r3, #0]
 800467c:	685b      	ldreq	r3, [r3, #4]
 800467e:	6063      	str	r3, [r4, #4]
 8004680:	bf04      	itt	eq
 8004682:	1852      	addeq	r2, r2, r1
 8004684:	6022      	streq	r2, [r4, #0]
 8004686:	6004      	str	r4, [r0, #0]
 8004688:	e7ec      	b.n	8004664 <_free_r+0x24>
 800468a:	4613      	mov	r3, r2
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	b10a      	cbz	r2, 8004694 <_free_r+0x54>
 8004690:	42a2      	cmp	r2, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x4a>
 8004694:	6819      	ldr	r1, [r3, #0]
 8004696:	1858      	adds	r0, r3, r1
 8004698:	42a0      	cmp	r0, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x74>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	4401      	add	r1, r0
 80046a0:	1858      	adds	r0, r3, r1
 80046a2:	4282      	cmp	r2, r0
 80046a4:	6019      	str	r1, [r3, #0]
 80046a6:	d1dd      	bne.n	8004664 <_free_r+0x24>
 80046a8:	6810      	ldr	r0, [r2, #0]
 80046aa:	6852      	ldr	r2, [r2, #4]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	4401      	add	r1, r0
 80046b0:	6019      	str	r1, [r3, #0]
 80046b2:	e7d7      	b.n	8004664 <_free_r+0x24>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x7c>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d3      	b.n	8004664 <_free_r+0x24>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428a      	cmp	r2, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6811      	ldreq	r1, [r2, #0]
 80046c6:	6852      	ldreq	r2, [r2, #4]
 80046c8:	6062      	str	r2, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1809      	addeq	r1, r1, r0
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	605c      	str	r4, [r3, #4]
 80046d2:	e7c7      	b.n	8004664 <_free_r+0x24>
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
 80046d6:	bf00      	nop
 80046d8:	200001fc 	.word	0x200001fc

080046dc <_read_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4c07      	ldr	r4, [pc, #28]	; (80046fc <_read_r+0x20>)
 80046e0:	4605      	mov	r5, r0
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	2200      	movs	r2, #0
 80046e8:	6022      	str	r2, [r4, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7fc fd46 	bl	800117c <_read>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_read_r+0x1e>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_read_r+0x1e>
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000288 	.word	0x20000288

08004700 <_fstat_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4c07      	ldr	r4, [pc, #28]	; (8004720 <_fstat_r+0x20>)
 8004704:	2300      	movs	r3, #0
 8004706:	4605      	mov	r5, r0
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	f7fc fd81 	bl	8001214 <_fstat>
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	d102      	bne.n	800471c <_fstat_r+0x1c>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	b103      	cbz	r3, 800471c <_fstat_r+0x1c>
 800471a:	602b      	str	r3, [r5, #0]
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	20000288 	.word	0x20000288

08004724 <_isatty_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4c06      	ldr	r4, [pc, #24]	; (8004740 <_isatty_r+0x1c>)
 8004728:	2300      	movs	r3, #0
 800472a:	4605      	mov	r5, r0
 800472c:	4608      	mov	r0, r1
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	f7fc fd80 	bl	8001234 <_isatty>
 8004734:	1c43      	adds	r3, r0, #1
 8004736:	d102      	bne.n	800473e <_isatty_r+0x1a>
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	b103      	cbz	r3, 800473e <_isatty_r+0x1a>
 800473c:	602b      	str	r3, [r5, #0]
 800473e:	bd38      	pop	{r3, r4, r5, pc}
 8004740:	20000288 	.word	0x20000288

08004744 <_init>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr

08004750 <_fini>:
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004752:	bf00      	nop
 8004754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004756:	bc08      	pop	{r3}
 8004758:	469e      	mov	lr, r3
 800475a:	4770      	bx	lr
